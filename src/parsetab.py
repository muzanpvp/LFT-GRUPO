
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocLESS_THANLESS_EQUALGREATER_THANGREATER_EQUALleftEQUALNOT_EQUALTIPO_EQUALleftPLUSMINUSleftMULTIDIVIDEMODULOrightPOTENCIACAOrightUMINUSUPLUSNOTTILDEAND AS ASSIGN ASTERISK AT BEGIN BINNUMBER BOOL BREAK CASE CHAR CLASS CLASSVAR CLASS_VAR COLON COMMA CONSTANT DEF DEFINE_BLOCO DIVIDE DIVIDE_ASSIGN DO DOLAR_SIGN DOT DOTDOT DOTDOTDOT EACH ELSE ELSIF END ENUM EQUAL EXCLAMATION FALSE FLOAT FLOAT32 FLOAT64 FLOATNUMBER GLOBALVAR GREATER_EQUAL GREATER_THAN HEXNUMBER ID IF IN INCLUDE INSTANCEVAR INSTANCE_VAR INT INT128 INT16 INT32 INT64 INT8 INTERP_END INTERP_START INTNUMBER LBRACE LBRACKET LESS_EQUAL LESS_THAN LITERAL LOOP LPAREN MACRO MINUS MINUS_ASSIGN MODULE MODULO MODULO_ASSIGN MULTI MULTI_ASSIGN NEWLINE NEXT NIL NOT NOT_EQUAL OCTNUMBER OF OR OR_ASSIGN OUT PASSA_ARGUMENTO PIPE PLUS PLUS_ASSIGN POTENCIACAO POTENCIACAO_ASSIGN PRIVATE PROTECTED QMARK RBRACE RBRACKET REQUIRE RETURN RPAREN SAFE_CALL SCOPE SELECT SEMICOLON SHIFT_LEFT SHIFT_RIGHT SIZEOF STRING STRUCT SYMBOL TCOLON THEN TILDE TIPO_EQUAL TRUE TYPE TYPEOF UINT128 UINT16 UINT32 UINT64 UINT8 UNDERSCORE UNINITIALIZED UNION UNLESS UNTIL VAR_GLOBAL WHEN WHILE YIELDprogram  :   require_list constant_list module_list function_list\n|   require_list constant_list module_list\n|   require_list constant_list function_list\n|   require_list module_list function_list\n|   constant_list module_list function_list\n|   require_list constant_list\n|   require_list module_list\n|   constant_list module_list\n|   require_list function_list\n|   constant_list function_list\n|   module_list function_list\n|   require_list\n|   constant_list\n|   module_list\n|   function_list\n|   statementsrequire_list :   require require_list\n|   requirerequire  :   REQUIRE STRINGconstant_list    :   constant constant_list\n|   constantconstant :   CONSTANT ASSIGN expressionmodule_list  :   module module_list\n|   modulemodule   :   MODULE ID statements ENDfunction_list    :   function \n|   function function_listfunction :   DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END\n|   DEF ID opt_return_type NEWLINE statements ENDopt_argument_list    :   argument_list\n|   emptyargument_list    :   argument\n|   argument COMMA argument_listargument :   ID\n|   ID COLON types\n|   ID ASSIGN expression\n|   ID COLON types ASSIGN expressionopt_return_type  :   COLON types\n|   emptytypes    :   STRING\n|   CHAR\n|   NIL\n|   integer\n|   float\n|   booleaninteger  :   INT\n|   INT8\n|   INT16\n|   INT32\n|   INT64\n|   INT128\n|   UINT8\n|   UINT16\n|   UINT32\n|   UINT64\n|   UINT128float    :   FLOAT\n|   FLOAT32\n|   FLOAT64boolean  :   BOOLliteral  :   INTNUMBER\n|   FLOATNUMBER\n|   string_literal\n|   CHAR\n|   TRUE\n|   FALSEstring_literal   :   STRING\n|   STRING INTERP_START expression INTERP_END string_literalvariable_declaration :   ID COLON types ASSIGN expression\n|   ID ASSIGN expression\n|   ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_valueslist_of_identifiers  :   ID\n|   ID COMMA list_of_identifierslist_of_values   :   expression\n|   expression COMMA list_of_valuesfunction_call    :   ID LPAREN expression_list RPAREN\n|   ID LPAREN RPARENopt_expression_list  :   expression_list\n|   emptyexpression_list  :   expression\n|   expression_list COMMA expressionstatements   :   statements_list statements_list  :   statements_list statements_base\n|   empty statements_base   :   statement NEWLINE\n|   statement SEMICOLONstatement    :   expression\n|   control_structure\n|   variable_declaration\n|   function_callcontrol_structure    :   conditional\n|   loop_structure\n|   case_structure\n|   return_statement\n|   break_statement\n|   next_statementconditional  :   if_statement\n|   unless_statementif_statement : IF if_condition statements opt_elsif opt_else ENDunless_statement : UNLESS if_condition statements opt_else ENDif_condition : expression\n| expression LBRACE statements RBRACEopt_elsif : elsif_list\n| emptyelsif_list : elsif_list elsif\n| elsifelsif : ELSIF if_condition statementsopt_else : ELSE statements\n| emptyloop_structure   :   while\n|   until\n|   loop\n|   iteratorwhile    :   WHILE expression statementsuntil    :   UNTIL expression statementsloop :   LOOP statementsiterator :   expression DOT MULTI statements\n|   expression DOT EACH DO PIPE ID PIPE statements END\n|   expression DOT EACH LBRACE PIPE ID PIPE RBRACE statementscase_structure   :   CASE expression when_list opt_else ENDwhen_list    :   WHEN expression statements\n|   when_list WHEN expression statementsreturn_statement :   RETURN opt_expressionbreak_statement  :   BREAK opt_expressionnext_statement   :   NEXT opt_expressionopt_expression   :   expression\n|   emptyexpression   :   assignment_expressionassignment_expression    :   assignment_target ASSIGN expression\n|   assignment_target PLUS_ASSIGN expression\n|   assignment_target MINUS_ASSIGN expression\n|   assignment_target MULTI_ASSIGN expression\n|   assignment_target DIVIDE_ASSIGN expression\n|   ternary_expressionassignment_target    :   ID\n|   UNDERSCORE\n|   ASTERISK assignment_targetternary_expression   :   range_expression QMARK expression TCOLON expression\n|   range_expressionrange_expression :   logical_or_expression DOTDOT logical_or_expression\n|   logical_or_expression DOTDOTDOT logical_or_expression\n|   logical_or_expressionlogical_or_expression    :   logical_and_expression\n|   logical_or_expression OR logical_and_expressionlogical_and_expression   :   equality_expression\n|   logical_and_expression AND equality_expressionequality_expression  :   relational_expression\n|   equality_expression EQUAL relational_expression\n|   equality_expression NOT_EQUAL relational_expression\n|   equality_expression TIPO_EQUAL relational_expressionrelational_expression    :   additive_expression\n|   relational_expression GREATER_THAN additive_expression\n|   relational_expression LESS_THAN additive_expression\n|   relational_expression GREATER_EQUAL additive_expression\n|   relational_expression LESS_EQUAL additive_expressionadditive_expression  :   multiplicative_expression\n|   additive_expression PLUS multiplicative_expression\n|   additive_expression MINUS multiplicative_expression multiplicative_expression    :   potenciacao_expression\n|   multiplicative_expression MULTI potenciacao_expression\n|   multiplicative_expression DIVIDE potenciacao_expression\n|   multiplicative_expression MODULO potenciacao_expressionpotenciacao_expression   :   unary_expression\n|   potenciacao_expression POTENCIACAO unary_expressionunary_expression :   PLUS unary_expression %prec UPLUS\n|   MINUS unary_expression %prec UMINUS\n|   EXCLAMATION unary_expression\n|   TILDE unary_expression\n|   primary_expressionprimary_expression   :   LPAREN expression RPAREN\n|   array_literal\n|   literal\n|   IDarray_literal    :   LBRACKET opt_expression_list RBRACKETempty :'
    
_lr_action_items = {'REQUIRE':([0,7,85,],[12,12,-19,]),'CONSTANT':([0,2,7,8,23,33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,85,101,138,139,140,142,143,149,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,263,269,],[13,13,-18,13,-17,-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-19,-173,-165,-173,-166,-167,-168,-22,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-138,-68,]),'MODULE':([0,2,3,7,8,9,17,23,24,33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,85,101,138,139,140,142,143,149,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,263,269,],[14,14,14,-18,-21,14,14,-17,-20,-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-19,-173,-165,-173,-166,-167,-168,-22,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-25,-138,-68,]),'DEF':([0,2,3,4,7,8,9,10,17,18,20,23,24,25,33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,85,89,101,138,139,140,142,143,149,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,263,269,274,288,],[15,15,15,15,-18,-21,-24,15,15,15,15,-17,-20,-23,-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-19,15,-173,-165,-173,-166,-167,-168,-22,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-25,-138,-68,-29,-28,]),'ID':([0,11,14,15,16,27,33,41,43,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,98,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,151,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,231,232,235,236,238,239,244,250,251,252,254,255,260,263,266,267,269,272,277,281,283,290,291,],[-175,40,87,88,-84,-83,-128,101,-134,101,101,101,101,114,-139,101,101,101,101,-175,-142,-143,-145,-147,-151,-156,139,139,-159,-163,139,139,-169,-171,-172,101,-61,-62,-63,-64,-65,-66,-67,101,-175,-85,-86,101,181,101,-173,101,101,101,101,101,101,-175,-101,-175,-175,-175,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,-165,-173,-166,139,-167,-168,101,220,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,101,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,101,-175,-38,101,181,101,101,-175,-175,101,101,101,-175,220,275,276,-175,-138,-175,-102,-68,-175,101,101,-175,-175,101,]),'CASE':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,50,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'RETURN':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,51,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'BREAK':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,52,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'NEXT':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,53,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'UNDERSCORE':([0,11,16,27,33,41,43,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,138,139,140,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,54,-84,-83,-128,54,-134,54,54,54,54,54,-139,54,54,54,54,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,54,-61,-62,-63,-64,-65,-66,-67,54,-175,-85,-86,54,54,-173,54,54,54,54,54,54,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,54,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,54,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,54,-175,-38,54,54,54,-175,-175,54,54,54,-175,-175,-138,-175,-102,-68,-175,54,54,-175,-175,54,]),'ASTERISK':([0,11,16,27,33,41,43,50,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,67,70,71,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,138,139,140,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,55,-84,-83,-128,55,-134,55,55,55,55,55,-139,55,55,55,55,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,55,-61,-62,-63,-64,-65,-66,-67,55,-175,-85,-86,55,55,-173,55,55,55,55,55,55,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,55,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,55,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,55,-175,-38,55,55,55,-175,-175,55,55,55,-175,-175,-138,-175,-102,-68,-175,55,55,-175,-175,55,]),'IF':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,57,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'UNLESS':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,58,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'WHILE':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,59,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'UNTIL':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,60,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'LOOP':([0,11,16,27,33,43,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,119,120,138,139,140,142,143,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,236,238,251,260,263,266,267,269,272,283,290,],[-175,61,-84,-83,-128,-134,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-175,-175,-165,-173,-166,-167,-168,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,-175,-175,-175,-175,-138,-175,-102,-68,-175,-175,-175,]),'PLUS':([0,11,16,27,33,40,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,68,-84,-83,-128,-173,68,-134,68,68,68,68,-139,68,68,68,68,-175,-142,-143,-145,-147,133,-156,68,68,-159,-163,68,68,-169,-171,-172,68,-61,-62,-63,-64,-65,-66,-67,68,-175,-85,-86,68,68,-173,68,68,68,68,68,68,-175,-101,-175,-175,-175,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-165,-173,-166,68,-167,-168,68,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,68,-175,-140,-141,-144,-146,-148,-149,-150,133,133,133,133,-157,-158,-160,-161,-162,-164,-174,68,-175,-38,68,68,68,-175,-175,68,68,68,-175,-175,-138,-175,-102,-68,-175,68,68,-175,-175,68,]),'MINUS':([0,11,16,27,33,40,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,69,-84,-83,-128,-173,69,-134,69,69,69,69,-139,69,69,69,69,-175,-142,-143,-145,-147,134,-156,69,69,-159,-163,69,69,-169,-171,-172,69,-61,-62,-63,-64,-65,-66,-67,69,-175,-85,-86,69,69,-173,69,69,69,69,69,69,-175,-101,-175,-175,-175,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-165,-173,-166,69,-167,-168,69,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,69,-175,-140,-141,-144,-146,-148,-149,-150,134,134,134,134,-157,-158,-160,-161,-162,-164,-174,69,-175,-38,69,69,69,-175,-175,69,69,69,-175,-175,-138,-175,-102,-68,-175,69,69,-175,-175,69,]),'EXCLAMATION':([0,11,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,72,-84,-83,-128,72,-134,72,72,72,72,-139,72,72,72,72,-175,-142,-143,-145,-147,-151,-156,72,72,-159,-163,72,72,-169,-171,-172,72,-61,-62,-63,-64,-65,-66,-67,72,-175,-85,-86,72,72,-173,72,72,72,72,72,72,-175,-101,-175,-175,-175,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-165,-173,-166,72,-167,-168,72,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,72,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,72,-175,-38,72,72,72,-175,-175,72,72,72,-175,-175,-138,-175,-102,-68,-175,72,72,-175,-175,72,]),'TILDE':([0,11,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,73,-84,-83,-128,73,-134,73,73,73,73,-139,73,73,73,73,-175,-142,-143,-145,-147,-151,-156,73,73,-159,-163,73,73,-169,-171,-172,73,-61,-62,-63,-64,-65,-66,-67,73,-175,-85,-86,73,73,-173,73,73,73,73,73,73,-175,-101,-175,-175,-175,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-165,-173,-166,73,-167,-168,73,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,73,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,73,-175,-38,73,73,73,-175,-175,73,73,73,-175,-175,-138,-175,-102,-68,-175,73,73,-175,-175,73,]),'LPAREN':([0,11,16,27,33,40,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,41,-84,-83,-128,99,41,-134,41,41,41,41,-139,41,41,41,41,-175,-142,-143,-145,-147,-151,-156,41,41,-159,-163,41,41,-169,-171,-172,41,-61,-62,-63,-64,-65,-66,-67,41,-175,151,-85,-86,41,41,-173,41,41,41,41,41,41,-175,-101,-175,-175,-175,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-165,-173,-166,41,-167,-168,41,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,41,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,41,-175,-38,41,41,41,-175,-175,41,41,41,-175,-175,-138,-175,-102,-68,-175,41,41,-175,-175,41,]),'LBRACKET':([0,11,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,77,-84,-83,-128,77,-134,77,77,77,77,-139,77,77,77,77,-175,-142,-143,-145,-147,-151,-156,77,77,-159,-163,77,77,-169,-171,-172,77,-61,-62,-63,-64,-65,-66,-67,77,-175,-85,-86,77,77,-173,77,77,77,77,77,77,-175,-101,-175,-175,-175,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-165,-173,-166,77,-167,-168,77,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,77,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,77,-175,-38,77,77,77,-175,-175,77,77,77,-175,-175,-138,-175,-102,-68,-175,77,77,-175,-175,77,]),'INTNUMBER':([0,11,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,78,-84,-83,-128,78,-134,78,78,78,78,-139,78,78,78,78,-175,-142,-143,-145,-147,-151,-156,78,78,-159,-163,78,78,-169,-171,-172,78,-61,-62,-63,-64,-65,-66,-67,78,-175,-85,-86,78,78,-173,78,78,78,78,78,78,-175,-101,-175,-175,-175,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-165,-173,-166,78,-167,-168,78,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,78,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,78,-175,-38,78,78,78,-175,-175,78,78,78,-175,-175,-138,-175,-102,-68,-175,78,78,-175,-175,78,]),'FLOATNUMBER':([0,11,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,79,-84,-83,-128,79,-134,79,79,79,79,-139,79,79,79,79,-175,-142,-143,-145,-147,-151,-156,79,79,-159,-163,79,79,-169,-171,-172,79,-61,-62,-63,-64,-65,-66,-67,79,-175,-85,-86,79,79,-173,79,79,79,79,79,79,-175,-101,-175,-175,-175,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-165,-173,-166,79,-167,-168,79,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,79,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,79,-175,-38,79,79,79,-175,-175,79,79,79,-175,-175,-138,-175,-102,-68,-175,79,79,-175,-175,79,]),'CHAR':([0,11,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,96,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,153,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,249,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,81,-84,-83,-128,81,-134,81,81,81,81,-139,81,81,81,81,-175,-142,-143,-145,-147,-151,-156,81,81,-159,-163,81,81,-169,-171,-172,81,-61,-62,-63,-64,-65,-66,-67,81,-175,-85,-86,160,81,81,-173,81,81,81,81,81,81,-175,-101,-175,-175,-175,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-165,-173,-166,81,-167,-168,81,160,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,81,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,81,-175,-38,81,81,81,-175,-175,81,81,160,81,-175,-175,-138,-175,-102,-68,-175,81,81,-175,-175,81,]),'TRUE':([0,11,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,82,-84,-83,-128,82,-134,82,82,82,82,-139,82,82,82,82,-175,-142,-143,-145,-147,-151,-156,82,82,-159,-163,82,82,-169,-171,-172,82,-61,-62,-63,-64,-65,-66,-67,82,-175,-85,-86,82,82,-173,82,82,82,82,82,82,-175,-101,-175,-175,-175,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-165,-173,-166,82,-167,-168,82,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,82,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,82,-175,-38,82,82,82,-175,-175,82,82,82,-175,-175,-138,-175,-102,-68,-175,82,82,-175,-175,82,]),'FALSE':([0,11,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,83,-84,-83,-128,83,-134,83,83,83,83,-139,83,83,83,83,-175,-142,-143,-145,-147,-151,-156,83,83,-159,-163,83,83,-169,-171,-172,83,-61,-62,-63,-64,-65,-66,-67,83,-175,-85,-86,83,83,-173,83,83,83,83,83,83,-175,-101,-175,-175,-175,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-165,-173,-166,83,-167,-168,83,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,83,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,83,-175,-38,83,83,83,-175,-175,83,83,83,-175,-175,-138,-175,-102,-68,-175,83,83,-175,-175,83,]),'STRING':([0,11,12,16,27,33,41,43,50,51,52,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,93,94,96,97,99,101,102,103,104,105,106,115,116,117,118,119,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,153,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,192,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,225,226,230,232,235,236,238,239,244,248,249,250,251,260,263,266,267,269,272,277,281,283,290,291,],[-175,84,85,-84,-83,-128,84,-134,84,84,84,84,-139,84,84,84,84,-175,-142,-143,-145,-147,-151,-156,84,84,-159,-163,84,84,-169,-171,-172,84,-61,-62,-63,-64,-65,-66,-67,84,-175,-85,-86,159,84,84,-173,84,84,84,84,84,84,-175,-101,-175,-175,-175,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-165,-173,-166,84,-167,-168,84,159,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,84,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,84,-175,-38,84,84,84,-175,-175,84,84,84,159,84,-175,-175,-138,-175,-102,-68,-175,84,84,-175,-175,84,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,16,17,18,19,20,21,22,23,24,25,26,27,33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,85,89,90,91,92,93,94,101,138,139,140,142,143,149,155,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,263,269,274,288,],[-175,0,-12,-13,-14,-15,-16,-18,-21,-24,-26,-82,-84,-6,-7,-9,-8,-10,-11,-17,-20,-23,-27,-83,-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-19,-2,-3,-4,-5,-85,-86,-173,-165,-173,-166,-167,-168,-22,-1,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-25,-138,-68,-29,-28,]),'NEWLINE':([11,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,44,45,46,47,48,49,51,52,53,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,88,93,94,101,108,109,110,111,112,119,120,121,138,139,140,142,143,152,154,156,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,184,185,186,187,188,189,190,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,226,227,233,256,259,263,268,269,279,285,286,290,292,293,294,],[-82,-84,-83,93,-87,-88,-89,-90,-128,-91,-92,-93,-94,-95,-96,-173,-134,-97,-98,-110,-111,-112,-113,-175,-175,-175,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-123,-126,-127,-124,-125,-175,-175,-116,-165,-173,-166,-167,-168,225,-39,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-70,-77,-170,-129,-130,-131,-132,-133,-114,-115,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-38,-117,-76,-69,-120,-138,-100,-68,-99,-74,-71,-175,-118,-119,-75,]),'SEMICOLON':([11,16,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,44,45,46,47,48,49,51,52,53,56,61,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,93,94,101,108,109,110,111,112,119,120,121,138,139,140,142,143,156,180,184,185,186,187,188,189,190,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,227,233,256,259,263,268,269,279,285,286,290,292,293,294,],[-82,-84,-83,94,-87,-88,-89,-90,-128,-91,-92,-93,-94,-95,-96,-173,-134,-97,-98,-110,-111,-112,-113,-175,-175,-175,-139,-175,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-85,-86,-173,-123,-126,-127,-124,-125,-175,-175,-116,-165,-173,-166,-167,-168,-175,-70,-77,-170,-129,-130,-131,-132,-133,-114,-115,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-117,-76,-69,-120,-138,-100,-68,-99,-74,-71,-175,-118,-119,-75,]),'END':([11,16,27,33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,87,93,94,101,116,117,118,138,139,140,142,143,150,154,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,185,186,187,188,189,190,191,194,196,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,225,226,234,236,237,238,240,241,242,243,246,251,253,260,261,262,263,264,265,266,267,269,272,278,280,282,283,289,],[-82,-84,-83,-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-175,-85,-86,-173,-175,-101,-175,-165,-173,-166,-167,-168,219,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-170,-129,-130,-131,-132,-133,-175,-175,-175,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-38,259,-175,-109,-175,-175,-103,-104,-106,268,-175,274,-175,-108,-121,-138,279,-105,-175,-102,-68,-175,-122,-107,288,-175,292,]),'ELSIF':([11,16,27,33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,93,94,101,116,117,138,139,140,142,143,185,186,187,188,189,190,194,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,241,243,263,265,266,267,269,280,],[-82,-84,-83,-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-85,-86,-173,-175,-101,-165,-173,-166,-167,-168,-170,-129,-130,-131,-132,-133,244,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,244,-106,-138,-105,-175,-102,-68,-107,]),'ELSE':([11,16,27,33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,93,94,101,116,117,118,138,139,140,142,143,185,186,187,188,189,190,191,194,196,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,238,240,241,242,243,260,262,263,265,266,267,269,278,280,],[-82,-84,-83,-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-85,-86,-173,-175,-101,-175,-165,-173,-166,-167,-168,-170,-129,-130,-131,-132,-133,236,-175,236,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,236,-103,-104,-106,-175,-121,-138,-105,-175,-102,-68,-122,-107,]),'RBRACE':([11,16,27,93,94,195,245,284,],[-82,-84,-83,-85,-86,-175,267,290,]),'WHEN':([11,16,27,33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,93,94,101,107,138,139,140,142,143,185,186,187,188,189,190,191,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,238,260,262,263,269,278,],[-82,-84,-83,-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-85,-86,-173,192,-165,-173,-166,-167,-168,-170,-129,-130,-131,-132,-133,235,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-175,-175,-121,-138,-68,-122,]),'ASSIGN':([13,40,42,54,101,113,114,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,220,257,270,],[86,97,102,-136,-135,-137,-135,230,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-72,232,250,-73,281,]),'DOT':([29,33,40,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,263,269,],[95,-128,-173,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-138,-68,]),'RPAREN':([33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,99,100,101,138,139,140,142,143,147,151,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,183,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,220,221,222,223,224,247,263,269,270,271,273,287,],[-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,184,185,-173,-165,-173,-166,-167,-168,-80,-175,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,233,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-34,251,-30,-31,-32,-81,-138,-68,-35,-36,-33,-37,]),'LBRACE':([33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,117,138,139,140,142,143,157,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,263,269,],[-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,195,-165,-173,-166,-167,-168,229,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-138,-68,]),'COMMA':([33,40,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,145,147,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,183,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,220,224,247,258,263,269,270,271,285,287,],[-128,98,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,217,-80,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,231,217,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-34,252,-81,277,-138,-68,-35,-36,291,-37,]),'RBRACKET':([33,43,56,62,63,64,65,66,67,70,71,74,75,76,77,78,79,80,81,82,83,84,101,138,139,140,142,143,144,145,146,147,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,247,263,269,],[-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-175,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,216,-78,-79,-80,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-81,-138,-68,]),'TCOLON':([33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,186,187,188,189,190,193,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,263,269,],[-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,-129,-130,-131,-132,-133,239,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-138,-68,]),'INTERP_END':([33,43,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,186,187,188,189,190,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,218,263,269,],[-128,-134,-139,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,-129,-130,-131,-132,-133,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,248,-138,-68,]),'COLON':([40,88,220,251,],[96,153,249,153,]),'PLUS_ASSIGN':([40,42,54,101,113,114,],[-135,103,-136,-135,-137,-135,]),'MINUS_ASSIGN':([40,42,54,101,113,114,],[-135,104,-136,-135,-137,-135,]),'MULTI_ASSIGN':([40,42,54,101,113,114,],[-135,105,-136,-135,-137,-135,]),'DIVIDE_ASSIGN':([40,42,54,101,113,114,],[-135,106,-136,-135,-137,-135,]),'POTENCIACAO':([40,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,212,213,214,215,216,269,],[-173,141,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,141,141,141,-164,-174,-68,]),'MULTI':([40,67,70,71,74,75,76,78,79,80,81,82,83,84,95,101,138,139,140,142,143,185,210,211,212,213,214,215,216,269,],[-173,135,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,156,-173,-165,-173,-166,-167,-168,-170,135,135,-160,-161,-162,-164,-174,-68,]),'DIVIDE':([40,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,210,211,212,213,214,215,216,269,],[-173,136,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,136,136,-160,-161,-162,-164,-174,-68,]),'MODULO':([40,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,210,211,212,213,214,215,216,269,],[-173,137,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,137,137,-160,-161,-162,-164,-174,-68,]),'GREATER_THAN':([40,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,129,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,129,129,129,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'LESS_THAN':([40,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,130,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,130,130,130,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'GREATER_EQUAL':([40,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,131,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,131,131,131,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'LESS_EQUAL':([40,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,132,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,132,132,132,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'EQUAL':([40,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,126,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,126,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'NOT_EQUAL':([40,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,127,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,127,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'TIPO_EQUAL':([40,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,128,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,128,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'AND':([40,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,125,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,125,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'DOTDOT':([40,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,122,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'DOTDOTDOT':([40,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,123,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'OR':([40,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,124,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,124,124,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'QMARK':([40,56,62,63,64,65,66,67,70,71,74,75,76,78,79,80,81,82,83,84,101,138,139,140,142,143,185,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,269,],[-173,115,-142,-143,-145,-147,-151,-156,-159,-163,-169,-171,-172,-61,-62,-63,-64,-65,-66,-67,-173,-165,-173,-166,-167,-168,-170,-140,-141,-144,-146,-148,-149,-150,-152,-153,-154,-155,-157,-158,-160,-161,-162,-164,-174,-68,]),'INTERP_START':([84,],[148,]),'EACH':([95,],[157,]),'NIL':([96,153,249,],[161,161,161,]),'INT':([96,153,249,],[165,165,165,]),'INT8':([96,153,249,],[166,166,166,]),'INT16':([96,153,249,],[167,167,167,]),'INT32':([96,153,249,],[168,168,168,]),'INT64':([96,153,249,],[169,169,169,]),'INT128':([96,153,249,],[170,170,170,]),'UINT8':([96,153,249,],[171,171,171,]),'UINT16':([96,153,249,],[172,172,172,]),'UINT32':([96,153,249,],[173,173,173,]),'UINT64':([96,153,249,],[174,174,174,]),'UINT128':([96,153,249,],[175,175,175,]),'FLOAT':([96,153,249,],[176,176,176,]),'FLOAT32':([96,153,249,],[177,177,177,]),'FLOAT64':([96,153,249,],[178,178,178,]),'BOOL':([96,153,249,],[179,179,179,]),'DO':([157,],[228,]),'PIPE':([228,229,275,276,],[254,255,283,284,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'require_list':([0,7,],[2,23,]),'constant_list':([0,2,8,],[3,17,24,]),'module_list':([0,2,3,9,17,],[4,18,20,25,89,]),'function_list':([0,2,3,4,10,17,18,20,89,],[5,19,21,22,26,90,91,92,155,]),'statements':([0,61,87,116,118,119,120,156,195,225,236,238,260,266,272,283,290,],[6,121,150,194,196,197,198,227,245,253,261,262,278,280,282,289,293,]),'require':([0,7,],[7,7,]),'constant':([0,2,8,],[8,8,8,]),'module':([0,2,3,9,17,],[9,9,9,9,9,]),'function':([0,2,3,4,10,17,18,20,89,],[10,10,10,10,10,10,10,10,10,]),'statements_list':([0,61,87,116,118,119,120,156,195,225,236,238,260,266,272,283,290,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'empty':([0,51,52,53,61,77,87,88,116,118,119,120,151,156,191,194,195,196,225,236,238,240,251,260,266,272,283,290,],[16,110,110,110,16,146,16,154,16,16,16,16,223,16,237,242,16,237,16,16,16,237,154,16,16,16,16,16,]),'statements_base':([11,],[27,]),'statement':([11,],[28,]),'expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,148,192,217,230,232,235,239,244,250,277,281,291,],[29,100,107,109,109,109,117,117,119,120,147,149,180,147,186,187,188,189,190,193,218,238,247,256,258,260,263,117,271,285,287,285,]),'control_structure':([11,],[30,]),'variable_declaration':([11,],[31,]),'function_call':([11,],[32,]),'assignment_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,148,192,217,230,232,235,239,244,250,277,281,291,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'conditional':([11,],[34,]),'loop_structure':([11,],[35,]),'case_structure':([11,],[36,]),'return_statement':([11,],[37,]),'break_statement':([11,],[38,]),'next_statement':([11,],[39,]),'assignment_target':([11,41,50,51,52,53,55,57,58,59,60,77,86,97,99,102,103,104,105,106,115,148,192,217,230,232,235,239,244,250,277,281,291,],[42,42,42,42,42,42,113,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'ternary_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,148,192,217,230,232,235,239,244,250,277,281,291,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'if_statement':([11,],[44,]),'unless_statement':([11,],[45,]),'while':([11,],[46,]),'until':([11,],[47,]),'loop':([11,],[48,]),'iterator':([11,],[49,]),'range_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,148,192,217,230,232,235,239,244,250,277,281,291,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'logical_or_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,122,123,148,192,217,230,232,235,239,244,250,277,281,291,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,199,200,62,62,62,62,62,62,62,62,62,62,62,62,]),'logical_and_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,122,123,124,148,192,217,230,232,235,239,244,250,277,281,291,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,201,63,63,63,63,63,63,63,63,63,63,63,63,]),'equality_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,122,123,124,125,148,192,217,230,232,235,239,244,250,277,281,291,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,202,64,64,64,64,64,64,64,64,64,64,64,64,]),'relational_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,148,192,217,230,232,235,239,244,250,277,281,291,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,203,204,205,65,65,65,65,65,65,65,65,65,65,65,65,]),'additive_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,129,130,131,132,148,192,217,230,232,235,239,244,250,277,281,291,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,206,207,208,209,66,66,66,66,66,66,66,66,66,66,66,66,]),'multiplicative_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,148,192,217,230,232,235,239,244,250,277,281,291,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,210,211,67,67,67,67,67,67,67,67,67,67,67,67,]),'potenciacao_expression':([11,41,50,51,52,53,57,58,59,60,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,148,192,217,230,232,235,239,244,250,277,281,291,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,212,213,214,70,70,70,70,70,70,70,70,70,70,70,70,]),'unary_expression':([11,41,50,51,52,53,57,58,59,60,68,69,72,73,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,141,148,192,217,230,232,235,239,244,250,277,281,291,],[71,71,71,71,71,71,71,71,71,71,138,140,142,143,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,215,71,71,71,71,71,71,71,71,71,71,71,71,]),'primary_expression':([11,41,50,51,52,53,57,58,59,60,68,69,72,73,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,141,148,192,217,230,232,235,239,244,250,277,281,291,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'array_literal':([11,41,50,51,52,53,57,58,59,60,68,69,72,73,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,141,148,192,217,230,232,235,239,244,250,277,281,291,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'literal':([11,41,50,51,52,53,57,58,59,60,68,69,72,73,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,141,148,192,217,230,232,235,239,244,250,277,281,291,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'string_literal':([11,41,50,51,52,53,57,58,59,60,68,69,72,73,77,86,97,99,102,103,104,105,106,115,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,141,148,192,217,230,232,235,239,244,248,250,277,281,291,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,269,80,80,80,80,]),'opt_expression':([51,52,53,],[108,111,112,]),'if_condition':([57,58,244,],[116,118,266,]),'opt_expression_list':([77,],[144,]),'expression_list':([77,99,],[145,183,]),'opt_return_type':([88,251,],[152,272,]),'types':([96,153,249,],[158,226,270,]),'integer':([96,153,249,],[162,162,162,]),'float':([96,153,249,],[163,163,163,]),'boolean':([96,153,249,],[164,164,164,]),'list_of_identifiers':([98,231,],[182,257,]),'when_list':([107,],[191,]),'opt_argument_list':([151,],[221,]),'argument_list':([151,252,],[222,273,]),'argument':([151,252,],[224,224,]),'opt_else':([191,196,240,],[234,246,264,]),'opt_elsif':([194,],[240,]),'elsif_list':([194,],[241,]),'elsif':([194,241,],[243,265,]),'list_of_values':([277,291,],[286,294,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> require_list constant_list module_list function_list','program',4,'p_program','ExpressionLanguageParser.py',30),
  ('program -> require_list constant_list module_list','program',3,'p_program','ExpressionLanguageParser.py',31),
  ('program -> require_list constant_list function_list','program',3,'p_program','ExpressionLanguageParser.py',32),
  ('program -> require_list module_list function_list','program',3,'p_program','ExpressionLanguageParser.py',33),
  ('program -> constant_list module_list function_list','program',3,'p_program','ExpressionLanguageParser.py',34),
  ('program -> require_list constant_list','program',2,'p_program','ExpressionLanguageParser.py',35),
  ('program -> require_list module_list','program',2,'p_program','ExpressionLanguageParser.py',36),
  ('program -> constant_list module_list','program',2,'p_program','ExpressionLanguageParser.py',37),
  ('program -> require_list function_list','program',2,'p_program','ExpressionLanguageParser.py',38),
  ('program -> constant_list function_list','program',2,'p_program','ExpressionLanguageParser.py',39),
  ('program -> module_list function_list','program',2,'p_program','ExpressionLanguageParser.py',40),
  ('program -> require_list','program',1,'p_program','ExpressionLanguageParser.py',41),
  ('program -> constant_list','program',1,'p_program','ExpressionLanguageParser.py',42),
  ('program -> module_list','program',1,'p_program','ExpressionLanguageParser.py',43),
  ('program -> function_list','program',1,'p_program','ExpressionLanguageParser.py',44),
  ('program -> statements','program',1,'p_program','ExpressionLanguageParser.py',45),
  ('require_list -> require require_list','require_list',2,'p_require_list','ExpressionLanguageParser.py',86),
  ('require_list -> require','require_list',1,'p_require_list','ExpressionLanguageParser.py',87),
  ('require -> REQUIRE STRING','require',2,'p_require','ExpressionLanguageParser.py',94),
  ('constant_list -> constant constant_list','constant_list',2,'p_constant_list','ExpressionLanguageParser.py',99),
  ('constant_list -> constant','constant_list',1,'p_constant_list','ExpressionLanguageParser.py',100),
  ('constant -> CONSTANT ASSIGN expression','constant',3,'p_constant','ExpressionLanguageParser.py',108),
  ('module_list -> module module_list','module_list',2,'p_module_list','ExpressionLanguageParser.py',114),
  ('module_list -> module','module_list',1,'p_module_list','ExpressionLanguageParser.py',115),
  ('module -> MODULE ID statements END','module',4,'p_module','ExpressionLanguageParser.py',123),
  ('function_list -> function','function_list',1,'p_function_list','ExpressionLanguageParser.py',128),
  ('function_list -> function function_list','function_list',2,'p_function_list','ExpressionLanguageParser.py',129),
  ('function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END','function',8,'p_function','ExpressionLanguageParser.py',137),
  ('function -> DEF ID opt_return_type NEWLINE statements END','function',6,'p_function','ExpressionLanguageParser.py',138),
  ('opt_argument_list -> argument_list','opt_argument_list',1,'p_opt_argument_list','ExpressionLanguageParser.py',146),
  ('opt_argument_list -> empty','opt_argument_list',1,'p_opt_argument_list','ExpressionLanguageParser.py',147),
  ('argument_list -> argument','argument_list',1,'p_argument_list','ExpressionLanguageParser.py',151),
  ('argument_list -> argument COMMA argument_list','argument_list',3,'p_argument_list','ExpressionLanguageParser.py',152),
  ('argument -> ID','argument',1,'p_argument','ExpressionLanguageParser.py',160),
  ('argument -> ID COLON types','argument',3,'p_argument','ExpressionLanguageParser.py',161),
  ('argument -> ID ASSIGN expression','argument',3,'p_argument','ExpressionLanguageParser.py',162),
  ('argument -> ID COLON types ASSIGN expression','argument',5,'p_argument','ExpressionLanguageParser.py',163),
  ('opt_return_type -> COLON types','opt_return_type',2,'p_opt_return_type','ExpressionLanguageParser.py',175),
  ('opt_return_type -> empty','opt_return_type',1,'p_opt_return_type','ExpressionLanguageParser.py',176),
  ('types -> STRING','types',1,'p_types','ExpressionLanguageParser.py',182),
  ('types -> CHAR','types',1,'p_types','ExpressionLanguageParser.py',183),
  ('types -> NIL','types',1,'p_types','ExpressionLanguageParser.py',184),
  ('types -> integer','types',1,'p_types','ExpressionLanguageParser.py',185),
  ('types -> float','types',1,'p_types','ExpressionLanguageParser.py',186),
  ('types -> boolean','types',1,'p_types','ExpressionLanguageParser.py',187),
  ('integer -> INT','integer',1,'p_integer','ExpressionLanguageParser.py',190),
  ('integer -> INT8','integer',1,'p_integer','ExpressionLanguageParser.py',191),
  ('integer -> INT16','integer',1,'p_integer','ExpressionLanguageParser.py',192),
  ('integer -> INT32','integer',1,'p_integer','ExpressionLanguageParser.py',193),
  ('integer -> INT64','integer',1,'p_integer','ExpressionLanguageParser.py',194),
  ('integer -> INT128','integer',1,'p_integer','ExpressionLanguageParser.py',195),
  ('integer -> UINT8','integer',1,'p_integer','ExpressionLanguageParser.py',196),
  ('integer -> UINT16','integer',1,'p_integer','ExpressionLanguageParser.py',197),
  ('integer -> UINT32','integer',1,'p_integer','ExpressionLanguageParser.py',198),
  ('integer -> UINT64','integer',1,'p_integer','ExpressionLanguageParser.py',199),
  ('integer -> UINT128','integer',1,'p_integer','ExpressionLanguageParser.py',200),
  ('float -> FLOAT','float',1,'p_float','ExpressionLanguageParser.py',203),
  ('float -> FLOAT32','float',1,'p_float','ExpressionLanguageParser.py',204),
  ('float -> FLOAT64','float',1,'p_float','ExpressionLanguageParser.py',205),
  ('boolean -> BOOL','boolean',1,'p_boolean','ExpressionLanguageParser.py',208),
  ('literal -> INTNUMBER','literal',1,'p_literal','ExpressionLanguageParser.py',211),
  ('literal -> FLOATNUMBER','literal',1,'p_literal','ExpressionLanguageParser.py',212),
  ('literal -> string_literal','literal',1,'p_literal','ExpressionLanguageParser.py',213),
  ('literal -> CHAR','literal',1,'p_literal','ExpressionLanguageParser.py',214),
  ('literal -> TRUE','literal',1,'p_literal','ExpressionLanguageParser.py',215),
  ('literal -> FALSE','literal',1,'p_literal','ExpressionLanguageParser.py',216),
  ('string_literal -> STRING','string_literal',1,'p_string_literal','ExpressionLanguageParser.py',219),
  ('string_literal -> STRING INTERP_START expression INTERP_END string_literal','string_literal',5,'p_string_literal','ExpressionLanguageParser.py',220),
  ('variable_declaration -> ID COLON types ASSIGN expression','variable_declaration',5,'p_variable_declaration','ExpressionLanguageParser.py',224),
  ('variable_declaration -> ID ASSIGN expression','variable_declaration',3,'p_variable_declaration','ExpressionLanguageParser.py',225),
  ('variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values','variable_declaration',7,'p_variable_declaration','ExpressionLanguageParser.py',226),
  ('list_of_identifiers -> ID','list_of_identifiers',1,'p_list_of_identifiers','ExpressionLanguageParser.py',229),
  ('list_of_identifiers -> ID COMMA list_of_identifiers','list_of_identifiers',3,'p_list_of_identifiers','ExpressionLanguageParser.py',230),
  ('list_of_values -> expression','list_of_values',1,'p_list_of_values','ExpressionLanguageParser.py',233),
  ('list_of_values -> expression COMMA list_of_values','list_of_values',3,'p_list_of_values','ExpressionLanguageParser.py',234),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','ExpressionLanguageParser.py',238),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','ExpressionLanguageParser.py',239),
  ('opt_expression_list -> expression_list','opt_expression_list',1,'p_opt_expression_list','ExpressionLanguageParser.py',242),
  ('opt_expression_list -> empty','opt_expression_list',1,'p_opt_expression_list','ExpressionLanguageParser.py',243),
  ('expression_list -> expression','expression_list',1,'p_expression_list','ExpressionLanguageParser.py',246),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','ExpressionLanguageParser.py',247),
  ('statements -> statements_list','statements',1,'p_statements','ExpressionLanguageParser.py',252),
  ('statements_list -> statements_list statements_base','statements_list',2,'p_statements_list','ExpressionLanguageParser.py',255),
  ('statements_list -> empty','statements_list',1,'p_statements_list','ExpressionLanguageParser.py',256),
  ('statements_base -> statement NEWLINE','statements_base',2,'p_statements_base','ExpressionLanguageParser.py',259),
  ('statements_base -> statement SEMICOLON','statements_base',2,'p_statements_base','ExpressionLanguageParser.py',260),
  ('statement -> expression','statement',1,'p_statement','ExpressionLanguageParser.py',263),
  ('statement -> control_structure','statement',1,'p_statement','ExpressionLanguageParser.py',264),
  ('statement -> variable_declaration','statement',1,'p_statement','ExpressionLanguageParser.py',265),
  ('statement -> function_call','statement',1,'p_statement','ExpressionLanguageParser.py',266),
  ('control_structure -> conditional','control_structure',1,'p_control_structure','ExpressionLanguageParser.py',269),
  ('control_structure -> loop_structure','control_structure',1,'p_control_structure','ExpressionLanguageParser.py',270),
  ('control_structure -> case_structure','control_structure',1,'p_control_structure','ExpressionLanguageParser.py',271),
  ('control_structure -> return_statement','control_structure',1,'p_control_structure','ExpressionLanguageParser.py',272),
  ('control_structure -> break_statement','control_structure',1,'p_control_structure','ExpressionLanguageParser.py',273),
  ('control_structure -> next_statement','control_structure',1,'p_control_structure','ExpressionLanguageParser.py',274),
  ('conditional -> if_statement','conditional',1,'p_conditional','ExpressionLanguageParser.py',277),
  ('conditional -> unless_statement','conditional',1,'p_conditional','ExpressionLanguageParser.py',278),
  ('if_statement -> IF if_condition statements opt_elsif opt_else END','if_statement',6,'p_if_statement','ExpressionLanguageParser.py',281),
  ('unless_statement -> UNLESS if_condition statements opt_else END','unless_statement',5,'p_unless_statement','ExpressionLanguageParser.py',284),
  ('if_condition -> expression','if_condition',1,'p_if_condition','ExpressionLanguageParser.py',287),
  ('if_condition -> expression LBRACE statements RBRACE','if_condition',4,'p_if_condition','ExpressionLanguageParser.py',288),
  ('opt_elsif -> elsif_list','opt_elsif',1,'p_opt_elsif','ExpressionLanguageParser.py',291),
  ('opt_elsif -> empty','opt_elsif',1,'p_opt_elsif','ExpressionLanguageParser.py',292),
  ('elsif_list -> elsif_list elsif','elsif_list',2,'p_elsif_list','ExpressionLanguageParser.py',295),
  ('elsif_list -> elsif','elsif_list',1,'p_elsif_list','ExpressionLanguageParser.py',296),
  ('elsif -> ELSIF if_condition statements','elsif',3,'p_elsif','ExpressionLanguageParser.py',299),
  ('opt_else -> ELSE statements','opt_else',2,'p_opt_else','ExpressionLanguageParser.py',302),
  ('opt_else -> empty','opt_else',1,'p_opt_else','ExpressionLanguageParser.py',303),
  ('loop_structure -> while','loop_structure',1,'p_loop_structure','ExpressionLanguageParser.py',306),
  ('loop_structure -> until','loop_structure',1,'p_loop_structure','ExpressionLanguageParser.py',307),
  ('loop_structure -> loop','loop_structure',1,'p_loop_structure','ExpressionLanguageParser.py',308),
  ('loop_structure -> iterator','loop_structure',1,'p_loop_structure','ExpressionLanguageParser.py',309),
  ('while -> WHILE expression statements','while',3,'p_while','ExpressionLanguageParser.py',312),
  ('until -> UNTIL expression statements','until',3,'p_until','ExpressionLanguageParser.py',315),
  ('loop -> LOOP statements','loop',2,'p_loop','ExpressionLanguageParser.py',318),
  ('iterator -> expression DOT MULTI statements','iterator',4,'p_iterator','ExpressionLanguageParser.py',322),
  ('iterator -> expression DOT EACH DO PIPE ID PIPE statements END','iterator',9,'p_iterator','ExpressionLanguageParser.py',323),
  ('iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements','iterator',9,'p_iterator','ExpressionLanguageParser.py',324),
  ('case_structure -> CASE expression when_list opt_else END','case_structure',5,'p_case_structure','ExpressionLanguageParser.py',327),
  ('when_list -> WHEN expression statements','when_list',3,'p_when_list','ExpressionLanguageParser.py',330),
  ('when_list -> when_list WHEN expression statements','when_list',4,'p_when_list','ExpressionLanguageParser.py',331),
  ('return_statement -> RETURN opt_expression','return_statement',2,'p_return_statement','ExpressionLanguageParser.py',334),
  ('break_statement -> BREAK opt_expression','break_statement',2,'p_break_statement','ExpressionLanguageParser.py',337),
  ('next_statement -> NEXT opt_expression','next_statement',2,'p_next_statement','ExpressionLanguageParser.py',340),
  ('opt_expression -> expression','opt_expression',1,'p_opt_expression','ExpressionLanguageParser.py',343),
  ('opt_expression -> empty','opt_expression',1,'p_opt_expression','ExpressionLanguageParser.py',344),
  ('expression -> assignment_expression','expression',1,'p_expression','ExpressionLanguageParser.py',348),
  ('assignment_expression -> assignment_target ASSIGN expression','assignment_expression',3,'p_assignment_expression','ExpressionLanguageParser.py',351),
  ('assignment_expression -> assignment_target PLUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','ExpressionLanguageParser.py',352),
  ('assignment_expression -> assignment_target MINUS_ASSIGN expression','assignment_expression',3,'p_assignment_expression','ExpressionLanguageParser.py',353),
  ('assignment_expression -> assignment_target MULTI_ASSIGN expression','assignment_expression',3,'p_assignment_expression','ExpressionLanguageParser.py',354),
  ('assignment_expression -> assignment_target DIVIDE_ASSIGN expression','assignment_expression',3,'p_assignment_expression','ExpressionLanguageParser.py',355),
  ('assignment_expression -> ternary_expression','assignment_expression',1,'p_assignment_expression','ExpressionLanguageParser.py',356),
  ('assignment_target -> ID','assignment_target',1,'p_assignment_target','ExpressionLanguageParser.py',359),
  ('assignment_target -> UNDERSCORE','assignment_target',1,'p_assignment_target','ExpressionLanguageParser.py',360),
  ('assignment_target -> ASTERISK assignment_target','assignment_target',2,'p_assignment_target','ExpressionLanguageParser.py',361),
  ('ternary_expression -> range_expression QMARK expression TCOLON expression','ternary_expression',5,'p_ternary_expression','ExpressionLanguageParser.py',364),
  ('ternary_expression -> range_expression','ternary_expression',1,'p_ternary_expression','ExpressionLanguageParser.py',365),
  ('range_expression -> logical_or_expression DOTDOT logical_or_expression','range_expression',3,'p_range_expression','ExpressionLanguageParser.py',368),
  ('range_expression -> logical_or_expression DOTDOTDOT logical_or_expression','range_expression',3,'p_range_expression','ExpressionLanguageParser.py',369),
  ('range_expression -> logical_or_expression','range_expression',1,'p_range_expression','ExpressionLanguageParser.py',370),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','ExpressionLanguageParser.py',373),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','ExpressionLanguageParser.py',374),
  ('logical_and_expression -> equality_expression','logical_and_expression',1,'p_logical_and_expression','ExpressionLanguageParser.py',377),
  ('logical_and_expression -> logical_and_expression AND equality_expression','logical_and_expression',3,'p_logical_and_expression','ExpressionLanguageParser.py',378),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','ExpressionLanguageParser.py',381),
  ('equality_expression -> equality_expression EQUAL relational_expression','equality_expression',3,'p_equality_expression','ExpressionLanguageParser.py',382),
  ('equality_expression -> equality_expression NOT_EQUAL relational_expression','equality_expression',3,'p_equality_expression','ExpressionLanguageParser.py',383),
  ('equality_expression -> equality_expression TIPO_EQUAL relational_expression','equality_expression',3,'p_equality_expression','ExpressionLanguageParser.py',384),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','ExpressionLanguageParser.py',387),
  ('relational_expression -> relational_expression GREATER_THAN additive_expression','relational_expression',3,'p_relational_expression','ExpressionLanguageParser.py',388),
  ('relational_expression -> relational_expression LESS_THAN additive_expression','relational_expression',3,'p_relational_expression','ExpressionLanguageParser.py',389),
  ('relational_expression -> relational_expression GREATER_EQUAL additive_expression','relational_expression',3,'p_relational_expression','ExpressionLanguageParser.py',390),
  ('relational_expression -> relational_expression LESS_EQUAL additive_expression','relational_expression',3,'p_relational_expression','ExpressionLanguageParser.py',391),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','ExpressionLanguageParser.py',394),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','ExpressionLanguageParser.py',395),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','ExpressionLanguageParser.py',396),
  ('multiplicative_expression -> potenciacao_expression','multiplicative_expression',1,'p_multiplicative_expression','ExpressionLanguageParser.py',399),
  ('multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression','multiplicative_expression',3,'p_multiplicative_expression','ExpressionLanguageParser.py',400),
  ('multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression','multiplicative_expression',3,'p_multiplicative_expression','ExpressionLanguageParser.py',401),
  ('multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression','multiplicative_expression',3,'p_multiplicative_expression','ExpressionLanguageParser.py',402),
  ('potenciacao_expression -> unary_expression','potenciacao_expression',1,'p_potenciacao_expression','ExpressionLanguageParser.py',405),
  ('potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression','potenciacao_expression',3,'p_potenciacao_expression','ExpressionLanguageParser.py',406),
  ('unary_expression -> PLUS unary_expression','unary_expression',2,'p_unary_expression','ExpressionLanguageParser.py',409),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ExpressionLanguageParser.py',410),
  ('unary_expression -> EXCLAMATION unary_expression','unary_expression',2,'p_unary_expression','ExpressionLanguageParser.py',411),
  ('unary_expression -> TILDE unary_expression','unary_expression',2,'p_unary_expression','ExpressionLanguageParser.py',412),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ExpressionLanguageParser.py',413),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','ExpressionLanguageParser.py',418),
  ('primary_expression -> array_literal','primary_expression',1,'p_primary_expression','ExpressionLanguageParser.py',419),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ExpressionLanguageParser.py',420),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ExpressionLanguageParser.py',421),
  ('array_literal -> LBRACKET opt_expression_list RBRACKET','array_literal',3,'p_array_literal','ExpressionLanguageParser.py',424),
  ('empty -> <empty>','empty',0,'p_empty','ExpressionLanguageParser.py',428),
]
