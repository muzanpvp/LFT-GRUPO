Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASSOCIACAO
    AT
    BEGIN
    BINNUMBER
    CLASS
    CLASSVAR
    CLASS_VAR
    DEFINE_BLOCO
    DOLAR_SIGN
    ENUM
    GLOBALVAR
    HEXNUMBER
    IN
    INCLUDE
    INSTANCEVAR
    INSTANCE_VAR
    LITERAL
    MACRO
    MODULO_ASSIGN
    NOT
    OCTNUMBER
    OF
    OR_ASSIGN
    OUT
    PASSA_ARGUMENTO
    POTENCIACAO_ASSIGN
    PRIVATE
    PROTECTED
    SAFE_CALL
    SCOPE
    SELECT
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SIZEOF
    STRUCT
    SYMBOL
    THEN
    TYPE
    TYPEOF
    UNINITIALIZED
    UNION
    VAR_GLOBAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> require_list constant_list module_list function_list
Rule 2     program -> require_list constant_list module_list
Rule 3     program -> require_list constant_list function_list
Rule 4     program -> require_list module_list function_list
Rule 5     program -> constant_list module_list function_list
Rule 6     program -> require_list constant_list
Rule 7     program -> require_list module_list
Rule 8     program -> constant_list module_list
Rule 9     program -> require_list function_list
Rule 10    program -> constant_list function_list
Rule 11    program -> module_list function_list
Rule 12    program -> require_list
Rule 13    program -> constant_list
Rule 14    program -> module_list
Rule 15    program -> function_list
Rule 16    require_list -> require require_list
Rule 17    require_list -> require
Rule 18    require -> REQUIRE STRING
Rule 19    constant_list -> constant constant_list
Rule 20    constant_list -> constant
Rule 21    constant -> CONSTANT ASSIGN expression
Rule 22    module_list -> module module_list
Rule 23    module_list -> module
Rule 24    module -> MODULE ID statements END
Rule 25    function_list -> function
Rule 26    function_list -> function function_list
Rule 27    function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
Rule 28    function -> DEF ID opt_return_type NEWLINE statements END
Rule 29    opt_argument_list -> argument_list
Rule 30    opt_argument_list -> empty
Rule 31    argument_list -> argument
Rule 32    argument_list -> argument COMMA argument_list
Rule 33    argument -> ID
Rule 34    argument -> ID COLON types
Rule 35    argument -> ID ASSIGN expression
Rule 36    argument -> ID COLON types ASSIGN expression
Rule 37    opt_return_type -> COLON types
Rule 38    opt_return_type -> empty
Rule 39    types -> STRING
Rule 40    types -> CHAR
Rule 41    types -> NIL
Rule 42    types -> integer
Rule 43    types -> float
Rule 44    types -> boolean
Rule 45    integer -> INT
Rule 46    integer -> INT8
Rule 47    integer -> INT16
Rule 48    integer -> INT32
Rule 49    integer -> INT64
Rule 50    integer -> INT128
Rule 51    integer -> UINT8
Rule 52    integer -> UINT16
Rule 53    integer -> UINT32
Rule 54    integer -> UINT64
Rule 55    integer -> UINT128
Rule 56    float -> FLOAT
Rule 57    float -> FLOAT32
Rule 58    float -> FLOAT64
Rule 59    boolean -> BOOL
Rule 60    literal -> INTNUMBER
Rule 61    literal -> FLOATNUMBER
Rule 62    literal -> string_literal
Rule 63    literal -> CHAR
Rule 64    literal -> TRUE
Rule 65    literal -> FALSE
Rule 66    variable_declaration -> ID types ASSIGN expression
Rule 67    variable_declaration -> ID ASSIGN expression
Rule 68    variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
Rule 69    list_of_identifiers -> ID
Rule 70    list_of_identifiers -> ID COMMA list_of_identifiers
Rule 71    list_of_values -> expression
Rule 72    list_of_values -> expression COMMA list_of_values
Rule 73    function_call -> ID LPAREN expression_list RPAREN
Rule 74    function_call -> ID LPAREN RPAREN
Rule 75    opt_expression_list -> expression_list
Rule 76    opt_expression_list -> empty
Rule 77    expression_list -> expression
Rule 78    expression_list -> expression_list COMMA expression
Rule 79    statements -> statement
Rule 80    statements -> statement NEWLINE statements
Rule 81    statement -> expression
Rule 82    statement -> control_structure
Rule 83    statement -> variable_declaration
Rule 84    statement -> function_call
Rule 85    control_structure -> conditional
Rule 86    control_structure -> loop_structure
Rule 87    control_structure -> case_structure
Rule 88    control_structure -> return_statement
Rule 89    control_structure -> break_statement
Rule 90    control_structure -> next_statement
Rule 91    conditional -> if_statement
Rule 92    conditional -> unless_statement
Rule 93    if_statement -> IF if_condition statements opt_elsif opt_else END
Rule 94    unless_statement -> UNLESS if_condition statements opt_else END
Rule 95    if_condition -> expression
Rule 96    if_condition -> expression LBRACE statements RBRACE
Rule 97    opt_elsif -> elsif_list
Rule 98    opt_elsif -> empty
Rule 99    elsif_list -> elsif_list elsif
Rule 100   elsif_list -> elsif
Rule 101   elsif -> ELSIF if_condition statements
Rule 102   opt_else -> ELSE statements
Rule 103   opt_else -> empty
Rule 104   loop_structure -> while
Rule 105   loop_structure -> until
Rule 106   loop_structure -> loop
Rule 107   loop_structure -> iterator
Rule 108   while -> WHILE expression statements
Rule 109   until -> UNTIL expression statements
Rule 110   loop -> LOOP statements
Rule 111   iterator -> expression DOT MULTI statements
Rule 112   iterator -> expression DOT EACH DO PIPE ID PIPE statements END
Rule 113   iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
Rule 114   case_structure -> CASE expression when_list opt_else END
Rule 115   when_list -> WHEN expression statements
Rule 116   when_list -> when_list WHEN expression statements
Rule 117   return_statement -> RETURN opt_expression
Rule 118   break_statement -> BREAK opt_expression
Rule 119   next_statement -> NEXT opt_expression
Rule 120   opt_expression -> expression
Rule 121   opt_expression -> empty
Rule 122   expression -> ternary_expression
Rule 123   expression -> assignment_expression
Rule 124   assignment_expression -> assignment_target ASSIGN expression
Rule 125   assignment_expression -> assignment_target PLUS_ASSIGN expression
Rule 126   assignment_expression -> assignment_target MINUS_ASSIGN expression
Rule 127   assignment_expression -> assignment_target MULTI_ASSIGN expression
Rule 128   assignment_expression -> assignment_target DIVIDE_ASSIGN expression
Rule 129   assignment_target -> postfix_expression
Rule 130   assignment_target -> UNDERSCORE
Rule 131   assignment_target -> ASTERISK assignment_target
Rule 132   ternary_expression -> logical_or_expression QMARK expression TCOLON expression
Rule 133   ternary_expression -> logical_or_expression
Rule 134   logical_or_expression -> logical_and_expression
Rule 135   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 136   logical_and_expression -> equality_expression
Rule 137   logical_and_expression -> logical_and_expression AND equality_expression
Rule 138   equality_expression -> relational_expression
Rule 139   equality_expression -> equality_expression EQUAL relational_expression
Rule 140   equality_expression -> equality_expression NOT_EQUAL relational_expression
Rule 141   equality_expression -> equality_expression TIPO_EQUAL relational_expression
Rule 142   relational_expression -> additive_expression
Rule 143   relational_expression -> relational_expression GREATER_THAN additive_expression
Rule 144   relational_expression -> relational_expression LESS_THAN additive_expression
Rule 145   relational_expression -> relational_expression GREATER_EQUAL additive_expression
Rule 146   relational_expression -> relational_expression LESS_EQUAL additive_expression
Rule 147   additive_expression -> multiplicative_expression
Rule 148   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 149   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 150   multiplicative_expression -> potenciacao_expression
Rule 151   multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression
Rule 152   multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression
Rule 153   multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression
Rule 154   potenciacao_expression -> unary_expression
Rule 155   potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression
Rule 156   unary_expression -> PLUS unary_expression
Rule 157   unary_expression -> MINUS unary_expression
Rule 158   unary_expression -> EXCLAMATION unary_expression
Rule 159   unary_expression -> TILDE unary_expression
Rule 160   unary_expression -> postfix_expression
Rule 161   primary_expression -> expression_between_parentesis
Rule 162   primary_expression -> array_literal
Rule 163   primary_expression -> literal
Rule 164   primary_expression -> ID
Rule 165   postfix_expression -> primary_expression postfix_suffixes
Rule 166   postfix_suffixes -> postfix_suffix postfix_suffixes
Rule 167   postfix_suffixes -> postfix_suffix
Rule 168   postfix_suffix -> LBRACKET expression RBRACKET
Rule 169   postfix_suffix -> DOTDOT primary_expression
Rule 170   postfix_suffix -> DOTDOTDOT primary_expression
Rule 171   expression_between_parentesis -> LPAREN expression RPAREN
Rule 172   array_literal -> LBRACKET opt_expression_list RBRACKET
Rule 173   string_literal -> STRING
Rule 174   string_literal -> STRING INTERP_START expression INTERP_END string_literal
Rule 175   empty -> <empty>

Terminals, with rules where they appear

AND                  : 137
AS                   : 
ASSIGN               : 21 35 36 66 67 68 124
ASSOCIACAO           : 
ASTERISK             : 131
AT                   : 
BEGIN                : 
BINNUMBER            : 
BOOL                 : 59
BREAK                : 118
CASE                 : 114
CHAR                 : 40 63
CLASS                : 
CLASSVAR             : 
CLASS_VAR            : 
COLON                : 34 36 37
COMMA                : 32 68 68 70 72 78
CONSTANT             : 21
DEF                  : 27 28
DEFINE_BLOCO         : 
DIVIDE               : 152
DIVIDE_ASSIGN        : 128
DO                   : 112
DOLAR_SIGN           : 
DOT                  : 111 112 113
DOTDOT               : 169
DOTDOTDOT            : 170
EACH                 : 112 113
ELSE                 : 102
ELSIF                : 101
END                  : 24 27 28 93 94 112 114
ENUM                 : 
EQUAL                : 139
EXCLAMATION          : 158
FALSE                : 65
FLOAT                : 56
FLOAT32              : 57
FLOAT64              : 58
FLOATNUMBER          : 61
GLOBALVAR            : 
GREATER_EQUAL        : 145
GREATER_THAN         : 143
HEXNUMBER            : 
ID                   : 24 27 28 33 34 35 36 66 67 68 69 70 73 74 112 113 164
IF                   : 93
IN                   : 
INCLUDE              : 
INSTANCEVAR          : 
INSTANCE_VAR         : 
INT                  : 45
INT128               : 50
INT16                : 47
INT32                : 48
INT64                : 49
INT8                 : 46
INTERP_END           : 174
INTERP_START         : 174
INTNUMBER            : 60
LBRACE               : 96 113
LBRACKET             : 168 172
LESS_EQUAL           : 146
LESS_THAN            : 144
LITERAL              : 
LOOP                 : 110
LPAREN               : 27 73 74 171
MACRO                : 
MINUS                : 149 157
MINUS_ASSIGN         : 126
MODULE               : 24
MODULO               : 153
MODULO_ASSIGN        : 
MULTI                : 111 151
MULTI_ASSIGN         : 127
NEWLINE              : 28 80
NEXT                 : 119
NIL                  : 41
NOT                  : 
NOT_EQUAL            : 140
OCTNUMBER            : 
OF                   : 
OR                   : 135
OR_ASSIGN            : 
OUT                  : 
PASSA_ARGUMENTO      : 
PIPE                 : 112 112 113 113
PLUS                 : 148 156
PLUS_ASSIGN          : 125
POTENCIACAO          : 155
POTENCIACAO_ASSIGN   : 
PRIVATE              : 
PROTECTED            : 
QMARK                : 132
RBRACE               : 96 113
RBRACKET             : 168 172
REQUIRE              : 18
RETURN               : 117
RPAREN               : 27 73 74 171
SAFE_CALL            : 
SCOPE                : 
SELECT               : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SIZEOF               : 
STRING               : 18 39 173 174
STRUCT               : 
SYMBOL               : 
TCOLON               : 132
THEN                 : 
TILDE                : 159
TIPO_EQUAL           : 141
TRUE                 : 64
TYPE                 : 
TYPEOF               : 
UINT128              : 55
UINT16               : 52
UINT32               : 53
UINT64               : 54
UINT8                : 51
UNDERSCORE           : 130
UNINITIALIZED        : 
UNION                : 
UNLESS               : 94
UNTIL                : 109
VAR_GLOBAL           : 
WHEN                 : 115 116
WHILE                : 108
YIELD                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 142 143 144 145 146 148 149
argument             : 31 32
argument_list        : 29 32
array_literal        : 162
assignment_expression : 123
assignment_target    : 124 125 126 127 128 131
boolean              : 44
break_statement      : 89
case_structure       : 87
conditional          : 85
constant             : 19 20
constant_list        : 1 2 3 5 6 8 10 13 19
control_structure    : 82
elsif                : 99 100
elsif_list           : 97 99
empty                : 30 38 76 98 103 121
equality_expression  : 136 137 139 140 141
expression           : 21 35 36 66 67 68 71 72 77 78 81 95 96 108 109 111 112 113 114 115 116 120 124 125 126 127 128 132 132 168 171 174
expression_between_parentesis : 161
expression_list      : 73 75 78
float                : 43
function             : 25 26
function_call        : 84
function_list        : 1 3 4 5 9 10 11 15 26
if_condition         : 93 94 101
if_statement         : 91
integer              : 42
iterator             : 107
list_of_identifiers  : 68 70
list_of_values       : 68 72
literal              : 163
logical_and_expression : 134 135 137
logical_or_expression : 132 133 135
loop                 : 106
loop_structure       : 86
module               : 22 23
module_list          : 1 2 4 5 7 8 11 14 22
multiplicative_expression : 147 148 149 151 152 153
next_statement       : 90
opt_argument_list    : 27
opt_else             : 93 94 114
opt_elsif            : 93
opt_expression       : 117 118 119
opt_expression_list  : 172
opt_return_type      : 27 28
postfix_expression   : 129 160
postfix_suffix       : 166 167
postfix_suffixes     : 165 166
potenciacao_expression : 150 151 152 153 155
primary_expression   : 165 169 170
program              : 0
relational_expression : 138 139 140 141 143 144 145 146
require              : 16 17
require_list         : 1 2 3 4 6 7 9 12 16
return_statement     : 88
statement            : 79 80
statements           : 24 27 28 80 93 94 96 101 102 108 109 110 111 112 113 115 116
string_literal       : 62 174
ternary_expression   : 122
types                : 34 36 37 66
unary_expression     : 154 155 156 157 158 159
unless_statement     : 92
until                : 105
variable_declaration : 83
when_list            : 114 116
while                : 104

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . require_list constant_list module_list function_list
    (2) program -> . require_list constant_list module_list
    (3) program -> . require_list constant_list function_list
    (4) program -> . require_list module_list function_list
    (5) program -> . constant_list module_list function_list
    (6) program -> . require_list constant_list
    (7) program -> . require_list module_list
    (8) program -> . constant_list module_list
    (9) program -> . require_list function_list
    (10) program -> . constant_list function_list
    (11) program -> . module_list function_list
    (12) program -> . require_list
    (13) program -> . constant_list
    (14) program -> . module_list
    (15) program -> . function_list
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (18) require -> . REQUIRE STRING
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    REQUIRE         shift and go to state 10
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    program                        shift and go to state 1
    require_list                   shift and go to state 2
    constant_list                  shift and go to state 3
    module_list                    shift and go to state 4
    function_list                  shift and go to state 5
    require                        shift and go to state 6
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> require_list . constant_list module_list function_list
    (2) program -> require_list . constant_list module_list
    (3) program -> require_list . constant_list function_list
    (4) program -> require_list . module_list function_list
    (6) program -> require_list . constant_list
    (7) program -> require_list . module_list
    (9) program -> require_list . function_list
    (12) program -> require_list .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 12 (program -> require_list .)
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    constant_list                  shift and go to state 14
    module_list                    shift and go to state 15
    function_list                  shift and go to state 16
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 3

    (5) program -> constant_list . module_list function_list
    (8) program -> constant_list . module_list
    (10) program -> constant_list . function_list
    (13) program -> constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 13 (program -> constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 17
    function_list                  shift and go to state 18
    module                         shift and go to state 8
    function                       shift and go to state 9

state 4

    (11) program -> module_list . function_list
    (14) program -> module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 14 (program -> module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 19
    function                       shift and go to state 9

state 5

    (15) program -> function_list .

    $end            reduce using rule 15 (program -> function_list .)


state 6

    (16) require_list -> require . require_list
    (17) require_list -> require .
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (18) require -> . REQUIRE STRING

    CONSTANT        reduce using rule 17 (require_list -> require .)
    MODULE          reduce using rule 17 (require_list -> require .)
    DEF             reduce using rule 17 (require_list -> require .)
    $end            reduce using rule 17 (require_list -> require .)
    REQUIRE         shift and go to state 10

    require                        shift and go to state 6
    require_list                   shift and go to state 20

state 7

    (19) constant_list -> constant . constant_list
    (20) constant_list -> constant .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (21) constant -> . CONSTANT ASSIGN expression

    MODULE          reduce using rule 20 (constant_list -> constant .)
    DEF             reduce using rule 20 (constant_list -> constant .)
    $end            reduce using rule 20 (constant_list -> constant .)
    CONSTANT        shift and go to state 11

    constant                       shift and go to state 7
    constant_list                  shift and go to state 21

state 8

    (22) module_list -> module . module_list
    (23) module_list -> module .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (24) module -> . MODULE ID statements END

    DEF             reduce using rule 23 (module_list -> module .)
    $end            reduce using rule 23 (module_list -> module .)
    MODULE          shift and go to state 12

    module                         shift and go to state 8
    module_list                    shift and go to state 22

state 9

    (25) function_list -> function .
    (26) function_list -> function . function_list
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 25 (function_list -> function .)
    DEF             shift and go to state 13

    function                       shift and go to state 9
    function_list                  shift and go to state 23

state 10

    (18) require -> REQUIRE . STRING

    STRING          shift and go to state 24


state 11

    (21) constant -> CONSTANT . ASSIGN expression

    ASSIGN          shift and go to state 25


state 12

    (24) module -> MODULE . ID statements END

    ID              shift and go to state 26


state 13

    (27) function -> DEF . ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> DEF . ID opt_return_type NEWLINE statements END

    ID              shift and go to state 27


state 14

    (1) program -> require_list constant_list . module_list function_list
    (2) program -> require_list constant_list . module_list
    (3) program -> require_list constant_list . function_list
    (6) program -> require_list constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 6 (program -> require_list constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 28
    function_list                  shift and go to state 29
    module                         shift and go to state 8
    function                       shift and go to state 9

state 15

    (4) program -> require_list module_list . function_list
    (7) program -> require_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 7 (program -> require_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 30
    function                       shift and go to state 9

state 16

    (9) program -> require_list function_list .

    $end            reduce using rule 9 (program -> require_list function_list .)


state 17

    (5) program -> constant_list module_list . function_list
    (8) program -> constant_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 8 (program -> constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 31
    function                       shift and go to state 9

state 18

    (10) program -> constant_list function_list .

    $end            reduce using rule 10 (program -> constant_list function_list .)


state 19

    (11) program -> module_list function_list .

    $end            reduce using rule 11 (program -> module_list function_list .)


state 20

    (16) require_list -> require require_list .

    CONSTANT        reduce using rule 16 (require_list -> require require_list .)
    MODULE          reduce using rule 16 (require_list -> require require_list .)
    DEF             reduce using rule 16 (require_list -> require require_list .)
    $end            reduce using rule 16 (require_list -> require require_list .)


state 21

    (19) constant_list -> constant constant_list .

    MODULE          reduce using rule 19 (constant_list -> constant constant_list .)
    DEF             reduce using rule 19 (constant_list -> constant constant_list .)
    $end            reduce using rule 19 (constant_list -> constant constant_list .)


state 22

    (22) module_list -> module module_list .

    DEF             reduce using rule 22 (module_list -> module module_list .)
    $end            reduce using rule 22 (module_list -> module module_list .)


state 23

    (26) function_list -> function function_list .

    $end            reduce using rule 26 (function_list -> function function_list .)


state 24

    (18) require -> REQUIRE STRING .

    REQUIRE         reduce using rule 18 (require -> REQUIRE STRING .)
    CONSTANT        reduce using rule 18 (require -> REQUIRE STRING .)
    MODULE          reduce using rule 18 (require -> REQUIRE STRING .)
    DEF             reduce using rule 18 (require -> REQUIRE STRING .)
    $end            reduce using rule 18 (require -> REQUIRE STRING .)


state 25

    (21) constant -> CONSTANT ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 32
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 26

    (24) module -> MODULE ID . statements END
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 66
    statement                      shift and go to state 67
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 27

    (27) function -> DEF ID . LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> DEF ID . opt_return_type NEWLINE statements END
    (37) opt_return_type -> . COLON types
    (38) opt_return_type -> . empty
    (175) empty -> .

    LPAREN          shift and go to state 93
    COLON           shift and go to state 95
    NEWLINE         reduce using rule 175 (empty -> .)

    opt_return_type                shift and go to state 94
    empty                          shift and go to state 96

state 28

    (1) program -> require_list constant_list module_list . function_list
    (2) program -> require_list constant_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 2 (program -> require_list constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 97
    function                       shift and go to state 9

state 29

    (3) program -> require_list constant_list function_list .

    $end            reduce using rule 3 (program -> require_list constant_list function_list .)


state 30

    (4) program -> require_list module_list function_list .

    $end            reduce using rule 4 (program -> require_list module_list function_list .)


state 31

    (5) program -> constant_list module_list function_list .

    $end            reduce using rule 5 (program -> constant_list module_list function_list .)


state 32

    (21) constant -> CONSTANT ASSIGN expression .

    CONSTANT        reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    MODULE          reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    DEF             reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    $end            reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)


state 33

    (122) expression -> ternary_expression .

    CONSTANT        reduce using rule 122 (expression -> ternary_expression .)
    MODULE          reduce using rule 122 (expression -> ternary_expression .)
    DEF             reduce using rule 122 (expression -> ternary_expression .)
    $end            reduce using rule 122 (expression -> ternary_expression .)
    DOT             reduce using rule 122 (expression -> ternary_expression .)
    NEWLINE         reduce using rule 122 (expression -> ternary_expression .)
    END             reduce using rule 122 (expression -> ternary_expression .)
    RPAREN          reduce using rule 122 (expression -> ternary_expression .)
    COMMA           reduce using rule 122 (expression -> ternary_expression .)
    RBRACKET        reduce using rule 122 (expression -> ternary_expression .)
    WHEN            reduce using rule 122 (expression -> ternary_expression .)
    ELSIF           reduce using rule 122 (expression -> ternary_expression .)
    ELSE            reduce using rule 122 (expression -> ternary_expression .)
    RBRACE          reduce using rule 122 (expression -> ternary_expression .)
    LBRACE          reduce using rule 122 (expression -> ternary_expression .)
    ID              reduce using rule 122 (expression -> ternary_expression .)
    CASE            reduce using rule 122 (expression -> ternary_expression .)
    RETURN          reduce using rule 122 (expression -> ternary_expression .)
    BREAK           reduce using rule 122 (expression -> ternary_expression .)
    NEXT            reduce using rule 122 (expression -> ternary_expression .)
    UNDERSCORE      reduce using rule 122 (expression -> ternary_expression .)
    ASTERISK        reduce using rule 122 (expression -> ternary_expression .)
    IF              reduce using rule 122 (expression -> ternary_expression .)
    UNLESS          reduce using rule 122 (expression -> ternary_expression .)
    WHILE           reduce using rule 122 (expression -> ternary_expression .)
    UNTIL           reduce using rule 122 (expression -> ternary_expression .)
    LOOP            reduce using rule 122 (expression -> ternary_expression .)
    LPAREN          reduce using rule 122 (expression -> ternary_expression .)
    LBRACKET        reduce using rule 122 (expression -> ternary_expression .)
    INTNUMBER       reduce using rule 122 (expression -> ternary_expression .)
    FLOATNUMBER     reduce using rule 122 (expression -> ternary_expression .)
    CHAR            reduce using rule 122 (expression -> ternary_expression .)
    TRUE            reduce using rule 122 (expression -> ternary_expression .)
    FALSE           reduce using rule 122 (expression -> ternary_expression .)
    STRING          reduce using rule 122 (expression -> ternary_expression .)
    PLUS            reduce using rule 122 (expression -> ternary_expression .)
    MINUS           reduce using rule 122 (expression -> ternary_expression .)
    EXCLAMATION     reduce using rule 122 (expression -> ternary_expression .)
    TILDE           reduce using rule 122 (expression -> ternary_expression .)
    TCOLON          reduce using rule 122 (expression -> ternary_expression .)
    INTERP_END      reduce using rule 122 (expression -> ternary_expression .)


state 34

    (123) expression -> assignment_expression .

    CONSTANT        reduce using rule 123 (expression -> assignment_expression .)
    MODULE          reduce using rule 123 (expression -> assignment_expression .)
    DEF             reduce using rule 123 (expression -> assignment_expression .)
    $end            reduce using rule 123 (expression -> assignment_expression .)
    DOT             reduce using rule 123 (expression -> assignment_expression .)
    NEWLINE         reduce using rule 123 (expression -> assignment_expression .)
    END             reduce using rule 123 (expression -> assignment_expression .)
    RPAREN          reduce using rule 123 (expression -> assignment_expression .)
    COMMA           reduce using rule 123 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 123 (expression -> assignment_expression .)
    WHEN            reduce using rule 123 (expression -> assignment_expression .)
    ELSIF           reduce using rule 123 (expression -> assignment_expression .)
    ELSE            reduce using rule 123 (expression -> assignment_expression .)
    RBRACE          reduce using rule 123 (expression -> assignment_expression .)
    LBRACE          reduce using rule 123 (expression -> assignment_expression .)
    ID              reduce using rule 123 (expression -> assignment_expression .)
    CASE            reduce using rule 123 (expression -> assignment_expression .)
    RETURN          reduce using rule 123 (expression -> assignment_expression .)
    BREAK           reduce using rule 123 (expression -> assignment_expression .)
    NEXT            reduce using rule 123 (expression -> assignment_expression .)
    UNDERSCORE      reduce using rule 123 (expression -> assignment_expression .)
    ASTERISK        reduce using rule 123 (expression -> assignment_expression .)
    IF              reduce using rule 123 (expression -> assignment_expression .)
    UNLESS          reduce using rule 123 (expression -> assignment_expression .)
    WHILE           reduce using rule 123 (expression -> assignment_expression .)
    UNTIL           reduce using rule 123 (expression -> assignment_expression .)
    LOOP            reduce using rule 123 (expression -> assignment_expression .)
    LPAREN          reduce using rule 123 (expression -> assignment_expression .)
    LBRACKET        reduce using rule 123 (expression -> assignment_expression .)
    INTNUMBER       reduce using rule 123 (expression -> assignment_expression .)
    FLOATNUMBER     reduce using rule 123 (expression -> assignment_expression .)
    CHAR            reduce using rule 123 (expression -> assignment_expression .)
    TRUE            reduce using rule 123 (expression -> assignment_expression .)
    FALSE           reduce using rule 123 (expression -> assignment_expression .)
    STRING          reduce using rule 123 (expression -> assignment_expression .)
    PLUS            reduce using rule 123 (expression -> assignment_expression .)
    MINUS           reduce using rule 123 (expression -> assignment_expression .)
    EXCLAMATION     reduce using rule 123 (expression -> assignment_expression .)
    TILDE           reduce using rule 123 (expression -> assignment_expression .)
    TCOLON          reduce using rule 123 (expression -> assignment_expression .)
    INTERP_END      reduce using rule 123 (expression -> assignment_expression .)


state 35

    (132) ternary_expression -> logical_or_expression . QMARK expression TCOLON expression
    (133) ternary_expression -> logical_or_expression .
    (135) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           shift and go to state 98
    CONSTANT        reduce using rule 133 (ternary_expression -> logical_or_expression .)
    MODULE          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    DEF             reduce using rule 133 (ternary_expression -> logical_or_expression .)
    $end            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    DOT             reduce using rule 133 (ternary_expression -> logical_or_expression .)
    NEWLINE         reduce using rule 133 (ternary_expression -> logical_or_expression .)
    END             reduce using rule 133 (ternary_expression -> logical_or_expression .)
    RPAREN          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    COMMA           reduce using rule 133 (ternary_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 133 (ternary_expression -> logical_or_expression .)
    WHEN            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    ELSIF           reduce using rule 133 (ternary_expression -> logical_or_expression .)
    ELSE            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    RBRACE          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    LBRACE          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    ID              reduce using rule 133 (ternary_expression -> logical_or_expression .)
    CASE            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    RETURN          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    BREAK           reduce using rule 133 (ternary_expression -> logical_or_expression .)
    NEXT            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    UNDERSCORE      reduce using rule 133 (ternary_expression -> logical_or_expression .)
    ASTERISK        reduce using rule 133 (ternary_expression -> logical_or_expression .)
    IF              reduce using rule 133 (ternary_expression -> logical_or_expression .)
    UNLESS          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    WHILE           reduce using rule 133 (ternary_expression -> logical_or_expression .)
    UNTIL           reduce using rule 133 (ternary_expression -> logical_or_expression .)
    LOOP            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    LPAREN          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    LBRACKET        reduce using rule 133 (ternary_expression -> logical_or_expression .)
    INTNUMBER       reduce using rule 133 (ternary_expression -> logical_or_expression .)
    FLOATNUMBER     reduce using rule 133 (ternary_expression -> logical_or_expression .)
    CHAR            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    TRUE            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    FALSE           reduce using rule 133 (ternary_expression -> logical_or_expression .)
    STRING          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    PLUS            reduce using rule 133 (ternary_expression -> logical_or_expression .)
    MINUS           reduce using rule 133 (ternary_expression -> logical_or_expression .)
    EXCLAMATION     reduce using rule 133 (ternary_expression -> logical_or_expression .)
    TILDE           reduce using rule 133 (ternary_expression -> logical_or_expression .)
    TCOLON          reduce using rule 133 (ternary_expression -> logical_or_expression .)
    INTERP_END      reduce using rule 133 (ternary_expression -> logical_or_expression .)
    OR              shift and go to state 99


state 36

    (124) assignment_expression -> assignment_target . ASSIGN expression
    (125) assignment_expression -> assignment_target . PLUS_ASSIGN expression
    (126) assignment_expression -> assignment_target . MINUS_ASSIGN expression
    (127) assignment_expression -> assignment_target . MULTI_ASSIGN expression
    (128) assignment_expression -> assignment_target . DIVIDE_ASSIGN expression

    ASSIGN          shift and go to state 100
    PLUS_ASSIGN     shift and go to state 101
    MINUS_ASSIGN    shift and go to state 102
    MULTI_ASSIGN    shift and go to state 103
    DIVIDE_ASSIGN   shift and go to state 104


state 37

    (134) logical_or_expression -> logical_and_expression .
    (137) logical_and_expression -> logical_and_expression . AND equality_expression

    QMARK           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    CONSTANT        reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    MODULE          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    DEF             reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    DOT             reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    NEWLINE         reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    END             reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    WHEN            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    ELSIF           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    ELSE            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    LBRACE          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    ID              reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    CASE            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    NEXT            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    UNDERSCORE      reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    ASTERISK        reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    UNLESS          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    WHILE           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    UNTIL           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    LOOP            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    LBRACKET        reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    INTNUMBER       reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    FLOATNUMBER     reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    TRUE            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    FALSE           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    STRING          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    PLUS            reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    EXCLAMATION     reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    TILDE           reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    TCOLON          reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    INTERP_END      reduce using rule 134 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 105


state 38

    (129) assignment_target -> postfix_expression .
    (160) unary_expression -> postfix_expression .

    ASSIGN          reduce using rule 129 (assignment_target -> postfix_expression .)
    PLUS_ASSIGN     reduce using rule 129 (assignment_target -> postfix_expression .)
    MINUS_ASSIGN    reduce using rule 129 (assignment_target -> postfix_expression .)
    MULTI_ASSIGN    reduce using rule 129 (assignment_target -> postfix_expression .)
    DIVIDE_ASSIGN   reduce using rule 129 (assignment_target -> postfix_expression .)
    POTENCIACAO     reduce using rule 160 (unary_expression -> postfix_expression .)
    MULTI           reduce using rule 160 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 160 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 160 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 160 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 160 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 160 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 160 (unary_expression -> postfix_expression .)
    GREATER_EQUAL   reduce using rule 160 (unary_expression -> postfix_expression .)
    LESS_EQUAL      reduce using rule 160 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 160 (unary_expression -> postfix_expression .)
    NOT_EQUAL       reduce using rule 160 (unary_expression -> postfix_expression .)
    TIPO_EQUAL      reduce using rule 160 (unary_expression -> postfix_expression .)
    AND             reduce using rule 160 (unary_expression -> postfix_expression .)
    QMARK           reduce using rule 160 (unary_expression -> postfix_expression .)
    OR              reduce using rule 160 (unary_expression -> postfix_expression .)
    CONSTANT        reduce using rule 160 (unary_expression -> postfix_expression .)
    MODULE          reduce using rule 160 (unary_expression -> postfix_expression .)
    DEF             reduce using rule 160 (unary_expression -> postfix_expression .)
    $end            reduce using rule 160 (unary_expression -> postfix_expression .)
    DOT             reduce using rule 160 (unary_expression -> postfix_expression .)
    NEWLINE         reduce using rule 160 (unary_expression -> postfix_expression .)
    END             reduce using rule 160 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 160 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 160 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 160 (unary_expression -> postfix_expression .)
    WHEN            reduce using rule 160 (unary_expression -> postfix_expression .)
    ELSIF           reduce using rule 160 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 160 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 160 (unary_expression -> postfix_expression .)
    LBRACE          reduce using rule 160 (unary_expression -> postfix_expression .)
    ID              reduce using rule 160 (unary_expression -> postfix_expression .)
    CASE            reduce using rule 160 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 160 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 160 (unary_expression -> postfix_expression .)
    NEXT            reduce using rule 160 (unary_expression -> postfix_expression .)
    UNDERSCORE      reduce using rule 160 (unary_expression -> postfix_expression .)
    ASTERISK        reduce using rule 160 (unary_expression -> postfix_expression .)
    IF              reduce using rule 160 (unary_expression -> postfix_expression .)
    UNLESS          reduce using rule 160 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 160 (unary_expression -> postfix_expression .)
    UNTIL           reduce using rule 160 (unary_expression -> postfix_expression .)
    LOOP            reduce using rule 160 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 160 (unary_expression -> postfix_expression .)
    LBRACKET        reduce using rule 160 (unary_expression -> postfix_expression .)
    INTNUMBER       reduce using rule 160 (unary_expression -> postfix_expression .)
    FLOATNUMBER     reduce using rule 160 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 160 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 160 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 160 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 160 (unary_expression -> postfix_expression .)
    EXCLAMATION     reduce using rule 160 (unary_expression -> postfix_expression .)
    TILDE           reduce using rule 160 (unary_expression -> postfix_expression .)
    TCOLON          reduce using rule 160 (unary_expression -> postfix_expression .)
    INTERP_END      reduce using rule 160 (unary_expression -> postfix_expression .)


state 39

    (130) assignment_target -> UNDERSCORE .

    ASSIGN          reduce using rule 130 (assignment_target -> UNDERSCORE .)
    PLUS_ASSIGN     reduce using rule 130 (assignment_target -> UNDERSCORE .)
    MINUS_ASSIGN    reduce using rule 130 (assignment_target -> UNDERSCORE .)
    MULTI_ASSIGN    reduce using rule 130 (assignment_target -> UNDERSCORE .)
    DIVIDE_ASSIGN   reduce using rule 130 (assignment_target -> UNDERSCORE .)


state 40

    (131) assignment_target -> ASTERISK . assignment_target
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    assignment_target              shift and go to state 106
    postfix_expression             shift and go to state 107
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 41

    (136) logical_and_expression -> equality_expression .
    (139) equality_expression -> equality_expression . EQUAL relational_expression
    (140) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (141) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 136 (logical_and_expression -> equality_expression .)
    QMARK           reduce using rule 136 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 136 (logical_and_expression -> equality_expression .)
    CONSTANT        reduce using rule 136 (logical_and_expression -> equality_expression .)
    MODULE          reduce using rule 136 (logical_and_expression -> equality_expression .)
    DEF             reduce using rule 136 (logical_and_expression -> equality_expression .)
    $end            reduce using rule 136 (logical_and_expression -> equality_expression .)
    DOT             reduce using rule 136 (logical_and_expression -> equality_expression .)
    NEWLINE         reduce using rule 136 (logical_and_expression -> equality_expression .)
    END             reduce using rule 136 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 136 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 136 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 136 (logical_and_expression -> equality_expression .)
    WHEN            reduce using rule 136 (logical_and_expression -> equality_expression .)
    ELSIF           reduce using rule 136 (logical_and_expression -> equality_expression .)
    ELSE            reduce using rule 136 (logical_and_expression -> equality_expression .)
    RBRACE          reduce using rule 136 (logical_and_expression -> equality_expression .)
    LBRACE          reduce using rule 136 (logical_and_expression -> equality_expression .)
    ID              reduce using rule 136 (logical_and_expression -> equality_expression .)
    CASE            reduce using rule 136 (logical_and_expression -> equality_expression .)
    RETURN          reduce using rule 136 (logical_and_expression -> equality_expression .)
    BREAK           reduce using rule 136 (logical_and_expression -> equality_expression .)
    NEXT            reduce using rule 136 (logical_and_expression -> equality_expression .)
    UNDERSCORE      reduce using rule 136 (logical_and_expression -> equality_expression .)
    ASTERISK        reduce using rule 136 (logical_and_expression -> equality_expression .)
    IF              reduce using rule 136 (logical_and_expression -> equality_expression .)
    UNLESS          reduce using rule 136 (logical_and_expression -> equality_expression .)
    WHILE           reduce using rule 136 (logical_and_expression -> equality_expression .)
    UNTIL           reduce using rule 136 (logical_and_expression -> equality_expression .)
    LOOP            reduce using rule 136 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 136 (logical_and_expression -> equality_expression .)
    LBRACKET        reduce using rule 136 (logical_and_expression -> equality_expression .)
    INTNUMBER       reduce using rule 136 (logical_and_expression -> equality_expression .)
    FLOATNUMBER     reduce using rule 136 (logical_and_expression -> equality_expression .)
    CHAR            reduce using rule 136 (logical_and_expression -> equality_expression .)
    TRUE            reduce using rule 136 (logical_and_expression -> equality_expression .)
    FALSE           reduce using rule 136 (logical_and_expression -> equality_expression .)
    STRING          reduce using rule 136 (logical_and_expression -> equality_expression .)
    PLUS            reduce using rule 136 (logical_and_expression -> equality_expression .)
    MINUS           reduce using rule 136 (logical_and_expression -> equality_expression .)
    EXCLAMATION     reduce using rule 136 (logical_and_expression -> equality_expression .)
    TILDE           reduce using rule 136 (logical_and_expression -> equality_expression .)
    TCOLON          reduce using rule 136 (logical_and_expression -> equality_expression .)
    INTERP_END      reduce using rule 136 (logical_and_expression -> equality_expression .)
    EQUAL           shift and go to state 108
    NOT_EQUAL       shift and go to state 109
    TIPO_EQUAL      shift and go to state 110


state 42

    (165) postfix_expression -> primary_expression . postfix_suffixes
    (166) postfix_suffixes -> . postfix_suffix postfix_suffixes
    (167) postfix_suffixes -> . postfix_suffix
    (168) postfix_suffix -> . LBRACKET expression RBRACKET
    (169) postfix_suffix -> . DOTDOT primary_expression
    (170) postfix_suffix -> . DOTDOTDOT primary_expression

    LBRACKET        shift and go to state 113
    DOTDOT          shift and go to state 114
    DOTDOTDOT       shift and go to state 115

    postfix_suffixes               shift and go to state 111
    postfix_suffix                 shift and go to state 112

state 43

    (138) equality_expression -> relational_expression .
    (143) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (144) relational_expression -> relational_expression . LESS_THAN additive_expression
    (145) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (146) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 138 (equality_expression -> relational_expression .)
    NOT_EQUAL       reduce using rule 138 (equality_expression -> relational_expression .)
    TIPO_EQUAL      reduce using rule 138 (equality_expression -> relational_expression .)
    AND             reduce using rule 138 (equality_expression -> relational_expression .)
    QMARK           reduce using rule 138 (equality_expression -> relational_expression .)
    OR              reduce using rule 138 (equality_expression -> relational_expression .)
    CONSTANT        reduce using rule 138 (equality_expression -> relational_expression .)
    MODULE          reduce using rule 138 (equality_expression -> relational_expression .)
    DEF             reduce using rule 138 (equality_expression -> relational_expression .)
    $end            reduce using rule 138 (equality_expression -> relational_expression .)
    DOT             reduce using rule 138 (equality_expression -> relational_expression .)
    NEWLINE         reduce using rule 138 (equality_expression -> relational_expression .)
    END             reduce using rule 138 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 138 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 138 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 138 (equality_expression -> relational_expression .)
    WHEN            reduce using rule 138 (equality_expression -> relational_expression .)
    ELSIF           reduce using rule 138 (equality_expression -> relational_expression .)
    ELSE            reduce using rule 138 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 138 (equality_expression -> relational_expression .)
    LBRACE          reduce using rule 138 (equality_expression -> relational_expression .)
    ID              reduce using rule 138 (equality_expression -> relational_expression .)
    CASE            reduce using rule 138 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 138 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 138 (equality_expression -> relational_expression .)
    NEXT            reduce using rule 138 (equality_expression -> relational_expression .)
    UNDERSCORE      reduce using rule 138 (equality_expression -> relational_expression .)
    ASTERISK        reduce using rule 138 (equality_expression -> relational_expression .)
    IF              reduce using rule 138 (equality_expression -> relational_expression .)
    UNLESS          reduce using rule 138 (equality_expression -> relational_expression .)
    WHILE           reduce using rule 138 (equality_expression -> relational_expression .)
    UNTIL           reduce using rule 138 (equality_expression -> relational_expression .)
    LOOP            reduce using rule 138 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 138 (equality_expression -> relational_expression .)
    LBRACKET        reduce using rule 138 (equality_expression -> relational_expression .)
    INTNUMBER       reduce using rule 138 (equality_expression -> relational_expression .)
    FLOATNUMBER     reduce using rule 138 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 138 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 138 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 138 (equality_expression -> relational_expression .)
    STRING          reduce using rule 138 (equality_expression -> relational_expression .)
    PLUS            reduce using rule 138 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 138 (equality_expression -> relational_expression .)
    EXCLAMATION     reduce using rule 138 (equality_expression -> relational_expression .)
    TILDE           reduce using rule 138 (equality_expression -> relational_expression .)
    TCOLON          reduce using rule 138 (equality_expression -> relational_expression .)
    INTERP_END      reduce using rule 138 (equality_expression -> relational_expression .)
    GREATER_THAN    shift and go to state 116
    LESS_THAN       shift and go to state 117
    GREATER_EQUAL   shift and go to state 118
    LESS_EQUAL      shift and go to state 119


state 44

    (161) primary_expression -> expression_between_parentesis .

    LBRACKET        reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    DOTDOT          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    DOTDOTDOT       reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    ASSIGN          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    PLUS_ASSIGN     reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    MINUS_ASSIGN    reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    MULTI_ASSIGN    reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    DIVIDE_ASSIGN   reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    POTENCIACAO     reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    MULTI           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    DIVIDE          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    MODULO          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    PLUS            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    MINUS           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    GREATER_THAN    reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    LESS_THAN       reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    GREATER_EQUAL   reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    LESS_EQUAL      reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    EQUAL           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    NOT_EQUAL       reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    TIPO_EQUAL      reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    AND             reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    QMARK           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    OR              reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    CONSTANT        reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    MODULE          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    DEF             reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    $end            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    DOT             reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    NEWLINE         reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    END             reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    RPAREN          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    COMMA           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    RBRACKET        reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    WHEN            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    ELSIF           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    ELSE            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    RBRACE          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    LBRACE          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    ID              reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    CASE            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    RETURN          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    BREAK           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    NEXT            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    UNDERSCORE      reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    ASTERISK        reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    IF              reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    UNLESS          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    WHILE           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    UNTIL           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    LOOP            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    LPAREN          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    INTNUMBER       reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    FLOATNUMBER     reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    CHAR            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    TRUE            reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    FALSE           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    STRING          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    EXCLAMATION     reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    TILDE           reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    TCOLON          reduce using rule 161 (primary_expression -> expression_between_parentesis .)
    INTERP_END      reduce using rule 161 (primary_expression -> expression_between_parentesis .)


state 45

    (162) primary_expression -> array_literal .

    LBRACKET        reduce using rule 162 (primary_expression -> array_literal .)
    DOTDOT          reduce using rule 162 (primary_expression -> array_literal .)
    DOTDOTDOT       reduce using rule 162 (primary_expression -> array_literal .)
    ASSIGN          reduce using rule 162 (primary_expression -> array_literal .)
    PLUS_ASSIGN     reduce using rule 162 (primary_expression -> array_literal .)
    MINUS_ASSIGN    reduce using rule 162 (primary_expression -> array_literal .)
    MULTI_ASSIGN    reduce using rule 162 (primary_expression -> array_literal .)
    DIVIDE_ASSIGN   reduce using rule 162 (primary_expression -> array_literal .)
    POTENCIACAO     reduce using rule 162 (primary_expression -> array_literal .)
    MULTI           reduce using rule 162 (primary_expression -> array_literal .)
    DIVIDE          reduce using rule 162 (primary_expression -> array_literal .)
    MODULO          reduce using rule 162 (primary_expression -> array_literal .)
    PLUS            reduce using rule 162 (primary_expression -> array_literal .)
    MINUS           reduce using rule 162 (primary_expression -> array_literal .)
    GREATER_THAN    reduce using rule 162 (primary_expression -> array_literal .)
    LESS_THAN       reduce using rule 162 (primary_expression -> array_literal .)
    GREATER_EQUAL   reduce using rule 162 (primary_expression -> array_literal .)
    LESS_EQUAL      reduce using rule 162 (primary_expression -> array_literal .)
    EQUAL           reduce using rule 162 (primary_expression -> array_literal .)
    NOT_EQUAL       reduce using rule 162 (primary_expression -> array_literal .)
    TIPO_EQUAL      reduce using rule 162 (primary_expression -> array_literal .)
    AND             reduce using rule 162 (primary_expression -> array_literal .)
    QMARK           reduce using rule 162 (primary_expression -> array_literal .)
    OR              reduce using rule 162 (primary_expression -> array_literal .)
    CONSTANT        reduce using rule 162 (primary_expression -> array_literal .)
    MODULE          reduce using rule 162 (primary_expression -> array_literal .)
    DEF             reduce using rule 162 (primary_expression -> array_literal .)
    $end            reduce using rule 162 (primary_expression -> array_literal .)
    DOT             reduce using rule 162 (primary_expression -> array_literal .)
    NEWLINE         reduce using rule 162 (primary_expression -> array_literal .)
    END             reduce using rule 162 (primary_expression -> array_literal .)
    RPAREN          reduce using rule 162 (primary_expression -> array_literal .)
    COMMA           reduce using rule 162 (primary_expression -> array_literal .)
    RBRACKET        reduce using rule 162 (primary_expression -> array_literal .)
    WHEN            reduce using rule 162 (primary_expression -> array_literal .)
    ELSIF           reduce using rule 162 (primary_expression -> array_literal .)
    ELSE            reduce using rule 162 (primary_expression -> array_literal .)
    RBRACE          reduce using rule 162 (primary_expression -> array_literal .)
    LBRACE          reduce using rule 162 (primary_expression -> array_literal .)
    ID              reduce using rule 162 (primary_expression -> array_literal .)
    CASE            reduce using rule 162 (primary_expression -> array_literal .)
    RETURN          reduce using rule 162 (primary_expression -> array_literal .)
    BREAK           reduce using rule 162 (primary_expression -> array_literal .)
    NEXT            reduce using rule 162 (primary_expression -> array_literal .)
    UNDERSCORE      reduce using rule 162 (primary_expression -> array_literal .)
    ASTERISK        reduce using rule 162 (primary_expression -> array_literal .)
    IF              reduce using rule 162 (primary_expression -> array_literal .)
    UNLESS          reduce using rule 162 (primary_expression -> array_literal .)
    WHILE           reduce using rule 162 (primary_expression -> array_literal .)
    UNTIL           reduce using rule 162 (primary_expression -> array_literal .)
    LOOP            reduce using rule 162 (primary_expression -> array_literal .)
    LPAREN          reduce using rule 162 (primary_expression -> array_literal .)
    INTNUMBER       reduce using rule 162 (primary_expression -> array_literal .)
    FLOATNUMBER     reduce using rule 162 (primary_expression -> array_literal .)
    CHAR            reduce using rule 162 (primary_expression -> array_literal .)
    TRUE            reduce using rule 162 (primary_expression -> array_literal .)
    FALSE           reduce using rule 162 (primary_expression -> array_literal .)
    STRING          reduce using rule 162 (primary_expression -> array_literal .)
    EXCLAMATION     reduce using rule 162 (primary_expression -> array_literal .)
    TILDE           reduce using rule 162 (primary_expression -> array_literal .)
    TCOLON          reduce using rule 162 (primary_expression -> array_literal .)
    INTERP_END      reduce using rule 162 (primary_expression -> array_literal .)


state 46

    (163) primary_expression -> literal .

    LBRACKET        reduce using rule 163 (primary_expression -> literal .)
    DOTDOT          reduce using rule 163 (primary_expression -> literal .)
    DOTDOTDOT       reduce using rule 163 (primary_expression -> literal .)
    ASSIGN          reduce using rule 163 (primary_expression -> literal .)
    PLUS_ASSIGN     reduce using rule 163 (primary_expression -> literal .)
    MINUS_ASSIGN    reduce using rule 163 (primary_expression -> literal .)
    MULTI_ASSIGN    reduce using rule 163 (primary_expression -> literal .)
    DIVIDE_ASSIGN   reduce using rule 163 (primary_expression -> literal .)
    POTENCIACAO     reduce using rule 163 (primary_expression -> literal .)
    MULTI           reduce using rule 163 (primary_expression -> literal .)
    DIVIDE          reduce using rule 163 (primary_expression -> literal .)
    MODULO          reduce using rule 163 (primary_expression -> literal .)
    PLUS            reduce using rule 163 (primary_expression -> literal .)
    MINUS           reduce using rule 163 (primary_expression -> literal .)
    GREATER_THAN    reduce using rule 163 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 163 (primary_expression -> literal .)
    GREATER_EQUAL   reduce using rule 163 (primary_expression -> literal .)
    LESS_EQUAL      reduce using rule 163 (primary_expression -> literal .)
    EQUAL           reduce using rule 163 (primary_expression -> literal .)
    NOT_EQUAL       reduce using rule 163 (primary_expression -> literal .)
    TIPO_EQUAL      reduce using rule 163 (primary_expression -> literal .)
    AND             reduce using rule 163 (primary_expression -> literal .)
    QMARK           reduce using rule 163 (primary_expression -> literal .)
    OR              reduce using rule 163 (primary_expression -> literal .)
    CONSTANT        reduce using rule 163 (primary_expression -> literal .)
    MODULE          reduce using rule 163 (primary_expression -> literal .)
    DEF             reduce using rule 163 (primary_expression -> literal .)
    $end            reduce using rule 163 (primary_expression -> literal .)
    DOT             reduce using rule 163 (primary_expression -> literal .)
    NEWLINE         reduce using rule 163 (primary_expression -> literal .)
    END             reduce using rule 163 (primary_expression -> literal .)
    RPAREN          reduce using rule 163 (primary_expression -> literal .)
    COMMA           reduce using rule 163 (primary_expression -> literal .)
    RBRACKET        reduce using rule 163 (primary_expression -> literal .)
    WHEN            reduce using rule 163 (primary_expression -> literal .)
    ELSIF           reduce using rule 163 (primary_expression -> literal .)
    ELSE            reduce using rule 163 (primary_expression -> literal .)
    RBRACE          reduce using rule 163 (primary_expression -> literal .)
    LBRACE          reduce using rule 163 (primary_expression -> literal .)
    ID              reduce using rule 163 (primary_expression -> literal .)
    CASE            reduce using rule 163 (primary_expression -> literal .)
    RETURN          reduce using rule 163 (primary_expression -> literal .)
    BREAK           reduce using rule 163 (primary_expression -> literal .)
    NEXT            reduce using rule 163 (primary_expression -> literal .)
    UNDERSCORE      reduce using rule 163 (primary_expression -> literal .)
    ASTERISK        reduce using rule 163 (primary_expression -> literal .)
    IF              reduce using rule 163 (primary_expression -> literal .)
    UNLESS          reduce using rule 163 (primary_expression -> literal .)
    WHILE           reduce using rule 163 (primary_expression -> literal .)
    UNTIL           reduce using rule 163 (primary_expression -> literal .)
    LOOP            reduce using rule 163 (primary_expression -> literal .)
    LPAREN          reduce using rule 163 (primary_expression -> literal .)
    INTNUMBER       reduce using rule 163 (primary_expression -> literal .)
    FLOATNUMBER     reduce using rule 163 (primary_expression -> literal .)
    CHAR            reduce using rule 163 (primary_expression -> literal .)
    TRUE            reduce using rule 163 (primary_expression -> literal .)
    FALSE           reduce using rule 163 (primary_expression -> literal .)
    STRING          reduce using rule 163 (primary_expression -> literal .)
    EXCLAMATION     reduce using rule 163 (primary_expression -> literal .)
    TILDE           reduce using rule 163 (primary_expression -> literal .)
    TCOLON          reduce using rule 163 (primary_expression -> literal .)
    INTERP_END      reduce using rule 163 (primary_expression -> literal .)


state 47

    (164) primary_expression -> ID .

    LBRACKET        reduce using rule 164 (primary_expression -> ID .)
    DOTDOT          reduce using rule 164 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 164 (primary_expression -> ID .)
    ASSIGN          reduce using rule 164 (primary_expression -> ID .)
    PLUS_ASSIGN     reduce using rule 164 (primary_expression -> ID .)
    MINUS_ASSIGN    reduce using rule 164 (primary_expression -> ID .)
    MULTI_ASSIGN    reduce using rule 164 (primary_expression -> ID .)
    DIVIDE_ASSIGN   reduce using rule 164 (primary_expression -> ID .)
    POTENCIACAO     reduce using rule 164 (primary_expression -> ID .)
    MULTI           reduce using rule 164 (primary_expression -> ID .)
    DIVIDE          reduce using rule 164 (primary_expression -> ID .)
    MODULO          reduce using rule 164 (primary_expression -> ID .)
    PLUS            reduce using rule 164 (primary_expression -> ID .)
    MINUS           reduce using rule 164 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 164 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 164 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 164 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 164 (primary_expression -> ID .)
    EQUAL           reduce using rule 164 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 164 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 164 (primary_expression -> ID .)
    AND             reduce using rule 164 (primary_expression -> ID .)
    QMARK           reduce using rule 164 (primary_expression -> ID .)
    OR              reduce using rule 164 (primary_expression -> ID .)
    CONSTANT        reduce using rule 164 (primary_expression -> ID .)
    MODULE          reduce using rule 164 (primary_expression -> ID .)
    DEF             reduce using rule 164 (primary_expression -> ID .)
    $end            reduce using rule 164 (primary_expression -> ID .)
    DOT             reduce using rule 164 (primary_expression -> ID .)
    NEWLINE         reduce using rule 164 (primary_expression -> ID .)
    END             reduce using rule 164 (primary_expression -> ID .)
    RPAREN          reduce using rule 164 (primary_expression -> ID .)
    COMMA           reduce using rule 164 (primary_expression -> ID .)
    RBRACKET        reduce using rule 164 (primary_expression -> ID .)
    WHEN            reduce using rule 164 (primary_expression -> ID .)
    ELSIF           reduce using rule 164 (primary_expression -> ID .)
    ELSE            reduce using rule 164 (primary_expression -> ID .)
    RBRACE          reduce using rule 164 (primary_expression -> ID .)
    LBRACE          reduce using rule 164 (primary_expression -> ID .)
    ID              reduce using rule 164 (primary_expression -> ID .)
    CASE            reduce using rule 164 (primary_expression -> ID .)
    RETURN          reduce using rule 164 (primary_expression -> ID .)
    BREAK           reduce using rule 164 (primary_expression -> ID .)
    NEXT            reduce using rule 164 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 164 (primary_expression -> ID .)
    ASTERISK        reduce using rule 164 (primary_expression -> ID .)
    IF              reduce using rule 164 (primary_expression -> ID .)
    UNLESS          reduce using rule 164 (primary_expression -> ID .)
    WHILE           reduce using rule 164 (primary_expression -> ID .)
    UNTIL           reduce using rule 164 (primary_expression -> ID .)
    LOOP            reduce using rule 164 (primary_expression -> ID .)
    LPAREN          reduce using rule 164 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 164 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 164 (primary_expression -> ID .)
    CHAR            reduce using rule 164 (primary_expression -> ID .)
    TRUE            reduce using rule 164 (primary_expression -> ID .)
    FALSE           reduce using rule 164 (primary_expression -> ID .)
    STRING          reduce using rule 164 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 164 (primary_expression -> ID .)
    TILDE           reduce using rule 164 (primary_expression -> ID .)
    TCOLON          reduce using rule 164 (primary_expression -> ID .)
    INTERP_END      reduce using rule 164 (primary_expression -> ID .)


state 48

    (142) relational_expression -> additive_expression .
    (148) additive_expression -> additive_expression . PLUS multiplicative_expression
    (149) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GREATER_THAN    reduce using rule 142 (relational_expression -> additive_expression .)
    LESS_THAN       reduce using rule 142 (relational_expression -> additive_expression .)
    GREATER_EQUAL   reduce using rule 142 (relational_expression -> additive_expression .)
    LESS_EQUAL      reduce using rule 142 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 142 (relational_expression -> additive_expression .)
    NOT_EQUAL       reduce using rule 142 (relational_expression -> additive_expression .)
    TIPO_EQUAL      reduce using rule 142 (relational_expression -> additive_expression .)
    AND             reduce using rule 142 (relational_expression -> additive_expression .)
    QMARK           reduce using rule 142 (relational_expression -> additive_expression .)
    OR              reduce using rule 142 (relational_expression -> additive_expression .)
    CONSTANT        reduce using rule 142 (relational_expression -> additive_expression .)
    MODULE          reduce using rule 142 (relational_expression -> additive_expression .)
    DEF             reduce using rule 142 (relational_expression -> additive_expression .)
    $end            reduce using rule 142 (relational_expression -> additive_expression .)
    DOT             reduce using rule 142 (relational_expression -> additive_expression .)
    NEWLINE         reduce using rule 142 (relational_expression -> additive_expression .)
    END             reduce using rule 142 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 142 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 142 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 142 (relational_expression -> additive_expression .)
    WHEN            reduce using rule 142 (relational_expression -> additive_expression .)
    ELSIF           reduce using rule 142 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 142 (relational_expression -> additive_expression .)
    RBRACE          reduce using rule 142 (relational_expression -> additive_expression .)
    LBRACE          reduce using rule 142 (relational_expression -> additive_expression .)
    ID              reduce using rule 142 (relational_expression -> additive_expression .)
    CASE            reduce using rule 142 (relational_expression -> additive_expression .)
    RETURN          reduce using rule 142 (relational_expression -> additive_expression .)
    BREAK           reduce using rule 142 (relational_expression -> additive_expression .)
    NEXT            reduce using rule 142 (relational_expression -> additive_expression .)
    UNDERSCORE      reduce using rule 142 (relational_expression -> additive_expression .)
    ASTERISK        reduce using rule 142 (relational_expression -> additive_expression .)
    IF              reduce using rule 142 (relational_expression -> additive_expression .)
    UNLESS          reduce using rule 142 (relational_expression -> additive_expression .)
    WHILE           reduce using rule 142 (relational_expression -> additive_expression .)
    UNTIL           reduce using rule 142 (relational_expression -> additive_expression .)
    LOOP            reduce using rule 142 (relational_expression -> additive_expression .)
    LPAREN          reduce using rule 142 (relational_expression -> additive_expression .)
    LBRACKET        reduce using rule 142 (relational_expression -> additive_expression .)
    INTNUMBER       reduce using rule 142 (relational_expression -> additive_expression .)
    FLOATNUMBER     reduce using rule 142 (relational_expression -> additive_expression .)
    CHAR            reduce using rule 142 (relational_expression -> additive_expression .)
    TRUE            reduce using rule 142 (relational_expression -> additive_expression .)
    FALSE           reduce using rule 142 (relational_expression -> additive_expression .)
    STRING          reduce using rule 142 (relational_expression -> additive_expression .)
    EXCLAMATION     reduce using rule 142 (relational_expression -> additive_expression .)
    TILDE           reduce using rule 142 (relational_expression -> additive_expression .)
    TCOLON          reduce using rule 142 (relational_expression -> additive_expression .)
    INTERP_END      reduce using rule 142 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121

  ! PLUS            [ reduce using rule 142 (relational_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 142 (relational_expression -> additive_expression .) ]


state 49

    (171) expression_between_parentesis -> LPAREN . expression RPAREN
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 122
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 50

    (172) array_literal -> LBRACKET . opt_expression_list RBRACKET
    (75) opt_expression_list -> . expression_list
    (76) opt_expression_list -> . empty
    (77) expression_list -> . expression
    (78) expression_list -> . expression_list COMMA expression
    (175) empty -> .
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    RBRACKET        reduce using rule 175 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    opt_expression_list            shift and go to state 123
    expression_list                shift and go to state 124
    empty                          shift and go to state 125
    expression                     shift and go to state 126
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 51

    (60) literal -> INTNUMBER .

    LBRACKET        reduce using rule 60 (literal -> INTNUMBER .)
    DOTDOT          reduce using rule 60 (literal -> INTNUMBER .)
    DOTDOTDOT       reduce using rule 60 (literal -> INTNUMBER .)
    ASSIGN          reduce using rule 60 (literal -> INTNUMBER .)
    PLUS_ASSIGN     reduce using rule 60 (literal -> INTNUMBER .)
    MINUS_ASSIGN    reduce using rule 60 (literal -> INTNUMBER .)
    MULTI_ASSIGN    reduce using rule 60 (literal -> INTNUMBER .)
    DIVIDE_ASSIGN   reduce using rule 60 (literal -> INTNUMBER .)
    POTENCIACAO     reduce using rule 60 (literal -> INTNUMBER .)
    MULTI           reduce using rule 60 (literal -> INTNUMBER .)
    DIVIDE          reduce using rule 60 (literal -> INTNUMBER .)
    MODULO          reduce using rule 60 (literal -> INTNUMBER .)
    PLUS            reduce using rule 60 (literal -> INTNUMBER .)
    MINUS           reduce using rule 60 (literal -> INTNUMBER .)
    GREATER_THAN    reduce using rule 60 (literal -> INTNUMBER .)
    LESS_THAN       reduce using rule 60 (literal -> INTNUMBER .)
    GREATER_EQUAL   reduce using rule 60 (literal -> INTNUMBER .)
    LESS_EQUAL      reduce using rule 60 (literal -> INTNUMBER .)
    EQUAL           reduce using rule 60 (literal -> INTNUMBER .)
    NOT_EQUAL       reduce using rule 60 (literal -> INTNUMBER .)
    TIPO_EQUAL      reduce using rule 60 (literal -> INTNUMBER .)
    AND             reduce using rule 60 (literal -> INTNUMBER .)
    QMARK           reduce using rule 60 (literal -> INTNUMBER .)
    OR              reduce using rule 60 (literal -> INTNUMBER .)
    CONSTANT        reduce using rule 60 (literal -> INTNUMBER .)
    MODULE          reduce using rule 60 (literal -> INTNUMBER .)
    DEF             reduce using rule 60 (literal -> INTNUMBER .)
    $end            reduce using rule 60 (literal -> INTNUMBER .)
    DOT             reduce using rule 60 (literal -> INTNUMBER .)
    NEWLINE         reduce using rule 60 (literal -> INTNUMBER .)
    END             reduce using rule 60 (literal -> INTNUMBER .)
    RPAREN          reduce using rule 60 (literal -> INTNUMBER .)
    COMMA           reduce using rule 60 (literal -> INTNUMBER .)
    RBRACKET        reduce using rule 60 (literal -> INTNUMBER .)
    WHEN            reduce using rule 60 (literal -> INTNUMBER .)
    ELSIF           reduce using rule 60 (literal -> INTNUMBER .)
    ELSE            reduce using rule 60 (literal -> INTNUMBER .)
    RBRACE          reduce using rule 60 (literal -> INTNUMBER .)
    LBRACE          reduce using rule 60 (literal -> INTNUMBER .)
    ID              reduce using rule 60 (literal -> INTNUMBER .)
    CASE            reduce using rule 60 (literal -> INTNUMBER .)
    RETURN          reduce using rule 60 (literal -> INTNUMBER .)
    BREAK           reduce using rule 60 (literal -> INTNUMBER .)
    NEXT            reduce using rule 60 (literal -> INTNUMBER .)
    UNDERSCORE      reduce using rule 60 (literal -> INTNUMBER .)
    ASTERISK        reduce using rule 60 (literal -> INTNUMBER .)
    IF              reduce using rule 60 (literal -> INTNUMBER .)
    UNLESS          reduce using rule 60 (literal -> INTNUMBER .)
    WHILE           reduce using rule 60 (literal -> INTNUMBER .)
    UNTIL           reduce using rule 60 (literal -> INTNUMBER .)
    LOOP            reduce using rule 60 (literal -> INTNUMBER .)
    LPAREN          reduce using rule 60 (literal -> INTNUMBER .)
    INTNUMBER       reduce using rule 60 (literal -> INTNUMBER .)
    FLOATNUMBER     reduce using rule 60 (literal -> INTNUMBER .)
    CHAR            reduce using rule 60 (literal -> INTNUMBER .)
    TRUE            reduce using rule 60 (literal -> INTNUMBER .)
    FALSE           reduce using rule 60 (literal -> INTNUMBER .)
    STRING          reduce using rule 60 (literal -> INTNUMBER .)
    EXCLAMATION     reduce using rule 60 (literal -> INTNUMBER .)
    TILDE           reduce using rule 60 (literal -> INTNUMBER .)
    TCOLON          reduce using rule 60 (literal -> INTNUMBER .)
    INTERP_END      reduce using rule 60 (literal -> INTNUMBER .)


state 52

    (61) literal -> FLOATNUMBER .

    LBRACKET        reduce using rule 61 (literal -> FLOATNUMBER .)
    DOTDOT          reduce using rule 61 (literal -> FLOATNUMBER .)
    DOTDOTDOT       reduce using rule 61 (literal -> FLOATNUMBER .)
    ASSIGN          reduce using rule 61 (literal -> FLOATNUMBER .)
    PLUS_ASSIGN     reduce using rule 61 (literal -> FLOATNUMBER .)
    MINUS_ASSIGN    reduce using rule 61 (literal -> FLOATNUMBER .)
    MULTI_ASSIGN    reduce using rule 61 (literal -> FLOATNUMBER .)
    DIVIDE_ASSIGN   reduce using rule 61 (literal -> FLOATNUMBER .)
    POTENCIACAO     reduce using rule 61 (literal -> FLOATNUMBER .)
    MULTI           reduce using rule 61 (literal -> FLOATNUMBER .)
    DIVIDE          reduce using rule 61 (literal -> FLOATNUMBER .)
    MODULO          reduce using rule 61 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 61 (literal -> FLOATNUMBER .)
    MINUS           reduce using rule 61 (literal -> FLOATNUMBER .)
    GREATER_THAN    reduce using rule 61 (literal -> FLOATNUMBER .)
    LESS_THAN       reduce using rule 61 (literal -> FLOATNUMBER .)
    GREATER_EQUAL   reduce using rule 61 (literal -> FLOATNUMBER .)
    LESS_EQUAL      reduce using rule 61 (literal -> FLOATNUMBER .)
    EQUAL           reduce using rule 61 (literal -> FLOATNUMBER .)
    NOT_EQUAL       reduce using rule 61 (literal -> FLOATNUMBER .)
    TIPO_EQUAL      reduce using rule 61 (literal -> FLOATNUMBER .)
    AND             reduce using rule 61 (literal -> FLOATNUMBER .)
    QMARK           reduce using rule 61 (literal -> FLOATNUMBER .)
    OR              reduce using rule 61 (literal -> FLOATNUMBER .)
    CONSTANT        reduce using rule 61 (literal -> FLOATNUMBER .)
    MODULE          reduce using rule 61 (literal -> FLOATNUMBER .)
    DEF             reduce using rule 61 (literal -> FLOATNUMBER .)
    $end            reduce using rule 61 (literal -> FLOATNUMBER .)
    DOT             reduce using rule 61 (literal -> FLOATNUMBER .)
    NEWLINE         reduce using rule 61 (literal -> FLOATNUMBER .)
    END             reduce using rule 61 (literal -> FLOATNUMBER .)
    RPAREN          reduce using rule 61 (literal -> FLOATNUMBER .)
    COMMA           reduce using rule 61 (literal -> FLOATNUMBER .)
    RBRACKET        reduce using rule 61 (literal -> FLOATNUMBER .)
    WHEN            reduce using rule 61 (literal -> FLOATNUMBER .)
    ELSIF           reduce using rule 61 (literal -> FLOATNUMBER .)
    ELSE            reduce using rule 61 (literal -> FLOATNUMBER .)
    RBRACE          reduce using rule 61 (literal -> FLOATNUMBER .)
    LBRACE          reduce using rule 61 (literal -> FLOATNUMBER .)
    ID              reduce using rule 61 (literal -> FLOATNUMBER .)
    CASE            reduce using rule 61 (literal -> FLOATNUMBER .)
    RETURN          reduce using rule 61 (literal -> FLOATNUMBER .)
    BREAK           reduce using rule 61 (literal -> FLOATNUMBER .)
    NEXT            reduce using rule 61 (literal -> FLOATNUMBER .)
    UNDERSCORE      reduce using rule 61 (literal -> FLOATNUMBER .)
    ASTERISK        reduce using rule 61 (literal -> FLOATNUMBER .)
    IF              reduce using rule 61 (literal -> FLOATNUMBER .)
    UNLESS          reduce using rule 61 (literal -> FLOATNUMBER .)
    WHILE           reduce using rule 61 (literal -> FLOATNUMBER .)
    UNTIL           reduce using rule 61 (literal -> FLOATNUMBER .)
    LOOP            reduce using rule 61 (literal -> FLOATNUMBER .)
    LPAREN          reduce using rule 61 (literal -> FLOATNUMBER .)
    INTNUMBER       reduce using rule 61 (literal -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 61 (literal -> FLOATNUMBER .)
    CHAR            reduce using rule 61 (literal -> FLOATNUMBER .)
    TRUE            reduce using rule 61 (literal -> FLOATNUMBER .)
    FALSE           reduce using rule 61 (literal -> FLOATNUMBER .)
    STRING          reduce using rule 61 (literal -> FLOATNUMBER .)
    EXCLAMATION     reduce using rule 61 (literal -> FLOATNUMBER .)
    TILDE           reduce using rule 61 (literal -> FLOATNUMBER .)
    TCOLON          reduce using rule 61 (literal -> FLOATNUMBER .)
    INTERP_END      reduce using rule 61 (literal -> FLOATNUMBER .)


state 53

    (62) literal -> string_literal .

    LBRACKET        reduce using rule 62 (literal -> string_literal .)
    DOTDOT          reduce using rule 62 (literal -> string_literal .)
    DOTDOTDOT       reduce using rule 62 (literal -> string_literal .)
    ASSIGN          reduce using rule 62 (literal -> string_literal .)
    PLUS_ASSIGN     reduce using rule 62 (literal -> string_literal .)
    MINUS_ASSIGN    reduce using rule 62 (literal -> string_literal .)
    MULTI_ASSIGN    reduce using rule 62 (literal -> string_literal .)
    DIVIDE_ASSIGN   reduce using rule 62 (literal -> string_literal .)
    POTENCIACAO     reduce using rule 62 (literal -> string_literal .)
    MULTI           reduce using rule 62 (literal -> string_literal .)
    DIVIDE          reduce using rule 62 (literal -> string_literal .)
    MODULO          reduce using rule 62 (literal -> string_literal .)
    PLUS            reduce using rule 62 (literal -> string_literal .)
    MINUS           reduce using rule 62 (literal -> string_literal .)
    GREATER_THAN    reduce using rule 62 (literal -> string_literal .)
    LESS_THAN       reduce using rule 62 (literal -> string_literal .)
    GREATER_EQUAL   reduce using rule 62 (literal -> string_literal .)
    LESS_EQUAL      reduce using rule 62 (literal -> string_literal .)
    EQUAL           reduce using rule 62 (literal -> string_literal .)
    NOT_EQUAL       reduce using rule 62 (literal -> string_literal .)
    TIPO_EQUAL      reduce using rule 62 (literal -> string_literal .)
    AND             reduce using rule 62 (literal -> string_literal .)
    QMARK           reduce using rule 62 (literal -> string_literal .)
    OR              reduce using rule 62 (literal -> string_literal .)
    CONSTANT        reduce using rule 62 (literal -> string_literal .)
    MODULE          reduce using rule 62 (literal -> string_literal .)
    DEF             reduce using rule 62 (literal -> string_literal .)
    $end            reduce using rule 62 (literal -> string_literal .)
    DOT             reduce using rule 62 (literal -> string_literal .)
    NEWLINE         reduce using rule 62 (literal -> string_literal .)
    END             reduce using rule 62 (literal -> string_literal .)
    RPAREN          reduce using rule 62 (literal -> string_literal .)
    COMMA           reduce using rule 62 (literal -> string_literal .)
    RBRACKET        reduce using rule 62 (literal -> string_literal .)
    WHEN            reduce using rule 62 (literal -> string_literal .)
    ELSIF           reduce using rule 62 (literal -> string_literal .)
    ELSE            reduce using rule 62 (literal -> string_literal .)
    RBRACE          reduce using rule 62 (literal -> string_literal .)
    LBRACE          reduce using rule 62 (literal -> string_literal .)
    ID              reduce using rule 62 (literal -> string_literal .)
    CASE            reduce using rule 62 (literal -> string_literal .)
    RETURN          reduce using rule 62 (literal -> string_literal .)
    BREAK           reduce using rule 62 (literal -> string_literal .)
    NEXT            reduce using rule 62 (literal -> string_literal .)
    UNDERSCORE      reduce using rule 62 (literal -> string_literal .)
    ASTERISK        reduce using rule 62 (literal -> string_literal .)
    IF              reduce using rule 62 (literal -> string_literal .)
    UNLESS          reduce using rule 62 (literal -> string_literal .)
    WHILE           reduce using rule 62 (literal -> string_literal .)
    UNTIL           reduce using rule 62 (literal -> string_literal .)
    LOOP            reduce using rule 62 (literal -> string_literal .)
    LPAREN          reduce using rule 62 (literal -> string_literal .)
    INTNUMBER       reduce using rule 62 (literal -> string_literal .)
    FLOATNUMBER     reduce using rule 62 (literal -> string_literal .)
    CHAR            reduce using rule 62 (literal -> string_literal .)
    TRUE            reduce using rule 62 (literal -> string_literal .)
    FALSE           reduce using rule 62 (literal -> string_literal .)
    STRING          reduce using rule 62 (literal -> string_literal .)
    EXCLAMATION     reduce using rule 62 (literal -> string_literal .)
    TILDE           reduce using rule 62 (literal -> string_literal .)
    TCOLON          reduce using rule 62 (literal -> string_literal .)
    INTERP_END      reduce using rule 62 (literal -> string_literal .)


state 54

    (63) literal -> CHAR .

    LBRACKET        reduce using rule 63 (literal -> CHAR .)
    DOTDOT          reduce using rule 63 (literal -> CHAR .)
    DOTDOTDOT       reduce using rule 63 (literal -> CHAR .)
    ASSIGN          reduce using rule 63 (literal -> CHAR .)
    PLUS_ASSIGN     reduce using rule 63 (literal -> CHAR .)
    MINUS_ASSIGN    reduce using rule 63 (literal -> CHAR .)
    MULTI_ASSIGN    reduce using rule 63 (literal -> CHAR .)
    DIVIDE_ASSIGN   reduce using rule 63 (literal -> CHAR .)
    POTENCIACAO     reduce using rule 63 (literal -> CHAR .)
    MULTI           reduce using rule 63 (literal -> CHAR .)
    DIVIDE          reduce using rule 63 (literal -> CHAR .)
    MODULO          reduce using rule 63 (literal -> CHAR .)
    PLUS            reduce using rule 63 (literal -> CHAR .)
    MINUS           reduce using rule 63 (literal -> CHAR .)
    GREATER_THAN    reduce using rule 63 (literal -> CHAR .)
    LESS_THAN       reduce using rule 63 (literal -> CHAR .)
    GREATER_EQUAL   reduce using rule 63 (literal -> CHAR .)
    LESS_EQUAL      reduce using rule 63 (literal -> CHAR .)
    EQUAL           reduce using rule 63 (literal -> CHAR .)
    NOT_EQUAL       reduce using rule 63 (literal -> CHAR .)
    TIPO_EQUAL      reduce using rule 63 (literal -> CHAR .)
    AND             reduce using rule 63 (literal -> CHAR .)
    QMARK           reduce using rule 63 (literal -> CHAR .)
    OR              reduce using rule 63 (literal -> CHAR .)
    CONSTANT        reduce using rule 63 (literal -> CHAR .)
    MODULE          reduce using rule 63 (literal -> CHAR .)
    DEF             reduce using rule 63 (literal -> CHAR .)
    $end            reduce using rule 63 (literal -> CHAR .)
    DOT             reduce using rule 63 (literal -> CHAR .)
    NEWLINE         reduce using rule 63 (literal -> CHAR .)
    END             reduce using rule 63 (literal -> CHAR .)
    RPAREN          reduce using rule 63 (literal -> CHAR .)
    COMMA           reduce using rule 63 (literal -> CHAR .)
    RBRACKET        reduce using rule 63 (literal -> CHAR .)
    WHEN            reduce using rule 63 (literal -> CHAR .)
    ELSIF           reduce using rule 63 (literal -> CHAR .)
    ELSE            reduce using rule 63 (literal -> CHAR .)
    RBRACE          reduce using rule 63 (literal -> CHAR .)
    LBRACE          reduce using rule 63 (literal -> CHAR .)
    ID              reduce using rule 63 (literal -> CHAR .)
    CASE            reduce using rule 63 (literal -> CHAR .)
    RETURN          reduce using rule 63 (literal -> CHAR .)
    BREAK           reduce using rule 63 (literal -> CHAR .)
    NEXT            reduce using rule 63 (literal -> CHAR .)
    UNDERSCORE      reduce using rule 63 (literal -> CHAR .)
    ASTERISK        reduce using rule 63 (literal -> CHAR .)
    IF              reduce using rule 63 (literal -> CHAR .)
    UNLESS          reduce using rule 63 (literal -> CHAR .)
    WHILE           reduce using rule 63 (literal -> CHAR .)
    UNTIL           reduce using rule 63 (literal -> CHAR .)
    LOOP            reduce using rule 63 (literal -> CHAR .)
    LPAREN          reduce using rule 63 (literal -> CHAR .)
    INTNUMBER       reduce using rule 63 (literal -> CHAR .)
    FLOATNUMBER     reduce using rule 63 (literal -> CHAR .)
    CHAR            reduce using rule 63 (literal -> CHAR .)
    TRUE            reduce using rule 63 (literal -> CHAR .)
    FALSE           reduce using rule 63 (literal -> CHAR .)
    STRING          reduce using rule 63 (literal -> CHAR .)
    EXCLAMATION     reduce using rule 63 (literal -> CHAR .)
    TILDE           reduce using rule 63 (literal -> CHAR .)
    TCOLON          reduce using rule 63 (literal -> CHAR .)
    INTERP_END      reduce using rule 63 (literal -> CHAR .)


state 55

    (64) literal -> TRUE .

    LBRACKET        reduce using rule 64 (literal -> TRUE .)
    DOTDOT          reduce using rule 64 (literal -> TRUE .)
    DOTDOTDOT       reduce using rule 64 (literal -> TRUE .)
    ASSIGN          reduce using rule 64 (literal -> TRUE .)
    PLUS_ASSIGN     reduce using rule 64 (literal -> TRUE .)
    MINUS_ASSIGN    reduce using rule 64 (literal -> TRUE .)
    MULTI_ASSIGN    reduce using rule 64 (literal -> TRUE .)
    DIVIDE_ASSIGN   reduce using rule 64 (literal -> TRUE .)
    POTENCIACAO     reduce using rule 64 (literal -> TRUE .)
    MULTI           reduce using rule 64 (literal -> TRUE .)
    DIVIDE          reduce using rule 64 (literal -> TRUE .)
    MODULO          reduce using rule 64 (literal -> TRUE .)
    PLUS            reduce using rule 64 (literal -> TRUE .)
    MINUS           reduce using rule 64 (literal -> TRUE .)
    GREATER_THAN    reduce using rule 64 (literal -> TRUE .)
    LESS_THAN       reduce using rule 64 (literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 64 (literal -> TRUE .)
    LESS_EQUAL      reduce using rule 64 (literal -> TRUE .)
    EQUAL           reduce using rule 64 (literal -> TRUE .)
    NOT_EQUAL       reduce using rule 64 (literal -> TRUE .)
    TIPO_EQUAL      reduce using rule 64 (literal -> TRUE .)
    AND             reduce using rule 64 (literal -> TRUE .)
    QMARK           reduce using rule 64 (literal -> TRUE .)
    OR              reduce using rule 64 (literal -> TRUE .)
    CONSTANT        reduce using rule 64 (literal -> TRUE .)
    MODULE          reduce using rule 64 (literal -> TRUE .)
    DEF             reduce using rule 64 (literal -> TRUE .)
    $end            reduce using rule 64 (literal -> TRUE .)
    DOT             reduce using rule 64 (literal -> TRUE .)
    NEWLINE         reduce using rule 64 (literal -> TRUE .)
    END             reduce using rule 64 (literal -> TRUE .)
    RPAREN          reduce using rule 64 (literal -> TRUE .)
    COMMA           reduce using rule 64 (literal -> TRUE .)
    RBRACKET        reduce using rule 64 (literal -> TRUE .)
    WHEN            reduce using rule 64 (literal -> TRUE .)
    ELSIF           reduce using rule 64 (literal -> TRUE .)
    ELSE            reduce using rule 64 (literal -> TRUE .)
    RBRACE          reduce using rule 64 (literal -> TRUE .)
    LBRACE          reduce using rule 64 (literal -> TRUE .)
    ID              reduce using rule 64 (literal -> TRUE .)
    CASE            reduce using rule 64 (literal -> TRUE .)
    RETURN          reduce using rule 64 (literal -> TRUE .)
    BREAK           reduce using rule 64 (literal -> TRUE .)
    NEXT            reduce using rule 64 (literal -> TRUE .)
    UNDERSCORE      reduce using rule 64 (literal -> TRUE .)
    ASTERISK        reduce using rule 64 (literal -> TRUE .)
    IF              reduce using rule 64 (literal -> TRUE .)
    UNLESS          reduce using rule 64 (literal -> TRUE .)
    WHILE           reduce using rule 64 (literal -> TRUE .)
    UNTIL           reduce using rule 64 (literal -> TRUE .)
    LOOP            reduce using rule 64 (literal -> TRUE .)
    LPAREN          reduce using rule 64 (literal -> TRUE .)
    INTNUMBER       reduce using rule 64 (literal -> TRUE .)
    FLOATNUMBER     reduce using rule 64 (literal -> TRUE .)
    CHAR            reduce using rule 64 (literal -> TRUE .)
    TRUE            reduce using rule 64 (literal -> TRUE .)
    FALSE           reduce using rule 64 (literal -> TRUE .)
    STRING          reduce using rule 64 (literal -> TRUE .)
    EXCLAMATION     reduce using rule 64 (literal -> TRUE .)
    TILDE           reduce using rule 64 (literal -> TRUE .)
    TCOLON          reduce using rule 64 (literal -> TRUE .)
    INTERP_END      reduce using rule 64 (literal -> TRUE .)


state 56

    (65) literal -> FALSE .

    LBRACKET        reduce using rule 65 (literal -> FALSE .)
    DOTDOT          reduce using rule 65 (literal -> FALSE .)
    DOTDOTDOT       reduce using rule 65 (literal -> FALSE .)
    ASSIGN          reduce using rule 65 (literal -> FALSE .)
    PLUS_ASSIGN     reduce using rule 65 (literal -> FALSE .)
    MINUS_ASSIGN    reduce using rule 65 (literal -> FALSE .)
    MULTI_ASSIGN    reduce using rule 65 (literal -> FALSE .)
    DIVIDE_ASSIGN   reduce using rule 65 (literal -> FALSE .)
    POTENCIACAO     reduce using rule 65 (literal -> FALSE .)
    MULTI           reduce using rule 65 (literal -> FALSE .)
    DIVIDE          reduce using rule 65 (literal -> FALSE .)
    MODULO          reduce using rule 65 (literal -> FALSE .)
    PLUS            reduce using rule 65 (literal -> FALSE .)
    MINUS           reduce using rule 65 (literal -> FALSE .)
    GREATER_THAN    reduce using rule 65 (literal -> FALSE .)
    LESS_THAN       reduce using rule 65 (literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 65 (literal -> FALSE .)
    LESS_EQUAL      reduce using rule 65 (literal -> FALSE .)
    EQUAL           reduce using rule 65 (literal -> FALSE .)
    NOT_EQUAL       reduce using rule 65 (literal -> FALSE .)
    TIPO_EQUAL      reduce using rule 65 (literal -> FALSE .)
    AND             reduce using rule 65 (literal -> FALSE .)
    QMARK           reduce using rule 65 (literal -> FALSE .)
    OR              reduce using rule 65 (literal -> FALSE .)
    CONSTANT        reduce using rule 65 (literal -> FALSE .)
    MODULE          reduce using rule 65 (literal -> FALSE .)
    DEF             reduce using rule 65 (literal -> FALSE .)
    $end            reduce using rule 65 (literal -> FALSE .)
    DOT             reduce using rule 65 (literal -> FALSE .)
    NEWLINE         reduce using rule 65 (literal -> FALSE .)
    END             reduce using rule 65 (literal -> FALSE .)
    RPAREN          reduce using rule 65 (literal -> FALSE .)
    COMMA           reduce using rule 65 (literal -> FALSE .)
    RBRACKET        reduce using rule 65 (literal -> FALSE .)
    WHEN            reduce using rule 65 (literal -> FALSE .)
    ELSIF           reduce using rule 65 (literal -> FALSE .)
    ELSE            reduce using rule 65 (literal -> FALSE .)
    RBRACE          reduce using rule 65 (literal -> FALSE .)
    LBRACE          reduce using rule 65 (literal -> FALSE .)
    ID              reduce using rule 65 (literal -> FALSE .)
    CASE            reduce using rule 65 (literal -> FALSE .)
    RETURN          reduce using rule 65 (literal -> FALSE .)
    BREAK           reduce using rule 65 (literal -> FALSE .)
    NEXT            reduce using rule 65 (literal -> FALSE .)
    UNDERSCORE      reduce using rule 65 (literal -> FALSE .)
    ASTERISK        reduce using rule 65 (literal -> FALSE .)
    IF              reduce using rule 65 (literal -> FALSE .)
    UNLESS          reduce using rule 65 (literal -> FALSE .)
    WHILE           reduce using rule 65 (literal -> FALSE .)
    UNTIL           reduce using rule 65 (literal -> FALSE .)
    LOOP            reduce using rule 65 (literal -> FALSE .)
    LPAREN          reduce using rule 65 (literal -> FALSE .)
    INTNUMBER       reduce using rule 65 (literal -> FALSE .)
    FLOATNUMBER     reduce using rule 65 (literal -> FALSE .)
    CHAR            reduce using rule 65 (literal -> FALSE .)
    TRUE            reduce using rule 65 (literal -> FALSE .)
    FALSE           reduce using rule 65 (literal -> FALSE .)
    STRING          reduce using rule 65 (literal -> FALSE .)
    EXCLAMATION     reduce using rule 65 (literal -> FALSE .)
    TILDE           reduce using rule 65 (literal -> FALSE .)
    TCOLON          reduce using rule 65 (literal -> FALSE .)
    INTERP_END      reduce using rule 65 (literal -> FALSE .)


state 57

    (147) additive_expression -> multiplicative_expression .
    (151) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (152) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (153) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 147 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 147 (additive_expression -> multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 147 (additive_expression -> multiplicative_expression .)
    LESS_EQUAL      reduce using rule 147 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    NOT_EQUAL       reduce using rule 147 (additive_expression -> multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 147 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 147 (additive_expression -> multiplicative_expression .)
    QMARK           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 147 (additive_expression -> multiplicative_expression .)
    CONSTANT        reduce using rule 147 (additive_expression -> multiplicative_expression .)
    MODULE          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    DEF             reduce using rule 147 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    DOT             reduce using rule 147 (additive_expression -> multiplicative_expression .)
    NEWLINE         reduce using rule 147 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 147 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 147 (additive_expression -> multiplicative_expression .)
    WHEN            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    ELSIF           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    LBRACE          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    ID              reduce using rule 147 (additive_expression -> multiplicative_expression .)
    CASE            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    NEXT            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    UNDERSCORE      reduce using rule 147 (additive_expression -> multiplicative_expression .)
    ASTERISK        reduce using rule 147 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 147 (additive_expression -> multiplicative_expression .)
    UNLESS          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    WHILE           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    UNTIL           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    LOOP            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    LBRACKET        reduce using rule 147 (additive_expression -> multiplicative_expression .)
    INTNUMBER       reduce using rule 147 (additive_expression -> multiplicative_expression .)
    FLOATNUMBER     reduce using rule 147 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    TRUE            reduce using rule 147 (additive_expression -> multiplicative_expression .)
    FALSE           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    EXCLAMATION     reduce using rule 147 (additive_expression -> multiplicative_expression .)
    TILDE           reduce using rule 147 (additive_expression -> multiplicative_expression .)
    TCOLON          reduce using rule 147 (additive_expression -> multiplicative_expression .)
    INTERP_END      reduce using rule 147 (additive_expression -> multiplicative_expression .)
    MULTI           shift and go to state 127
    DIVIDE          shift and go to state 128
    MODULO          shift and go to state 129


state 58

    (156) unary_expression -> PLUS . unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 59

    (157) unary_expression -> MINUS . unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 132
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 60

    (173) string_literal -> STRING .
    (174) string_literal -> STRING . INTERP_START expression INTERP_END string_literal

    LBRACKET        reduce using rule 173 (string_literal -> STRING .)
    DOTDOT          reduce using rule 173 (string_literal -> STRING .)
    DOTDOTDOT       reduce using rule 173 (string_literal -> STRING .)
    ASSIGN          reduce using rule 173 (string_literal -> STRING .)
    PLUS_ASSIGN     reduce using rule 173 (string_literal -> STRING .)
    MINUS_ASSIGN    reduce using rule 173 (string_literal -> STRING .)
    MULTI_ASSIGN    reduce using rule 173 (string_literal -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 173 (string_literal -> STRING .)
    POTENCIACAO     reduce using rule 173 (string_literal -> STRING .)
    MULTI           reduce using rule 173 (string_literal -> STRING .)
    DIVIDE          reduce using rule 173 (string_literal -> STRING .)
    MODULO          reduce using rule 173 (string_literal -> STRING .)
    PLUS            reduce using rule 173 (string_literal -> STRING .)
    MINUS           reduce using rule 173 (string_literal -> STRING .)
    GREATER_THAN    reduce using rule 173 (string_literal -> STRING .)
    LESS_THAN       reduce using rule 173 (string_literal -> STRING .)
    GREATER_EQUAL   reduce using rule 173 (string_literal -> STRING .)
    LESS_EQUAL      reduce using rule 173 (string_literal -> STRING .)
    EQUAL           reduce using rule 173 (string_literal -> STRING .)
    NOT_EQUAL       reduce using rule 173 (string_literal -> STRING .)
    TIPO_EQUAL      reduce using rule 173 (string_literal -> STRING .)
    AND             reduce using rule 173 (string_literal -> STRING .)
    QMARK           reduce using rule 173 (string_literal -> STRING .)
    OR              reduce using rule 173 (string_literal -> STRING .)
    CONSTANT        reduce using rule 173 (string_literal -> STRING .)
    MODULE          reduce using rule 173 (string_literal -> STRING .)
    DEF             reduce using rule 173 (string_literal -> STRING .)
    $end            reduce using rule 173 (string_literal -> STRING .)
    DOT             reduce using rule 173 (string_literal -> STRING .)
    NEWLINE         reduce using rule 173 (string_literal -> STRING .)
    END             reduce using rule 173 (string_literal -> STRING .)
    RPAREN          reduce using rule 173 (string_literal -> STRING .)
    COMMA           reduce using rule 173 (string_literal -> STRING .)
    RBRACKET        reduce using rule 173 (string_literal -> STRING .)
    WHEN            reduce using rule 173 (string_literal -> STRING .)
    ELSIF           reduce using rule 173 (string_literal -> STRING .)
    ELSE            reduce using rule 173 (string_literal -> STRING .)
    RBRACE          reduce using rule 173 (string_literal -> STRING .)
    LBRACE          reduce using rule 173 (string_literal -> STRING .)
    ID              reduce using rule 173 (string_literal -> STRING .)
    CASE            reduce using rule 173 (string_literal -> STRING .)
    RETURN          reduce using rule 173 (string_literal -> STRING .)
    BREAK           reduce using rule 173 (string_literal -> STRING .)
    NEXT            reduce using rule 173 (string_literal -> STRING .)
    UNDERSCORE      reduce using rule 173 (string_literal -> STRING .)
    ASTERISK        reduce using rule 173 (string_literal -> STRING .)
    IF              reduce using rule 173 (string_literal -> STRING .)
    UNLESS          reduce using rule 173 (string_literal -> STRING .)
    WHILE           reduce using rule 173 (string_literal -> STRING .)
    UNTIL           reduce using rule 173 (string_literal -> STRING .)
    LOOP            reduce using rule 173 (string_literal -> STRING .)
    LPAREN          reduce using rule 173 (string_literal -> STRING .)
    INTNUMBER       reduce using rule 173 (string_literal -> STRING .)
    FLOATNUMBER     reduce using rule 173 (string_literal -> STRING .)
    CHAR            reduce using rule 173 (string_literal -> STRING .)
    TRUE            reduce using rule 173 (string_literal -> STRING .)
    FALSE           reduce using rule 173 (string_literal -> STRING .)
    STRING          reduce using rule 173 (string_literal -> STRING .)
    EXCLAMATION     reduce using rule 173 (string_literal -> STRING .)
    TILDE           reduce using rule 173 (string_literal -> STRING .)
    TCOLON          reduce using rule 173 (string_literal -> STRING .)
    INTERP_END      reduce using rule 173 (string_literal -> STRING .)
    INTERP_START    shift and go to state 133


state 61

    (150) multiplicative_expression -> potenciacao_expression .
    (155) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    DIVIDE          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    MODULO          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    PLUS            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    MINUS           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    GREATER_THAN    reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    LESS_THAN       reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    LESS_EQUAL      reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    EQUAL           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    NOT_EQUAL       reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    AND             reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    QMARK           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    OR              reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    CONSTANT        reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    MODULE          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    DEF             reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    $end            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    DOT             reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    NEWLINE         reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    END             reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    RPAREN          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    COMMA           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    RBRACKET        reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    WHEN            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    ELSIF           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    ELSE            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    RBRACE          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    LBRACE          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    ID              reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    CASE            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    RETURN          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    BREAK           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    NEXT            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    UNDERSCORE      reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    ASTERISK        reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    IF              reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    UNLESS          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    WHILE           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    UNTIL           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    LOOP            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    LPAREN          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    LBRACKET        reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    INTNUMBER       reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    FLOATNUMBER     reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    CHAR            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    TRUE            reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    FALSE           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    STRING          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    EXCLAMATION     reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    TILDE           reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    TCOLON          reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    INTERP_END      reduce using rule 150 (multiplicative_expression -> potenciacao_expression .)
    POTENCIACAO     shift and go to state 134


state 62

    (154) potenciacao_expression -> unary_expression .

    POTENCIACAO     reduce using rule 154 (potenciacao_expression -> unary_expression .)
    MULTI           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    DIVIDE          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    MODULO          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    PLUS            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    MINUS           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 154 (potenciacao_expression -> unary_expression .)
    LESS_THAN       reduce using rule 154 (potenciacao_expression -> unary_expression .)
    GREATER_EQUAL   reduce using rule 154 (potenciacao_expression -> unary_expression .)
    LESS_EQUAL      reduce using rule 154 (potenciacao_expression -> unary_expression .)
    EQUAL           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 154 (potenciacao_expression -> unary_expression .)
    TIPO_EQUAL      reduce using rule 154 (potenciacao_expression -> unary_expression .)
    AND             reduce using rule 154 (potenciacao_expression -> unary_expression .)
    QMARK           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    OR              reduce using rule 154 (potenciacao_expression -> unary_expression .)
    CONSTANT        reduce using rule 154 (potenciacao_expression -> unary_expression .)
    MODULE          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    DEF             reduce using rule 154 (potenciacao_expression -> unary_expression .)
    $end            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    DOT             reduce using rule 154 (potenciacao_expression -> unary_expression .)
    NEWLINE         reduce using rule 154 (potenciacao_expression -> unary_expression .)
    END             reduce using rule 154 (potenciacao_expression -> unary_expression .)
    RPAREN          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    COMMA           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    RBRACKET        reduce using rule 154 (potenciacao_expression -> unary_expression .)
    WHEN            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    ELSIF           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    ELSE            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    RBRACE          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    LBRACE          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    ID              reduce using rule 154 (potenciacao_expression -> unary_expression .)
    CASE            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    RETURN          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    BREAK           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    NEXT            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    UNDERSCORE      reduce using rule 154 (potenciacao_expression -> unary_expression .)
    ASTERISK        reduce using rule 154 (potenciacao_expression -> unary_expression .)
    IF              reduce using rule 154 (potenciacao_expression -> unary_expression .)
    UNLESS          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    WHILE           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    UNTIL           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    LOOP            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    LPAREN          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    LBRACKET        reduce using rule 154 (potenciacao_expression -> unary_expression .)
    INTNUMBER       reduce using rule 154 (potenciacao_expression -> unary_expression .)
    FLOATNUMBER     reduce using rule 154 (potenciacao_expression -> unary_expression .)
    CHAR            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    TRUE            reduce using rule 154 (potenciacao_expression -> unary_expression .)
    FALSE           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    STRING          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    EXCLAMATION     reduce using rule 154 (potenciacao_expression -> unary_expression .)
    TILDE           reduce using rule 154 (potenciacao_expression -> unary_expression .)
    TCOLON          reduce using rule 154 (potenciacao_expression -> unary_expression .)
    INTERP_END      reduce using rule 154 (potenciacao_expression -> unary_expression .)


state 63

    (158) unary_expression -> EXCLAMATION . unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 135
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 64

    (159) unary_expression -> TILDE . unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 136
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 65

    (66) variable_declaration -> ID . types ASSIGN expression
    (67) variable_declaration -> ID . ASSIGN expression
    (68) variable_declaration -> ID . COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> ID . LPAREN expression_list RPAREN
    (74) function_call -> ID . LPAREN RPAREN
    (164) primary_expression -> ID .
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    ASSIGN          shift and go to state 138
    COMMA           shift and go to state 139
    LPAREN          shift and go to state 140
    LBRACKET        reduce using rule 164 (primary_expression -> ID .)
    DOTDOT          reduce using rule 164 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 164 (primary_expression -> ID .)
    STRING          shift and go to state 141
    CHAR            shift and go to state 142
    NIL             shift and go to state 143
    INT             shift and go to state 147
    INT8            shift and go to state 148
    INT16           shift and go to state 149
    INT32           shift and go to state 150
    INT64           shift and go to state 151
    INT128          shift and go to state 152
    UINT8           shift and go to state 153
    UINT16          shift and go to state 154
    UINT32          shift and go to state 155
    UINT64          shift and go to state 156
    UINT128         shift and go to state 157
    FLOAT           shift and go to state 158
    FLOAT32         shift and go to state 159
    FLOAT64         shift and go to state 160
    BOOL            shift and go to state 161

    types                          shift and go to state 137
    integer                        shift and go to state 144
    float                          shift and go to state 145
    boolean                        shift and go to state 146

state 66

    (24) module -> MODULE ID statements . END

    END             shift and go to state 162


state 67

    (79) statements -> statement .
    (80) statements -> statement . NEWLINE statements

  ! shift/reduce conflict for NEWLINE resolved as shift
    END             reduce using rule 79 (statements -> statement .)
    ELSIF           reduce using rule 79 (statements -> statement .)
    ELSE            reduce using rule 79 (statements -> statement .)
    RBRACE          reduce using rule 79 (statements -> statement .)
    WHEN            reduce using rule 79 (statements -> statement .)
    NEWLINE         shift and go to state 163

  ! NEWLINE         [ reduce using rule 79 (statements -> statement .) ]


state 68

    (81) statement -> expression .
    (111) iterator -> expression . DOT MULTI statements
    (112) iterator -> expression . DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> expression . DOT EACH LBRACE PIPE ID PIPE RBRACE statements

    NEWLINE         reduce using rule 81 (statement -> expression .)
    END             reduce using rule 81 (statement -> expression .)
    ELSIF           reduce using rule 81 (statement -> expression .)
    ELSE            reduce using rule 81 (statement -> expression .)
    RBRACE          reduce using rule 81 (statement -> expression .)
    WHEN            reduce using rule 81 (statement -> expression .)
    DOT             shift and go to state 164


state 69

    (82) statement -> control_structure .

    NEWLINE         reduce using rule 82 (statement -> control_structure .)
    END             reduce using rule 82 (statement -> control_structure .)
    ELSIF           reduce using rule 82 (statement -> control_structure .)
    ELSE            reduce using rule 82 (statement -> control_structure .)
    RBRACE          reduce using rule 82 (statement -> control_structure .)
    WHEN            reduce using rule 82 (statement -> control_structure .)


state 70

    (83) statement -> variable_declaration .

    NEWLINE         reduce using rule 83 (statement -> variable_declaration .)
    END             reduce using rule 83 (statement -> variable_declaration .)
    ELSIF           reduce using rule 83 (statement -> variable_declaration .)
    ELSE            reduce using rule 83 (statement -> variable_declaration .)
    RBRACE          reduce using rule 83 (statement -> variable_declaration .)
    WHEN            reduce using rule 83 (statement -> variable_declaration .)


state 71

    (84) statement -> function_call .

    NEWLINE         reduce using rule 84 (statement -> function_call .)
    END             reduce using rule 84 (statement -> function_call .)
    ELSIF           reduce using rule 84 (statement -> function_call .)
    ELSE            reduce using rule 84 (statement -> function_call .)
    RBRACE          reduce using rule 84 (statement -> function_call .)
    WHEN            reduce using rule 84 (statement -> function_call .)


state 72

    (85) control_structure -> conditional .

    NEWLINE         reduce using rule 85 (control_structure -> conditional .)
    END             reduce using rule 85 (control_structure -> conditional .)
    ELSIF           reduce using rule 85 (control_structure -> conditional .)
    ELSE            reduce using rule 85 (control_structure -> conditional .)
    RBRACE          reduce using rule 85 (control_structure -> conditional .)
    WHEN            reduce using rule 85 (control_structure -> conditional .)


state 73

    (86) control_structure -> loop_structure .

    NEWLINE         reduce using rule 86 (control_structure -> loop_structure .)
    END             reduce using rule 86 (control_structure -> loop_structure .)
    ELSIF           reduce using rule 86 (control_structure -> loop_structure .)
    ELSE            reduce using rule 86 (control_structure -> loop_structure .)
    RBRACE          reduce using rule 86 (control_structure -> loop_structure .)
    WHEN            reduce using rule 86 (control_structure -> loop_structure .)


state 74

    (87) control_structure -> case_structure .

    NEWLINE         reduce using rule 87 (control_structure -> case_structure .)
    END             reduce using rule 87 (control_structure -> case_structure .)
    ELSIF           reduce using rule 87 (control_structure -> case_structure .)
    ELSE            reduce using rule 87 (control_structure -> case_structure .)
    RBRACE          reduce using rule 87 (control_structure -> case_structure .)
    WHEN            reduce using rule 87 (control_structure -> case_structure .)


state 75

    (88) control_structure -> return_statement .

    NEWLINE         reduce using rule 88 (control_structure -> return_statement .)
    END             reduce using rule 88 (control_structure -> return_statement .)
    ELSIF           reduce using rule 88 (control_structure -> return_statement .)
    ELSE            reduce using rule 88 (control_structure -> return_statement .)
    RBRACE          reduce using rule 88 (control_structure -> return_statement .)
    WHEN            reduce using rule 88 (control_structure -> return_statement .)


state 76

    (89) control_structure -> break_statement .

    NEWLINE         reduce using rule 89 (control_structure -> break_statement .)
    END             reduce using rule 89 (control_structure -> break_statement .)
    ELSIF           reduce using rule 89 (control_structure -> break_statement .)
    ELSE            reduce using rule 89 (control_structure -> break_statement .)
    RBRACE          reduce using rule 89 (control_structure -> break_statement .)
    WHEN            reduce using rule 89 (control_structure -> break_statement .)


state 77

    (90) control_structure -> next_statement .

    NEWLINE         reduce using rule 90 (control_structure -> next_statement .)
    END             reduce using rule 90 (control_structure -> next_statement .)
    ELSIF           reduce using rule 90 (control_structure -> next_statement .)
    ELSE            reduce using rule 90 (control_structure -> next_statement .)
    RBRACE          reduce using rule 90 (control_structure -> next_statement .)
    WHEN            reduce using rule 90 (control_structure -> next_statement .)


state 78

    (91) conditional -> if_statement .

    NEWLINE         reduce using rule 91 (conditional -> if_statement .)
    END             reduce using rule 91 (conditional -> if_statement .)
    ELSIF           reduce using rule 91 (conditional -> if_statement .)
    ELSE            reduce using rule 91 (conditional -> if_statement .)
    RBRACE          reduce using rule 91 (conditional -> if_statement .)
    WHEN            reduce using rule 91 (conditional -> if_statement .)


state 79

    (92) conditional -> unless_statement .

    NEWLINE         reduce using rule 92 (conditional -> unless_statement .)
    END             reduce using rule 92 (conditional -> unless_statement .)
    ELSIF           reduce using rule 92 (conditional -> unless_statement .)
    ELSE            reduce using rule 92 (conditional -> unless_statement .)
    RBRACE          reduce using rule 92 (conditional -> unless_statement .)
    WHEN            reduce using rule 92 (conditional -> unless_statement .)


state 80

    (104) loop_structure -> while .

    NEWLINE         reduce using rule 104 (loop_structure -> while .)
    END             reduce using rule 104 (loop_structure -> while .)
    ELSIF           reduce using rule 104 (loop_structure -> while .)
    ELSE            reduce using rule 104 (loop_structure -> while .)
    RBRACE          reduce using rule 104 (loop_structure -> while .)
    WHEN            reduce using rule 104 (loop_structure -> while .)


state 81

    (105) loop_structure -> until .

    NEWLINE         reduce using rule 105 (loop_structure -> until .)
    END             reduce using rule 105 (loop_structure -> until .)
    ELSIF           reduce using rule 105 (loop_structure -> until .)
    ELSE            reduce using rule 105 (loop_structure -> until .)
    RBRACE          reduce using rule 105 (loop_structure -> until .)
    WHEN            reduce using rule 105 (loop_structure -> until .)


state 82

    (106) loop_structure -> loop .

    NEWLINE         reduce using rule 106 (loop_structure -> loop .)
    END             reduce using rule 106 (loop_structure -> loop .)
    ELSIF           reduce using rule 106 (loop_structure -> loop .)
    ELSE            reduce using rule 106 (loop_structure -> loop .)
    RBRACE          reduce using rule 106 (loop_structure -> loop .)
    WHEN            reduce using rule 106 (loop_structure -> loop .)


state 83

    (107) loop_structure -> iterator .

    NEWLINE         reduce using rule 107 (loop_structure -> iterator .)
    END             reduce using rule 107 (loop_structure -> iterator .)
    ELSIF           reduce using rule 107 (loop_structure -> iterator .)
    ELSE            reduce using rule 107 (loop_structure -> iterator .)
    RBRACE          reduce using rule 107 (loop_structure -> iterator .)
    WHEN            reduce using rule 107 (loop_structure -> iterator .)


state 84

    (114) case_structure -> CASE . expression when_list opt_else END
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 165
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 85

    (117) return_statement -> RETURN . opt_expression
    (120) opt_expression -> . expression
    (121) opt_expression -> . empty
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (175) empty -> .
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)
    ELSIF           reduce using rule 175 (empty -> .)
    ELSE            reduce using rule 175 (empty -> .)
    RBRACE          reduce using rule 175 (empty -> .)
    WHEN            reduce using rule 175 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    opt_expression                 shift and go to state 166
    expression                     shift and go to state 167
    empty                          shift and go to state 168
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 86

    (118) break_statement -> BREAK . opt_expression
    (120) opt_expression -> . expression
    (121) opt_expression -> . empty
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (175) empty -> .
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)
    ELSIF           reduce using rule 175 (empty -> .)
    ELSE            reduce using rule 175 (empty -> .)
    RBRACE          reduce using rule 175 (empty -> .)
    WHEN            reduce using rule 175 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    opt_expression                 shift and go to state 169
    expression                     shift and go to state 167
    empty                          shift and go to state 168
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 87

    (119) next_statement -> NEXT . opt_expression
    (120) opt_expression -> . expression
    (121) opt_expression -> . empty
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (175) empty -> .
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)
    ELSIF           reduce using rule 175 (empty -> .)
    ELSE            reduce using rule 175 (empty -> .)
    RBRACE          reduce using rule 175 (empty -> .)
    WHEN            reduce using rule 175 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    opt_expression                 shift and go to state 170
    expression                     shift and go to state 167
    empty                          shift and go to state 168
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 88

    (93) if_statement -> IF . if_condition statements opt_elsif opt_else END
    (95) if_condition -> . expression
    (96) if_condition -> . expression LBRACE statements RBRACE
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    if_condition                   shift and go to state 171
    expression                     shift and go to state 172
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 89

    (94) unless_statement -> UNLESS . if_condition statements opt_else END
    (95) if_condition -> . expression
    (96) if_condition -> . expression LBRACE statements RBRACE
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    if_condition                   shift and go to state 173
    expression                     shift and go to state 172
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 90

    (108) while -> WHILE . expression statements
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 174
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 91

    (109) until -> UNTIL . expression statements
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 175
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 92

    (110) loop -> LOOP . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 176
    statement                      shift and go to state 67
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 93

    (27) function -> DEF ID LPAREN . opt_argument_list RPAREN opt_return_type statements END
    (29) opt_argument_list -> . argument_list
    (30) opt_argument_list -> . empty
    (31) argument_list -> . argument
    (32) argument_list -> . argument COMMA argument_list
    (175) empty -> .
    (33) argument -> . ID
    (34) argument -> . ID COLON types
    (35) argument -> . ID ASSIGN expression
    (36) argument -> . ID COLON types ASSIGN expression

    RPAREN          reduce using rule 175 (empty -> .)
    ID              shift and go to state 177

    opt_argument_list              shift and go to state 178
    argument_list                  shift and go to state 179
    empty                          shift and go to state 180
    argument                       shift and go to state 181

state 94

    (28) function -> DEF ID opt_return_type . NEWLINE statements END

    NEWLINE         shift and go to state 182


state 95

    (37) opt_return_type -> COLON . types
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 141
    CHAR            shift and go to state 142
    NIL             shift and go to state 143
    INT             shift and go to state 147
    INT8            shift and go to state 148
    INT16           shift and go to state 149
    INT32           shift and go to state 150
    INT64           shift and go to state 151
    INT128          shift and go to state 152
    UINT8           shift and go to state 153
    UINT16          shift and go to state 154
    UINT32          shift and go to state 155
    UINT64          shift and go to state 156
    UINT128         shift and go to state 157
    FLOAT           shift and go to state 158
    FLOAT32         shift and go to state 159
    FLOAT64         shift and go to state 160
    BOOL            shift and go to state 161

    types                          shift and go to state 183
    integer                        shift and go to state 144
    float                          shift and go to state 145
    boolean                        shift and go to state 146

state 96

    (38) opt_return_type -> empty .

    NEWLINE         reduce using rule 38 (opt_return_type -> empty .)
    ID              reduce using rule 38 (opt_return_type -> empty .)
    CASE            reduce using rule 38 (opt_return_type -> empty .)
    RETURN          reduce using rule 38 (opt_return_type -> empty .)
    BREAK           reduce using rule 38 (opt_return_type -> empty .)
    NEXT            reduce using rule 38 (opt_return_type -> empty .)
    UNDERSCORE      reduce using rule 38 (opt_return_type -> empty .)
    ASTERISK        reduce using rule 38 (opt_return_type -> empty .)
    IF              reduce using rule 38 (opt_return_type -> empty .)
    UNLESS          reduce using rule 38 (opt_return_type -> empty .)
    WHILE           reduce using rule 38 (opt_return_type -> empty .)
    UNTIL           reduce using rule 38 (opt_return_type -> empty .)
    LOOP            reduce using rule 38 (opt_return_type -> empty .)
    LPAREN          reduce using rule 38 (opt_return_type -> empty .)
    LBRACKET        reduce using rule 38 (opt_return_type -> empty .)
    INTNUMBER       reduce using rule 38 (opt_return_type -> empty .)
    FLOATNUMBER     reduce using rule 38 (opt_return_type -> empty .)
    CHAR            reduce using rule 38 (opt_return_type -> empty .)
    TRUE            reduce using rule 38 (opt_return_type -> empty .)
    FALSE           reduce using rule 38 (opt_return_type -> empty .)
    STRING          reduce using rule 38 (opt_return_type -> empty .)
    PLUS            reduce using rule 38 (opt_return_type -> empty .)
    MINUS           reduce using rule 38 (opt_return_type -> empty .)
    EXCLAMATION     reduce using rule 38 (opt_return_type -> empty .)
    TILDE           reduce using rule 38 (opt_return_type -> empty .)


state 97

    (1) program -> require_list constant_list module_list function_list .

    $end            reduce using rule 1 (program -> require_list constant_list module_list function_list .)


state 98

    (132) ternary_expression -> logical_or_expression QMARK . expression TCOLON expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    logical_or_expression          shift and go to state 35
    expression                     shift and go to state 184
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 99

    (135) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    logical_and_expression         shift and go to state 185
    equality_expression            shift and go to state 41
    relational_expression          shift and go to state 43
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 100

    (124) assignment_expression -> assignment_target ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 186
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 101

    (125) assignment_expression -> assignment_target PLUS_ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 187
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 102

    (126) assignment_expression -> assignment_target MINUS_ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 188
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 103

    (127) assignment_expression -> assignment_target MULTI_ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 189
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 104

    (128) assignment_expression -> assignment_target DIVIDE_ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 190
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 105

    (137) logical_and_expression -> logical_and_expression AND . equality_expression
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    equality_expression            shift and go to state 191
    relational_expression          shift and go to state 43
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 106

    (131) assignment_target -> ASTERISK assignment_target .

    ASSIGN          reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)
    PLUS_ASSIGN     reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)
    MINUS_ASSIGN    reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)
    MULTI_ASSIGN    reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)
    DIVIDE_ASSIGN   reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)


state 107

    (129) assignment_target -> postfix_expression .

    ASSIGN          reduce using rule 129 (assignment_target -> postfix_expression .)
    PLUS_ASSIGN     reduce using rule 129 (assignment_target -> postfix_expression .)
    MINUS_ASSIGN    reduce using rule 129 (assignment_target -> postfix_expression .)
    MULTI_ASSIGN    reduce using rule 129 (assignment_target -> postfix_expression .)
    DIVIDE_ASSIGN   reduce using rule 129 (assignment_target -> postfix_expression .)


state 108

    (139) equality_expression -> equality_expression EQUAL . relational_expression
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    relational_expression          shift and go to state 192
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 109

    (140) equality_expression -> equality_expression NOT_EQUAL . relational_expression
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    relational_expression          shift and go to state 193
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 110

    (141) equality_expression -> equality_expression TIPO_EQUAL . relational_expression
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    relational_expression          shift and go to state 194
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 111

    (165) postfix_expression -> primary_expression postfix_suffixes .

    ASSIGN          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    PLUS_ASSIGN     reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    MINUS_ASSIGN    reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    MULTI_ASSIGN    reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    DIVIDE_ASSIGN   reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    POTENCIACAO     reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    MULTI           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    DIVIDE          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    MODULO          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    PLUS            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    MINUS           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    GREATER_THAN    reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    LESS_THAN       reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    GREATER_EQUAL   reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    LESS_EQUAL      reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    EQUAL           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    NOT_EQUAL       reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    TIPO_EQUAL      reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    AND             reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    QMARK           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    OR              reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    CONSTANT        reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    MODULE          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    DEF             reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    $end            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    DOT             reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    NEWLINE         reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    END             reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    RPAREN          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    COMMA           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    RBRACKET        reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    WHEN            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    ELSIF           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    ELSE            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    RBRACE          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    LBRACE          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    ID              reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    CASE            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    RETURN          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    BREAK           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    NEXT            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    UNDERSCORE      reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    ASTERISK        reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    IF              reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    UNLESS          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    WHILE           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    UNTIL           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    LOOP            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    LPAREN          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    LBRACKET        reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    INTNUMBER       reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    FLOATNUMBER     reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    CHAR            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    TRUE            reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    FALSE           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    STRING          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    EXCLAMATION     reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    TILDE           reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    TCOLON          reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)
    INTERP_END      reduce using rule 165 (postfix_expression -> primary_expression postfix_suffixes .)


state 112

    (166) postfix_suffixes -> postfix_suffix . postfix_suffixes
    (167) postfix_suffixes -> postfix_suffix .
    (166) postfix_suffixes -> . postfix_suffix postfix_suffixes
    (167) postfix_suffixes -> . postfix_suffix
    (168) postfix_suffix -> . LBRACKET expression RBRACKET
    (169) postfix_suffix -> . DOTDOT primary_expression
    (170) postfix_suffix -> . DOTDOTDOT primary_expression

  ! shift/reduce conflict for LBRACKET resolved as shift
    ASSIGN          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    PLUS_ASSIGN     reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    MINUS_ASSIGN    reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    MULTI_ASSIGN    reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    DIVIDE_ASSIGN   reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    POTENCIACAO     reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    MULTI           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    DIVIDE          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    MODULO          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    PLUS            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    MINUS           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    GREATER_THAN    reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    LESS_THAN       reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    GREATER_EQUAL   reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    LESS_EQUAL      reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    EQUAL           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    NOT_EQUAL       reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    TIPO_EQUAL      reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    AND             reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    QMARK           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    OR              reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    CONSTANT        reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    MODULE          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    DEF             reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    $end            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    DOT             reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    NEWLINE         reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    END             reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    RPAREN          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    COMMA           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    RBRACKET        reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    WHEN            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    ELSIF           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    ELSE            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    RBRACE          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    LBRACE          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    ID              reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    CASE            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    RETURN          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    BREAK           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    NEXT            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    UNDERSCORE      reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    ASTERISK        reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    IF              reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    UNLESS          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    WHILE           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    UNTIL           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    LOOP            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    LPAREN          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    INTNUMBER       reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    FLOATNUMBER     reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    CHAR            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    TRUE            reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    FALSE           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    STRING          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    EXCLAMATION     reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    TILDE           reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    TCOLON          reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    INTERP_END      reduce using rule 167 (postfix_suffixes -> postfix_suffix .)
    LBRACKET        shift and go to state 113
    DOTDOT          shift and go to state 114
    DOTDOTDOT       shift and go to state 115

  ! LBRACKET        [ reduce using rule 167 (postfix_suffixes -> postfix_suffix .) ]

    postfix_suffix                 shift and go to state 112
    postfix_suffixes               shift and go to state 195

state 113

    (168) postfix_suffix -> LBRACKET . expression RBRACKET
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 196
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 114

    (169) postfix_suffix -> DOTDOT . primary_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    primary_expression             shift and go to state 197
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 115

    (170) postfix_suffix -> DOTDOTDOT . primary_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    primary_expression             shift and go to state 198
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 116

    (143) relational_expression -> relational_expression GREATER_THAN . additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    additive_expression            shift and go to state 199
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 117

    (144) relational_expression -> relational_expression LESS_THAN . additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    additive_expression            shift and go to state 200
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 118

    (145) relational_expression -> relational_expression GREATER_EQUAL . additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    additive_expression            shift and go to state 201
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 119

    (146) relational_expression -> relational_expression LESS_EQUAL . additive_expression
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    additive_expression            shift and go to state 202
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 120

    (148) additive_expression -> additive_expression PLUS . multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    multiplicative_expression      shift and go to state 203
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 121

    (149) additive_expression -> additive_expression MINUS . multiplicative_expression
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    multiplicative_expression      shift and go to state 204
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 122

    (171) expression_between_parentesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 205


state 123

    (172) array_literal -> LBRACKET opt_expression_list . RBRACKET

    RBRACKET        shift and go to state 206


state 124

    (75) opt_expression_list -> expression_list .
    (78) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 75 (opt_expression_list -> expression_list .)
    COMMA           shift and go to state 207


state 125

    (76) opt_expression_list -> empty .

    RBRACKET        reduce using rule 76 (opt_expression_list -> empty .)


state 126

    (77) expression_list -> expression .

    COMMA           reduce using rule 77 (expression_list -> expression .)
    RBRACKET        reduce using rule 77 (expression_list -> expression .)
    RPAREN          reduce using rule 77 (expression_list -> expression .)


state 127

    (151) multiplicative_expression -> multiplicative_expression MULTI . potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    potenciacao_expression         shift and go to state 208
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 128

    (152) multiplicative_expression -> multiplicative_expression DIVIDE . potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    potenciacao_expression         shift and go to state 209
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 129

    (153) multiplicative_expression -> multiplicative_expression MODULO . potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    potenciacao_expression         shift and go to state 210
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 130

    (156) unary_expression -> PLUS unary_expression .

    POTENCIACAO     reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    MULTI           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    GREATER_THAN    reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    LESS_THAN       reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    GREATER_EQUAL   reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    LESS_EQUAL      reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    NOT_EQUAL       reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    TIPO_EQUAL      reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    QMARK           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    CONSTANT        reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    MODULE          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    DEF             reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    $end            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    DOT             reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    NEWLINE         reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    END             reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    WHEN            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    ELSIF           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    RBRACE          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    LBRACE          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    ID              reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    CASE            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    RETURN          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    BREAK           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    NEXT            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    UNDERSCORE      reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    ASTERISK        reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    IF              reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    UNLESS          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    WHILE           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    UNTIL           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    LOOP            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    LPAREN          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    LBRACKET        reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    INTNUMBER       reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    FLOATNUMBER     reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    CHAR            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    TRUE            reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    FALSE           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    STRING          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    EXCLAMATION     reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    TILDE           reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    TCOLON          reduce using rule 156 (unary_expression -> PLUS unary_expression .)
    INTERP_END      reduce using rule 156 (unary_expression -> PLUS unary_expression .)


state 131

    (160) unary_expression -> postfix_expression .

    POTENCIACAO     reduce using rule 160 (unary_expression -> postfix_expression .)
    MULTI           reduce using rule 160 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 160 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 160 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 160 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 160 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 160 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 160 (unary_expression -> postfix_expression .)
    GREATER_EQUAL   reduce using rule 160 (unary_expression -> postfix_expression .)
    LESS_EQUAL      reduce using rule 160 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 160 (unary_expression -> postfix_expression .)
    NOT_EQUAL       reduce using rule 160 (unary_expression -> postfix_expression .)
    TIPO_EQUAL      reduce using rule 160 (unary_expression -> postfix_expression .)
    AND             reduce using rule 160 (unary_expression -> postfix_expression .)
    QMARK           reduce using rule 160 (unary_expression -> postfix_expression .)
    OR              reduce using rule 160 (unary_expression -> postfix_expression .)
    CONSTANT        reduce using rule 160 (unary_expression -> postfix_expression .)
    MODULE          reduce using rule 160 (unary_expression -> postfix_expression .)
    DEF             reduce using rule 160 (unary_expression -> postfix_expression .)
    $end            reduce using rule 160 (unary_expression -> postfix_expression .)
    DOT             reduce using rule 160 (unary_expression -> postfix_expression .)
    NEWLINE         reduce using rule 160 (unary_expression -> postfix_expression .)
    END             reduce using rule 160 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 160 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 160 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 160 (unary_expression -> postfix_expression .)
    WHEN            reduce using rule 160 (unary_expression -> postfix_expression .)
    ELSIF           reduce using rule 160 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 160 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 160 (unary_expression -> postfix_expression .)
    LBRACE          reduce using rule 160 (unary_expression -> postfix_expression .)
    ID              reduce using rule 160 (unary_expression -> postfix_expression .)
    CASE            reduce using rule 160 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 160 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 160 (unary_expression -> postfix_expression .)
    NEXT            reduce using rule 160 (unary_expression -> postfix_expression .)
    UNDERSCORE      reduce using rule 160 (unary_expression -> postfix_expression .)
    ASTERISK        reduce using rule 160 (unary_expression -> postfix_expression .)
    IF              reduce using rule 160 (unary_expression -> postfix_expression .)
    UNLESS          reduce using rule 160 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 160 (unary_expression -> postfix_expression .)
    UNTIL           reduce using rule 160 (unary_expression -> postfix_expression .)
    LOOP            reduce using rule 160 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 160 (unary_expression -> postfix_expression .)
    LBRACKET        reduce using rule 160 (unary_expression -> postfix_expression .)
    INTNUMBER       reduce using rule 160 (unary_expression -> postfix_expression .)
    FLOATNUMBER     reduce using rule 160 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 160 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 160 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 160 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 160 (unary_expression -> postfix_expression .)
    EXCLAMATION     reduce using rule 160 (unary_expression -> postfix_expression .)
    TILDE           reduce using rule 160 (unary_expression -> postfix_expression .)
    TCOLON          reduce using rule 160 (unary_expression -> postfix_expression .)
    INTERP_END      reduce using rule 160 (unary_expression -> postfix_expression .)


state 132

    (157) unary_expression -> MINUS unary_expression .

    POTENCIACAO     reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    MULTI           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    GREATER_THAN    reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    LESS_THAN       reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    GREATER_EQUAL   reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    LESS_EQUAL      reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    NOT_EQUAL       reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    TIPO_EQUAL      reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    QMARK           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    CONSTANT        reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    MODULE          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    DEF             reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    $end            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    DOT             reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    NEWLINE         reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    END             reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    WHEN            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    ELSIF           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    RBRACE          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    LBRACE          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    ID              reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    CASE            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    RETURN          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    BREAK           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    NEXT            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    UNDERSCORE      reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    ASTERISK        reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    IF              reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    UNLESS          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    WHILE           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    UNTIL           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    LOOP            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    LPAREN          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    LBRACKET        reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    INTNUMBER       reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    FLOATNUMBER     reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    CHAR            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    TRUE            reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    FALSE           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    STRING          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    EXCLAMATION     reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    TILDE           reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    TCOLON          reduce using rule 157 (unary_expression -> MINUS unary_expression .)
    INTERP_END      reduce using rule 157 (unary_expression -> MINUS unary_expression .)


state 133

    (174) string_literal -> STRING INTERP_START . expression INTERP_END string_literal
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 211
    string_literal                 shift and go to state 53
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 134

    (155) potenciacao_expression -> potenciacao_expression POTENCIACAO . unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 212
    postfix_expression             shift and go to state 131
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 135

    (158) unary_expression -> EXCLAMATION unary_expression .

    POTENCIACAO     reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    MULTI           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    DIVIDE          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_THAN    reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_THAN       reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQUAL   reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQUAL      reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    EQUAL           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQUAL       reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    TIPO_EQUAL      reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    AND             reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    QMARK           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    OR              reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    CONSTANT        reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    MODULE          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    DEF             reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    $end            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    DOT             reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    NEWLINE         reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    END             reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACKET        reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    WHEN            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    ELSIF           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    ELSE            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACE          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACE          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    ID              reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    CASE            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    RETURN          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    BREAK           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    NEXT            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    UNDERSCORE      reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    ASTERISK        reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    IF              reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    UNLESS          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    WHILE           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    UNTIL           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    LOOP            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    LPAREN          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACKET        reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    INTNUMBER       reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    FLOATNUMBER     reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    CHAR            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    TRUE            reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    FALSE           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    STRING          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    EXCLAMATION     reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    TILDE           reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    TCOLON          reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)
    INTERP_END      reduce using rule 158 (unary_expression -> EXCLAMATION unary_expression .)


state 136

    (159) unary_expression -> TILDE unary_expression .

    POTENCIACAO     reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    MULTI           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    DIVIDE          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    MODULO          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    PLUS            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    MINUS           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    GREATER_THAN    reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    LESS_THAN       reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    GREATER_EQUAL   reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    LESS_EQUAL      reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    EQUAL           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    NOT_EQUAL       reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    TIPO_EQUAL      reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    AND             reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    QMARK           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    OR              reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    CONSTANT        reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    MODULE          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    DEF             reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    $end            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    DOT             reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    NEWLINE         reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    END             reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    RPAREN          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    COMMA           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    RBRACKET        reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    WHEN            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    ELSIF           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    ELSE            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    RBRACE          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    LBRACE          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    ID              reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    CASE            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    RETURN          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    BREAK           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    NEXT            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    UNDERSCORE      reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    ASTERISK        reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    IF              reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    UNLESS          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    WHILE           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    UNTIL           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    LOOP            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    LPAREN          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    LBRACKET        reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    INTNUMBER       reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    FLOATNUMBER     reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    CHAR            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    TRUE            reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    FALSE           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    STRING          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    EXCLAMATION     reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    TILDE           reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    TCOLON          reduce using rule 159 (unary_expression -> TILDE unary_expression .)
    INTERP_END      reduce using rule 159 (unary_expression -> TILDE unary_expression .)


state 137

    (66) variable_declaration -> ID types . ASSIGN expression

    ASSIGN          shift and go to state 213


state 138

    (67) variable_declaration -> ID ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 214
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 139

    (68) variable_declaration -> ID COMMA . list_of_identifiers ASSIGN expression COMMA list_of_values
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 215

    list_of_identifiers            shift and go to state 216

state 140

    (73) function_call -> ID LPAREN . expression_list RPAREN
    (74) function_call -> ID LPAREN . RPAREN
    (77) expression_list -> . expression
    (78) expression_list -> . expression_list COMMA expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    RPAREN          shift and go to state 218
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression_list                shift and go to state 217
    expression                     shift and go to state 126
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 141

    (39) types -> STRING .

    ASSIGN          reduce using rule 39 (types -> STRING .)
    NEWLINE         reduce using rule 39 (types -> STRING .)
    ID              reduce using rule 39 (types -> STRING .)
    CASE            reduce using rule 39 (types -> STRING .)
    RETURN          reduce using rule 39 (types -> STRING .)
    BREAK           reduce using rule 39 (types -> STRING .)
    NEXT            reduce using rule 39 (types -> STRING .)
    UNDERSCORE      reduce using rule 39 (types -> STRING .)
    ASTERISK        reduce using rule 39 (types -> STRING .)
    IF              reduce using rule 39 (types -> STRING .)
    UNLESS          reduce using rule 39 (types -> STRING .)
    WHILE           reduce using rule 39 (types -> STRING .)
    UNTIL           reduce using rule 39 (types -> STRING .)
    LOOP            reduce using rule 39 (types -> STRING .)
    LPAREN          reduce using rule 39 (types -> STRING .)
    LBRACKET        reduce using rule 39 (types -> STRING .)
    INTNUMBER       reduce using rule 39 (types -> STRING .)
    FLOATNUMBER     reduce using rule 39 (types -> STRING .)
    CHAR            reduce using rule 39 (types -> STRING .)
    TRUE            reduce using rule 39 (types -> STRING .)
    FALSE           reduce using rule 39 (types -> STRING .)
    STRING          reduce using rule 39 (types -> STRING .)
    PLUS            reduce using rule 39 (types -> STRING .)
    MINUS           reduce using rule 39 (types -> STRING .)
    EXCLAMATION     reduce using rule 39 (types -> STRING .)
    TILDE           reduce using rule 39 (types -> STRING .)
    COMMA           reduce using rule 39 (types -> STRING .)
    RPAREN          reduce using rule 39 (types -> STRING .)


state 142

    (40) types -> CHAR .

    ASSIGN          reduce using rule 40 (types -> CHAR .)
    NEWLINE         reduce using rule 40 (types -> CHAR .)
    ID              reduce using rule 40 (types -> CHAR .)
    CASE            reduce using rule 40 (types -> CHAR .)
    RETURN          reduce using rule 40 (types -> CHAR .)
    BREAK           reduce using rule 40 (types -> CHAR .)
    NEXT            reduce using rule 40 (types -> CHAR .)
    UNDERSCORE      reduce using rule 40 (types -> CHAR .)
    ASTERISK        reduce using rule 40 (types -> CHAR .)
    IF              reduce using rule 40 (types -> CHAR .)
    UNLESS          reduce using rule 40 (types -> CHAR .)
    WHILE           reduce using rule 40 (types -> CHAR .)
    UNTIL           reduce using rule 40 (types -> CHAR .)
    LOOP            reduce using rule 40 (types -> CHAR .)
    LPAREN          reduce using rule 40 (types -> CHAR .)
    LBRACKET        reduce using rule 40 (types -> CHAR .)
    INTNUMBER       reduce using rule 40 (types -> CHAR .)
    FLOATNUMBER     reduce using rule 40 (types -> CHAR .)
    CHAR            reduce using rule 40 (types -> CHAR .)
    TRUE            reduce using rule 40 (types -> CHAR .)
    FALSE           reduce using rule 40 (types -> CHAR .)
    STRING          reduce using rule 40 (types -> CHAR .)
    PLUS            reduce using rule 40 (types -> CHAR .)
    MINUS           reduce using rule 40 (types -> CHAR .)
    EXCLAMATION     reduce using rule 40 (types -> CHAR .)
    TILDE           reduce using rule 40 (types -> CHAR .)
    COMMA           reduce using rule 40 (types -> CHAR .)
    RPAREN          reduce using rule 40 (types -> CHAR .)


state 143

    (41) types -> NIL .

    ASSIGN          reduce using rule 41 (types -> NIL .)
    NEWLINE         reduce using rule 41 (types -> NIL .)
    ID              reduce using rule 41 (types -> NIL .)
    CASE            reduce using rule 41 (types -> NIL .)
    RETURN          reduce using rule 41 (types -> NIL .)
    BREAK           reduce using rule 41 (types -> NIL .)
    NEXT            reduce using rule 41 (types -> NIL .)
    UNDERSCORE      reduce using rule 41 (types -> NIL .)
    ASTERISK        reduce using rule 41 (types -> NIL .)
    IF              reduce using rule 41 (types -> NIL .)
    UNLESS          reduce using rule 41 (types -> NIL .)
    WHILE           reduce using rule 41 (types -> NIL .)
    UNTIL           reduce using rule 41 (types -> NIL .)
    LOOP            reduce using rule 41 (types -> NIL .)
    LPAREN          reduce using rule 41 (types -> NIL .)
    LBRACKET        reduce using rule 41 (types -> NIL .)
    INTNUMBER       reduce using rule 41 (types -> NIL .)
    FLOATNUMBER     reduce using rule 41 (types -> NIL .)
    CHAR            reduce using rule 41 (types -> NIL .)
    TRUE            reduce using rule 41 (types -> NIL .)
    FALSE           reduce using rule 41 (types -> NIL .)
    STRING          reduce using rule 41 (types -> NIL .)
    PLUS            reduce using rule 41 (types -> NIL .)
    MINUS           reduce using rule 41 (types -> NIL .)
    EXCLAMATION     reduce using rule 41 (types -> NIL .)
    TILDE           reduce using rule 41 (types -> NIL .)
    COMMA           reduce using rule 41 (types -> NIL .)
    RPAREN          reduce using rule 41 (types -> NIL .)


state 144

    (42) types -> integer .

    ASSIGN          reduce using rule 42 (types -> integer .)
    NEWLINE         reduce using rule 42 (types -> integer .)
    ID              reduce using rule 42 (types -> integer .)
    CASE            reduce using rule 42 (types -> integer .)
    RETURN          reduce using rule 42 (types -> integer .)
    BREAK           reduce using rule 42 (types -> integer .)
    NEXT            reduce using rule 42 (types -> integer .)
    UNDERSCORE      reduce using rule 42 (types -> integer .)
    ASTERISK        reduce using rule 42 (types -> integer .)
    IF              reduce using rule 42 (types -> integer .)
    UNLESS          reduce using rule 42 (types -> integer .)
    WHILE           reduce using rule 42 (types -> integer .)
    UNTIL           reduce using rule 42 (types -> integer .)
    LOOP            reduce using rule 42 (types -> integer .)
    LPAREN          reduce using rule 42 (types -> integer .)
    LBRACKET        reduce using rule 42 (types -> integer .)
    INTNUMBER       reduce using rule 42 (types -> integer .)
    FLOATNUMBER     reduce using rule 42 (types -> integer .)
    CHAR            reduce using rule 42 (types -> integer .)
    TRUE            reduce using rule 42 (types -> integer .)
    FALSE           reduce using rule 42 (types -> integer .)
    STRING          reduce using rule 42 (types -> integer .)
    PLUS            reduce using rule 42 (types -> integer .)
    MINUS           reduce using rule 42 (types -> integer .)
    EXCLAMATION     reduce using rule 42 (types -> integer .)
    TILDE           reduce using rule 42 (types -> integer .)
    COMMA           reduce using rule 42 (types -> integer .)
    RPAREN          reduce using rule 42 (types -> integer .)


state 145

    (43) types -> float .

    ASSIGN          reduce using rule 43 (types -> float .)
    NEWLINE         reduce using rule 43 (types -> float .)
    ID              reduce using rule 43 (types -> float .)
    CASE            reduce using rule 43 (types -> float .)
    RETURN          reduce using rule 43 (types -> float .)
    BREAK           reduce using rule 43 (types -> float .)
    NEXT            reduce using rule 43 (types -> float .)
    UNDERSCORE      reduce using rule 43 (types -> float .)
    ASTERISK        reduce using rule 43 (types -> float .)
    IF              reduce using rule 43 (types -> float .)
    UNLESS          reduce using rule 43 (types -> float .)
    WHILE           reduce using rule 43 (types -> float .)
    UNTIL           reduce using rule 43 (types -> float .)
    LOOP            reduce using rule 43 (types -> float .)
    LPAREN          reduce using rule 43 (types -> float .)
    LBRACKET        reduce using rule 43 (types -> float .)
    INTNUMBER       reduce using rule 43 (types -> float .)
    FLOATNUMBER     reduce using rule 43 (types -> float .)
    CHAR            reduce using rule 43 (types -> float .)
    TRUE            reduce using rule 43 (types -> float .)
    FALSE           reduce using rule 43 (types -> float .)
    STRING          reduce using rule 43 (types -> float .)
    PLUS            reduce using rule 43 (types -> float .)
    MINUS           reduce using rule 43 (types -> float .)
    EXCLAMATION     reduce using rule 43 (types -> float .)
    TILDE           reduce using rule 43 (types -> float .)
    COMMA           reduce using rule 43 (types -> float .)
    RPAREN          reduce using rule 43 (types -> float .)


state 146

    (44) types -> boolean .

    ASSIGN          reduce using rule 44 (types -> boolean .)
    NEWLINE         reduce using rule 44 (types -> boolean .)
    ID              reduce using rule 44 (types -> boolean .)
    CASE            reduce using rule 44 (types -> boolean .)
    RETURN          reduce using rule 44 (types -> boolean .)
    BREAK           reduce using rule 44 (types -> boolean .)
    NEXT            reduce using rule 44 (types -> boolean .)
    UNDERSCORE      reduce using rule 44 (types -> boolean .)
    ASTERISK        reduce using rule 44 (types -> boolean .)
    IF              reduce using rule 44 (types -> boolean .)
    UNLESS          reduce using rule 44 (types -> boolean .)
    WHILE           reduce using rule 44 (types -> boolean .)
    UNTIL           reduce using rule 44 (types -> boolean .)
    LOOP            reduce using rule 44 (types -> boolean .)
    LPAREN          reduce using rule 44 (types -> boolean .)
    LBRACKET        reduce using rule 44 (types -> boolean .)
    INTNUMBER       reduce using rule 44 (types -> boolean .)
    FLOATNUMBER     reduce using rule 44 (types -> boolean .)
    CHAR            reduce using rule 44 (types -> boolean .)
    TRUE            reduce using rule 44 (types -> boolean .)
    FALSE           reduce using rule 44 (types -> boolean .)
    STRING          reduce using rule 44 (types -> boolean .)
    PLUS            reduce using rule 44 (types -> boolean .)
    MINUS           reduce using rule 44 (types -> boolean .)
    EXCLAMATION     reduce using rule 44 (types -> boolean .)
    TILDE           reduce using rule 44 (types -> boolean .)
    COMMA           reduce using rule 44 (types -> boolean .)
    RPAREN          reduce using rule 44 (types -> boolean .)


state 147

    (45) integer -> INT .

    ASSIGN          reduce using rule 45 (integer -> INT .)
    NEWLINE         reduce using rule 45 (integer -> INT .)
    ID              reduce using rule 45 (integer -> INT .)
    CASE            reduce using rule 45 (integer -> INT .)
    RETURN          reduce using rule 45 (integer -> INT .)
    BREAK           reduce using rule 45 (integer -> INT .)
    NEXT            reduce using rule 45 (integer -> INT .)
    UNDERSCORE      reduce using rule 45 (integer -> INT .)
    ASTERISK        reduce using rule 45 (integer -> INT .)
    IF              reduce using rule 45 (integer -> INT .)
    UNLESS          reduce using rule 45 (integer -> INT .)
    WHILE           reduce using rule 45 (integer -> INT .)
    UNTIL           reduce using rule 45 (integer -> INT .)
    LOOP            reduce using rule 45 (integer -> INT .)
    LPAREN          reduce using rule 45 (integer -> INT .)
    LBRACKET        reduce using rule 45 (integer -> INT .)
    INTNUMBER       reduce using rule 45 (integer -> INT .)
    FLOATNUMBER     reduce using rule 45 (integer -> INT .)
    CHAR            reduce using rule 45 (integer -> INT .)
    TRUE            reduce using rule 45 (integer -> INT .)
    FALSE           reduce using rule 45 (integer -> INT .)
    STRING          reduce using rule 45 (integer -> INT .)
    PLUS            reduce using rule 45 (integer -> INT .)
    MINUS           reduce using rule 45 (integer -> INT .)
    EXCLAMATION     reduce using rule 45 (integer -> INT .)
    TILDE           reduce using rule 45 (integer -> INT .)
    COMMA           reduce using rule 45 (integer -> INT .)
    RPAREN          reduce using rule 45 (integer -> INT .)


state 148

    (46) integer -> INT8 .

    ASSIGN          reduce using rule 46 (integer -> INT8 .)
    NEWLINE         reduce using rule 46 (integer -> INT8 .)
    ID              reduce using rule 46 (integer -> INT8 .)
    CASE            reduce using rule 46 (integer -> INT8 .)
    RETURN          reduce using rule 46 (integer -> INT8 .)
    BREAK           reduce using rule 46 (integer -> INT8 .)
    NEXT            reduce using rule 46 (integer -> INT8 .)
    UNDERSCORE      reduce using rule 46 (integer -> INT8 .)
    ASTERISK        reduce using rule 46 (integer -> INT8 .)
    IF              reduce using rule 46 (integer -> INT8 .)
    UNLESS          reduce using rule 46 (integer -> INT8 .)
    WHILE           reduce using rule 46 (integer -> INT8 .)
    UNTIL           reduce using rule 46 (integer -> INT8 .)
    LOOP            reduce using rule 46 (integer -> INT8 .)
    LPAREN          reduce using rule 46 (integer -> INT8 .)
    LBRACKET        reduce using rule 46 (integer -> INT8 .)
    INTNUMBER       reduce using rule 46 (integer -> INT8 .)
    FLOATNUMBER     reduce using rule 46 (integer -> INT8 .)
    CHAR            reduce using rule 46 (integer -> INT8 .)
    TRUE            reduce using rule 46 (integer -> INT8 .)
    FALSE           reduce using rule 46 (integer -> INT8 .)
    STRING          reduce using rule 46 (integer -> INT8 .)
    PLUS            reduce using rule 46 (integer -> INT8 .)
    MINUS           reduce using rule 46 (integer -> INT8 .)
    EXCLAMATION     reduce using rule 46 (integer -> INT8 .)
    TILDE           reduce using rule 46 (integer -> INT8 .)
    COMMA           reduce using rule 46 (integer -> INT8 .)
    RPAREN          reduce using rule 46 (integer -> INT8 .)


state 149

    (47) integer -> INT16 .

    ASSIGN          reduce using rule 47 (integer -> INT16 .)
    NEWLINE         reduce using rule 47 (integer -> INT16 .)
    ID              reduce using rule 47 (integer -> INT16 .)
    CASE            reduce using rule 47 (integer -> INT16 .)
    RETURN          reduce using rule 47 (integer -> INT16 .)
    BREAK           reduce using rule 47 (integer -> INT16 .)
    NEXT            reduce using rule 47 (integer -> INT16 .)
    UNDERSCORE      reduce using rule 47 (integer -> INT16 .)
    ASTERISK        reduce using rule 47 (integer -> INT16 .)
    IF              reduce using rule 47 (integer -> INT16 .)
    UNLESS          reduce using rule 47 (integer -> INT16 .)
    WHILE           reduce using rule 47 (integer -> INT16 .)
    UNTIL           reduce using rule 47 (integer -> INT16 .)
    LOOP            reduce using rule 47 (integer -> INT16 .)
    LPAREN          reduce using rule 47 (integer -> INT16 .)
    LBRACKET        reduce using rule 47 (integer -> INT16 .)
    INTNUMBER       reduce using rule 47 (integer -> INT16 .)
    FLOATNUMBER     reduce using rule 47 (integer -> INT16 .)
    CHAR            reduce using rule 47 (integer -> INT16 .)
    TRUE            reduce using rule 47 (integer -> INT16 .)
    FALSE           reduce using rule 47 (integer -> INT16 .)
    STRING          reduce using rule 47 (integer -> INT16 .)
    PLUS            reduce using rule 47 (integer -> INT16 .)
    MINUS           reduce using rule 47 (integer -> INT16 .)
    EXCLAMATION     reduce using rule 47 (integer -> INT16 .)
    TILDE           reduce using rule 47 (integer -> INT16 .)
    COMMA           reduce using rule 47 (integer -> INT16 .)
    RPAREN          reduce using rule 47 (integer -> INT16 .)


state 150

    (48) integer -> INT32 .

    ASSIGN          reduce using rule 48 (integer -> INT32 .)
    NEWLINE         reduce using rule 48 (integer -> INT32 .)
    ID              reduce using rule 48 (integer -> INT32 .)
    CASE            reduce using rule 48 (integer -> INT32 .)
    RETURN          reduce using rule 48 (integer -> INT32 .)
    BREAK           reduce using rule 48 (integer -> INT32 .)
    NEXT            reduce using rule 48 (integer -> INT32 .)
    UNDERSCORE      reduce using rule 48 (integer -> INT32 .)
    ASTERISK        reduce using rule 48 (integer -> INT32 .)
    IF              reduce using rule 48 (integer -> INT32 .)
    UNLESS          reduce using rule 48 (integer -> INT32 .)
    WHILE           reduce using rule 48 (integer -> INT32 .)
    UNTIL           reduce using rule 48 (integer -> INT32 .)
    LOOP            reduce using rule 48 (integer -> INT32 .)
    LPAREN          reduce using rule 48 (integer -> INT32 .)
    LBRACKET        reduce using rule 48 (integer -> INT32 .)
    INTNUMBER       reduce using rule 48 (integer -> INT32 .)
    FLOATNUMBER     reduce using rule 48 (integer -> INT32 .)
    CHAR            reduce using rule 48 (integer -> INT32 .)
    TRUE            reduce using rule 48 (integer -> INT32 .)
    FALSE           reduce using rule 48 (integer -> INT32 .)
    STRING          reduce using rule 48 (integer -> INT32 .)
    PLUS            reduce using rule 48 (integer -> INT32 .)
    MINUS           reduce using rule 48 (integer -> INT32 .)
    EXCLAMATION     reduce using rule 48 (integer -> INT32 .)
    TILDE           reduce using rule 48 (integer -> INT32 .)
    COMMA           reduce using rule 48 (integer -> INT32 .)
    RPAREN          reduce using rule 48 (integer -> INT32 .)


state 151

    (49) integer -> INT64 .

    ASSIGN          reduce using rule 49 (integer -> INT64 .)
    NEWLINE         reduce using rule 49 (integer -> INT64 .)
    ID              reduce using rule 49 (integer -> INT64 .)
    CASE            reduce using rule 49 (integer -> INT64 .)
    RETURN          reduce using rule 49 (integer -> INT64 .)
    BREAK           reduce using rule 49 (integer -> INT64 .)
    NEXT            reduce using rule 49 (integer -> INT64 .)
    UNDERSCORE      reduce using rule 49 (integer -> INT64 .)
    ASTERISK        reduce using rule 49 (integer -> INT64 .)
    IF              reduce using rule 49 (integer -> INT64 .)
    UNLESS          reduce using rule 49 (integer -> INT64 .)
    WHILE           reduce using rule 49 (integer -> INT64 .)
    UNTIL           reduce using rule 49 (integer -> INT64 .)
    LOOP            reduce using rule 49 (integer -> INT64 .)
    LPAREN          reduce using rule 49 (integer -> INT64 .)
    LBRACKET        reduce using rule 49 (integer -> INT64 .)
    INTNUMBER       reduce using rule 49 (integer -> INT64 .)
    FLOATNUMBER     reduce using rule 49 (integer -> INT64 .)
    CHAR            reduce using rule 49 (integer -> INT64 .)
    TRUE            reduce using rule 49 (integer -> INT64 .)
    FALSE           reduce using rule 49 (integer -> INT64 .)
    STRING          reduce using rule 49 (integer -> INT64 .)
    PLUS            reduce using rule 49 (integer -> INT64 .)
    MINUS           reduce using rule 49 (integer -> INT64 .)
    EXCLAMATION     reduce using rule 49 (integer -> INT64 .)
    TILDE           reduce using rule 49 (integer -> INT64 .)
    COMMA           reduce using rule 49 (integer -> INT64 .)
    RPAREN          reduce using rule 49 (integer -> INT64 .)


state 152

    (50) integer -> INT128 .

    ASSIGN          reduce using rule 50 (integer -> INT128 .)
    NEWLINE         reduce using rule 50 (integer -> INT128 .)
    ID              reduce using rule 50 (integer -> INT128 .)
    CASE            reduce using rule 50 (integer -> INT128 .)
    RETURN          reduce using rule 50 (integer -> INT128 .)
    BREAK           reduce using rule 50 (integer -> INT128 .)
    NEXT            reduce using rule 50 (integer -> INT128 .)
    UNDERSCORE      reduce using rule 50 (integer -> INT128 .)
    ASTERISK        reduce using rule 50 (integer -> INT128 .)
    IF              reduce using rule 50 (integer -> INT128 .)
    UNLESS          reduce using rule 50 (integer -> INT128 .)
    WHILE           reduce using rule 50 (integer -> INT128 .)
    UNTIL           reduce using rule 50 (integer -> INT128 .)
    LOOP            reduce using rule 50 (integer -> INT128 .)
    LPAREN          reduce using rule 50 (integer -> INT128 .)
    LBRACKET        reduce using rule 50 (integer -> INT128 .)
    INTNUMBER       reduce using rule 50 (integer -> INT128 .)
    FLOATNUMBER     reduce using rule 50 (integer -> INT128 .)
    CHAR            reduce using rule 50 (integer -> INT128 .)
    TRUE            reduce using rule 50 (integer -> INT128 .)
    FALSE           reduce using rule 50 (integer -> INT128 .)
    STRING          reduce using rule 50 (integer -> INT128 .)
    PLUS            reduce using rule 50 (integer -> INT128 .)
    MINUS           reduce using rule 50 (integer -> INT128 .)
    EXCLAMATION     reduce using rule 50 (integer -> INT128 .)
    TILDE           reduce using rule 50 (integer -> INT128 .)
    COMMA           reduce using rule 50 (integer -> INT128 .)
    RPAREN          reduce using rule 50 (integer -> INT128 .)


state 153

    (51) integer -> UINT8 .

    ASSIGN          reduce using rule 51 (integer -> UINT8 .)
    NEWLINE         reduce using rule 51 (integer -> UINT8 .)
    ID              reduce using rule 51 (integer -> UINT8 .)
    CASE            reduce using rule 51 (integer -> UINT8 .)
    RETURN          reduce using rule 51 (integer -> UINT8 .)
    BREAK           reduce using rule 51 (integer -> UINT8 .)
    NEXT            reduce using rule 51 (integer -> UINT8 .)
    UNDERSCORE      reduce using rule 51 (integer -> UINT8 .)
    ASTERISK        reduce using rule 51 (integer -> UINT8 .)
    IF              reduce using rule 51 (integer -> UINT8 .)
    UNLESS          reduce using rule 51 (integer -> UINT8 .)
    WHILE           reduce using rule 51 (integer -> UINT8 .)
    UNTIL           reduce using rule 51 (integer -> UINT8 .)
    LOOP            reduce using rule 51 (integer -> UINT8 .)
    LPAREN          reduce using rule 51 (integer -> UINT8 .)
    LBRACKET        reduce using rule 51 (integer -> UINT8 .)
    INTNUMBER       reduce using rule 51 (integer -> UINT8 .)
    FLOATNUMBER     reduce using rule 51 (integer -> UINT8 .)
    CHAR            reduce using rule 51 (integer -> UINT8 .)
    TRUE            reduce using rule 51 (integer -> UINT8 .)
    FALSE           reduce using rule 51 (integer -> UINT8 .)
    STRING          reduce using rule 51 (integer -> UINT8 .)
    PLUS            reduce using rule 51 (integer -> UINT8 .)
    MINUS           reduce using rule 51 (integer -> UINT8 .)
    EXCLAMATION     reduce using rule 51 (integer -> UINT8 .)
    TILDE           reduce using rule 51 (integer -> UINT8 .)
    COMMA           reduce using rule 51 (integer -> UINT8 .)
    RPAREN          reduce using rule 51 (integer -> UINT8 .)


state 154

    (52) integer -> UINT16 .

    ASSIGN          reduce using rule 52 (integer -> UINT16 .)
    NEWLINE         reduce using rule 52 (integer -> UINT16 .)
    ID              reduce using rule 52 (integer -> UINT16 .)
    CASE            reduce using rule 52 (integer -> UINT16 .)
    RETURN          reduce using rule 52 (integer -> UINT16 .)
    BREAK           reduce using rule 52 (integer -> UINT16 .)
    NEXT            reduce using rule 52 (integer -> UINT16 .)
    UNDERSCORE      reduce using rule 52 (integer -> UINT16 .)
    ASTERISK        reduce using rule 52 (integer -> UINT16 .)
    IF              reduce using rule 52 (integer -> UINT16 .)
    UNLESS          reduce using rule 52 (integer -> UINT16 .)
    WHILE           reduce using rule 52 (integer -> UINT16 .)
    UNTIL           reduce using rule 52 (integer -> UINT16 .)
    LOOP            reduce using rule 52 (integer -> UINT16 .)
    LPAREN          reduce using rule 52 (integer -> UINT16 .)
    LBRACKET        reduce using rule 52 (integer -> UINT16 .)
    INTNUMBER       reduce using rule 52 (integer -> UINT16 .)
    FLOATNUMBER     reduce using rule 52 (integer -> UINT16 .)
    CHAR            reduce using rule 52 (integer -> UINT16 .)
    TRUE            reduce using rule 52 (integer -> UINT16 .)
    FALSE           reduce using rule 52 (integer -> UINT16 .)
    STRING          reduce using rule 52 (integer -> UINT16 .)
    PLUS            reduce using rule 52 (integer -> UINT16 .)
    MINUS           reduce using rule 52 (integer -> UINT16 .)
    EXCLAMATION     reduce using rule 52 (integer -> UINT16 .)
    TILDE           reduce using rule 52 (integer -> UINT16 .)
    COMMA           reduce using rule 52 (integer -> UINT16 .)
    RPAREN          reduce using rule 52 (integer -> UINT16 .)


state 155

    (53) integer -> UINT32 .

    ASSIGN          reduce using rule 53 (integer -> UINT32 .)
    NEWLINE         reduce using rule 53 (integer -> UINT32 .)
    ID              reduce using rule 53 (integer -> UINT32 .)
    CASE            reduce using rule 53 (integer -> UINT32 .)
    RETURN          reduce using rule 53 (integer -> UINT32 .)
    BREAK           reduce using rule 53 (integer -> UINT32 .)
    NEXT            reduce using rule 53 (integer -> UINT32 .)
    UNDERSCORE      reduce using rule 53 (integer -> UINT32 .)
    ASTERISK        reduce using rule 53 (integer -> UINT32 .)
    IF              reduce using rule 53 (integer -> UINT32 .)
    UNLESS          reduce using rule 53 (integer -> UINT32 .)
    WHILE           reduce using rule 53 (integer -> UINT32 .)
    UNTIL           reduce using rule 53 (integer -> UINT32 .)
    LOOP            reduce using rule 53 (integer -> UINT32 .)
    LPAREN          reduce using rule 53 (integer -> UINT32 .)
    LBRACKET        reduce using rule 53 (integer -> UINT32 .)
    INTNUMBER       reduce using rule 53 (integer -> UINT32 .)
    FLOATNUMBER     reduce using rule 53 (integer -> UINT32 .)
    CHAR            reduce using rule 53 (integer -> UINT32 .)
    TRUE            reduce using rule 53 (integer -> UINT32 .)
    FALSE           reduce using rule 53 (integer -> UINT32 .)
    STRING          reduce using rule 53 (integer -> UINT32 .)
    PLUS            reduce using rule 53 (integer -> UINT32 .)
    MINUS           reduce using rule 53 (integer -> UINT32 .)
    EXCLAMATION     reduce using rule 53 (integer -> UINT32 .)
    TILDE           reduce using rule 53 (integer -> UINT32 .)
    COMMA           reduce using rule 53 (integer -> UINT32 .)
    RPAREN          reduce using rule 53 (integer -> UINT32 .)


state 156

    (54) integer -> UINT64 .

    ASSIGN          reduce using rule 54 (integer -> UINT64 .)
    NEWLINE         reduce using rule 54 (integer -> UINT64 .)
    ID              reduce using rule 54 (integer -> UINT64 .)
    CASE            reduce using rule 54 (integer -> UINT64 .)
    RETURN          reduce using rule 54 (integer -> UINT64 .)
    BREAK           reduce using rule 54 (integer -> UINT64 .)
    NEXT            reduce using rule 54 (integer -> UINT64 .)
    UNDERSCORE      reduce using rule 54 (integer -> UINT64 .)
    ASTERISK        reduce using rule 54 (integer -> UINT64 .)
    IF              reduce using rule 54 (integer -> UINT64 .)
    UNLESS          reduce using rule 54 (integer -> UINT64 .)
    WHILE           reduce using rule 54 (integer -> UINT64 .)
    UNTIL           reduce using rule 54 (integer -> UINT64 .)
    LOOP            reduce using rule 54 (integer -> UINT64 .)
    LPAREN          reduce using rule 54 (integer -> UINT64 .)
    LBRACKET        reduce using rule 54 (integer -> UINT64 .)
    INTNUMBER       reduce using rule 54 (integer -> UINT64 .)
    FLOATNUMBER     reduce using rule 54 (integer -> UINT64 .)
    CHAR            reduce using rule 54 (integer -> UINT64 .)
    TRUE            reduce using rule 54 (integer -> UINT64 .)
    FALSE           reduce using rule 54 (integer -> UINT64 .)
    STRING          reduce using rule 54 (integer -> UINT64 .)
    PLUS            reduce using rule 54 (integer -> UINT64 .)
    MINUS           reduce using rule 54 (integer -> UINT64 .)
    EXCLAMATION     reduce using rule 54 (integer -> UINT64 .)
    TILDE           reduce using rule 54 (integer -> UINT64 .)
    COMMA           reduce using rule 54 (integer -> UINT64 .)
    RPAREN          reduce using rule 54 (integer -> UINT64 .)


state 157

    (55) integer -> UINT128 .

    ASSIGN          reduce using rule 55 (integer -> UINT128 .)
    NEWLINE         reduce using rule 55 (integer -> UINT128 .)
    ID              reduce using rule 55 (integer -> UINT128 .)
    CASE            reduce using rule 55 (integer -> UINT128 .)
    RETURN          reduce using rule 55 (integer -> UINT128 .)
    BREAK           reduce using rule 55 (integer -> UINT128 .)
    NEXT            reduce using rule 55 (integer -> UINT128 .)
    UNDERSCORE      reduce using rule 55 (integer -> UINT128 .)
    ASTERISK        reduce using rule 55 (integer -> UINT128 .)
    IF              reduce using rule 55 (integer -> UINT128 .)
    UNLESS          reduce using rule 55 (integer -> UINT128 .)
    WHILE           reduce using rule 55 (integer -> UINT128 .)
    UNTIL           reduce using rule 55 (integer -> UINT128 .)
    LOOP            reduce using rule 55 (integer -> UINT128 .)
    LPAREN          reduce using rule 55 (integer -> UINT128 .)
    LBRACKET        reduce using rule 55 (integer -> UINT128 .)
    INTNUMBER       reduce using rule 55 (integer -> UINT128 .)
    FLOATNUMBER     reduce using rule 55 (integer -> UINT128 .)
    CHAR            reduce using rule 55 (integer -> UINT128 .)
    TRUE            reduce using rule 55 (integer -> UINT128 .)
    FALSE           reduce using rule 55 (integer -> UINT128 .)
    STRING          reduce using rule 55 (integer -> UINT128 .)
    PLUS            reduce using rule 55 (integer -> UINT128 .)
    MINUS           reduce using rule 55 (integer -> UINT128 .)
    EXCLAMATION     reduce using rule 55 (integer -> UINT128 .)
    TILDE           reduce using rule 55 (integer -> UINT128 .)
    COMMA           reduce using rule 55 (integer -> UINT128 .)
    RPAREN          reduce using rule 55 (integer -> UINT128 .)


state 158

    (56) float -> FLOAT .

    ASSIGN          reduce using rule 56 (float -> FLOAT .)
    NEWLINE         reduce using rule 56 (float -> FLOAT .)
    ID              reduce using rule 56 (float -> FLOAT .)
    CASE            reduce using rule 56 (float -> FLOAT .)
    RETURN          reduce using rule 56 (float -> FLOAT .)
    BREAK           reduce using rule 56 (float -> FLOAT .)
    NEXT            reduce using rule 56 (float -> FLOAT .)
    UNDERSCORE      reduce using rule 56 (float -> FLOAT .)
    ASTERISK        reduce using rule 56 (float -> FLOAT .)
    IF              reduce using rule 56 (float -> FLOAT .)
    UNLESS          reduce using rule 56 (float -> FLOAT .)
    WHILE           reduce using rule 56 (float -> FLOAT .)
    UNTIL           reduce using rule 56 (float -> FLOAT .)
    LOOP            reduce using rule 56 (float -> FLOAT .)
    LPAREN          reduce using rule 56 (float -> FLOAT .)
    LBRACKET        reduce using rule 56 (float -> FLOAT .)
    INTNUMBER       reduce using rule 56 (float -> FLOAT .)
    FLOATNUMBER     reduce using rule 56 (float -> FLOAT .)
    CHAR            reduce using rule 56 (float -> FLOAT .)
    TRUE            reduce using rule 56 (float -> FLOAT .)
    FALSE           reduce using rule 56 (float -> FLOAT .)
    STRING          reduce using rule 56 (float -> FLOAT .)
    PLUS            reduce using rule 56 (float -> FLOAT .)
    MINUS           reduce using rule 56 (float -> FLOAT .)
    EXCLAMATION     reduce using rule 56 (float -> FLOAT .)
    TILDE           reduce using rule 56 (float -> FLOAT .)
    COMMA           reduce using rule 56 (float -> FLOAT .)
    RPAREN          reduce using rule 56 (float -> FLOAT .)


state 159

    (57) float -> FLOAT32 .

    ASSIGN          reduce using rule 57 (float -> FLOAT32 .)
    NEWLINE         reduce using rule 57 (float -> FLOAT32 .)
    ID              reduce using rule 57 (float -> FLOAT32 .)
    CASE            reduce using rule 57 (float -> FLOAT32 .)
    RETURN          reduce using rule 57 (float -> FLOAT32 .)
    BREAK           reduce using rule 57 (float -> FLOAT32 .)
    NEXT            reduce using rule 57 (float -> FLOAT32 .)
    UNDERSCORE      reduce using rule 57 (float -> FLOAT32 .)
    ASTERISK        reduce using rule 57 (float -> FLOAT32 .)
    IF              reduce using rule 57 (float -> FLOAT32 .)
    UNLESS          reduce using rule 57 (float -> FLOAT32 .)
    WHILE           reduce using rule 57 (float -> FLOAT32 .)
    UNTIL           reduce using rule 57 (float -> FLOAT32 .)
    LOOP            reduce using rule 57 (float -> FLOAT32 .)
    LPAREN          reduce using rule 57 (float -> FLOAT32 .)
    LBRACKET        reduce using rule 57 (float -> FLOAT32 .)
    INTNUMBER       reduce using rule 57 (float -> FLOAT32 .)
    FLOATNUMBER     reduce using rule 57 (float -> FLOAT32 .)
    CHAR            reduce using rule 57 (float -> FLOAT32 .)
    TRUE            reduce using rule 57 (float -> FLOAT32 .)
    FALSE           reduce using rule 57 (float -> FLOAT32 .)
    STRING          reduce using rule 57 (float -> FLOAT32 .)
    PLUS            reduce using rule 57 (float -> FLOAT32 .)
    MINUS           reduce using rule 57 (float -> FLOAT32 .)
    EXCLAMATION     reduce using rule 57 (float -> FLOAT32 .)
    TILDE           reduce using rule 57 (float -> FLOAT32 .)
    COMMA           reduce using rule 57 (float -> FLOAT32 .)
    RPAREN          reduce using rule 57 (float -> FLOAT32 .)


state 160

    (58) float -> FLOAT64 .

    ASSIGN          reduce using rule 58 (float -> FLOAT64 .)
    NEWLINE         reduce using rule 58 (float -> FLOAT64 .)
    ID              reduce using rule 58 (float -> FLOAT64 .)
    CASE            reduce using rule 58 (float -> FLOAT64 .)
    RETURN          reduce using rule 58 (float -> FLOAT64 .)
    BREAK           reduce using rule 58 (float -> FLOAT64 .)
    NEXT            reduce using rule 58 (float -> FLOAT64 .)
    UNDERSCORE      reduce using rule 58 (float -> FLOAT64 .)
    ASTERISK        reduce using rule 58 (float -> FLOAT64 .)
    IF              reduce using rule 58 (float -> FLOAT64 .)
    UNLESS          reduce using rule 58 (float -> FLOAT64 .)
    WHILE           reduce using rule 58 (float -> FLOAT64 .)
    UNTIL           reduce using rule 58 (float -> FLOAT64 .)
    LOOP            reduce using rule 58 (float -> FLOAT64 .)
    LPAREN          reduce using rule 58 (float -> FLOAT64 .)
    LBRACKET        reduce using rule 58 (float -> FLOAT64 .)
    INTNUMBER       reduce using rule 58 (float -> FLOAT64 .)
    FLOATNUMBER     reduce using rule 58 (float -> FLOAT64 .)
    CHAR            reduce using rule 58 (float -> FLOAT64 .)
    TRUE            reduce using rule 58 (float -> FLOAT64 .)
    FALSE           reduce using rule 58 (float -> FLOAT64 .)
    STRING          reduce using rule 58 (float -> FLOAT64 .)
    PLUS            reduce using rule 58 (float -> FLOAT64 .)
    MINUS           reduce using rule 58 (float -> FLOAT64 .)
    EXCLAMATION     reduce using rule 58 (float -> FLOAT64 .)
    TILDE           reduce using rule 58 (float -> FLOAT64 .)
    COMMA           reduce using rule 58 (float -> FLOAT64 .)
    RPAREN          reduce using rule 58 (float -> FLOAT64 .)


state 161

    (59) boolean -> BOOL .

    ASSIGN          reduce using rule 59 (boolean -> BOOL .)
    NEWLINE         reduce using rule 59 (boolean -> BOOL .)
    ID              reduce using rule 59 (boolean -> BOOL .)
    CASE            reduce using rule 59 (boolean -> BOOL .)
    RETURN          reduce using rule 59 (boolean -> BOOL .)
    BREAK           reduce using rule 59 (boolean -> BOOL .)
    NEXT            reduce using rule 59 (boolean -> BOOL .)
    UNDERSCORE      reduce using rule 59 (boolean -> BOOL .)
    ASTERISK        reduce using rule 59 (boolean -> BOOL .)
    IF              reduce using rule 59 (boolean -> BOOL .)
    UNLESS          reduce using rule 59 (boolean -> BOOL .)
    WHILE           reduce using rule 59 (boolean -> BOOL .)
    UNTIL           reduce using rule 59 (boolean -> BOOL .)
    LOOP            reduce using rule 59 (boolean -> BOOL .)
    LPAREN          reduce using rule 59 (boolean -> BOOL .)
    LBRACKET        reduce using rule 59 (boolean -> BOOL .)
    INTNUMBER       reduce using rule 59 (boolean -> BOOL .)
    FLOATNUMBER     reduce using rule 59 (boolean -> BOOL .)
    CHAR            reduce using rule 59 (boolean -> BOOL .)
    TRUE            reduce using rule 59 (boolean -> BOOL .)
    FALSE           reduce using rule 59 (boolean -> BOOL .)
    STRING          reduce using rule 59 (boolean -> BOOL .)
    PLUS            reduce using rule 59 (boolean -> BOOL .)
    MINUS           reduce using rule 59 (boolean -> BOOL .)
    EXCLAMATION     reduce using rule 59 (boolean -> BOOL .)
    TILDE           reduce using rule 59 (boolean -> BOOL .)
    COMMA           reduce using rule 59 (boolean -> BOOL .)
    RPAREN          reduce using rule 59 (boolean -> BOOL .)


state 162

    (24) module -> MODULE ID statements END .

    MODULE          reduce using rule 24 (module -> MODULE ID statements END .)
    DEF             reduce using rule 24 (module -> MODULE ID statements END .)
    $end            reduce using rule 24 (module -> MODULE ID statements END .)


state 163

    (80) statements -> statement NEWLINE . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statement                      shift and go to state 67
    statements                     shift and go to state 219
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 164

    (111) iterator -> expression DOT . MULTI statements
    (112) iterator -> expression DOT . EACH DO PIPE ID PIPE statements END
    (113) iterator -> expression DOT . EACH LBRACE PIPE ID PIPE RBRACE statements

    MULTI           shift and go to state 220
    EACH            shift and go to state 221


state 165

    (114) case_structure -> CASE expression . when_list opt_else END
    (115) when_list -> . WHEN expression statements
    (116) when_list -> . when_list WHEN expression statements

    WHEN            shift and go to state 223

    when_list                      shift and go to state 222

state 166

    (117) return_statement -> RETURN opt_expression .

    NEWLINE         reduce using rule 117 (return_statement -> RETURN opt_expression .)
    END             reduce using rule 117 (return_statement -> RETURN opt_expression .)
    ELSIF           reduce using rule 117 (return_statement -> RETURN opt_expression .)
    ELSE            reduce using rule 117 (return_statement -> RETURN opt_expression .)
    RBRACE          reduce using rule 117 (return_statement -> RETURN opt_expression .)
    WHEN            reduce using rule 117 (return_statement -> RETURN opt_expression .)


state 167

    (120) opt_expression -> expression .

    NEWLINE         reduce using rule 120 (opt_expression -> expression .)
    END             reduce using rule 120 (opt_expression -> expression .)
    ELSIF           reduce using rule 120 (opt_expression -> expression .)
    ELSE            reduce using rule 120 (opt_expression -> expression .)
    RBRACE          reduce using rule 120 (opt_expression -> expression .)
    WHEN            reduce using rule 120 (opt_expression -> expression .)


state 168

    (121) opt_expression -> empty .

    NEWLINE         reduce using rule 121 (opt_expression -> empty .)
    END             reduce using rule 121 (opt_expression -> empty .)
    ELSIF           reduce using rule 121 (opt_expression -> empty .)
    ELSE            reduce using rule 121 (opt_expression -> empty .)
    RBRACE          reduce using rule 121 (opt_expression -> empty .)
    WHEN            reduce using rule 121 (opt_expression -> empty .)


state 169

    (118) break_statement -> BREAK opt_expression .

    NEWLINE         reduce using rule 118 (break_statement -> BREAK opt_expression .)
    END             reduce using rule 118 (break_statement -> BREAK opt_expression .)
    ELSIF           reduce using rule 118 (break_statement -> BREAK opt_expression .)
    ELSE            reduce using rule 118 (break_statement -> BREAK opt_expression .)
    RBRACE          reduce using rule 118 (break_statement -> BREAK opt_expression .)
    WHEN            reduce using rule 118 (break_statement -> BREAK opt_expression .)


state 170

    (119) next_statement -> NEXT opt_expression .

    NEWLINE         reduce using rule 119 (next_statement -> NEXT opt_expression .)
    END             reduce using rule 119 (next_statement -> NEXT opt_expression .)
    ELSIF           reduce using rule 119 (next_statement -> NEXT opt_expression .)
    ELSE            reduce using rule 119 (next_statement -> NEXT opt_expression .)
    RBRACE          reduce using rule 119 (next_statement -> NEXT opt_expression .)
    WHEN            reduce using rule 119 (next_statement -> NEXT opt_expression .)


state 171

    (93) if_statement -> IF if_condition . statements opt_elsif opt_else END
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 224
    statement                      shift and go to state 67
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 172

    (95) if_condition -> expression .
    (96) if_condition -> expression . LBRACE statements RBRACE

    ID              reduce using rule 95 (if_condition -> expression .)
    CASE            reduce using rule 95 (if_condition -> expression .)
    RETURN          reduce using rule 95 (if_condition -> expression .)
    BREAK           reduce using rule 95 (if_condition -> expression .)
    NEXT            reduce using rule 95 (if_condition -> expression .)
    UNDERSCORE      reduce using rule 95 (if_condition -> expression .)
    ASTERISK        reduce using rule 95 (if_condition -> expression .)
    IF              reduce using rule 95 (if_condition -> expression .)
    UNLESS          reduce using rule 95 (if_condition -> expression .)
    WHILE           reduce using rule 95 (if_condition -> expression .)
    UNTIL           reduce using rule 95 (if_condition -> expression .)
    LOOP            reduce using rule 95 (if_condition -> expression .)
    LPAREN          reduce using rule 95 (if_condition -> expression .)
    LBRACKET        reduce using rule 95 (if_condition -> expression .)
    INTNUMBER       reduce using rule 95 (if_condition -> expression .)
    FLOATNUMBER     reduce using rule 95 (if_condition -> expression .)
    CHAR            reduce using rule 95 (if_condition -> expression .)
    TRUE            reduce using rule 95 (if_condition -> expression .)
    FALSE           reduce using rule 95 (if_condition -> expression .)
    STRING          reduce using rule 95 (if_condition -> expression .)
    PLUS            reduce using rule 95 (if_condition -> expression .)
    MINUS           reduce using rule 95 (if_condition -> expression .)
    EXCLAMATION     reduce using rule 95 (if_condition -> expression .)
    TILDE           reduce using rule 95 (if_condition -> expression .)
    LBRACE          shift and go to state 225


state 173

    (94) unless_statement -> UNLESS if_condition . statements opt_else END
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 226
    statement                      shift and go to state 67
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 174

    (108) while -> WHILE expression . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 68
    statements                     shift and go to state 227
    statement                      shift and go to state 67
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 175

    (109) until -> UNTIL expression . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 68
    statements                     shift and go to state 228
    statement                      shift and go to state 67
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 176

    (110) loop -> LOOP statements .

    NEWLINE         reduce using rule 110 (loop -> LOOP statements .)
    END             reduce using rule 110 (loop -> LOOP statements .)
    ELSIF           reduce using rule 110 (loop -> LOOP statements .)
    ELSE            reduce using rule 110 (loop -> LOOP statements .)
    RBRACE          reduce using rule 110 (loop -> LOOP statements .)
    WHEN            reduce using rule 110 (loop -> LOOP statements .)


state 177

    (33) argument -> ID .
    (34) argument -> ID . COLON types
    (35) argument -> ID . ASSIGN expression
    (36) argument -> ID . COLON types ASSIGN expression

    COMMA           reduce using rule 33 (argument -> ID .)
    RPAREN          reduce using rule 33 (argument -> ID .)
    COLON           shift and go to state 229
    ASSIGN          shift and go to state 230


state 178

    (27) function -> DEF ID LPAREN opt_argument_list . RPAREN opt_return_type statements END

    RPAREN          shift and go to state 231


state 179

    (29) opt_argument_list -> argument_list .

    RPAREN          reduce using rule 29 (opt_argument_list -> argument_list .)


state 180

    (30) opt_argument_list -> empty .

    RPAREN          reduce using rule 30 (opt_argument_list -> empty .)


state 181

    (31) argument_list -> argument .
    (32) argument_list -> argument . COMMA argument_list

    RPAREN          reduce using rule 31 (argument_list -> argument .)
    COMMA           shift and go to state 232


state 182

    (28) function -> DEF ID opt_return_type NEWLINE . statements END
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 233
    statement                      shift and go to state 67
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 183

    (37) opt_return_type -> COLON types .

    NEWLINE         reduce using rule 37 (opt_return_type -> COLON types .)
    ID              reduce using rule 37 (opt_return_type -> COLON types .)
    CASE            reduce using rule 37 (opt_return_type -> COLON types .)
    RETURN          reduce using rule 37 (opt_return_type -> COLON types .)
    BREAK           reduce using rule 37 (opt_return_type -> COLON types .)
    NEXT            reduce using rule 37 (opt_return_type -> COLON types .)
    UNDERSCORE      reduce using rule 37 (opt_return_type -> COLON types .)
    ASTERISK        reduce using rule 37 (opt_return_type -> COLON types .)
    IF              reduce using rule 37 (opt_return_type -> COLON types .)
    UNLESS          reduce using rule 37 (opt_return_type -> COLON types .)
    WHILE           reduce using rule 37 (opt_return_type -> COLON types .)
    UNTIL           reduce using rule 37 (opt_return_type -> COLON types .)
    LOOP            reduce using rule 37 (opt_return_type -> COLON types .)
    LPAREN          reduce using rule 37 (opt_return_type -> COLON types .)
    LBRACKET        reduce using rule 37 (opt_return_type -> COLON types .)
    INTNUMBER       reduce using rule 37 (opt_return_type -> COLON types .)
    FLOATNUMBER     reduce using rule 37 (opt_return_type -> COLON types .)
    CHAR            reduce using rule 37 (opt_return_type -> COLON types .)
    TRUE            reduce using rule 37 (opt_return_type -> COLON types .)
    FALSE           reduce using rule 37 (opt_return_type -> COLON types .)
    STRING          reduce using rule 37 (opt_return_type -> COLON types .)
    PLUS            reduce using rule 37 (opt_return_type -> COLON types .)
    MINUS           reduce using rule 37 (opt_return_type -> COLON types .)
    EXCLAMATION     reduce using rule 37 (opt_return_type -> COLON types .)
    TILDE           reduce using rule 37 (opt_return_type -> COLON types .)


state 184

    (132) ternary_expression -> logical_or_expression QMARK expression . TCOLON expression

    TCOLON          shift and go to state 234


state 185

    (135) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (137) logical_and_expression -> logical_and_expression . AND equality_expression

    QMARK           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONSTANT        reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MODULE          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DEF             reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    $end            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOT             reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEWLINE         reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    END             reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHEN            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSIF           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSE            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACE          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACE          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ID              reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CASE            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RETURN          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    BREAK           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEXT            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNDERSCORE      reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASTERISK        reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IF              reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNLESS          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHILE           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNTIL           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LOOP            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LPAREN          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACKET        reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTNUMBER       reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FLOATNUMBER     reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CHAR            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRUE            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FALSE           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRING          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    PLUS            reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MINUS           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    EXCLAMATION     reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TILDE           reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TCOLON          reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTERP_END      reduce using rule 135 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 105


state 186

    (124) assignment_expression -> assignment_target ASSIGN expression .

    CONSTANT        reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    MODULE          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    DEF             reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    $end            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    DOT             reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    NEWLINE         reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    END             reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    RPAREN          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    COMMA           reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACKET        reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    WHEN            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSIF           reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSE            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACE          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACE          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    ID              reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    CASE            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    RETURN          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    BREAK           reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    NEXT            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    UNDERSCORE      reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    ASTERISK        reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    IF              reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    UNLESS          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    WHILE           reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    UNTIL           reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    LOOP            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    LPAREN          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACKET        reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    INTNUMBER       reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    FLOATNUMBER     reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    CHAR            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    TRUE            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    FALSE           reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    STRING          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    PLUS            reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    MINUS           reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    EXCLAMATION     reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    TILDE           reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    TCOLON          reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)
    INTERP_END      reduce using rule 124 (assignment_expression -> assignment_target ASSIGN expression .)


state 187

    (125) assignment_expression -> assignment_target PLUS_ASSIGN expression .

    CONSTANT        reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MODULE          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DEF             reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    $end            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DOT             reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEWLINE         reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    END             reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    COMMA           reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHEN            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSE            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACE          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACE          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ID              reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CASE            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RETURN          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    BREAK           reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEXT            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ASTERISK        reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    IF              reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNLESS          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHILE           reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNTIL           reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LOOP            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LPAREN          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CHAR            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TRUE            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FALSE           reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    STRING          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    PLUS            reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MINUS           reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TILDE           reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TCOLON          reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTERP_END      reduce using rule 125 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)


state 188

    (126) assignment_expression -> assignment_target MINUS_ASSIGN expression .

    CONSTANT        reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MODULE          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DEF             reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    $end            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DOT             reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEWLINE         reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    END             reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    COMMA           reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHEN            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSE            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACE          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACE          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ID              reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CASE            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RETURN          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    BREAK           reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEXT            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ASTERISK        reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    IF              reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNLESS          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHILE           reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNTIL           reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LOOP            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LPAREN          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CHAR            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TRUE            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FALSE           reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    STRING          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    PLUS            reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MINUS           reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TILDE           reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TCOLON          reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTERP_END      reduce using rule 126 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)


state 189

    (127) assignment_expression -> assignment_target MULTI_ASSIGN expression .

    CONSTANT        reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MODULE          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DEF             reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    $end            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DOT             reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEWLINE         reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    END             reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RPAREN          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    COMMA           reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACKET        reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHEN            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSIF           reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSE            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACE          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACE          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ID              reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CASE            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RETURN          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    BREAK           reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEXT            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNDERSCORE      reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ASTERISK        reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    IF              reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNLESS          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHILE           reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNTIL           reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LOOP            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LPAREN          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACKET        reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTNUMBER       reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CHAR            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TRUE            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FALSE           reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    STRING          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    PLUS            reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MINUS           reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    EXCLAMATION     reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TILDE           reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TCOLON          reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTERP_END      reduce using rule 127 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)


state 190

    (128) assignment_expression -> assignment_target DIVIDE_ASSIGN expression .

    CONSTANT        reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MODULE          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DEF             reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    $end            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DOT             reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEWLINE         reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    END             reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACKET        reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHEN            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACE          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACE          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ID              reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    BREAK           reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEXT            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNDERSCORE      reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ASTERISK        reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    IF              reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNLESS          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHILE           reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNTIL           reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LOOP            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LPAREN          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTNUMBER       reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CHAR            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TRUE            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FALSE           reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    PLUS            reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MINUS           reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    EXCLAMATION     reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TILDE           reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TCOLON          reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTERP_END      reduce using rule 128 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)


state 191

    (137) logical_and_expression -> logical_and_expression AND equality_expression .
    (139) equality_expression -> equality_expression . EQUAL relational_expression
    (140) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (141) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    QMARK           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONSTANT        reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MODULE          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEF             reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    $end            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOT             reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEWLINE         reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    END             reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHEN            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSIF           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSE            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACE          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACE          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ID              reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CASE            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RETURN          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    BREAK           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEXT            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNDERSCORE      reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASTERISK        reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IF              reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNLESS          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHILE           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNTIL           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LOOP            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACKET        reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTNUMBER       reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOATNUMBER     reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRUE            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FALSE           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRING          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    PLUS            reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MINUS           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EXCLAMATION     reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TILDE           reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TCOLON          reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTERP_END      reduce using rule 137 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQUAL           shift and go to state 108
    NOT_EQUAL       shift and go to state 109
    TIPO_EQUAL      shift and go to state 110


state 192

    (139) equality_expression -> equality_expression EQUAL relational_expression .
    (143) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (144) relational_expression -> relational_expression . LESS_THAN additive_expression
    (145) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (146) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    QMARK           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONSTANT        reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    MODULE          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    DEF             reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    $end            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOT             reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEWLINE         reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    END             reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACKET        reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHEN            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSIF           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSE            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACE          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACE          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    ID              reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    CASE            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    RETURN          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    BREAK           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEXT            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    ASTERISK        reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    IF              reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNLESS          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHILE           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNTIL           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOOP            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    LPAREN          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACKET        reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTNUMBER       reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    CHAR            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    TRUE            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    FALSE           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    PLUS            reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    MINUS           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    TILDE           reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    TCOLON          reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTERP_END      reduce using rule 139 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 116
    LESS_THAN       shift and go to state 117
    GREATER_EQUAL   shift and go to state 118
    LESS_EQUAL      shift and go to state 119


state 193

    (140) equality_expression -> equality_expression NOT_EQUAL relational_expression .
    (143) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (144) relational_expression -> relational_expression . LESS_THAN additive_expression
    (145) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (146) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    AND             reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    QMARK           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    OR              reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CONSTANT        reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MODULE          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DEF             reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    $end            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOT             reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEWLINE         reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    END             reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RPAREN          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    COMMA           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACKET        reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHEN            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSIF           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSE            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACE          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACE          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ID              reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CASE            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RETURN          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    BREAK           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEXT            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ASTERISK        reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    IF              reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNLESS          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHILE           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNTIL           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LOOP            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LPAREN          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACKET        reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CHAR            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TRUE            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FALSE           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    STRING          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    PLUS            reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MINUS           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TILDE           reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TCOLON          reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTERP_END      reduce using rule 140 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 116
    LESS_THAN       shift and go to state 117
    GREATER_EQUAL   shift and go to state 118
    LESS_EQUAL      shift and go to state 119


state 194

    (141) equality_expression -> equality_expression TIPO_EQUAL relational_expression .
    (143) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (144) relational_expression -> relational_expression . LESS_THAN additive_expression
    (145) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (146) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    AND             reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    QMARK           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    OR              reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CONSTANT        reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MODULE          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DEF             reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    $end            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOT             reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEWLINE         reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    END             reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RPAREN          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    COMMA           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACKET        reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHEN            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSIF           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSE            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACE          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACE          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ID              reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CASE            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RETURN          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    BREAK           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEXT            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ASTERISK        reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    IF              reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNLESS          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHILE           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNTIL           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LOOP            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LPAREN          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACKET        reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CHAR            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TRUE            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FALSE           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    STRING          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    PLUS            reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MINUS           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TILDE           reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TCOLON          reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTERP_END      reduce using rule 141 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 116
    LESS_THAN       shift and go to state 117
    GREATER_EQUAL   shift and go to state 118
    LESS_EQUAL      shift and go to state 119


state 195

    (166) postfix_suffixes -> postfix_suffix postfix_suffixes .

    ASSIGN          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    PLUS_ASSIGN     reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MINUS_ASSIGN    reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MULTI_ASSIGN    reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DIVIDE_ASSIGN   reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    POTENCIACAO     reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MULTI           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DIVIDE          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MODULO          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    PLUS            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MINUS           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    GREATER_THAN    reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LESS_THAN       reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    GREATER_EQUAL   reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LESS_EQUAL      reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    EQUAL           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NOT_EQUAL       reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TIPO_EQUAL      reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    AND             reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    QMARK           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    OR              reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CONSTANT        reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MODULE          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DEF             reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    $end            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DOT             reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NEWLINE         reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    END             reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RPAREN          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    COMMA           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RBRACKET        reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    WHEN            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ELSIF           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ELSE            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RBRACE          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LBRACE          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ID              reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CASE            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RETURN          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    BREAK           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NEXT            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNDERSCORE      reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ASTERISK        reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    IF              reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNLESS          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    WHILE           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNTIL           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LOOP            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LPAREN          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LBRACKET        reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    INTNUMBER       reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    FLOATNUMBER     reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CHAR            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TRUE            reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    FALSE           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    STRING          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    EXCLAMATION     reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TILDE           reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TCOLON          reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    INTERP_END      reduce using rule 166 (postfix_suffixes -> postfix_suffix postfix_suffixes .)


state 196

    (168) postfix_suffix -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 235


state 197

    (169) postfix_suffix -> DOTDOT primary_expression .

    LBRACKET        reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    DOTDOT          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    DOTDOTDOT       reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    ASSIGN          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    PLUS_ASSIGN     reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    MINUS_ASSIGN    reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    MULTI_ASSIGN    reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    POTENCIACAO     reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    MULTI           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    DIVIDE          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    MODULO          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    PLUS            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    MINUS           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    GREATER_THAN    reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    LESS_THAN       reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    GREATER_EQUAL   reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    LESS_EQUAL      reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    EQUAL           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    NOT_EQUAL       reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    TIPO_EQUAL      reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    AND             reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    QMARK           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    OR              reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    CONSTANT        reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    MODULE          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    DEF             reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    $end            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    DOT             reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    NEWLINE         reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    END             reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    RPAREN          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    COMMA           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    RBRACKET        reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    WHEN            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    ELSIF           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    ELSE            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    RBRACE          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    LBRACE          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    ID              reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    CASE            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    RETURN          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    BREAK           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    NEXT            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    UNDERSCORE      reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    ASTERISK        reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    IF              reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    UNLESS          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    WHILE           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    UNTIL           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    LOOP            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    LPAREN          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    INTNUMBER       reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    FLOATNUMBER     reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    CHAR            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    TRUE            reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    FALSE           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    STRING          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    EXCLAMATION     reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    TILDE           reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    TCOLON          reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)
    INTERP_END      reduce using rule 169 (postfix_suffix -> DOTDOT primary_expression .)


state 198

    (170) postfix_suffix -> DOTDOTDOT primary_expression .

    LBRACKET        reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOTDOT          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOTDOTDOT       reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ASSIGN          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    PLUS_ASSIGN     reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MINUS_ASSIGN    reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MULTI_ASSIGN    reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    POTENCIACAO     reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MULTI           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DIVIDE          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MODULO          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    PLUS            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MINUS           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    GREATER_THAN    reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LESS_THAN       reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    GREATER_EQUAL   reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LESS_EQUAL      reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    EQUAL           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NOT_EQUAL       reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TIPO_EQUAL      reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    AND             reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    QMARK           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    OR              reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CONSTANT        reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MODULE          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DEF             reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    $end            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOT             reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NEWLINE         reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    END             reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RPAREN          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    COMMA           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RBRACKET        reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    WHEN            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ELSIF           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ELSE            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RBRACE          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LBRACE          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ID              reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CASE            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RETURN          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    BREAK           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NEXT            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNDERSCORE      reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ASTERISK        reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    IF              reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNLESS          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    WHILE           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNTIL           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LOOP            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LPAREN          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    INTNUMBER       reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    FLOATNUMBER     reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CHAR            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TRUE            reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    FALSE           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    STRING          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    EXCLAMATION     reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TILDE           reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TCOLON          reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)
    INTERP_END      reduce using rule 170 (postfix_suffix -> DOTDOTDOT primary_expression .)


state 199

    (143) relational_expression -> relational_expression GREATER_THAN additive_expression .
    (148) additive_expression -> additive_expression . PLUS multiplicative_expression
    (149) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_THAN       reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EQUAL           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    AND             reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    QMARK           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    OR              reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CONSTANT        reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    MODULE          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DEF             reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    $end            reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOT             reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEWLINE         reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    END             reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RPAREN          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    COMMA           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACKET        reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHEN            reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSIF           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSE            reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACE          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACE          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ID              reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CASE            reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RETURN          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    BREAK           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEXT            reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNDERSCORE      reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ASTERISK        reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    IF              reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNLESS          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHILE           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNTIL           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LOOP            reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LPAREN          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACKET        reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTNUMBER       reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CHAR            reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TRUE            reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FALSE           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    STRING          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EXCLAMATION     reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TILDE           reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TCOLON          reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTERP_END      reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121

  ! PLUS            [ reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 143 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]


state 200

    (144) relational_expression -> relational_expression LESS_THAN additive_expression .
    (148) additive_expression -> additive_expression . PLUS multiplicative_expression
    (149) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_THAN       reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EQUAL           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    AND             reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    QMARK           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    OR              reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CONSTANT        reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    MODULE          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DEF             reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    $end            reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOT             reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEWLINE         reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    END             reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RPAREN          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    COMMA           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACKET        reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHEN            reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSIF           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSE            reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACE          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACE          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ID              reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CASE            reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RETURN          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    BREAK           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEXT            reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNDERSCORE      reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ASTERISK        reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    IF              reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNLESS          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHILE           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNTIL           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LOOP            reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LPAREN          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACKET        reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTNUMBER       reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CHAR            reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TRUE            reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FALSE           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    STRING          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EXCLAMATION     reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TILDE           reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TCOLON          reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTERP_END      reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121

  ! PLUS            [ reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 144 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]


state 201

    (145) relational_expression -> relational_expression GREATER_EQUAL additive_expression .
    (148) additive_expression -> additive_expression . PLUS multiplicative_expression
    (149) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EQUAL           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    AND             reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    QMARK           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    OR              reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CONSTANT        reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    MODULE          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DEF             reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    $end            reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOT             reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEWLINE         reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    END             reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RPAREN          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    COMMA           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACKET        reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHEN            reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSIF           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSE            reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACE          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACE          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ID              reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CASE            reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RETURN          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    BREAK           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEXT            reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ASTERISK        reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    IF              reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNLESS          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHILE           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNTIL           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LOOP            reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LPAREN          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACKET        reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CHAR            reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TRUE            reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FALSE           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    STRING          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TILDE           reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TCOLON          reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTERP_END      reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121

  ! PLUS            [ reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 145 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]


state 202

    (146) relational_expression -> relational_expression LESS_EQUAL additive_expression .
    (148) additive_expression -> additive_expression . PLUS multiplicative_expression
    (149) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EQUAL           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    AND             reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    QMARK           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    OR              reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CONSTANT        reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    MODULE          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DEF             reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    $end            reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOT             reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEWLINE         reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    END             reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RPAREN          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    COMMA           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACKET        reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHEN            reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSIF           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSE            reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACE          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACE          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ID              reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CASE            reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RETURN          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    BREAK           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEXT            reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ASTERISK        reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    IF              reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNLESS          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHILE           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNTIL           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LOOP            reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LPAREN          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACKET        reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CHAR            reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TRUE            reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FALSE           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    STRING          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TILDE           reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TCOLON          reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTERP_END      reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    PLUS            shift and go to state 120
    MINUS           shift and go to state 121

  ! PLUS            [ reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 146 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]


state 203

    (148) additive_expression -> additive_expression PLUS multiplicative_expression .
    (151) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (152) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (153) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QMARK           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONSTANT        reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MODULE          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DEF             reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    $end            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOT             reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEWLINE         reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    END             reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHEN            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSIF           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACE          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ID              reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CASE            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RETURN          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BREAK           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEXT            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASTERISK        reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IF              reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNLESS          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHILE           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNTIL           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOOP            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LPAREN          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACKET        reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTNUMBER       reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CHAR            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TRUE            reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FALSE           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TILDE           reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TCOLON          reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTERP_END      reduce using rule 148 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTI           shift and go to state 127
    DIVIDE          shift and go to state 128
    MODULO          shift and go to state 129


state 204

    (149) additive_expression -> additive_expression MINUS multiplicative_expression .
    (151) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (152) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (153) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QMARK           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONSTANT        reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MODULE          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DEF             reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    $end            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOT             reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEWLINE         reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    END             reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHEN            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSIF           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACE          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ID              reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CASE            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RETURN          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BREAK           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEXT            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASTERISK        reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IF              reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNLESS          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHILE           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNTIL           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOOP            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LPAREN          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACKET        reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTNUMBER       reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CHAR            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TRUE            reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FALSE           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRING          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TILDE           reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TCOLON          reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTERP_END      reduce using rule 149 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTI           shift and go to state 127
    DIVIDE          shift and go to state 128
    MODULO          shift and go to state 129


state 205

    (171) expression_between_parentesis -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DOTDOTDOT       reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MULTI_ASSIGN    reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    POTENCIACAO     reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MULTI           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    TIPO_EQUAL      reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    CONSTANT        reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DEF             reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    $end            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DOT             reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    END             reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ID              reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    CASE            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    NEXT            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    UNDERSCORE      reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    IF              reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    INTNUMBER       reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    STRING          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    TCOLON          reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)
    INTERP_END      reduce using rule 171 (expression_between_parentesis -> LPAREN expression RPAREN .)


state 206

    (172) array_literal -> LBRACKET opt_expression_list RBRACKET .

    LBRACKET        reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOT          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOTDOT       reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASSIGN          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS_ASSIGN     reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS_ASSIGN    reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI_ASSIGN    reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    POTENCIACAO     reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULO          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_THAN    reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_THAN       reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_EQUAL   reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_EQUAL      reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EQUAL           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NOT_EQUAL       reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TIPO_EQUAL      reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    AND             reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    QMARK           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    OR              reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CONSTANT        reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULE          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DEF             reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    $end            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOT             reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEWLINE         reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    END             reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RPAREN          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    COMMA           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACKET        reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHEN            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSIF           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSE            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACE          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACE          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ID              reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CASE            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RETURN          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    BREAK           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEXT            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNDERSCORE      reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASTERISK        reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    IF              reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNLESS          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHILE           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNTIL           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LOOP            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LPAREN          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTNUMBER       reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FLOATNUMBER     reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CHAR            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TRUE            reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FALSE           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    STRING          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EXCLAMATION     reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TILDE           reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TCOLON          reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTERP_END      reduce using rule 172 (array_literal -> LBRACKET opt_expression_list RBRACKET .)


state 207

    (78) expression_list -> expression_list COMMA . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 236
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 208

    (151) multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .
    (155) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DIVIDE          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULO          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    PLUS            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MINUS           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_THAN    reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_THAN       reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_EQUAL      reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EQUAL           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NOT_EQUAL       reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    AND             reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    QMARK           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    OR              reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CONSTANT        reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULE          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DEF             reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    $end            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOT             reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEWLINE         reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    END             reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RPAREN          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    COMMA           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACKET        reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHEN            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSIF           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSE            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACE          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACE          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ID              reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CASE            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RETURN          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    BREAK           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEXT            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNDERSCORE      reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ASTERISK        reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    IF              reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNLESS          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHILE           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNTIL           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LOOP            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LPAREN          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACKET        reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTNUMBER       reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FLOATNUMBER     reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CHAR            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TRUE            reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FALSE           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    STRING          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EXCLAMATION     reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TILDE           reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TCOLON          reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTERP_END      reduce using rule 151 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    POTENCIACAO     shift and go to state 134


state 209

    (152) multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .
    (155) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DIVIDE          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULO          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    PLUS            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MINUS           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_THAN    reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_THAN       reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_EQUAL      reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EQUAL           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NOT_EQUAL       reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    AND             reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    QMARK           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    OR              reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CONSTANT        reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULE          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DEF             reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    $end            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOT             reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEWLINE         reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    END             reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RPAREN          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    COMMA           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACKET        reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHEN            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSIF           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSE            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACE          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACE          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ID              reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CASE            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RETURN          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    BREAK           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEXT            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNDERSCORE      reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ASTERISK        reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    IF              reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNLESS          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHILE           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNTIL           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LOOP            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LPAREN          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACKET        reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTNUMBER       reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FLOATNUMBER     reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CHAR            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TRUE            reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FALSE           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    STRING          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EXCLAMATION     reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TILDE           reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TCOLON          reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTERP_END      reduce using rule 152 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    POTENCIACAO     shift and go to state 134


state 210

    (153) multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .
    (155) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DIVIDE          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULO          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    PLUS            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MINUS           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_THAN    reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_THAN       reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_EQUAL      reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EQUAL           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NOT_EQUAL       reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    AND             reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    QMARK           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    OR              reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CONSTANT        reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULE          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DEF             reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    $end            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOT             reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEWLINE         reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    END             reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RPAREN          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    COMMA           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACKET        reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHEN            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSIF           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSE            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACE          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACE          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ID              reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CASE            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RETURN          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    BREAK           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEXT            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNDERSCORE      reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ASTERISK        reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    IF              reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNLESS          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHILE           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNTIL           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LOOP            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LPAREN          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACKET        reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTNUMBER       reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FLOATNUMBER     reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CHAR            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TRUE            reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FALSE           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    STRING          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EXCLAMATION     reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TILDE           reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TCOLON          reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTERP_END      reduce using rule 153 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    POTENCIACAO     shift and go to state 134


state 211

    (174) string_literal -> STRING INTERP_START expression . INTERP_END string_literal

    INTERP_END      shift and go to state 237


state 212

    (155) potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .

    POTENCIACAO     reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MULTI           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DIVIDE          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULO          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    PLUS            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MINUS           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_THAN    reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_THAN       reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_EQUAL   reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_EQUAL      reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EQUAL           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NOT_EQUAL       reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TIPO_EQUAL      reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    AND             reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    QMARK           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    OR              reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CONSTANT        reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULE          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DEF             reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    $end            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOT             reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEWLINE         reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    END             reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RPAREN          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    COMMA           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACKET        reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHEN            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSIF           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSE            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACE          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACE          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ID              reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CASE            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RETURN          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    BREAK           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEXT            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNDERSCORE      reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ASTERISK        reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    IF              reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNLESS          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHILE           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNTIL           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LOOP            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LPAREN          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACKET        reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTNUMBER       reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FLOATNUMBER     reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CHAR            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TRUE            reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FALSE           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    STRING          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EXCLAMATION     reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TILDE           reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TCOLON          reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTERP_END      reduce using rule 155 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)


state 213

    (66) variable_declaration -> ID types ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 238
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 214

    (67) variable_declaration -> ID ASSIGN expression .

    NEWLINE         reduce using rule 67 (variable_declaration -> ID ASSIGN expression .)
    END             reduce using rule 67 (variable_declaration -> ID ASSIGN expression .)
    ELSIF           reduce using rule 67 (variable_declaration -> ID ASSIGN expression .)
    ELSE            reduce using rule 67 (variable_declaration -> ID ASSIGN expression .)
    RBRACE          reduce using rule 67 (variable_declaration -> ID ASSIGN expression .)
    WHEN            reduce using rule 67 (variable_declaration -> ID ASSIGN expression .)


state 215

    (69) list_of_identifiers -> ID .
    (70) list_of_identifiers -> ID . COMMA list_of_identifiers

    ASSIGN          reduce using rule 69 (list_of_identifiers -> ID .)
    COMMA           shift and go to state 239


state 216

    (68) variable_declaration -> ID COMMA list_of_identifiers . ASSIGN expression COMMA list_of_values

    ASSIGN          shift and go to state 240


state 217

    (73) function_call -> ID LPAREN expression_list . RPAREN
    (78) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 241
    COMMA           shift and go to state 207


state 218

    (74) function_call -> ID LPAREN RPAREN .

    NEWLINE         reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    END             reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    WHEN            reduce using rule 74 (function_call -> ID LPAREN RPAREN .)


state 219

    (80) statements -> statement NEWLINE statements .

    END             reduce using rule 80 (statements -> statement NEWLINE statements .)
    NEWLINE         reduce using rule 80 (statements -> statement NEWLINE statements .)
    ELSIF           reduce using rule 80 (statements -> statement NEWLINE statements .)
    ELSE            reduce using rule 80 (statements -> statement NEWLINE statements .)
    RBRACE          reduce using rule 80 (statements -> statement NEWLINE statements .)
    WHEN            reduce using rule 80 (statements -> statement NEWLINE statements .)


state 220

    (111) iterator -> expression DOT MULTI . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 68
    statements                     shift and go to state 242
    statement                      shift and go to state 67
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 221

    (112) iterator -> expression DOT EACH . DO PIPE ID PIPE statements END
    (113) iterator -> expression DOT EACH . LBRACE PIPE ID PIPE RBRACE statements

    DO              shift and go to state 243
    LBRACE          shift and go to state 244


state 222

    (114) case_structure -> CASE expression when_list . opt_else END
    (116) when_list -> when_list . WHEN expression statements
    (102) opt_else -> . ELSE statements
    (103) opt_else -> . empty
    (175) empty -> .

    WHEN            shift and go to state 246
    ELSE            shift and go to state 247
    END             reduce using rule 175 (empty -> .)

    opt_else                       shift and go to state 245
    empty                          shift and go to state 248

state 223

    (115) when_list -> WHEN . expression statements
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 249
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 224

    (93) if_statement -> IF if_condition statements . opt_elsif opt_else END
    (97) opt_elsif -> . elsif_list
    (98) opt_elsif -> . empty
    (99) elsif_list -> . elsif_list elsif
    (100) elsif_list -> . elsif
    (175) empty -> .
    (101) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)
    ELSIF           shift and go to state 254

    opt_elsif                      shift and go to state 250
    elsif_list                     shift and go to state 251
    empty                          shift and go to state 252
    elsif                          shift and go to state 253

state 225

    (96) if_condition -> expression LBRACE . statements RBRACE
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 68
    statements                     shift and go to state 255
    statement                      shift and go to state 67
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 226

    (94) unless_statement -> UNLESS if_condition statements . opt_else END
    (102) opt_else -> . ELSE statements
    (103) opt_else -> . empty
    (175) empty -> .

    ELSE            shift and go to state 247
    END             reduce using rule 175 (empty -> .)

    opt_else                       shift and go to state 256
    empty                          shift and go to state 248

state 227

    (108) while -> WHILE expression statements .

    NEWLINE         reduce using rule 108 (while -> WHILE expression statements .)
    END             reduce using rule 108 (while -> WHILE expression statements .)
    ELSIF           reduce using rule 108 (while -> WHILE expression statements .)
    ELSE            reduce using rule 108 (while -> WHILE expression statements .)
    RBRACE          reduce using rule 108 (while -> WHILE expression statements .)
    WHEN            reduce using rule 108 (while -> WHILE expression statements .)


state 228

    (109) until -> UNTIL expression statements .

    NEWLINE         reduce using rule 109 (until -> UNTIL expression statements .)
    END             reduce using rule 109 (until -> UNTIL expression statements .)
    ELSIF           reduce using rule 109 (until -> UNTIL expression statements .)
    ELSE            reduce using rule 109 (until -> UNTIL expression statements .)
    RBRACE          reduce using rule 109 (until -> UNTIL expression statements .)
    WHEN            reduce using rule 109 (until -> UNTIL expression statements .)


state 229

    (34) argument -> ID COLON . types
    (36) argument -> ID COLON . types ASSIGN expression
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 141
    CHAR            shift and go to state 142
    NIL             shift and go to state 143
    INT             shift and go to state 147
    INT8            shift and go to state 148
    INT16           shift and go to state 149
    INT32           shift and go to state 150
    INT64           shift and go to state 151
    INT128          shift and go to state 152
    UINT8           shift and go to state 153
    UINT16          shift and go to state 154
    UINT32          shift and go to state 155
    UINT64          shift and go to state 156
    UINT128         shift and go to state 157
    FLOAT           shift and go to state 158
    FLOAT32         shift and go to state 159
    FLOAT64         shift and go to state 160
    BOOL            shift and go to state 161

    types                          shift and go to state 257
    integer                        shift and go to state 144
    float                          shift and go to state 145
    boolean                        shift and go to state 146

state 230

    (35) argument -> ID ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 258
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 231

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN . opt_return_type statements END
    (37) opt_return_type -> . COLON types
    (38) opt_return_type -> . empty
    (175) empty -> .

    COLON           shift and go to state 95
    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)

    opt_return_type                shift and go to state 259
    empty                          shift and go to state 96

state 232

    (32) argument_list -> argument COMMA . argument_list
    (31) argument_list -> . argument
    (32) argument_list -> . argument COMMA argument_list
    (33) argument -> . ID
    (34) argument -> . ID COLON types
    (35) argument -> . ID ASSIGN expression
    (36) argument -> . ID COLON types ASSIGN expression

    ID              shift and go to state 177

    argument                       shift and go to state 181
    argument_list                  shift and go to state 260

state 233

    (28) function -> DEF ID opt_return_type NEWLINE statements . END

    END             shift and go to state 261


state 234

    (132) ternary_expression -> logical_or_expression QMARK expression TCOLON . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    logical_or_expression          shift and go to state 35
    expression                     shift and go to state 262
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 235

    (168) postfix_suffix -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOTDOT          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOTDOTDOT       reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MULTI_ASSIGN    reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    POTENCIACAO     reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MULTI           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    GREATER_EQUAL   reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NOT_EQUAL       reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TIPO_EQUAL      reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    AND             reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    QMARK           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    OR              reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CONSTANT        reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MODULE          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DEF             reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    $end            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOT             reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NEWLINE         reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    END             reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    WHEN            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ELSIF           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CASE            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NEXT            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNDERSCORE      reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ASTERISK        reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNLESS          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNTIL           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    INTNUMBER       reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    FLOATNUMBER     reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    STRING          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    EXCLAMATION     reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TILDE           reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TCOLON          reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)
    INTERP_END      reduce using rule 168 (postfix_suffix -> LBRACKET expression RBRACKET .)


state 236

    (78) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 78 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 78 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 78 (expression_list -> expression_list COMMA expression .)


state 237

    (174) string_literal -> STRING INTERP_START expression INTERP_END . string_literal
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    STRING          shift and go to state 60

    string_literal                 shift and go to state 263

state 238

    (66) variable_declaration -> ID types ASSIGN expression .

    NEWLINE         reduce using rule 66 (variable_declaration -> ID types ASSIGN expression .)
    END             reduce using rule 66 (variable_declaration -> ID types ASSIGN expression .)
    ELSIF           reduce using rule 66 (variable_declaration -> ID types ASSIGN expression .)
    ELSE            reduce using rule 66 (variable_declaration -> ID types ASSIGN expression .)
    RBRACE          reduce using rule 66 (variable_declaration -> ID types ASSIGN expression .)
    WHEN            reduce using rule 66 (variable_declaration -> ID types ASSIGN expression .)


state 239

    (70) list_of_identifiers -> ID COMMA . list_of_identifiers
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 215

    list_of_identifiers            shift and go to state 264

state 240

    (68) variable_declaration -> ID COMMA list_of_identifiers ASSIGN . expression COMMA list_of_values
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 265
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 241

    (73) function_call -> ID LPAREN expression_list RPAREN .

    NEWLINE         reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSIF           reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACE          reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    WHEN            reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)


state 242

    (111) iterator -> expression DOT MULTI statements .

    NEWLINE         reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    END             reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    ELSIF           reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    ELSE            reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    RBRACE          reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    WHEN            reduce using rule 111 (iterator -> expression DOT MULTI statements .)


state 243

    (112) iterator -> expression DOT EACH DO . PIPE ID PIPE statements END

    PIPE            shift and go to state 266


state 244

    (113) iterator -> expression DOT EACH LBRACE . PIPE ID PIPE RBRACE statements

    PIPE            shift and go to state 267


state 245

    (114) case_structure -> CASE expression when_list opt_else . END

    END             shift and go to state 268


state 246

    (116) when_list -> when_list WHEN . expression statements
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 269
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 247

    (102) opt_else -> ELSE . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 270
    statement                      shift and go to state 67
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 248

    (103) opt_else -> empty .

    END             reduce using rule 103 (opt_else -> empty .)


state 249

    (115) when_list -> WHEN expression . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 68
    statements                     shift and go to state 271
    statement                      shift and go to state 67
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 250

    (93) if_statement -> IF if_condition statements opt_elsif . opt_else END
    (102) opt_else -> . ELSE statements
    (103) opt_else -> . empty
    (175) empty -> .

    ELSE            shift and go to state 247
    END             reduce using rule 175 (empty -> .)

    opt_else                       shift and go to state 272
    empty                          shift and go to state 248

state 251

    (97) opt_elsif -> elsif_list .
    (99) elsif_list -> elsif_list . elsif
    (101) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 97 (opt_elsif -> elsif_list .)
    END             reduce using rule 97 (opt_elsif -> elsif_list .)
    ELSIF           shift and go to state 254

    elsif                          shift and go to state 273

state 252

    (98) opt_elsif -> empty .

    ELSE            reduce using rule 98 (opt_elsif -> empty .)
    END             reduce using rule 98 (opt_elsif -> empty .)


state 253

    (100) elsif_list -> elsif .

    ELSIF           reduce using rule 100 (elsif_list -> elsif .)
    ELSE            reduce using rule 100 (elsif_list -> elsif .)
    END             reduce using rule 100 (elsif_list -> elsif .)


state 254

    (101) elsif -> ELSIF . if_condition statements
    (95) if_condition -> . expression
    (96) if_condition -> . expression LBRACE statements RBRACE
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    if_condition                   shift and go to state 274
    expression                     shift and go to state 172
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 255

    (96) if_condition -> expression LBRACE statements . RBRACE

    RBRACE          shift and go to state 275


state 256

    (94) unless_statement -> UNLESS if_condition statements opt_else . END

    END             shift and go to state 276


state 257

    (34) argument -> ID COLON types .
    (36) argument -> ID COLON types . ASSIGN expression

    COMMA           reduce using rule 34 (argument -> ID COLON types .)
    RPAREN          reduce using rule 34 (argument -> ID COLON types .)
    ASSIGN          shift and go to state 277


state 258

    (35) argument -> ID ASSIGN expression .

    COMMA           reduce using rule 35 (argument -> ID ASSIGN expression .)
    RPAREN          reduce using rule 35 (argument -> ID ASSIGN expression .)


state 259

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type . statements END
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 278
    statement                      shift and go to state 67
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 260

    (32) argument_list -> argument COMMA argument_list .

    RPAREN          reduce using rule 32 (argument_list -> argument COMMA argument_list .)


state 261

    (28) function -> DEF ID opt_return_type NEWLINE statements END .

    DEF             reduce using rule 28 (function -> DEF ID opt_return_type NEWLINE statements END .)
    $end            reduce using rule 28 (function -> DEF ID opt_return_type NEWLINE statements END .)


state 262

    (132) ternary_expression -> logical_or_expression QMARK expression TCOLON expression .

    CONSTANT        reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    MODULE          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    DEF             reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    $end            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    DOT             reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    NEWLINE         reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    END             reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RPAREN          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    COMMA           reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RBRACKET        reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    WHEN            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ELSIF           reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ELSE            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RBRACE          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LBRACE          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ID              reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    CASE            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RETURN          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    BREAK           reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    NEXT            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNDERSCORE      reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ASTERISK        reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    IF              reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNLESS          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    WHILE           reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNTIL           reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LOOP            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LPAREN          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LBRACKET        reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    INTNUMBER       reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    FLOATNUMBER     reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    CHAR            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TRUE            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    FALSE           reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    STRING          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    PLUS            reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    MINUS           reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    EXCLAMATION     reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TILDE           reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TCOLON          reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    INTERP_END      reduce using rule 132 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)


state 263

    (174) string_literal -> STRING INTERP_START expression INTERP_END string_literal .

    LBRACKET        reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOTDOT          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOTDOTDOT       reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ASSIGN          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    PLUS_ASSIGN     reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MINUS_ASSIGN    reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MULTI_ASSIGN    reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DIVIDE_ASSIGN   reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    POTENCIACAO     reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MULTI           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DIVIDE          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MODULO          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    PLUS            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MINUS           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    GREATER_THAN    reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LESS_THAN       reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    GREATER_EQUAL   reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LESS_EQUAL      reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    EQUAL           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NOT_EQUAL       reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TIPO_EQUAL      reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    AND             reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    QMARK           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    OR              reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CONSTANT        reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MODULE          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DEF             reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    $end            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOT             reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NEWLINE         reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    END             reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RPAREN          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    COMMA           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RBRACKET        reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    WHEN            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ELSIF           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ELSE            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RBRACE          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LBRACE          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ID              reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CASE            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RETURN          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    BREAK           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NEXT            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNDERSCORE      reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ASTERISK        reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    IF              reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNLESS          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    WHILE           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNTIL           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LOOP            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LPAREN          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    INTNUMBER       reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    FLOATNUMBER     reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CHAR            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TRUE            reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    FALSE           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    STRING          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    EXCLAMATION     reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TILDE           reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TCOLON          reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    INTERP_END      reduce using rule 174 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)


state 264

    (70) list_of_identifiers -> ID COMMA list_of_identifiers .

    ASSIGN          reduce using rule 70 (list_of_identifiers -> ID COMMA list_of_identifiers .)


state 265

    (68) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression . COMMA list_of_values

    COMMA           shift and go to state 279


state 266

    (112) iterator -> expression DOT EACH DO PIPE . ID PIPE statements END

    ID              shift and go to state 280


state 267

    (113) iterator -> expression DOT EACH LBRACE PIPE . ID PIPE RBRACE statements

    ID              shift and go to state 281


state 268

    (114) case_structure -> CASE expression when_list opt_else END .

    NEWLINE         reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    END             reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    ELSIF           reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    ELSE            reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    RBRACE          reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    WHEN            reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)


state 269

    (116) when_list -> when_list WHEN expression . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 68
    statements                     shift and go to state 282
    statement                      shift and go to state 67
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 270

    (102) opt_else -> ELSE statements .

    END             reduce using rule 102 (opt_else -> ELSE statements .)


state 271

    (115) when_list -> WHEN expression statements .

    WHEN            reduce using rule 115 (when_list -> WHEN expression statements .)
    ELSE            reduce using rule 115 (when_list -> WHEN expression statements .)
    END             reduce using rule 115 (when_list -> WHEN expression statements .)


state 272

    (93) if_statement -> IF if_condition statements opt_elsif opt_else . END

    END             shift and go to state 283


state 273

    (99) elsif_list -> elsif_list elsif .

    ELSIF           reduce using rule 99 (elsif_list -> elsif_list elsif .)
    ELSE            reduce using rule 99 (elsif_list -> elsif_list elsif .)
    END             reduce using rule 99 (elsif_list -> elsif_list elsif .)


state 274

    (101) elsif -> ELSIF if_condition . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 284
    statement                      shift and go to state 67
    expression                     shift and go to state 68
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 275

    (96) if_condition -> expression LBRACE statements RBRACE .

    ID              reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    CASE            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    RETURN          reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    BREAK           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    NEXT            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    UNDERSCORE      reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    ASTERISK        reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    IF              reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    UNLESS          reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    WHILE           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    UNTIL           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    LOOP            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    LPAREN          reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    INTNUMBER       reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    FLOATNUMBER     reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    CHAR            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    TRUE            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    FALSE           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    STRING          reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    PLUS            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    MINUS           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    EXCLAMATION     reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    TILDE           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)


state 276

    (94) unless_statement -> UNLESS if_condition statements opt_else END .

    NEWLINE         reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    END             reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    ELSIF           reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    ELSE            reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    RBRACE          reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    WHEN            reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)


state 277

    (36) argument -> ID COLON types ASSIGN . expression
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 285
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 278

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements . END

    END             shift and go to state 286


state 279

    (68) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA . list_of_values
    (71) list_of_values -> . expression
    (72) list_of_values -> . expression COMMA list_of_values
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 287
    list_of_values                 shift and go to state 288
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 280

    (112) iterator -> expression DOT EACH DO PIPE ID . PIPE statements END

    PIPE            shift and go to state 289


state 281

    (113) iterator -> expression DOT EACH LBRACE PIPE ID . PIPE RBRACE statements

    PIPE            shift and go to state 290


state 282

    (116) when_list -> when_list WHEN expression statements .

    WHEN            reduce using rule 116 (when_list -> when_list WHEN expression statements .)
    ELSE            reduce using rule 116 (when_list -> when_list WHEN expression statements .)
    END             reduce using rule 116 (when_list -> when_list WHEN expression statements .)


state 283

    (93) if_statement -> IF if_condition statements opt_elsif opt_else END .

    NEWLINE         reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    END             reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    ELSIF           reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    ELSE            reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    RBRACE          reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    WHEN            reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)


state 284

    (101) elsif -> ELSIF if_condition statements .

    ELSIF           reduce using rule 101 (elsif -> ELSIF if_condition statements .)
    ELSE            reduce using rule 101 (elsif -> ELSIF if_condition statements .)
    END             reduce using rule 101 (elsif -> ELSIF if_condition statements .)


state 285

    (36) argument -> ID COLON types ASSIGN expression .

    COMMA           reduce using rule 36 (argument -> ID COLON types ASSIGN expression .)
    RPAREN          reduce using rule 36 (argument -> ID COLON types ASSIGN expression .)


state 286

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .

    DEF             reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)
    $end            reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)


state 287

    (71) list_of_values -> expression .
    (72) list_of_values -> expression . COMMA list_of_values

    NEWLINE         reduce using rule 71 (list_of_values -> expression .)
    END             reduce using rule 71 (list_of_values -> expression .)
    ELSIF           reduce using rule 71 (list_of_values -> expression .)
    ELSE            reduce using rule 71 (list_of_values -> expression .)
    RBRACE          reduce using rule 71 (list_of_values -> expression .)
    WHEN            reduce using rule 71 (list_of_values -> expression .)
    COMMA           shift and go to state 291


state 288

    (68) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .

    NEWLINE         reduce using rule 68 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    END             reduce using rule 68 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSIF           reduce using rule 68 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSE            reduce using rule 68 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    RBRACE          reduce using rule 68 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    WHEN            reduce using rule 68 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)


state 289

    (112) iterator -> expression DOT EACH DO PIPE ID PIPE . statements END
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 68
    statements                     shift and go to state 292
    statement                      shift and go to state 67
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 290

    (113) iterator -> expression DOT EACH LBRACE PIPE ID PIPE . RBRACE statements

    RBRACE          shift and go to state 293


state 291

    (72) list_of_values -> expression COMMA . list_of_values
    (71) list_of_values -> . expression
    (72) list_of_values -> . expression COMMA list_of_values
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 287
    list_of_values                 shift and go to state 294
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 292

    (112) iterator -> expression DOT EACH DO PIPE ID PIPE statements . END

    END             shift and go to state 295


state 293

    (113) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE . statements
    (79) statements -> . statement
    (80) statements -> . statement NEWLINE statements
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . ternary_expression
    (123) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (66) variable_declaration -> . ID types ASSIGN expression
    (67) variable_declaration -> . ID ASSIGN expression
    (68) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (132) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . logical_or_expression
    (124) assignment_expression -> . assignment_target ASSIGN expression
    (125) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (128) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (134) logical_or_expression -> . logical_and_expression
    (135) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (129) assignment_target -> . postfix_expression
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) logical_and_expression -> . equality_expression
    (137) logical_and_expression -> . logical_and_expression AND equality_expression
    (165) postfix_expression -> . primary_expression postfix_suffixes
    (138) equality_expression -> . relational_expression
    (139) equality_expression -> . equality_expression EQUAL relational_expression
    (140) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (141) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (161) primary_expression -> . expression_between_parentesis
    (162) primary_expression -> . array_literal
    (163) primary_expression -> . literal
    (164) primary_expression -> . ID
    (142) relational_expression -> . additive_expression
    (143) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (144) relational_expression -> . relational_expression LESS_THAN additive_expression
    (145) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (146) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (171) expression_between_parentesis -> . LPAREN expression RPAREN
    (172) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (147) additive_expression -> . multiplicative_expression
    (148) additive_expression -> . additive_expression PLUS multiplicative_expression
    (149) additive_expression -> . additive_expression MINUS multiplicative_expression
    (173) string_literal -> . STRING
    (174) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (150) multiplicative_expression -> . potenciacao_expression
    (151) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (152) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (153) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (154) potenciacao_expression -> . unary_expression
    (155) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (156) unary_expression -> . PLUS unary_expression
    (157) unary_expression -> . MINUS unary_expression
    (158) unary_expression -> . EXCLAMATION unary_expression
    (159) unary_expression -> . TILDE unary_expression
    (160) unary_expression -> . postfix_expression

    ID              shift and go to state 65
    CASE            shift and go to state 84
    RETURN          shift and go to state 85
    BREAK           shift and go to state 86
    NEXT            shift and go to state 87
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 88
    UNLESS          shift and go to state 89
    WHILE           shift and go to state 90
    UNTIL           shift and go to state 91
    LOOP            shift and go to state 92
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 68
    statements                     shift and go to state 296
    statement                      shift and go to state 67
    control_structure              shift and go to state 69
    variable_declaration           shift and go to state 70
    function_call                  shift and go to state 71
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 72
    loop_structure                 shift and go to state 73
    case_structure                 shift and go to state 74
    return_statement               shift and go to state 75
    break_statement                shift and go to state 76
    next_statement                 shift and go to state 77
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 78
    unless_statement               shift and go to state 79
    while                          shift and go to state 80
    until                          shift and go to state 81
    loop                           shift and go to state 82
    iterator                       shift and go to state 83
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 294

    (72) list_of_values -> expression COMMA list_of_values .

    NEWLINE         reduce using rule 72 (list_of_values -> expression COMMA list_of_values .)
    END             reduce using rule 72 (list_of_values -> expression COMMA list_of_values .)
    ELSIF           reduce using rule 72 (list_of_values -> expression COMMA list_of_values .)
    ELSE            reduce using rule 72 (list_of_values -> expression COMMA list_of_values .)
    RBRACE          reduce using rule 72 (list_of_values -> expression COMMA list_of_values .)
    WHEN            reduce using rule 72 (list_of_values -> expression COMMA list_of_values .)


state 295

    (112) iterator -> expression DOT EACH DO PIPE ID PIPE statements END .

    NEWLINE         reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    END             reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    ELSIF           reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    ELSE            reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    RBRACE          reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    WHEN            reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)


state 296

    (113) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .

    NEWLINE         reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    END             reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    ELSIF           reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    ELSE            reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    RBRACE          reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    WHEN            reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 67 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 112 resolved as shift
