Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASSOCIACAO
    AT
    BEGIN
    BINNUMBER
    CLASS
    CLASSVAR
    CLASS_VAR
    DEFINE_BLOCO
    DOLAR_SIGN
    ENUM
    GLOBALVAR
    HEXNUMBER
    IN
    INCLUDE
    INSTANCEVAR
    INSTANCE_VAR
    LITERAL
    MACRO
    MINUSMINUS
    MODULO_ASSIGN
    NOT
    OCTNUMBER
    OF
    OR_ASSIGN
    OUT
    PASSA_ARGUMENTO
    PLUSPLUS
    POTENCIACAO_ASSIGN
    PRIVATE
    PROTECTED
    SAFE_CALL
    SCOPE
    SELECT
    SHIFT_LEFT
    SHIFT_RIGHT
    SIZEOF
    STRUCT
    SYMBOL
    THEN
    TYPE
    TYPEOF
    UNINITIALIZED
    UNION
    VAR_GLOBAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> require_list constant_list module_list function_list
Rule 2     program -> require_list constant_list module_list
Rule 3     program -> require_list constant_list function_list
Rule 4     program -> require_list module_list function_list
Rule 5     program -> constant_list module_list function_list
Rule 6     program -> require_list constant_list
Rule 7     program -> require_list module_list
Rule 8     program -> constant_list module_list
Rule 9     program -> require_list function_list
Rule 10    program -> constant_list function_list
Rule 11    program -> module_list function_list
Rule 12    program -> require_list
Rule 13    program -> constant_list
Rule 14    program -> module_list
Rule 15    program -> function_list
Rule 16    require_list -> require require_list
Rule 17    require_list -> require
Rule 18    require -> REQUIRE STRING
Rule 19    constant_list -> constant constant_list
Rule 20    constant_list -> constant
Rule 21    constant -> CONSTANT ASSIGN expression
Rule 22    module_list -> module module_list
Rule 23    module_list -> module
Rule 24    module -> MODULE ID statements END
Rule 25    function_list -> function
Rule 26    function_list -> function function_list
Rule 27    function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
Rule 28    function -> DEF ID opt_return_type NEWLINE statements END
Rule 29    opt_argument_list -> argument_list
Rule 30    opt_argument_list -> empty
Rule 31    argument_list -> argument
Rule 32    argument_list -> argument COMMA argument_list
Rule 33    argument -> ID
Rule 34    argument -> ID COLON types
Rule 35    argument -> ID ASSIGN expression
Rule 36    argument -> ID COLON types ASSIGN expression
Rule 37    opt_return_type -> COLON types
Rule 38    opt_return_type -> empty
Rule 39    types -> STRING
Rule 40    types -> CHAR
Rule 41    types -> NIL
Rule 42    types -> integer
Rule 43    types -> float
Rule 44    types -> boolean
Rule 45    integer -> INT
Rule 46    integer -> INT8
Rule 47    integer -> INT16
Rule 48    integer -> INT32
Rule 49    integer -> INT64
Rule 50    integer -> INT128
Rule 51    integer -> UINT8
Rule 52    integer -> UINT16
Rule 53    integer -> UINT32
Rule 54    integer -> UINT64
Rule 55    integer -> UINT128
Rule 56    float -> FLOAT
Rule 57    float -> FLOAT32
Rule 58    float -> FLOAT64
Rule 59    boolean -> BOOL
Rule 60    literal -> INTNUMBER
Rule 61    literal -> FLOATNUMBER
Rule 62    literal -> string_literal
Rule 63    literal -> CHAR
Rule 64    literal -> TRUE
Rule 65    literal -> FALSE
Rule 66    string_literal -> STRING
Rule 67    string_literal -> STRING INTERP_START expression INTERP_END string_literal
Rule 68    variable_declaration -> ID COLON types ASSIGN expression
Rule 69    variable_declaration -> ID ASSIGN expression
Rule 70    variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
Rule 71    list_of_identifiers -> ID
Rule 72    list_of_identifiers -> ID COMMA list_of_identifiers
Rule 73    list_of_values -> expression
Rule 74    list_of_values -> expression COMMA list_of_values
Rule 75    function_call -> ID LPAREN expression_list RPAREN
Rule 76    function_call -> ID LPAREN RPAREN
Rule 77    opt_expression_list -> expression_list
Rule 78    opt_expression_list -> empty
Rule 79    expression_list -> expression
Rule 80    expression_list -> expression_list COMMA expression
Rule 81    statements -> statements_list
Rule 82    statements_list -> statements_list statements_base
Rule 83    statements_list -> empty
Rule 84    statements_base -> statement NEWLINE
Rule 85    statements_base -> statement SEMICOLON
Rule 86    statement -> expression
Rule 87    statement -> control_structure
Rule 88    statement -> variable_declaration
Rule 89    statement -> function_call
Rule 90    control_structure -> conditional
Rule 91    control_structure -> loop_structure
Rule 92    control_structure -> case_structure
Rule 93    control_structure -> return_statement
Rule 94    control_structure -> break_statement
Rule 95    control_structure -> next_statement
Rule 96    conditional -> if_statement
Rule 97    conditional -> unless_statement
Rule 98    if_statement -> IF if_condition statements opt_elsif opt_else END
Rule 99    unless_statement -> UNLESS if_condition statements opt_else END
Rule 100   if_condition -> expression
Rule 101   if_condition -> expression LBRACE statements RBRACE
Rule 102   opt_elsif -> elsif_list
Rule 103   opt_elsif -> empty
Rule 104   elsif_list -> elsif_list elsif
Rule 105   elsif_list -> elsif
Rule 106   elsif -> ELSIF if_condition statements
Rule 107   opt_else -> ELSE statements
Rule 108   opt_else -> empty
Rule 109   loop_structure -> while
Rule 110   loop_structure -> until
Rule 111   loop_structure -> loop
Rule 112   loop_structure -> iterator
Rule 113   while -> WHILE expression statements
Rule 114   until -> UNTIL expression statements
Rule 115   loop -> LOOP statements
Rule 116   iterator -> expression DOT MULTI statements
Rule 117   iterator -> expression DOT EACH DO PIPE ID PIPE statements END
Rule 118   iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
Rule 119   case_structure -> CASE expression when_list opt_else END
Rule 120   when_list -> WHEN expression statements
Rule 121   when_list -> when_list WHEN expression statements
Rule 122   return_statement -> RETURN opt_expression
Rule 123   break_statement -> BREAK opt_expression
Rule 124   next_statement -> NEXT opt_expression
Rule 125   opt_expression -> expression
Rule 126   opt_expression -> empty
Rule 127   expression -> assignment_expression
Rule 128   assignment_expression -> assignment_target ASSIGN expression
Rule 129   assignment_expression -> assignment_target PLUS_ASSIGN expression
Rule 130   assignment_expression -> assignment_target MINUS_ASSIGN expression
Rule 131   assignment_expression -> assignment_target MULTI_ASSIGN expression
Rule 132   assignment_expression -> assignment_target DIVIDE_ASSIGN expression
Rule 133   assignment_expression -> ternary_expression
Rule 134   assignment_target -> ID
Rule 135   assignment_target -> ID LBRACKET expression RBRACKET
Rule 136   assignment_target -> UNDERSCORE
Rule 137   assignment_target -> ASTERISK assignment_target
Rule 138   ternary_expression -> range_expression QMARK expression TCOLON expression
Rule 139   ternary_expression -> range_expression
Rule 140   range_expression -> logical_or_expression DOTDOT logical_or_expression
Rule 141   range_expression -> logical_or_expression DOTDOTDOT logical_or_expression
Rule 142   range_expression -> logical_or_expression
Rule 143   logical_or_expression -> logical_and_expression
Rule 144   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 145   logical_and_expression -> equality_expression
Rule 146   logical_and_expression -> logical_and_expression AND equality_expression
Rule 147   equality_expression -> relational_expression
Rule 148   equality_expression -> equality_expression EQUAL relational_expression
Rule 149   equality_expression -> equality_expression NOT_EQUAL relational_expression
Rule 150   equality_expression -> equality_expression TIPO_EQUAL relational_expression
Rule 151   relational_expression -> additive_expression
Rule 152   relational_expression -> relational_expression GREATER_THAN additive_expression
Rule 153   relational_expression -> relational_expression LESS_THAN additive_expression
Rule 154   relational_expression -> relational_expression GREATER_EQUAL additive_expression
Rule 155   relational_expression -> relational_expression LESS_EQUAL additive_expression
Rule 156   additive_expression -> multiplicative_expression
Rule 157   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 158   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 159   multiplicative_expression -> potenciacao_expression
Rule 160   multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression
Rule 161   multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression
Rule 162   multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression
Rule 163   potenciacao_expression -> unary_expression
Rule 164   potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression
Rule 165   unary_expression -> PLUS unary_expression
Rule 166   unary_expression -> MINUS unary_expression
Rule 167   unary_expression -> EXCLAMATION unary_expression
Rule 168   unary_expression -> TILDE unary_expression
Rule 169   unary_expression -> primary_expression
Rule 170   primary_expression -> LPAREN expression RPAREN
Rule 171   primary_expression -> array_literal
Rule 172   primary_expression -> literal
Rule 173   primary_expression -> ID
Rule 174   array_literal -> LBRACKET opt_expression_list RBRACKET
Rule 175   empty -> <empty>

Terminals, with rules where they appear

AND                  : 146
AS                   : 
ASSIGN               : 21 35 36 68 69 70 128
ASSOCIACAO           : 
ASTERISK             : 137
AT                   : 
BEGIN                : 
BINNUMBER            : 
BOOL                 : 59
BREAK                : 123
CASE                 : 119
CHAR                 : 40 63
CLASS                : 
CLASSVAR             : 
CLASS_VAR            : 
COLON                : 34 36 37 68
COMMA                : 32 70 70 72 74 80
CONSTANT             : 21
DEF                  : 27 28
DEFINE_BLOCO         : 
DIVIDE               : 161
DIVIDE_ASSIGN        : 132
DO                   : 117
DOLAR_SIGN           : 
DOT                  : 116 117 118
DOTDOT               : 140
DOTDOTDOT            : 141
EACH                 : 117 118
ELSE                 : 107
ELSIF                : 106
END                  : 24 27 28 98 99 117 119
ENUM                 : 
EQUAL                : 148
EXCLAMATION          : 167
FALSE                : 65
FLOAT                : 56
FLOAT32              : 57
FLOAT64              : 58
FLOATNUMBER          : 61
GLOBALVAR            : 
GREATER_EQUAL        : 154
GREATER_THAN         : 152
HEXNUMBER            : 
ID                   : 24 27 28 33 34 35 36 68 69 70 71 72 75 76 117 118 134 135 173
IF                   : 98
IN                   : 
INCLUDE              : 
INSTANCEVAR          : 
INSTANCE_VAR         : 
INT                  : 45
INT128               : 50
INT16                : 47
INT32                : 48
INT64                : 49
INT8                 : 46
INTERP_END           : 67
INTERP_START         : 67
INTNUMBER            : 60
LBRACE               : 101 118
LBRACKET             : 135 174
LESS_EQUAL           : 155
LESS_THAN            : 153
LITERAL              : 
LOOP                 : 115
LPAREN               : 27 75 76 170
MACRO                : 
MINUS                : 158 166
MINUSMINUS           : 
MINUS_ASSIGN         : 130
MODULE               : 24
MODULO               : 162
MODULO_ASSIGN        : 
MULTI                : 116 160
MULTI_ASSIGN         : 131
NEWLINE              : 28 84
NEXT                 : 124
NIL                  : 41
NOT                  : 
NOT_EQUAL            : 149
OCTNUMBER            : 
OF                   : 
OR                   : 144
OR_ASSIGN            : 
OUT                  : 
PASSA_ARGUMENTO      : 
PIPE                 : 117 117 118 118
PLUS                 : 157 165
PLUSPLUS             : 
PLUS_ASSIGN          : 129
POTENCIACAO          : 164
POTENCIACAO_ASSIGN   : 
PRIVATE              : 
PROTECTED            : 
QMARK                : 138
RBRACE               : 101 118
RBRACKET             : 135 174
REQUIRE              : 18
RETURN               : 122
RPAREN               : 27 75 76 170
SAFE_CALL            : 
SCOPE                : 
SELECT               : 
SEMICOLON            : 85
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SIZEOF               : 
STRING               : 18 39 66 67
STRUCT               : 
SYMBOL               : 
TCOLON               : 138
THEN                 : 
TILDE                : 168
TIPO_EQUAL           : 150
TRUE                 : 64
TYPE                 : 
TYPEOF               : 
UINT128              : 55
UINT16               : 52
UINT32               : 53
UINT64               : 54
UINT8                : 51
UNDERSCORE           : 136
UNINITIALIZED        : 
UNION                : 
UNLESS               : 99
UNTIL                : 114
VAR_GLOBAL           : 
WHEN                 : 120 121
WHILE                : 113
YIELD                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 151 152 153 154 155 157 158
argument             : 31 32
argument_list        : 29 32
array_literal        : 171
assignment_expression : 127
assignment_target    : 128 129 130 131 132 137
boolean              : 44
break_statement      : 94
case_structure       : 92
conditional          : 90
constant             : 19 20
constant_list        : 1 2 3 5 6 8 10 13 19
control_structure    : 87
elsif                : 104 105
elsif_list           : 102 104
empty                : 30 38 78 83 103 108 126
equality_expression  : 145 146 148 149 150
expression           : 21 35 36 67 68 69 70 73 74 79 80 86 100 101 113 114 116 117 118 119 120 121 125 128 129 130 131 132 135 138 138 170
expression_list      : 75 77 80
float                : 43
function             : 25 26
function_call        : 89
function_list        : 1 3 4 5 9 10 11 15 26
if_condition         : 98 99 106
if_statement         : 96
integer              : 42
iterator             : 112
list_of_identifiers  : 70 72
list_of_values       : 70 74
literal              : 172
logical_and_expression : 143 144 146
logical_or_expression : 140 140 141 141 142 144
loop                 : 111
loop_structure       : 91
module               : 22 23
module_list          : 1 2 4 5 7 8 11 14 22
multiplicative_expression : 156 157 158 160 161 162
next_statement       : 95
opt_argument_list    : 27
opt_else             : 98 99 119
opt_elsif            : 98
opt_expression       : 122 123 124
opt_expression_list  : 174
opt_return_type      : 27 28
potenciacao_expression : 159 160 161 162 164
primary_expression   : 169
program              : 0
range_expression     : 138 139
relational_expression : 147 148 149 150 152 153 154 155
require              : 16 17
require_list         : 1 2 3 4 6 7 9 12 16
return_statement     : 93
statement            : 84 85
statements           : 24 27 28 98 99 101 106 107 113 114 115 116 117 118 120 121
statements_base      : 82
statements_list      : 81 82
string_literal       : 62 67
ternary_expression   : 133
types                : 34 36 37 68
unary_expression     : 163 164 165 166 167 168
unless_statement     : 97
until                : 110
variable_declaration : 88
when_list            : 119 121
while                : 109

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . require_list constant_list module_list function_list
    (2) program -> . require_list constant_list module_list
    (3) program -> . require_list constant_list function_list
    (4) program -> . require_list module_list function_list
    (5) program -> . constant_list module_list function_list
    (6) program -> . require_list constant_list
    (7) program -> . require_list module_list
    (8) program -> . constant_list module_list
    (9) program -> . require_list function_list
    (10) program -> . constant_list function_list
    (11) program -> . module_list function_list
    (12) program -> . require_list
    (13) program -> . constant_list
    (14) program -> . module_list
    (15) program -> . function_list
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (18) require -> . REQUIRE STRING
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    REQUIRE         shift and go to state 10
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    program                        shift and go to state 1
    require_list                   shift and go to state 2
    constant_list                  shift and go to state 3
    module_list                    shift and go to state 4
    function_list                  shift and go to state 5
    require                        shift and go to state 6
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> require_list . constant_list module_list function_list
    (2) program -> require_list . constant_list module_list
    (3) program -> require_list . constant_list function_list
    (4) program -> require_list . module_list function_list
    (6) program -> require_list . constant_list
    (7) program -> require_list . module_list
    (9) program -> require_list . function_list
    (12) program -> require_list .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 12 (program -> require_list .)
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    constant_list                  shift and go to state 14
    module_list                    shift and go to state 15
    function_list                  shift and go to state 16
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 3

    (5) program -> constant_list . module_list function_list
    (8) program -> constant_list . module_list
    (10) program -> constant_list . function_list
    (13) program -> constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 13 (program -> constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 17
    function_list                  shift and go to state 18
    module                         shift and go to state 8
    function                       shift and go to state 9

state 4

    (11) program -> module_list . function_list
    (14) program -> module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 14 (program -> module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 19
    function                       shift and go to state 9

state 5

    (15) program -> function_list .

    $end            reduce using rule 15 (program -> function_list .)


state 6

    (16) require_list -> require . require_list
    (17) require_list -> require .
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (18) require -> . REQUIRE STRING

    CONSTANT        reduce using rule 17 (require_list -> require .)
    MODULE          reduce using rule 17 (require_list -> require .)
    DEF             reduce using rule 17 (require_list -> require .)
    $end            reduce using rule 17 (require_list -> require .)
    REQUIRE         shift and go to state 10

    require                        shift and go to state 6
    require_list                   shift and go to state 20

state 7

    (19) constant_list -> constant . constant_list
    (20) constant_list -> constant .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (21) constant -> . CONSTANT ASSIGN expression

    MODULE          reduce using rule 20 (constant_list -> constant .)
    DEF             reduce using rule 20 (constant_list -> constant .)
    $end            reduce using rule 20 (constant_list -> constant .)
    CONSTANT        shift and go to state 11

    constant                       shift and go to state 7
    constant_list                  shift and go to state 21

state 8

    (22) module_list -> module . module_list
    (23) module_list -> module .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (24) module -> . MODULE ID statements END

    DEF             reduce using rule 23 (module_list -> module .)
    $end            reduce using rule 23 (module_list -> module .)
    MODULE          shift and go to state 12

    module                         shift and go to state 8
    module_list                    shift and go to state 22

state 9

    (25) function_list -> function .
    (26) function_list -> function . function_list
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 25 (function_list -> function .)
    DEF             shift and go to state 13

    function                       shift and go to state 9
    function_list                  shift and go to state 23

state 10

    (18) require -> REQUIRE . STRING

    STRING          shift and go to state 24


state 11

    (21) constant -> CONSTANT . ASSIGN expression

    ASSIGN          shift and go to state 25


state 12

    (24) module -> MODULE . ID statements END

    ID              shift and go to state 26


state 13

    (27) function -> DEF . ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> DEF . ID opt_return_type NEWLINE statements END

    ID              shift and go to state 27


state 14

    (1) program -> require_list constant_list . module_list function_list
    (2) program -> require_list constant_list . module_list
    (3) program -> require_list constant_list . function_list
    (6) program -> require_list constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 6 (program -> require_list constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 28
    function_list                  shift and go to state 29
    module                         shift and go to state 8
    function                       shift and go to state 9

state 15

    (4) program -> require_list module_list . function_list
    (7) program -> require_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 7 (program -> require_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 30
    function                       shift and go to state 9

state 16

    (9) program -> require_list function_list .

    $end            reduce using rule 9 (program -> require_list function_list .)


state 17

    (5) program -> constant_list module_list . function_list
    (8) program -> constant_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 8 (program -> constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 31
    function                       shift and go to state 9

state 18

    (10) program -> constant_list function_list .

    $end            reduce using rule 10 (program -> constant_list function_list .)


state 19

    (11) program -> module_list function_list .

    $end            reduce using rule 11 (program -> module_list function_list .)


state 20

    (16) require_list -> require require_list .

    CONSTANT        reduce using rule 16 (require_list -> require require_list .)
    MODULE          reduce using rule 16 (require_list -> require require_list .)
    DEF             reduce using rule 16 (require_list -> require require_list .)
    $end            reduce using rule 16 (require_list -> require require_list .)


state 21

    (19) constant_list -> constant constant_list .

    MODULE          reduce using rule 19 (constant_list -> constant constant_list .)
    DEF             reduce using rule 19 (constant_list -> constant constant_list .)
    $end            reduce using rule 19 (constant_list -> constant constant_list .)


state 22

    (22) module_list -> module module_list .

    DEF             reduce using rule 22 (module_list -> module module_list .)
    $end            reduce using rule 22 (module_list -> module module_list .)


state 23

    (26) function_list -> function function_list .

    $end            reduce using rule 26 (function_list -> function function_list .)


state 24

    (18) require -> REQUIRE STRING .

    REQUIRE         reduce using rule 18 (require -> REQUIRE STRING .)
    CONSTANT        reduce using rule 18 (require -> REQUIRE STRING .)
    MODULE          reduce using rule 18 (require -> REQUIRE STRING .)
    DEF             reduce using rule 18 (require -> REQUIRE STRING .)
    $end            reduce using rule 18 (require -> REQUIRE STRING .)


state 25

    (21) constant -> CONSTANT ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 32
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 26

    (24) module -> MODULE ID . statements END
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 64
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 27

    (27) function -> DEF ID . LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> DEF ID . opt_return_type NEWLINE statements END
    (37) opt_return_type -> . COLON types
    (38) opt_return_type -> . empty
    (175) empty -> .

    LPAREN          shift and go to state 67
    COLON           shift and go to state 69
    NEWLINE         reduce using rule 175 (empty -> .)

    opt_return_type                shift and go to state 68
    empty                          shift and go to state 70

state 28

    (1) program -> require_list constant_list module_list . function_list
    (2) program -> require_list constant_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 2 (program -> require_list constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 71
    function                       shift and go to state 9

state 29

    (3) program -> require_list constant_list function_list .

    $end            reduce using rule 3 (program -> require_list constant_list function_list .)


state 30

    (4) program -> require_list module_list function_list .

    $end            reduce using rule 4 (program -> require_list module_list function_list .)


state 31

    (5) program -> constant_list module_list function_list .

    $end            reduce using rule 5 (program -> constant_list module_list function_list .)


state 32

    (21) constant -> CONSTANT ASSIGN expression .

    CONSTANT        reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    MODULE          reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    DEF             reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    $end            reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)


state 33

    (127) expression -> assignment_expression .

    CONSTANT        reduce using rule 127 (expression -> assignment_expression .)
    MODULE          reduce using rule 127 (expression -> assignment_expression .)
    DEF             reduce using rule 127 (expression -> assignment_expression .)
    $end            reduce using rule 127 (expression -> assignment_expression .)
    COMMA           reduce using rule 127 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 127 (expression -> assignment_expression .)
    RPAREN          reduce using rule 127 (expression -> assignment_expression .)
    DOT             reduce using rule 127 (expression -> assignment_expression .)
    NEWLINE         reduce using rule 127 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 127 (expression -> assignment_expression .)
    TCOLON          reduce using rule 127 (expression -> assignment_expression .)
    INTERP_END      reduce using rule 127 (expression -> assignment_expression .)
    WHEN            reduce using rule 127 (expression -> assignment_expression .)
    LBRACE          reduce using rule 127 (expression -> assignment_expression .)
    ELSIF           reduce using rule 127 (expression -> assignment_expression .)
    ELSE            reduce using rule 127 (expression -> assignment_expression .)
    END             reduce using rule 127 (expression -> assignment_expression .)
    ID              reduce using rule 127 (expression -> assignment_expression .)
    CASE            reduce using rule 127 (expression -> assignment_expression .)
    RETURN          reduce using rule 127 (expression -> assignment_expression .)
    BREAK           reduce using rule 127 (expression -> assignment_expression .)
    NEXT            reduce using rule 127 (expression -> assignment_expression .)
    UNDERSCORE      reduce using rule 127 (expression -> assignment_expression .)
    ASTERISK        reduce using rule 127 (expression -> assignment_expression .)
    IF              reduce using rule 127 (expression -> assignment_expression .)
    UNLESS          reduce using rule 127 (expression -> assignment_expression .)
    WHILE           reduce using rule 127 (expression -> assignment_expression .)
    UNTIL           reduce using rule 127 (expression -> assignment_expression .)
    LOOP            reduce using rule 127 (expression -> assignment_expression .)
    PLUS            reduce using rule 127 (expression -> assignment_expression .)
    MINUS           reduce using rule 127 (expression -> assignment_expression .)
    EXCLAMATION     reduce using rule 127 (expression -> assignment_expression .)
    TILDE           reduce using rule 127 (expression -> assignment_expression .)
    LPAREN          reduce using rule 127 (expression -> assignment_expression .)
    LBRACKET        reduce using rule 127 (expression -> assignment_expression .)
    INTNUMBER       reduce using rule 127 (expression -> assignment_expression .)
    FLOATNUMBER     reduce using rule 127 (expression -> assignment_expression .)
    CHAR            reduce using rule 127 (expression -> assignment_expression .)
    TRUE            reduce using rule 127 (expression -> assignment_expression .)
    FALSE           reduce using rule 127 (expression -> assignment_expression .)
    STRING          reduce using rule 127 (expression -> assignment_expression .)


state 34

    (128) assignment_expression -> assignment_target . ASSIGN expression
    (129) assignment_expression -> assignment_target . PLUS_ASSIGN expression
    (130) assignment_expression -> assignment_target . MINUS_ASSIGN expression
    (131) assignment_expression -> assignment_target . MULTI_ASSIGN expression
    (132) assignment_expression -> assignment_target . DIVIDE_ASSIGN expression

    ASSIGN          shift and go to state 72
    PLUS_ASSIGN     shift and go to state 73
    MINUS_ASSIGN    shift and go to state 74
    MULTI_ASSIGN    shift and go to state 75
    DIVIDE_ASSIGN   shift and go to state 76


state 35

    (133) assignment_expression -> ternary_expression .

    CONSTANT        reduce using rule 133 (assignment_expression -> ternary_expression .)
    MODULE          reduce using rule 133 (assignment_expression -> ternary_expression .)
    DEF             reduce using rule 133 (assignment_expression -> ternary_expression .)
    $end            reduce using rule 133 (assignment_expression -> ternary_expression .)
    COMMA           reduce using rule 133 (assignment_expression -> ternary_expression .)
    RBRACKET        reduce using rule 133 (assignment_expression -> ternary_expression .)
    RPAREN          reduce using rule 133 (assignment_expression -> ternary_expression .)
    DOT             reduce using rule 133 (assignment_expression -> ternary_expression .)
    NEWLINE         reduce using rule 133 (assignment_expression -> ternary_expression .)
    SEMICOLON       reduce using rule 133 (assignment_expression -> ternary_expression .)
    TCOLON          reduce using rule 133 (assignment_expression -> ternary_expression .)
    INTERP_END      reduce using rule 133 (assignment_expression -> ternary_expression .)
    WHEN            reduce using rule 133 (assignment_expression -> ternary_expression .)
    LBRACE          reduce using rule 133 (assignment_expression -> ternary_expression .)
    ELSIF           reduce using rule 133 (assignment_expression -> ternary_expression .)
    ELSE            reduce using rule 133 (assignment_expression -> ternary_expression .)
    END             reduce using rule 133 (assignment_expression -> ternary_expression .)
    ID              reduce using rule 133 (assignment_expression -> ternary_expression .)
    CASE            reduce using rule 133 (assignment_expression -> ternary_expression .)
    RETURN          reduce using rule 133 (assignment_expression -> ternary_expression .)
    BREAK           reduce using rule 133 (assignment_expression -> ternary_expression .)
    NEXT            reduce using rule 133 (assignment_expression -> ternary_expression .)
    UNDERSCORE      reduce using rule 133 (assignment_expression -> ternary_expression .)
    ASTERISK        reduce using rule 133 (assignment_expression -> ternary_expression .)
    IF              reduce using rule 133 (assignment_expression -> ternary_expression .)
    UNLESS          reduce using rule 133 (assignment_expression -> ternary_expression .)
    WHILE           reduce using rule 133 (assignment_expression -> ternary_expression .)
    UNTIL           reduce using rule 133 (assignment_expression -> ternary_expression .)
    LOOP            reduce using rule 133 (assignment_expression -> ternary_expression .)
    PLUS            reduce using rule 133 (assignment_expression -> ternary_expression .)
    MINUS           reduce using rule 133 (assignment_expression -> ternary_expression .)
    EXCLAMATION     reduce using rule 133 (assignment_expression -> ternary_expression .)
    TILDE           reduce using rule 133 (assignment_expression -> ternary_expression .)
    LPAREN          reduce using rule 133 (assignment_expression -> ternary_expression .)
    LBRACKET        reduce using rule 133 (assignment_expression -> ternary_expression .)
    INTNUMBER       reduce using rule 133 (assignment_expression -> ternary_expression .)
    FLOATNUMBER     reduce using rule 133 (assignment_expression -> ternary_expression .)
    CHAR            reduce using rule 133 (assignment_expression -> ternary_expression .)
    TRUE            reduce using rule 133 (assignment_expression -> ternary_expression .)
    FALSE           reduce using rule 133 (assignment_expression -> ternary_expression .)
    STRING          reduce using rule 133 (assignment_expression -> ternary_expression .)


state 36

    (134) assignment_target -> ID .
    (135) assignment_target -> ID . LBRACKET expression RBRACKET
    (173) primary_expression -> ID .

  ! shift/reduce conflict for LBRACKET resolved as shift
    ASSIGN          reduce using rule 134 (assignment_target -> ID .)
    PLUS_ASSIGN     reduce using rule 134 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 134 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 134 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 134 (assignment_target -> ID .)
    LBRACKET        shift and go to state 77
    POTENCIACAO     reduce using rule 173 (primary_expression -> ID .)
    MULTI           reduce using rule 173 (primary_expression -> ID .)
    DIVIDE          reduce using rule 173 (primary_expression -> ID .)
    MODULO          reduce using rule 173 (primary_expression -> ID .)
    PLUS            reduce using rule 173 (primary_expression -> ID .)
    MINUS           reduce using rule 173 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 173 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 173 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 173 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 173 (primary_expression -> ID .)
    EQUAL           reduce using rule 173 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 173 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 173 (primary_expression -> ID .)
    AND             reduce using rule 173 (primary_expression -> ID .)
    DOTDOT          reduce using rule 173 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 173 (primary_expression -> ID .)
    OR              reduce using rule 173 (primary_expression -> ID .)
    QMARK           reduce using rule 173 (primary_expression -> ID .)
    CONSTANT        reduce using rule 173 (primary_expression -> ID .)
    MODULE          reduce using rule 173 (primary_expression -> ID .)
    DEF             reduce using rule 173 (primary_expression -> ID .)
    $end            reduce using rule 173 (primary_expression -> ID .)
    COMMA           reduce using rule 173 (primary_expression -> ID .)
    RBRACKET        reduce using rule 173 (primary_expression -> ID .)
    RPAREN          reduce using rule 173 (primary_expression -> ID .)
    DOT             reduce using rule 173 (primary_expression -> ID .)
    NEWLINE         reduce using rule 173 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 173 (primary_expression -> ID .)
    TCOLON          reduce using rule 173 (primary_expression -> ID .)
    INTERP_END      reduce using rule 173 (primary_expression -> ID .)
    WHEN            reduce using rule 173 (primary_expression -> ID .)
    LBRACE          reduce using rule 173 (primary_expression -> ID .)
    ELSIF           reduce using rule 173 (primary_expression -> ID .)
    ELSE            reduce using rule 173 (primary_expression -> ID .)
    END             reduce using rule 173 (primary_expression -> ID .)
    ID              reduce using rule 173 (primary_expression -> ID .)
    CASE            reduce using rule 173 (primary_expression -> ID .)
    RETURN          reduce using rule 173 (primary_expression -> ID .)
    BREAK           reduce using rule 173 (primary_expression -> ID .)
    NEXT            reduce using rule 173 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 173 (primary_expression -> ID .)
    ASTERISK        reduce using rule 173 (primary_expression -> ID .)
    IF              reduce using rule 173 (primary_expression -> ID .)
    UNLESS          reduce using rule 173 (primary_expression -> ID .)
    WHILE           reduce using rule 173 (primary_expression -> ID .)
    UNTIL           reduce using rule 173 (primary_expression -> ID .)
    LOOP            reduce using rule 173 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 173 (primary_expression -> ID .)
    TILDE           reduce using rule 173 (primary_expression -> ID .)
    LPAREN          reduce using rule 173 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 173 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 173 (primary_expression -> ID .)
    CHAR            reduce using rule 173 (primary_expression -> ID .)
    TRUE            reduce using rule 173 (primary_expression -> ID .)
    FALSE           reduce using rule 173 (primary_expression -> ID .)
    STRING          reduce using rule 173 (primary_expression -> ID .)

  ! LBRACKET        [ reduce using rule 173 (primary_expression -> ID .) ]


state 37

    (174) array_literal -> LBRACKET . opt_expression_list RBRACKET
    (77) opt_expression_list -> . expression_list
    (78) opt_expression_list -> . empty
    (79) expression_list -> . expression
    (80) expression_list -> . expression_list COMMA expression
    (175) empty -> .
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    RBRACKET        reduce using rule 175 (empty -> .)
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    opt_expression_list            shift and go to state 78
    expression_list                shift and go to state 79
    empty                          shift and go to state 80
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 38

    (136) assignment_target -> UNDERSCORE .

    ASSIGN          reduce using rule 136 (assignment_target -> UNDERSCORE .)
    PLUS_ASSIGN     reduce using rule 136 (assignment_target -> UNDERSCORE .)
    MINUS_ASSIGN    reduce using rule 136 (assignment_target -> UNDERSCORE .)
    MULTI_ASSIGN    reduce using rule 136 (assignment_target -> UNDERSCORE .)
    DIVIDE_ASSIGN   reduce using rule 136 (assignment_target -> UNDERSCORE .)


state 39

    (137) assignment_target -> ASTERISK . assignment_target
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target

    ID              shift and go to state 83
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39

    assignment_target              shift and go to state 82

state 40

    (138) ternary_expression -> range_expression . QMARK expression TCOLON expression
    (139) ternary_expression -> range_expression .

    QMARK           shift and go to state 84
    CONSTANT        reduce using rule 139 (ternary_expression -> range_expression .)
    MODULE          reduce using rule 139 (ternary_expression -> range_expression .)
    DEF             reduce using rule 139 (ternary_expression -> range_expression .)
    $end            reduce using rule 139 (ternary_expression -> range_expression .)
    COMMA           reduce using rule 139 (ternary_expression -> range_expression .)
    RBRACKET        reduce using rule 139 (ternary_expression -> range_expression .)
    RPAREN          reduce using rule 139 (ternary_expression -> range_expression .)
    DOT             reduce using rule 139 (ternary_expression -> range_expression .)
    NEWLINE         reduce using rule 139 (ternary_expression -> range_expression .)
    SEMICOLON       reduce using rule 139 (ternary_expression -> range_expression .)
    TCOLON          reduce using rule 139 (ternary_expression -> range_expression .)
    INTERP_END      reduce using rule 139 (ternary_expression -> range_expression .)
    WHEN            reduce using rule 139 (ternary_expression -> range_expression .)
    LBRACE          reduce using rule 139 (ternary_expression -> range_expression .)
    ELSIF           reduce using rule 139 (ternary_expression -> range_expression .)
    ELSE            reduce using rule 139 (ternary_expression -> range_expression .)
    END             reduce using rule 139 (ternary_expression -> range_expression .)
    ID              reduce using rule 139 (ternary_expression -> range_expression .)
    CASE            reduce using rule 139 (ternary_expression -> range_expression .)
    RETURN          reduce using rule 139 (ternary_expression -> range_expression .)
    BREAK           reduce using rule 139 (ternary_expression -> range_expression .)
    NEXT            reduce using rule 139 (ternary_expression -> range_expression .)
    UNDERSCORE      reduce using rule 139 (ternary_expression -> range_expression .)
    ASTERISK        reduce using rule 139 (ternary_expression -> range_expression .)
    IF              reduce using rule 139 (ternary_expression -> range_expression .)
    UNLESS          reduce using rule 139 (ternary_expression -> range_expression .)
    WHILE           reduce using rule 139 (ternary_expression -> range_expression .)
    UNTIL           reduce using rule 139 (ternary_expression -> range_expression .)
    LOOP            reduce using rule 139 (ternary_expression -> range_expression .)
    PLUS            reduce using rule 139 (ternary_expression -> range_expression .)
    MINUS           reduce using rule 139 (ternary_expression -> range_expression .)
    EXCLAMATION     reduce using rule 139 (ternary_expression -> range_expression .)
    TILDE           reduce using rule 139 (ternary_expression -> range_expression .)
    LPAREN          reduce using rule 139 (ternary_expression -> range_expression .)
    LBRACKET        reduce using rule 139 (ternary_expression -> range_expression .)
    INTNUMBER       reduce using rule 139 (ternary_expression -> range_expression .)
    FLOATNUMBER     reduce using rule 139 (ternary_expression -> range_expression .)
    CHAR            reduce using rule 139 (ternary_expression -> range_expression .)
    TRUE            reduce using rule 139 (ternary_expression -> range_expression .)
    FALSE           reduce using rule 139 (ternary_expression -> range_expression .)
    STRING          reduce using rule 139 (ternary_expression -> range_expression .)


state 41

    (140) range_expression -> logical_or_expression . DOTDOT logical_or_expression
    (141) range_expression -> logical_or_expression . DOTDOTDOT logical_or_expression
    (142) range_expression -> logical_or_expression .
    (144) logical_or_expression -> logical_or_expression . OR logical_and_expression

    DOTDOT          shift and go to state 85
    DOTDOTDOT       shift and go to state 86
    QMARK           reduce using rule 142 (range_expression -> logical_or_expression .)
    CONSTANT        reduce using rule 142 (range_expression -> logical_or_expression .)
    MODULE          reduce using rule 142 (range_expression -> logical_or_expression .)
    DEF             reduce using rule 142 (range_expression -> logical_or_expression .)
    $end            reduce using rule 142 (range_expression -> logical_or_expression .)
    COMMA           reduce using rule 142 (range_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 142 (range_expression -> logical_or_expression .)
    RPAREN          reduce using rule 142 (range_expression -> logical_or_expression .)
    DOT             reduce using rule 142 (range_expression -> logical_or_expression .)
    NEWLINE         reduce using rule 142 (range_expression -> logical_or_expression .)
    SEMICOLON       reduce using rule 142 (range_expression -> logical_or_expression .)
    TCOLON          reduce using rule 142 (range_expression -> logical_or_expression .)
    INTERP_END      reduce using rule 142 (range_expression -> logical_or_expression .)
    WHEN            reduce using rule 142 (range_expression -> logical_or_expression .)
    LBRACE          reduce using rule 142 (range_expression -> logical_or_expression .)
    ELSIF           reduce using rule 142 (range_expression -> logical_or_expression .)
    ELSE            reduce using rule 142 (range_expression -> logical_or_expression .)
    END             reduce using rule 142 (range_expression -> logical_or_expression .)
    ID              reduce using rule 142 (range_expression -> logical_or_expression .)
    CASE            reduce using rule 142 (range_expression -> logical_or_expression .)
    RETURN          reduce using rule 142 (range_expression -> logical_or_expression .)
    BREAK           reduce using rule 142 (range_expression -> logical_or_expression .)
    NEXT            reduce using rule 142 (range_expression -> logical_or_expression .)
    UNDERSCORE      reduce using rule 142 (range_expression -> logical_or_expression .)
    ASTERISK        reduce using rule 142 (range_expression -> logical_or_expression .)
    IF              reduce using rule 142 (range_expression -> logical_or_expression .)
    UNLESS          reduce using rule 142 (range_expression -> logical_or_expression .)
    WHILE           reduce using rule 142 (range_expression -> logical_or_expression .)
    UNTIL           reduce using rule 142 (range_expression -> logical_or_expression .)
    LOOP            reduce using rule 142 (range_expression -> logical_or_expression .)
    PLUS            reduce using rule 142 (range_expression -> logical_or_expression .)
    MINUS           reduce using rule 142 (range_expression -> logical_or_expression .)
    EXCLAMATION     reduce using rule 142 (range_expression -> logical_or_expression .)
    TILDE           reduce using rule 142 (range_expression -> logical_or_expression .)
    LPAREN          reduce using rule 142 (range_expression -> logical_or_expression .)
    LBRACKET        reduce using rule 142 (range_expression -> logical_or_expression .)
    INTNUMBER       reduce using rule 142 (range_expression -> logical_or_expression .)
    FLOATNUMBER     reduce using rule 142 (range_expression -> logical_or_expression .)
    CHAR            reduce using rule 142 (range_expression -> logical_or_expression .)
    TRUE            reduce using rule 142 (range_expression -> logical_or_expression .)
    FALSE           reduce using rule 142 (range_expression -> logical_or_expression .)
    STRING          reduce using rule 142 (range_expression -> logical_or_expression .)
    OR              shift and go to state 87


state 42

    (143) logical_or_expression -> logical_and_expression .
    (146) logical_and_expression -> logical_and_expression . AND equality_expression

    DOTDOT          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    DOTDOTDOT       reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    QMARK           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    CONSTANT        reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    MODULE          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    DEF             reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    DOT             reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    NEWLINE         reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    TCOLON          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    INTERP_END      reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    WHEN            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    LBRACE          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    ELSIF           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    ELSE            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    END             reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    ID              reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    CASE            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    NEXT            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    UNDERSCORE      reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    ASTERISK        reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    UNLESS          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    WHILE           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    UNTIL           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    LOOP            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    PLUS            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    EXCLAMATION     reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    TILDE           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    LBRACKET        reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    INTNUMBER       reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    FLOATNUMBER     reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    TRUE            reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    FALSE           reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    STRING          reduce using rule 143 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 88


state 43

    (145) logical_and_expression -> equality_expression .
    (148) equality_expression -> equality_expression . EQUAL relational_expression
    (149) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (150) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 145 (logical_and_expression -> equality_expression .)
    DOTDOT          reduce using rule 145 (logical_and_expression -> equality_expression .)
    DOTDOTDOT       reduce using rule 145 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 145 (logical_and_expression -> equality_expression .)
    QMARK           reduce using rule 145 (logical_and_expression -> equality_expression .)
    CONSTANT        reduce using rule 145 (logical_and_expression -> equality_expression .)
    MODULE          reduce using rule 145 (logical_and_expression -> equality_expression .)
    DEF             reduce using rule 145 (logical_and_expression -> equality_expression .)
    $end            reduce using rule 145 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 145 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 145 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 145 (logical_and_expression -> equality_expression .)
    DOT             reduce using rule 145 (logical_and_expression -> equality_expression .)
    NEWLINE         reduce using rule 145 (logical_and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 145 (logical_and_expression -> equality_expression .)
    TCOLON          reduce using rule 145 (logical_and_expression -> equality_expression .)
    INTERP_END      reduce using rule 145 (logical_and_expression -> equality_expression .)
    WHEN            reduce using rule 145 (logical_and_expression -> equality_expression .)
    LBRACE          reduce using rule 145 (logical_and_expression -> equality_expression .)
    ELSIF           reduce using rule 145 (logical_and_expression -> equality_expression .)
    ELSE            reduce using rule 145 (logical_and_expression -> equality_expression .)
    END             reduce using rule 145 (logical_and_expression -> equality_expression .)
    ID              reduce using rule 145 (logical_and_expression -> equality_expression .)
    CASE            reduce using rule 145 (logical_and_expression -> equality_expression .)
    RETURN          reduce using rule 145 (logical_and_expression -> equality_expression .)
    BREAK           reduce using rule 145 (logical_and_expression -> equality_expression .)
    NEXT            reduce using rule 145 (logical_and_expression -> equality_expression .)
    UNDERSCORE      reduce using rule 145 (logical_and_expression -> equality_expression .)
    ASTERISK        reduce using rule 145 (logical_and_expression -> equality_expression .)
    IF              reduce using rule 145 (logical_and_expression -> equality_expression .)
    UNLESS          reduce using rule 145 (logical_and_expression -> equality_expression .)
    WHILE           reduce using rule 145 (logical_and_expression -> equality_expression .)
    UNTIL           reduce using rule 145 (logical_and_expression -> equality_expression .)
    LOOP            reduce using rule 145 (logical_and_expression -> equality_expression .)
    PLUS            reduce using rule 145 (logical_and_expression -> equality_expression .)
    MINUS           reduce using rule 145 (logical_and_expression -> equality_expression .)
    EXCLAMATION     reduce using rule 145 (logical_and_expression -> equality_expression .)
    TILDE           reduce using rule 145 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 145 (logical_and_expression -> equality_expression .)
    LBRACKET        reduce using rule 145 (logical_and_expression -> equality_expression .)
    INTNUMBER       reduce using rule 145 (logical_and_expression -> equality_expression .)
    FLOATNUMBER     reduce using rule 145 (logical_and_expression -> equality_expression .)
    CHAR            reduce using rule 145 (logical_and_expression -> equality_expression .)
    TRUE            reduce using rule 145 (logical_and_expression -> equality_expression .)
    FALSE           reduce using rule 145 (logical_and_expression -> equality_expression .)
    STRING          reduce using rule 145 (logical_and_expression -> equality_expression .)
    EQUAL           shift and go to state 89
    NOT_EQUAL       shift and go to state 90
    TIPO_EQUAL      shift and go to state 91


state 44

    (147) equality_expression -> relational_expression .
    (152) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (153) relational_expression -> relational_expression . LESS_THAN additive_expression
    (154) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (155) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 147 (equality_expression -> relational_expression .)
    NOT_EQUAL       reduce using rule 147 (equality_expression -> relational_expression .)
    TIPO_EQUAL      reduce using rule 147 (equality_expression -> relational_expression .)
    AND             reduce using rule 147 (equality_expression -> relational_expression .)
    DOTDOT          reduce using rule 147 (equality_expression -> relational_expression .)
    DOTDOTDOT       reduce using rule 147 (equality_expression -> relational_expression .)
    OR              reduce using rule 147 (equality_expression -> relational_expression .)
    QMARK           reduce using rule 147 (equality_expression -> relational_expression .)
    CONSTANT        reduce using rule 147 (equality_expression -> relational_expression .)
    MODULE          reduce using rule 147 (equality_expression -> relational_expression .)
    DEF             reduce using rule 147 (equality_expression -> relational_expression .)
    $end            reduce using rule 147 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 147 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 147 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 147 (equality_expression -> relational_expression .)
    DOT             reduce using rule 147 (equality_expression -> relational_expression .)
    NEWLINE         reduce using rule 147 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 147 (equality_expression -> relational_expression .)
    TCOLON          reduce using rule 147 (equality_expression -> relational_expression .)
    INTERP_END      reduce using rule 147 (equality_expression -> relational_expression .)
    WHEN            reduce using rule 147 (equality_expression -> relational_expression .)
    LBRACE          reduce using rule 147 (equality_expression -> relational_expression .)
    ELSIF           reduce using rule 147 (equality_expression -> relational_expression .)
    ELSE            reduce using rule 147 (equality_expression -> relational_expression .)
    END             reduce using rule 147 (equality_expression -> relational_expression .)
    ID              reduce using rule 147 (equality_expression -> relational_expression .)
    CASE            reduce using rule 147 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 147 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 147 (equality_expression -> relational_expression .)
    NEXT            reduce using rule 147 (equality_expression -> relational_expression .)
    UNDERSCORE      reduce using rule 147 (equality_expression -> relational_expression .)
    ASTERISK        reduce using rule 147 (equality_expression -> relational_expression .)
    IF              reduce using rule 147 (equality_expression -> relational_expression .)
    UNLESS          reduce using rule 147 (equality_expression -> relational_expression .)
    WHILE           reduce using rule 147 (equality_expression -> relational_expression .)
    UNTIL           reduce using rule 147 (equality_expression -> relational_expression .)
    LOOP            reduce using rule 147 (equality_expression -> relational_expression .)
    PLUS            reduce using rule 147 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 147 (equality_expression -> relational_expression .)
    EXCLAMATION     reduce using rule 147 (equality_expression -> relational_expression .)
    TILDE           reduce using rule 147 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 147 (equality_expression -> relational_expression .)
    LBRACKET        reduce using rule 147 (equality_expression -> relational_expression .)
    INTNUMBER       reduce using rule 147 (equality_expression -> relational_expression .)
    FLOATNUMBER     reduce using rule 147 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 147 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 147 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 147 (equality_expression -> relational_expression .)
    STRING          reduce using rule 147 (equality_expression -> relational_expression .)
    GREATER_THAN    shift and go to state 92
    LESS_THAN       shift and go to state 93
    GREATER_EQUAL   shift and go to state 94
    LESS_EQUAL      shift and go to state 95


state 45

    (151) relational_expression -> additive_expression .
    (157) additive_expression -> additive_expression . PLUS multiplicative_expression
    (158) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GREATER_THAN    reduce using rule 151 (relational_expression -> additive_expression .)
    LESS_THAN       reduce using rule 151 (relational_expression -> additive_expression .)
    GREATER_EQUAL   reduce using rule 151 (relational_expression -> additive_expression .)
    LESS_EQUAL      reduce using rule 151 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 151 (relational_expression -> additive_expression .)
    NOT_EQUAL       reduce using rule 151 (relational_expression -> additive_expression .)
    TIPO_EQUAL      reduce using rule 151 (relational_expression -> additive_expression .)
    AND             reduce using rule 151 (relational_expression -> additive_expression .)
    DOTDOT          reduce using rule 151 (relational_expression -> additive_expression .)
    DOTDOTDOT       reduce using rule 151 (relational_expression -> additive_expression .)
    OR              reduce using rule 151 (relational_expression -> additive_expression .)
    QMARK           reduce using rule 151 (relational_expression -> additive_expression .)
    CONSTANT        reduce using rule 151 (relational_expression -> additive_expression .)
    MODULE          reduce using rule 151 (relational_expression -> additive_expression .)
    DEF             reduce using rule 151 (relational_expression -> additive_expression .)
    $end            reduce using rule 151 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 151 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 151 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 151 (relational_expression -> additive_expression .)
    DOT             reduce using rule 151 (relational_expression -> additive_expression .)
    NEWLINE         reduce using rule 151 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 151 (relational_expression -> additive_expression .)
    TCOLON          reduce using rule 151 (relational_expression -> additive_expression .)
    INTERP_END      reduce using rule 151 (relational_expression -> additive_expression .)
    WHEN            reduce using rule 151 (relational_expression -> additive_expression .)
    LBRACE          reduce using rule 151 (relational_expression -> additive_expression .)
    ELSIF           reduce using rule 151 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 151 (relational_expression -> additive_expression .)
    END             reduce using rule 151 (relational_expression -> additive_expression .)
    ID              reduce using rule 151 (relational_expression -> additive_expression .)
    CASE            reduce using rule 151 (relational_expression -> additive_expression .)
    RETURN          reduce using rule 151 (relational_expression -> additive_expression .)
    BREAK           reduce using rule 151 (relational_expression -> additive_expression .)
    NEXT            reduce using rule 151 (relational_expression -> additive_expression .)
    UNDERSCORE      reduce using rule 151 (relational_expression -> additive_expression .)
    ASTERISK        reduce using rule 151 (relational_expression -> additive_expression .)
    IF              reduce using rule 151 (relational_expression -> additive_expression .)
    UNLESS          reduce using rule 151 (relational_expression -> additive_expression .)
    WHILE           reduce using rule 151 (relational_expression -> additive_expression .)
    UNTIL           reduce using rule 151 (relational_expression -> additive_expression .)
    LOOP            reduce using rule 151 (relational_expression -> additive_expression .)
    EXCLAMATION     reduce using rule 151 (relational_expression -> additive_expression .)
    TILDE           reduce using rule 151 (relational_expression -> additive_expression .)
    LPAREN          reduce using rule 151 (relational_expression -> additive_expression .)
    LBRACKET        reduce using rule 151 (relational_expression -> additive_expression .)
    INTNUMBER       reduce using rule 151 (relational_expression -> additive_expression .)
    FLOATNUMBER     reduce using rule 151 (relational_expression -> additive_expression .)
    CHAR            reduce using rule 151 (relational_expression -> additive_expression .)
    TRUE            reduce using rule 151 (relational_expression -> additive_expression .)
    FALSE           reduce using rule 151 (relational_expression -> additive_expression .)
    STRING          reduce using rule 151 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97

  ! PLUS            [ reduce using rule 151 (relational_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 151 (relational_expression -> additive_expression .) ]


state 46

    (156) additive_expression -> multiplicative_expression .
    (160) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (161) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (162) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 156 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 156 (additive_expression -> multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 156 (additive_expression -> multiplicative_expression .)
    LESS_EQUAL      reduce using rule 156 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    NOT_EQUAL       reduce using rule 156 (additive_expression -> multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 156 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 156 (additive_expression -> multiplicative_expression .)
    DOTDOT          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    DOTDOTDOT       reduce using rule 156 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 156 (additive_expression -> multiplicative_expression .)
    QMARK           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    CONSTANT        reduce using rule 156 (additive_expression -> multiplicative_expression .)
    MODULE          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    DEF             reduce using rule 156 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 156 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    DOT             reduce using rule 156 (additive_expression -> multiplicative_expression .)
    NEWLINE         reduce using rule 156 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 156 (additive_expression -> multiplicative_expression .)
    TCOLON          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    INTERP_END      reduce using rule 156 (additive_expression -> multiplicative_expression .)
    WHEN            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    LBRACE          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    ELSIF           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 156 (additive_expression -> multiplicative_expression .)
    ID              reduce using rule 156 (additive_expression -> multiplicative_expression .)
    CASE            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    NEXT            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    UNDERSCORE      reduce using rule 156 (additive_expression -> multiplicative_expression .)
    ASTERISK        reduce using rule 156 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 156 (additive_expression -> multiplicative_expression .)
    UNLESS          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    WHILE           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    UNTIL           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    LOOP            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    EXCLAMATION     reduce using rule 156 (additive_expression -> multiplicative_expression .)
    TILDE           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    LBRACKET        reduce using rule 156 (additive_expression -> multiplicative_expression .)
    INTNUMBER       reduce using rule 156 (additive_expression -> multiplicative_expression .)
    FLOATNUMBER     reduce using rule 156 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    TRUE            reduce using rule 156 (additive_expression -> multiplicative_expression .)
    FALSE           reduce using rule 156 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 156 (additive_expression -> multiplicative_expression .)
    MULTI           shift and go to state 98
    DIVIDE          shift and go to state 99
    MODULO          shift and go to state 100


state 47

    (165) unary_expression -> PLUS . unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 101
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 48

    (166) unary_expression -> MINUS . unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 103
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 49

    (159) multiplicative_expression -> potenciacao_expression .
    (164) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    DIVIDE          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    MODULO          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    PLUS            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    MINUS           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    GREATER_THAN    reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    LESS_THAN       reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    LESS_EQUAL      reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    EQUAL           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    NOT_EQUAL       reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    AND             reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    DOTDOT          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    DOTDOTDOT       reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    OR              reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    QMARK           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    CONSTANT        reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    MODULE          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    DEF             reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    $end            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    COMMA           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    RBRACKET        reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    RPAREN          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    DOT             reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    NEWLINE         reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    SEMICOLON       reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    TCOLON          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    INTERP_END      reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    WHEN            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    LBRACE          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    ELSIF           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    ELSE            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    END             reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    ID              reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    CASE            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    RETURN          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    BREAK           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    NEXT            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    UNDERSCORE      reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    ASTERISK        reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    IF              reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    UNLESS          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    WHILE           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    UNTIL           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    LOOP            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    EXCLAMATION     reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    TILDE           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    LPAREN          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    LBRACKET        reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    INTNUMBER       reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    FLOATNUMBER     reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    CHAR            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    TRUE            reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    FALSE           reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    STRING          reduce using rule 159 (multiplicative_expression -> potenciacao_expression .)
    POTENCIACAO     shift and go to state 104


state 50

    (163) potenciacao_expression -> unary_expression .

    POTENCIACAO     reduce using rule 163 (potenciacao_expression -> unary_expression .)
    MULTI           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    DIVIDE          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    MODULO          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    PLUS            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    MINUS           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 163 (potenciacao_expression -> unary_expression .)
    LESS_THAN       reduce using rule 163 (potenciacao_expression -> unary_expression .)
    GREATER_EQUAL   reduce using rule 163 (potenciacao_expression -> unary_expression .)
    LESS_EQUAL      reduce using rule 163 (potenciacao_expression -> unary_expression .)
    EQUAL           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 163 (potenciacao_expression -> unary_expression .)
    TIPO_EQUAL      reduce using rule 163 (potenciacao_expression -> unary_expression .)
    AND             reduce using rule 163 (potenciacao_expression -> unary_expression .)
    DOTDOT          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    DOTDOTDOT       reduce using rule 163 (potenciacao_expression -> unary_expression .)
    OR              reduce using rule 163 (potenciacao_expression -> unary_expression .)
    QMARK           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    CONSTANT        reduce using rule 163 (potenciacao_expression -> unary_expression .)
    MODULE          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    DEF             reduce using rule 163 (potenciacao_expression -> unary_expression .)
    $end            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    COMMA           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    RBRACKET        reduce using rule 163 (potenciacao_expression -> unary_expression .)
    RPAREN          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    DOT             reduce using rule 163 (potenciacao_expression -> unary_expression .)
    NEWLINE         reduce using rule 163 (potenciacao_expression -> unary_expression .)
    SEMICOLON       reduce using rule 163 (potenciacao_expression -> unary_expression .)
    TCOLON          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    INTERP_END      reduce using rule 163 (potenciacao_expression -> unary_expression .)
    WHEN            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    LBRACE          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    ELSIF           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    ELSE            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    END             reduce using rule 163 (potenciacao_expression -> unary_expression .)
    ID              reduce using rule 163 (potenciacao_expression -> unary_expression .)
    CASE            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    RETURN          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    BREAK           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    NEXT            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    UNDERSCORE      reduce using rule 163 (potenciacao_expression -> unary_expression .)
    ASTERISK        reduce using rule 163 (potenciacao_expression -> unary_expression .)
    IF              reduce using rule 163 (potenciacao_expression -> unary_expression .)
    UNLESS          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    WHILE           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    UNTIL           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    LOOP            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    EXCLAMATION     reduce using rule 163 (potenciacao_expression -> unary_expression .)
    TILDE           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    LPAREN          reduce using rule 163 (potenciacao_expression -> unary_expression .)
    LBRACKET        reduce using rule 163 (potenciacao_expression -> unary_expression .)
    INTNUMBER       reduce using rule 163 (potenciacao_expression -> unary_expression .)
    FLOATNUMBER     reduce using rule 163 (potenciacao_expression -> unary_expression .)
    CHAR            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    TRUE            reduce using rule 163 (potenciacao_expression -> unary_expression .)
    FALSE           reduce using rule 163 (potenciacao_expression -> unary_expression .)
    STRING          reduce using rule 163 (potenciacao_expression -> unary_expression .)


state 51

    (167) unary_expression -> EXCLAMATION . unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 105
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 52

    (168) unary_expression -> TILDE . unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 106
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 53

    (169) unary_expression -> primary_expression .

    POTENCIACAO     reduce using rule 169 (unary_expression -> primary_expression .)
    MULTI           reduce using rule 169 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 169 (unary_expression -> primary_expression .)
    MODULO          reduce using rule 169 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 169 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 169 (unary_expression -> primary_expression .)
    GREATER_THAN    reduce using rule 169 (unary_expression -> primary_expression .)
    LESS_THAN       reduce using rule 169 (unary_expression -> primary_expression .)
    GREATER_EQUAL   reduce using rule 169 (unary_expression -> primary_expression .)
    LESS_EQUAL      reduce using rule 169 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 169 (unary_expression -> primary_expression .)
    NOT_EQUAL       reduce using rule 169 (unary_expression -> primary_expression .)
    TIPO_EQUAL      reduce using rule 169 (unary_expression -> primary_expression .)
    AND             reduce using rule 169 (unary_expression -> primary_expression .)
    DOTDOT          reduce using rule 169 (unary_expression -> primary_expression .)
    DOTDOTDOT       reduce using rule 169 (unary_expression -> primary_expression .)
    OR              reduce using rule 169 (unary_expression -> primary_expression .)
    QMARK           reduce using rule 169 (unary_expression -> primary_expression .)
    CONSTANT        reduce using rule 169 (unary_expression -> primary_expression .)
    MODULE          reduce using rule 169 (unary_expression -> primary_expression .)
    DEF             reduce using rule 169 (unary_expression -> primary_expression .)
    $end            reduce using rule 169 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 169 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 169 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 169 (unary_expression -> primary_expression .)
    DOT             reduce using rule 169 (unary_expression -> primary_expression .)
    NEWLINE         reduce using rule 169 (unary_expression -> primary_expression .)
    SEMICOLON       reduce using rule 169 (unary_expression -> primary_expression .)
    TCOLON          reduce using rule 169 (unary_expression -> primary_expression .)
    INTERP_END      reduce using rule 169 (unary_expression -> primary_expression .)
    WHEN            reduce using rule 169 (unary_expression -> primary_expression .)
    LBRACE          reduce using rule 169 (unary_expression -> primary_expression .)
    ELSIF           reduce using rule 169 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 169 (unary_expression -> primary_expression .)
    END             reduce using rule 169 (unary_expression -> primary_expression .)
    ID              reduce using rule 169 (unary_expression -> primary_expression .)
    CASE            reduce using rule 169 (unary_expression -> primary_expression .)
    RETURN          reduce using rule 169 (unary_expression -> primary_expression .)
    BREAK           reduce using rule 169 (unary_expression -> primary_expression .)
    NEXT            reduce using rule 169 (unary_expression -> primary_expression .)
    UNDERSCORE      reduce using rule 169 (unary_expression -> primary_expression .)
    ASTERISK        reduce using rule 169 (unary_expression -> primary_expression .)
    IF              reduce using rule 169 (unary_expression -> primary_expression .)
    UNLESS          reduce using rule 169 (unary_expression -> primary_expression .)
    WHILE           reduce using rule 169 (unary_expression -> primary_expression .)
    UNTIL           reduce using rule 169 (unary_expression -> primary_expression .)
    LOOP            reduce using rule 169 (unary_expression -> primary_expression .)
    EXCLAMATION     reduce using rule 169 (unary_expression -> primary_expression .)
    TILDE           reduce using rule 169 (unary_expression -> primary_expression .)
    LPAREN          reduce using rule 169 (unary_expression -> primary_expression .)
    LBRACKET        reduce using rule 169 (unary_expression -> primary_expression .)
    INTNUMBER       reduce using rule 169 (unary_expression -> primary_expression .)
    FLOATNUMBER     reduce using rule 169 (unary_expression -> primary_expression .)
    CHAR            reduce using rule 169 (unary_expression -> primary_expression .)
    TRUE            reduce using rule 169 (unary_expression -> primary_expression .)
    FALSE           reduce using rule 169 (unary_expression -> primary_expression .)
    STRING          reduce using rule 169 (unary_expression -> primary_expression .)


state 54

    (170) primary_expression -> LPAREN . expression RPAREN
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 107
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 55

    (171) primary_expression -> array_literal .

    POTENCIACAO     reduce using rule 171 (primary_expression -> array_literal .)
    MULTI           reduce using rule 171 (primary_expression -> array_literal .)
    DIVIDE          reduce using rule 171 (primary_expression -> array_literal .)
    MODULO          reduce using rule 171 (primary_expression -> array_literal .)
    PLUS            reduce using rule 171 (primary_expression -> array_literal .)
    MINUS           reduce using rule 171 (primary_expression -> array_literal .)
    GREATER_THAN    reduce using rule 171 (primary_expression -> array_literal .)
    LESS_THAN       reduce using rule 171 (primary_expression -> array_literal .)
    GREATER_EQUAL   reduce using rule 171 (primary_expression -> array_literal .)
    LESS_EQUAL      reduce using rule 171 (primary_expression -> array_literal .)
    EQUAL           reduce using rule 171 (primary_expression -> array_literal .)
    NOT_EQUAL       reduce using rule 171 (primary_expression -> array_literal .)
    TIPO_EQUAL      reduce using rule 171 (primary_expression -> array_literal .)
    AND             reduce using rule 171 (primary_expression -> array_literal .)
    DOTDOT          reduce using rule 171 (primary_expression -> array_literal .)
    DOTDOTDOT       reduce using rule 171 (primary_expression -> array_literal .)
    OR              reduce using rule 171 (primary_expression -> array_literal .)
    QMARK           reduce using rule 171 (primary_expression -> array_literal .)
    CONSTANT        reduce using rule 171 (primary_expression -> array_literal .)
    MODULE          reduce using rule 171 (primary_expression -> array_literal .)
    DEF             reduce using rule 171 (primary_expression -> array_literal .)
    $end            reduce using rule 171 (primary_expression -> array_literal .)
    COMMA           reduce using rule 171 (primary_expression -> array_literal .)
    RBRACKET        reduce using rule 171 (primary_expression -> array_literal .)
    RPAREN          reduce using rule 171 (primary_expression -> array_literal .)
    DOT             reduce using rule 171 (primary_expression -> array_literal .)
    NEWLINE         reduce using rule 171 (primary_expression -> array_literal .)
    SEMICOLON       reduce using rule 171 (primary_expression -> array_literal .)
    TCOLON          reduce using rule 171 (primary_expression -> array_literal .)
    INTERP_END      reduce using rule 171 (primary_expression -> array_literal .)
    WHEN            reduce using rule 171 (primary_expression -> array_literal .)
    LBRACE          reduce using rule 171 (primary_expression -> array_literal .)
    ELSIF           reduce using rule 171 (primary_expression -> array_literal .)
    ELSE            reduce using rule 171 (primary_expression -> array_literal .)
    END             reduce using rule 171 (primary_expression -> array_literal .)
    ID              reduce using rule 171 (primary_expression -> array_literal .)
    CASE            reduce using rule 171 (primary_expression -> array_literal .)
    RETURN          reduce using rule 171 (primary_expression -> array_literal .)
    BREAK           reduce using rule 171 (primary_expression -> array_literal .)
    NEXT            reduce using rule 171 (primary_expression -> array_literal .)
    UNDERSCORE      reduce using rule 171 (primary_expression -> array_literal .)
    ASTERISK        reduce using rule 171 (primary_expression -> array_literal .)
    IF              reduce using rule 171 (primary_expression -> array_literal .)
    UNLESS          reduce using rule 171 (primary_expression -> array_literal .)
    WHILE           reduce using rule 171 (primary_expression -> array_literal .)
    UNTIL           reduce using rule 171 (primary_expression -> array_literal .)
    LOOP            reduce using rule 171 (primary_expression -> array_literal .)
    EXCLAMATION     reduce using rule 171 (primary_expression -> array_literal .)
    TILDE           reduce using rule 171 (primary_expression -> array_literal .)
    LPAREN          reduce using rule 171 (primary_expression -> array_literal .)
    LBRACKET        reduce using rule 171 (primary_expression -> array_literal .)
    INTNUMBER       reduce using rule 171 (primary_expression -> array_literal .)
    FLOATNUMBER     reduce using rule 171 (primary_expression -> array_literal .)
    CHAR            reduce using rule 171 (primary_expression -> array_literal .)
    TRUE            reduce using rule 171 (primary_expression -> array_literal .)
    FALSE           reduce using rule 171 (primary_expression -> array_literal .)
    STRING          reduce using rule 171 (primary_expression -> array_literal .)


state 56

    (172) primary_expression -> literal .

    POTENCIACAO     reduce using rule 172 (primary_expression -> literal .)
    MULTI           reduce using rule 172 (primary_expression -> literal .)
    DIVIDE          reduce using rule 172 (primary_expression -> literal .)
    MODULO          reduce using rule 172 (primary_expression -> literal .)
    PLUS            reduce using rule 172 (primary_expression -> literal .)
    MINUS           reduce using rule 172 (primary_expression -> literal .)
    GREATER_THAN    reduce using rule 172 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 172 (primary_expression -> literal .)
    GREATER_EQUAL   reduce using rule 172 (primary_expression -> literal .)
    LESS_EQUAL      reduce using rule 172 (primary_expression -> literal .)
    EQUAL           reduce using rule 172 (primary_expression -> literal .)
    NOT_EQUAL       reduce using rule 172 (primary_expression -> literal .)
    TIPO_EQUAL      reduce using rule 172 (primary_expression -> literal .)
    AND             reduce using rule 172 (primary_expression -> literal .)
    DOTDOT          reduce using rule 172 (primary_expression -> literal .)
    DOTDOTDOT       reduce using rule 172 (primary_expression -> literal .)
    OR              reduce using rule 172 (primary_expression -> literal .)
    QMARK           reduce using rule 172 (primary_expression -> literal .)
    CONSTANT        reduce using rule 172 (primary_expression -> literal .)
    MODULE          reduce using rule 172 (primary_expression -> literal .)
    DEF             reduce using rule 172 (primary_expression -> literal .)
    $end            reduce using rule 172 (primary_expression -> literal .)
    COMMA           reduce using rule 172 (primary_expression -> literal .)
    RBRACKET        reduce using rule 172 (primary_expression -> literal .)
    RPAREN          reduce using rule 172 (primary_expression -> literal .)
    DOT             reduce using rule 172 (primary_expression -> literal .)
    NEWLINE         reduce using rule 172 (primary_expression -> literal .)
    SEMICOLON       reduce using rule 172 (primary_expression -> literal .)
    TCOLON          reduce using rule 172 (primary_expression -> literal .)
    INTERP_END      reduce using rule 172 (primary_expression -> literal .)
    WHEN            reduce using rule 172 (primary_expression -> literal .)
    LBRACE          reduce using rule 172 (primary_expression -> literal .)
    ELSIF           reduce using rule 172 (primary_expression -> literal .)
    ELSE            reduce using rule 172 (primary_expression -> literal .)
    END             reduce using rule 172 (primary_expression -> literal .)
    ID              reduce using rule 172 (primary_expression -> literal .)
    CASE            reduce using rule 172 (primary_expression -> literal .)
    RETURN          reduce using rule 172 (primary_expression -> literal .)
    BREAK           reduce using rule 172 (primary_expression -> literal .)
    NEXT            reduce using rule 172 (primary_expression -> literal .)
    UNDERSCORE      reduce using rule 172 (primary_expression -> literal .)
    ASTERISK        reduce using rule 172 (primary_expression -> literal .)
    IF              reduce using rule 172 (primary_expression -> literal .)
    UNLESS          reduce using rule 172 (primary_expression -> literal .)
    WHILE           reduce using rule 172 (primary_expression -> literal .)
    UNTIL           reduce using rule 172 (primary_expression -> literal .)
    LOOP            reduce using rule 172 (primary_expression -> literal .)
    EXCLAMATION     reduce using rule 172 (primary_expression -> literal .)
    TILDE           reduce using rule 172 (primary_expression -> literal .)
    LPAREN          reduce using rule 172 (primary_expression -> literal .)
    LBRACKET        reduce using rule 172 (primary_expression -> literal .)
    INTNUMBER       reduce using rule 172 (primary_expression -> literal .)
    FLOATNUMBER     reduce using rule 172 (primary_expression -> literal .)
    CHAR            reduce using rule 172 (primary_expression -> literal .)
    TRUE            reduce using rule 172 (primary_expression -> literal .)
    FALSE           reduce using rule 172 (primary_expression -> literal .)
    STRING          reduce using rule 172 (primary_expression -> literal .)


state 57

    (60) literal -> INTNUMBER .

    POTENCIACAO     reduce using rule 60 (literal -> INTNUMBER .)
    MULTI           reduce using rule 60 (literal -> INTNUMBER .)
    DIVIDE          reduce using rule 60 (literal -> INTNUMBER .)
    MODULO          reduce using rule 60 (literal -> INTNUMBER .)
    PLUS            reduce using rule 60 (literal -> INTNUMBER .)
    MINUS           reduce using rule 60 (literal -> INTNUMBER .)
    GREATER_THAN    reduce using rule 60 (literal -> INTNUMBER .)
    LESS_THAN       reduce using rule 60 (literal -> INTNUMBER .)
    GREATER_EQUAL   reduce using rule 60 (literal -> INTNUMBER .)
    LESS_EQUAL      reduce using rule 60 (literal -> INTNUMBER .)
    EQUAL           reduce using rule 60 (literal -> INTNUMBER .)
    NOT_EQUAL       reduce using rule 60 (literal -> INTNUMBER .)
    TIPO_EQUAL      reduce using rule 60 (literal -> INTNUMBER .)
    AND             reduce using rule 60 (literal -> INTNUMBER .)
    DOTDOT          reduce using rule 60 (literal -> INTNUMBER .)
    DOTDOTDOT       reduce using rule 60 (literal -> INTNUMBER .)
    OR              reduce using rule 60 (literal -> INTNUMBER .)
    QMARK           reduce using rule 60 (literal -> INTNUMBER .)
    CONSTANT        reduce using rule 60 (literal -> INTNUMBER .)
    MODULE          reduce using rule 60 (literal -> INTNUMBER .)
    DEF             reduce using rule 60 (literal -> INTNUMBER .)
    $end            reduce using rule 60 (literal -> INTNUMBER .)
    COMMA           reduce using rule 60 (literal -> INTNUMBER .)
    RBRACKET        reduce using rule 60 (literal -> INTNUMBER .)
    RPAREN          reduce using rule 60 (literal -> INTNUMBER .)
    DOT             reduce using rule 60 (literal -> INTNUMBER .)
    NEWLINE         reduce using rule 60 (literal -> INTNUMBER .)
    SEMICOLON       reduce using rule 60 (literal -> INTNUMBER .)
    TCOLON          reduce using rule 60 (literal -> INTNUMBER .)
    INTERP_END      reduce using rule 60 (literal -> INTNUMBER .)
    WHEN            reduce using rule 60 (literal -> INTNUMBER .)
    LBRACE          reduce using rule 60 (literal -> INTNUMBER .)
    ELSIF           reduce using rule 60 (literal -> INTNUMBER .)
    ELSE            reduce using rule 60 (literal -> INTNUMBER .)
    END             reduce using rule 60 (literal -> INTNUMBER .)
    ID              reduce using rule 60 (literal -> INTNUMBER .)
    CASE            reduce using rule 60 (literal -> INTNUMBER .)
    RETURN          reduce using rule 60 (literal -> INTNUMBER .)
    BREAK           reduce using rule 60 (literal -> INTNUMBER .)
    NEXT            reduce using rule 60 (literal -> INTNUMBER .)
    UNDERSCORE      reduce using rule 60 (literal -> INTNUMBER .)
    ASTERISK        reduce using rule 60 (literal -> INTNUMBER .)
    IF              reduce using rule 60 (literal -> INTNUMBER .)
    UNLESS          reduce using rule 60 (literal -> INTNUMBER .)
    WHILE           reduce using rule 60 (literal -> INTNUMBER .)
    UNTIL           reduce using rule 60 (literal -> INTNUMBER .)
    LOOP            reduce using rule 60 (literal -> INTNUMBER .)
    EXCLAMATION     reduce using rule 60 (literal -> INTNUMBER .)
    TILDE           reduce using rule 60 (literal -> INTNUMBER .)
    LPAREN          reduce using rule 60 (literal -> INTNUMBER .)
    LBRACKET        reduce using rule 60 (literal -> INTNUMBER .)
    INTNUMBER       reduce using rule 60 (literal -> INTNUMBER .)
    FLOATNUMBER     reduce using rule 60 (literal -> INTNUMBER .)
    CHAR            reduce using rule 60 (literal -> INTNUMBER .)
    TRUE            reduce using rule 60 (literal -> INTNUMBER .)
    FALSE           reduce using rule 60 (literal -> INTNUMBER .)
    STRING          reduce using rule 60 (literal -> INTNUMBER .)


state 58

    (61) literal -> FLOATNUMBER .

    POTENCIACAO     reduce using rule 61 (literal -> FLOATNUMBER .)
    MULTI           reduce using rule 61 (literal -> FLOATNUMBER .)
    DIVIDE          reduce using rule 61 (literal -> FLOATNUMBER .)
    MODULO          reduce using rule 61 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 61 (literal -> FLOATNUMBER .)
    MINUS           reduce using rule 61 (literal -> FLOATNUMBER .)
    GREATER_THAN    reduce using rule 61 (literal -> FLOATNUMBER .)
    LESS_THAN       reduce using rule 61 (literal -> FLOATNUMBER .)
    GREATER_EQUAL   reduce using rule 61 (literal -> FLOATNUMBER .)
    LESS_EQUAL      reduce using rule 61 (literal -> FLOATNUMBER .)
    EQUAL           reduce using rule 61 (literal -> FLOATNUMBER .)
    NOT_EQUAL       reduce using rule 61 (literal -> FLOATNUMBER .)
    TIPO_EQUAL      reduce using rule 61 (literal -> FLOATNUMBER .)
    AND             reduce using rule 61 (literal -> FLOATNUMBER .)
    DOTDOT          reduce using rule 61 (literal -> FLOATNUMBER .)
    DOTDOTDOT       reduce using rule 61 (literal -> FLOATNUMBER .)
    OR              reduce using rule 61 (literal -> FLOATNUMBER .)
    QMARK           reduce using rule 61 (literal -> FLOATNUMBER .)
    CONSTANT        reduce using rule 61 (literal -> FLOATNUMBER .)
    MODULE          reduce using rule 61 (literal -> FLOATNUMBER .)
    DEF             reduce using rule 61 (literal -> FLOATNUMBER .)
    $end            reduce using rule 61 (literal -> FLOATNUMBER .)
    COMMA           reduce using rule 61 (literal -> FLOATNUMBER .)
    RBRACKET        reduce using rule 61 (literal -> FLOATNUMBER .)
    RPAREN          reduce using rule 61 (literal -> FLOATNUMBER .)
    DOT             reduce using rule 61 (literal -> FLOATNUMBER .)
    NEWLINE         reduce using rule 61 (literal -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 61 (literal -> FLOATNUMBER .)
    TCOLON          reduce using rule 61 (literal -> FLOATNUMBER .)
    INTERP_END      reduce using rule 61 (literal -> FLOATNUMBER .)
    WHEN            reduce using rule 61 (literal -> FLOATNUMBER .)
    LBRACE          reduce using rule 61 (literal -> FLOATNUMBER .)
    ELSIF           reduce using rule 61 (literal -> FLOATNUMBER .)
    ELSE            reduce using rule 61 (literal -> FLOATNUMBER .)
    END             reduce using rule 61 (literal -> FLOATNUMBER .)
    ID              reduce using rule 61 (literal -> FLOATNUMBER .)
    CASE            reduce using rule 61 (literal -> FLOATNUMBER .)
    RETURN          reduce using rule 61 (literal -> FLOATNUMBER .)
    BREAK           reduce using rule 61 (literal -> FLOATNUMBER .)
    NEXT            reduce using rule 61 (literal -> FLOATNUMBER .)
    UNDERSCORE      reduce using rule 61 (literal -> FLOATNUMBER .)
    ASTERISK        reduce using rule 61 (literal -> FLOATNUMBER .)
    IF              reduce using rule 61 (literal -> FLOATNUMBER .)
    UNLESS          reduce using rule 61 (literal -> FLOATNUMBER .)
    WHILE           reduce using rule 61 (literal -> FLOATNUMBER .)
    UNTIL           reduce using rule 61 (literal -> FLOATNUMBER .)
    LOOP            reduce using rule 61 (literal -> FLOATNUMBER .)
    EXCLAMATION     reduce using rule 61 (literal -> FLOATNUMBER .)
    TILDE           reduce using rule 61 (literal -> FLOATNUMBER .)
    LPAREN          reduce using rule 61 (literal -> FLOATNUMBER .)
    LBRACKET        reduce using rule 61 (literal -> FLOATNUMBER .)
    INTNUMBER       reduce using rule 61 (literal -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 61 (literal -> FLOATNUMBER .)
    CHAR            reduce using rule 61 (literal -> FLOATNUMBER .)
    TRUE            reduce using rule 61 (literal -> FLOATNUMBER .)
    FALSE           reduce using rule 61 (literal -> FLOATNUMBER .)
    STRING          reduce using rule 61 (literal -> FLOATNUMBER .)


state 59

    (62) literal -> string_literal .

    POTENCIACAO     reduce using rule 62 (literal -> string_literal .)
    MULTI           reduce using rule 62 (literal -> string_literal .)
    DIVIDE          reduce using rule 62 (literal -> string_literal .)
    MODULO          reduce using rule 62 (literal -> string_literal .)
    PLUS            reduce using rule 62 (literal -> string_literal .)
    MINUS           reduce using rule 62 (literal -> string_literal .)
    GREATER_THAN    reduce using rule 62 (literal -> string_literal .)
    LESS_THAN       reduce using rule 62 (literal -> string_literal .)
    GREATER_EQUAL   reduce using rule 62 (literal -> string_literal .)
    LESS_EQUAL      reduce using rule 62 (literal -> string_literal .)
    EQUAL           reduce using rule 62 (literal -> string_literal .)
    NOT_EQUAL       reduce using rule 62 (literal -> string_literal .)
    TIPO_EQUAL      reduce using rule 62 (literal -> string_literal .)
    AND             reduce using rule 62 (literal -> string_literal .)
    DOTDOT          reduce using rule 62 (literal -> string_literal .)
    DOTDOTDOT       reduce using rule 62 (literal -> string_literal .)
    OR              reduce using rule 62 (literal -> string_literal .)
    QMARK           reduce using rule 62 (literal -> string_literal .)
    CONSTANT        reduce using rule 62 (literal -> string_literal .)
    MODULE          reduce using rule 62 (literal -> string_literal .)
    DEF             reduce using rule 62 (literal -> string_literal .)
    $end            reduce using rule 62 (literal -> string_literal .)
    COMMA           reduce using rule 62 (literal -> string_literal .)
    RBRACKET        reduce using rule 62 (literal -> string_literal .)
    RPAREN          reduce using rule 62 (literal -> string_literal .)
    DOT             reduce using rule 62 (literal -> string_literal .)
    NEWLINE         reduce using rule 62 (literal -> string_literal .)
    SEMICOLON       reduce using rule 62 (literal -> string_literal .)
    TCOLON          reduce using rule 62 (literal -> string_literal .)
    INTERP_END      reduce using rule 62 (literal -> string_literal .)
    WHEN            reduce using rule 62 (literal -> string_literal .)
    LBRACE          reduce using rule 62 (literal -> string_literal .)
    ELSIF           reduce using rule 62 (literal -> string_literal .)
    ELSE            reduce using rule 62 (literal -> string_literal .)
    END             reduce using rule 62 (literal -> string_literal .)
    ID              reduce using rule 62 (literal -> string_literal .)
    CASE            reduce using rule 62 (literal -> string_literal .)
    RETURN          reduce using rule 62 (literal -> string_literal .)
    BREAK           reduce using rule 62 (literal -> string_literal .)
    NEXT            reduce using rule 62 (literal -> string_literal .)
    UNDERSCORE      reduce using rule 62 (literal -> string_literal .)
    ASTERISK        reduce using rule 62 (literal -> string_literal .)
    IF              reduce using rule 62 (literal -> string_literal .)
    UNLESS          reduce using rule 62 (literal -> string_literal .)
    WHILE           reduce using rule 62 (literal -> string_literal .)
    UNTIL           reduce using rule 62 (literal -> string_literal .)
    LOOP            reduce using rule 62 (literal -> string_literal .)
    EXCLAMATION     reduce using rule 62 (literal -> string_literal .)
    TILDE           reduce using rule 62 (literal -> string_literal .)
    LPAREN          reduce using rule 62 (literal -> string_literal .)
    LBRACKET        reduce using rule 62 (literal -> string_literal .)
    INTNUMBER       reduce using rule 62 (literal -> string_literal .)
    FLOATNUMBER     reduce using rule 62 (literal -> string_literal .)
    CHAR            reduce using rule 62 (literal -> string_literal .)
    TRUE            reduce using rule 62 (literal -> string_literal .)
    FALSE           reduce using rule 62 (literal -> string_literal .)
    STRING          reduce using rule 62 (literal -> string_literal .)


state 60

    (63) literal -> CHAR .

    POTENCIACAO     reduce using rule 63 (literal -> CHAR .)
    MULTI           reduce using rule 63 (literal -> CHAR .)
    DIVIDE          reduce using rule 63 (literal -> CHAR .)
    MODULO          reduce using rule 63 (literal -> CHAR .)
    PLUS            reduce using rule 63 (literal -> CHAR .)
    MINUS           reduce using rule 63 (literal -> CHAR .)
    GREATER_THAN    reduce using rule 63 (literal -> CHAR .)
    LESS_THAN       reduce using rule 63 (literal -> CHAR .)
    GREATER_EQUAL   reduce using rule 63 (literal -> CHAR .)
    LESS_EQUAL      reduce using rule 63 (literal -> CHAR .)
    EQUAL           reduce using rule 63 (literal -> CHAR .)
    NOT_EQUAL       reduce using rule 63 (literal -> CHAR .)
    TIPO_EQUAL      reduce using rule 63 (literal -> CHAR .)
    AND             reduce using rule 63 (literal -> CHAR .)
    DOTDOT          reduce using rule 63 (literal -> CHAR .)
    DOTDOTDOT       reduce using rule 63 (literal -> CHAR .)
    OR              reduce using rule 63 (literal -> CHAR .)
    QMARK           reduce using rule 63 (literal -> CHAR .)
    CONSTANT        reduce using rule 63 (literal -> CHAR .)
    MODULE          reduce using rule 63 (literal -> CHAR .)
    DEF             reduce using rule 63 (literal -> CHAR .)
    $end            reduce using rule 63 (literal -> CHAR .)
    COMMA           reduce using rule 63 (literal -> CHAR .)
    RBRACKET        reduce using rule 63 (literal -> CHAR .)
    RPAREN          reduce using rule 63 (literal -> CHAR .)
    DOT             reduce using rule 63 (literal -> CHAR .)
    NEWLINE         reduce using rule 63 (literal -> CHAR .)
    SEMICOLON       reduce using rule 63 (literal -> CHAR .)
    TCOLON          reduce using rule 63 (literal -> CHAR .)
    INTERP_END      reduce using rule 63 (literal -> CHAR .)
    WHEN            reduce using rule 63 (literal -> CHAR .)
    LBRACE          reduce using rule 63 (literal -> CHAR .)
    ELSIF           reduce using rule 63 (literal -> CHAR .)
    ELSE            reduce using rule 63 (literal -> CHAR .)
    END             reduce using rule 63 (literal -> CHAR .)
    ID              reduce using rule 63 (literal -> CHAR .)
    CASE            reduce using rule 63 (literal -> CHAR .)
    RETURN          reduce using rule 63 (literal -> CHAR .)
    BREAK           reduce using rule 63 (literal -> CHAR .)
    NEXT            reduce using rule 63 (literal -> CHAR .)
    UNDERSCORE      reduce using rule 63 (literal -> CHAR .)
    ASTERISK        reduce using rule 63 (literal -> CHAR .)
    IF              reduce using rule 63 (literal -> CHAR .)
    UNLESS          reduce using rule 63 (literal -> CHAR .)
    WHILE           reduce using rule 63 (literal -> CHAR .)
    UNTIL           reduce using rule 63 (literal -> CHAR .)
    LOOP            reduce using rule 63 (literal -> CHAR .)
    EXCLAMATION     reduce using rule 63 (literal -> CHAR .)
    TILDE           reduce using rule 63 (literal -> CHAR .)
    LPAREN          reduce using rule 63 (literal -> CHAR .)
    LBRACKET        reduce using rule 63 (literal -> CHAR .)
    INTNUMBER       reduce using rule 63 (literal -> CHAR .)
    FLOATNUMBER     reduce using rule 63 (literal -> CHAR .)
    CHAR            reduce using rule 63 (literal -> CHAR .)
    TRUE            reduce using rule 63 (literal -> CHAR .)
    FALSE           reduce using rule 63 (literal -> CHAR .)
    STRING          reduce using rule 63 (literal -> CHAR .)


state 61

    (64) literal -> TRUE .

    POTENCIACAO     reduce using rule 64 (literal -> TRUE .)
    MULTI           reduce using rule 64 (literal -> TRUE .)
    DIVIDE          reduce using rule 64 (literal -> TRUE .)
    MODULO          reduce using rule 64 (literal -> TRUE .)
    PLUS            reduce using rule 64 (literal -> TRUE .)
    MINUS           reduce using rule 64 (literal -> TRUE .)
    GREATER_THAN    reduce using rule 64 (literal -> TRUE .)
    LESS_THAN       reduce using rule 64 (literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 64 (literal -> TRUE .)
    LESS_EQUAL      reduce using rule 64 (literal -> TRUE .)
    EQUAL           reduce using rule 64 (literal -> TRUE .)
    NOT_EQUAL       reduce using rule 64 (literal -> TRUE .)
    TIPO_EQUAL      reduce using rule 64 (literal -> TRUE .)
    AND             reduce using rule 64 (literal -> TRUE .)
    DOTDOT          reduce using rule 64 (literal -> TRUE .)
    DOTDOTDOT       reduce using rule 64 (literal -> TRUE .)
    OR              reduce using rule 64 (literal -> TRUE .)
    QMARK           reduce using rule 64 (literal -> TRUE .)
    CONSTANT        reduce using rule 64 (literal -> TRUE .)
    MODULE          reduce using rule 64 (literal -> TRUE .)
    DEF             reduce using rule 64 (literal -> TRUE .)
    $end            reduce using rule 64 (literal -> TRUE .)
    COMMA           reduce using rule 64 (literal -> TRUE .)
    RBRACKET        reduce using rule 64 (literal -> TRUE .)
    RPAREN          reduce using rule 64 (literal -> TRUE .)
    DOT             reduce using rule 64 (literal -> TRUE .)
    NEWLINE         reduce using rule 64 (literal -> TRUE .)
    SEMICOLON       reduce using rule 64 (literal -> TRUE .)
    TCOLON          reduce using rule 64 (literal -> TRUE .)
    INTERP_END      reduce using rule 64 (literal -> TRUE .)
    WHEN            reduce using rule 64 (literal -> TRUE .)
    LBRACE          reduce using rule 64 (literal -> TRUE .)
    ELSIF           reduce using rule 64 (literal -> TRUE .)
    ELSE            reduce using rule 64 (literal -> TRUE .)
    END             reduce using rule 64 (literal -> TRUE .)
    ID              reduce using rule 64 (literal -> TRUE .)
    CASE            reduce using rule 64 (literal -> TRUE .)
    RETURN          reduce using rule 64 (literal -> TRUE .)
    BREAK           reduce using rule 64 (literal -> TRUE .)
    NEXT            reduce using rule 64 (literal -> TRUE .)
    UNDERSCORE      reduce using rule 64 (literal -> TRUE .)
    ASTERISK        reduce using rule 64 (literal -> TRUE .)
    IF              reduce using rule 64 (literal -> TRUE .)
    UNLESS          reduce using rule 64 (literal -> TRUE .)
    WHILE           reduce using rule 64 (literal -> TRUE .)
    UNTIL           reduce using rule 64 (literal -> TRUE .)
    LOOP            reduce using rule 64 (literal -> TRUE .)
    EXCLAMATION     reduce using rule 64 (literal -> TRUE .)
    TILDE           reduce using rule 64 (literal -> TRUE .)
    LPAREN          reduce using rule 64 (literal -> TRUE .)
    LBRACKET        reduce using rule 64 (literal -> TRUE .)
    INTNUMBER       reduce using rule 64 (literal -> TRUE .)
    FLOATNUMBER     reduce using rule 64 (literal -> TRUE .)
    CHAR            reduce using rule 64 (literal -> TRUE .)
    TRUE            reduce using rule 64 (literal -> TRUE .)
    FALSE           reduce using rule 64 (literal -> TRUE .)
    STRING          reduce using rule 64 (literal -> TRUE .)


state 62

    (65) literal -> FALSE .

    POTENCIACAO     reduce using rule 65 (literal -> FALSE .)
    MULTI           reduce using rule 65 (literal -> FALSE .)
    DIVIDE          reduce using rule 65 (literal -> FALSE .)
    MODULO          reduce using rule 65 (literal -> FALSE .)
    PLUS            reduce using rule 65 (literal -> FALSE .)
    MINUS           reduce using rule 65 (literal -> FALSE .)
    GREATER_THAN    reduce using rule 65 (literal -> FALSE .)
    LESS_THAN       reduce using rule 65 (literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 65 (literal -> FALSE .)
    LESS_EQUAL      reduce using rule 65 (literal -> FALSE .)
    EQUAL           reduce using rule 65 (literal -> FALSE .)
    NOT_EQUAL       reduce using rule 65 (literal -> FALSE .)
    TIPO_EQUAL      reduce using rule 65 (literal -> FALSE .)
    AND             reduce using rule 65 (literal -> FALSE .)
    DOTDOT          reduce using rule 65 (literal -> FALSE .)
    DOTDOTDOT       reduce using rule 65 (literal -> FALSE .)
    OR              reduce using rule 65 (literal -> FALSE .)
    QMARK           reduce using rule 65 (literal -> FALSE .)
    CONSTANT        reduce using rule 65 (literal -> FALSE .)
    MODULE          reduce using rule 65 (literal -> FALSE .)
    DEF             reduce using rule 65 (literal -> FALSE .)
    $end            reduce using rule 65 (literal -> FALSE .)
    COMMA           reduce using rule 65 (literal -> FALSE .)
    RBRACKET        reduce using rule 65 (literal -> FALSE .)
    RPAREN          reduce using rule 65 (literal -> FALSE .)
    DOT             reduce using rule 65 (literal -> FALSE .)
    NEWLINE         reduce using rule 65 (literal -> FALSE .)
    SEMICOLON       reduce using rule 65 (literal -> FALSE .)
    TCOLON          reduce using rule 65 (literal -> FALSE .)
    INTERP_END      reduce using rule 65 (literal -> FALSE .)
    WHEN            reduce using rule 65 (literal -> FALSE .)
    LBRACE          reduce using rule 65 (literal -> FALSE .)
    ELSIF           reduce using rule 65 (literal -> FALSE .)
    ELSE            reduce using rule 65 (literal -> FALSE .)
    END             reduce using rule 65 (literal -> FALSE .)
    ID              reduce using rule 65 (literal -> FALSE .)
    CASE            reduce using rule 65 (literal -> FALSE .)
    RETURN          reduce using rule 65 (literal -> FALSE .)
    BREAK           reduce using rule 65 (literal -> FALSE .)
    NEXT            reduce using rule 65 (literal -> FALSE .)
    UNDERSCORE      reduce using rule 65 (literal -> FALSE .)
    ASTERISK        reduce using rule 65 (literal -> FALSE .)
    IF              reduce using rule 65 (literal -> FALSE .)
    UNLESS          reduce using rule 65 (literal -> FALSE .)
    WHILE           reduce using rule 65 (literal -> FALSE .)
    UNTIL           reduce using rule 65 (literal -> FALSE .)
    LOOP            reduce using rule 65 (literal -> FALSE .)
    EXCLAMATION     reduce using rule 65 (literal -> FALSE .)
    TILDE           reduce using rule 65 (literal -> FALSE .)
    LPAREN          reduce using rule 65 (literal -> FALSE .)
    LBRACKET        reduce using rule 65 (literal -> FALSE .)
    INTNUMBER       reduce using rule 65 (literal -> FALSE .)
    FLOATNUMBER     reduce using rule 65 (literal -> FALSE .)
    CHAR            reduce using rule 65 (literal -> FALSE .)
    TRUE            reduce using rule 65 (literal -> FALSE .)
    FALSE           reduce using rule 65 (literal -> FALSE .)
    STRING          reduce using rule 65 (literal -> FALSE .)


state 63

    (66) string_literal -> STRING .
    (67) string_literal -> STRING . INTERP_START expression INTERP_END string_literal

    POTENCIACAO     reduce using rule 66 (string_literal -> STRING .)
    MULTI           reduce using rule 66 (string_literal -> STRING .)
    DIVIDE          reduce using rule 66 (string_literal -> STRING .)
    MODULO          reduce using rule 66 (string_literal -> STRING .)
    PLUS            reduce using rule 66 (string_literal -> STRING .)
    MINUS           reduce using rule 66 (string_literal -> STRING .)
    GREATER_THAN    reduce using rule 66 (string_literal -> STRING .)
    LESS_THAN       reduce using rule 66 (string_literal -> STRING .)
    GREATER_EQUAL   reduce using rule 66 (string_literal -> STRING .)
    LESS_EQUAL      reduce using rule 66 (string_literal -> STRING .)
    EQUAL           reduce using rule 66 (string_literal -> STRING .)
    NOT_EQUAL       reduce using rule 66 (string_literal -> STRING .)
    TIPO_EQUAL      reduce using rule 66 (string_literal -> STRING .)
    AND             reduce using rule 66 (string_literal -> STRING .)
    DOTDOT          reduce using rule 66 (string_literal -> STRING .)
    DOTDOTDOT       reduce using rule 66 (string_literal -> STRING .)
    OR              reduce using rule 66 (string_literal -> STRING .)
    QMARK           reduce using rule 66 (string_literal -> STRING .)
    CONSTANT        reduce using rule 66 (string_literal -> STRING .)
    MODULE          reduce using rule 66 (string_literal -> STRING .)
    DEF             reduce using rule 66 (string_literal -> STRING .)
    $end            reduce using rule 66 (string_literal -> STRING .)
    COMMA           reduce using rule 66 (string_literal -> STRING .)
    RBRACKET        reduce using rule 66 (string_literal -> STRING .)
    RPAREN          reduce using rule 66 (string_literal -> STRING .)
    DOT             reduce using rule 66 (string_literal -> STRING .)
    NEWLINE         reduce using rule 66 (string_literal -> STRING .)
    SEMICOLON       reduce using rule 66 (string_literal -> STRING .)
    TCOLON          reduce using rule 66 (string_literal -> STRING .)
    INTERP_END      reduce using rule 66 (string_literal -> STRING .)
    WHEN            reduce using rule 66 (string_literal -> STRING .)
    LBRACE          reduce using rule 66 (string_literal -> STRING .)
    ELSIF           reduce using rule 66 (string_literal -> STRING .)
    ELSE            reduce using rule 66 (string_literal -> STRING .)
    END             reduce using rule 66 (string_literal -> STRING .)
    ID              reduce using rule 66 (string_literal -> STRING .)
    CASE            reduce using rule 66 (string_literal -> STRING .)
    RETURN          reduce using rule 66 (string_literal -> STRING .)
    BREAK           reduce using rule 66 (string_literal -> STRING .)
    NEXT            reduce using rule 66 (string_literal -> STRING .)
    UNDERSCORE      reduce using rule 66 (string_literal -> STRING .)
    ASTERISK        reduce using rule 66 (string_literal -> STRING .)
    IF              reduce using rule 66 (string_literal -> STRING .)
    UNLESS          reduce using rule 66 (string_literal -> STRING .)
    WHILE           reduce using rule 66 (string_literal -> STRING .)
    UNTIL           reduce using rule 66 (string_literal -> STRING .)
    LOOP            reduce using rule 66 (string_literal -> STRING .)
    EXCLAMATION     reduce using rule 66 (string_literal -> STRING .)
    TILDE           reduce using rule 66 (string_literal -> STRING .)
    LPAREN          reduce using rule 66 (string_literal -> STRING .)
    LBRACKET        reduce using rule 66 (string_literal -> STRING .)
    INTNUMBER       reduce using rule 66 (string_literal -> STRING .)
    FLOATNUMBER     reduce using rule 66 (string_literal -> STRING .)
    CHAR            reduce using rule 66 (string_literal -> STRING .)
    TRUE            reduce using rule 66 (string_literal -> STRING .)
    FALSE           reduce using rule 66 (string_literal -> STRING .)
    STRING          reduce using rule 66 (string_literal -> STRING .)
    INTERP_START    shift and go to state 108


state 64

    (24) module -> MODULE ID statements . END

    END             shift and go to state 109


state 65

    (81) statements -> statements_list .
    (82) statements_list -> statements_list . statements_base
    (84) statements_base -> . statement NEWLINE
    (85) statements_base -> . statement SEMICOLON
    (86) statement -> . expression
    (87) statement -> . control_structure
    (88) statement -> . variable_declaration
    (89) statement -> . function_call
    (127) expression -> . assignment_expression
    (90) control_structure -> . conditional
    (91) control_structure -> . loop_structure
    (92) control_structure -> . case_structure
    (93) control_structure -> . return_statement
    (94) control_structure -> . break_statement
    (95) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (96) conditional -> . if_statement
    (97) conditional -> . unless_statement
    (109) loop_structure -> . while
    (110) loop_structure -> . until
    (111) loop_structure -> . loop
    (112) loop_structure -> . iterator
    (119) case_structure -> . CASE expression when_list opt_else END
    (122) return_statement -> . RETURN opt_expression
    (123) break_statement -> . BREAK opt_expression
    (124) next_statement -> . NEXT opt_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (98) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (99) unless_statement -> . UNLESS if_condition statements opt_else END
    (113) while -> . WHILE expression statements
    (114) until -> . UNTIL expression statements
    (115) loop -> . LOOP statements
    (116) iterator -> . expression DOT MULTI statements
    (117) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (118) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    END             reduce using rule 81 (statements -> statements_list .)
    NEWLINE         reduce using rule 81 (statements -> statements_list .)
    SEMICOLON       reduce using rule 81 (statements -> statements_list .)
    ELSIF           reduce using rule 81 (statements -> statements_list .)
    ELSE            reduce using rule 81 (statements -> statements_list .)
    RBRACE          reduce using rule 81 (statements -> statements_list .)
    WHEN            reduce using rule 81 (statements -> statements_list .)
    ID              shift and go to state 122
    CASE            shift and go to state 129
    RETURN          shift and go to state 130
    BREAK           shift and go to state 131
    NEXT            shift and go to state 132
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 133
    UNLESS          shift and go to state 134
    WHILE           shift and go to state 135
    UNTIL           shift and go to state 136
    LOOP            shift and go to state 137
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements_base                shift and go to state 110
    statement                      shift and go to state 111
    expression                     shift and go to state 112
    control_structure              shift and go to state 113
    variable_declaration           shift and go to state 114
    function_call                  shift and go to state 115
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 123
    unless_statement               shift and go to state 124
    while                          shift and go to state 125
    until                          shift and go to state 126
    loop                           shift and go to state 127
    iterator                       shift and go to state 128
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 66

    (83) statements_list -> empty .

    ID              reduce using rule 83 (statements_list -> empty .)
    CASE            reduce using rule 83 (statements_list -> empty .)
    RETURN          reduce using rule 83 (statements_list -> empty .)
    BREAK           reduce using rule 83 (statements_list -> empty .)
    NEXT            reduce using rule 83 (statements_list -> empty .)
    UNDERSCORE      reduce using rule 83 (statements_list -> empty .)
    ASTERISK        reduce using rule 83 (statements_list -> empty .)
    IF              reduce using rule 83 (statements_list -> empty .)
    UNLESS          reduce using rule 83 (statements_list -> empty .)
    WHILE           reduce using rule 83 (statements_list -> empty .)
    UNTIL           reduce using rule 83 (statements_list -> empty .)
    LOOP            reduce using rule 83 (statements_list -> empty .)
    PLUS            reduce using rule 83 (statements_list -> empty .)
    MINUS           reduce using rule 83 (statements_list -> empty .)
    EXCLAMATION     reduce using rule 83 (statements_list -> empty .)
    TILDE           reduce using rule 83 (statements_list -> empty .)
    LPAREN          reduce using rule 83 (statements_list -> empty .)
    LBRACKET        reduce using rule 83 (statements_list -> empty .)
    INTNUMBER       reduce using rule 83 (statements_list -> empty .)
    FLOATNUMBER     reduce using rule 83 (statements_list -> empty .)
    CHAR            reduce using rule 83 (statements_list -> empty .)
    TRUE            reduce using rule 83 (statements_list -> empty .)
    FALSE           reduce using rule 83 (statements_list -> empty .)
    STRING          reduce using rule 83 (statements_list -> empty .)
    END             reduce using rule 83 (statements_list -> empty .)
    NEWLINE         reduce using rule 83 (statements_list -> empty .)
    SEMICOLON       reduce using rule 83 (statements_list -> empty .)
    ELSIF           reduce using rule 83 (statements_list -> empty .)
    ELSE            reduce using rule 83 (statements_list -> empty .)
    RBRACE          reduce using rule 83 (statements_list -> empty .)
    WHEN            reduce using rule 83 (statements_list -> empty .)


state 67

    (27) function -> DEF ID LPAREN . opt_argument_list RPAREN opt_return_type statements END
    (29) opt_argument_list -> . argument_list
    (30) opt_argument_list -> . empty
    (31) argument_list -> . argument
    (32) argument_list -> . argument COMMA argument_list
    (175) empty -> .
    (33) argument -> . ID
    (34) argument -> . ID COLON types
    (35) argument -> . ID ASSIGN expression
    (36) argument -> . ID COLON types ASSIGN expression

    RPAREN          reduce using rule 175 (empty -> .)
    ID              shift and go to state 138

    opt_argument_list              shift and go to state 139
    argument_list                  shift and go to state 140
    empty                          shift and go to state 141
    argument                       shift and go to state 142

state 68

    (28) function -> DEF ID opt_return_type . NEWLINE statements END

    NEWLINE         shift and go to state 143


state 69

    (37) opt_return_type -> COLON . types
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 145
    CHAR            shift and go to state 146
    NIL             shift and go to state 147
    INT             shift and go to state 151
    INT8            shift and go to state 152
    INT16           shift and go to state 153
    INT32           shift and go to state 154
    INT64           shift and go to state 155
    INT128          shift and go to state 156
    UINT8           shift and go to state 157
    UINT16          shift and go to state 158
    UINT32          shift and go to state 159
    UINT64          shift and go to state 160
    UINT128         shift and go to state 161
    FLOAT           shift and go to state 162
    FLOAT32         shift and go to state 163
    FLOAT64         shift and go to state 164
    BOOL            shift and go to state 165

    types                          shift and go to state 144
    integer                        shift and go to state 148
    float                          shift and go to state 149
    boolean                        shift and go to state 150

state 70

    (38) opt_return_type -> empty .

    NEWLINE         reduce using rule 38 (opt_return_type -> empty .)
    END             reduce using rule 38 (opt_return_type -> empty .)
    ID              reduce using rule 38 (opt_return_type -> empty .)
    CASE            reduce using rule 38 (opt_return_type -> empty .)
    RETURN          reduce using rule 38 (opt_return_type -> empty .)
    BREAK           reduce using rule 38 (opt_return_type -> empty .)
    NEXT            reduce using rule 38 (opt_return_type -> empty .)
    UNDERSCORE      reduce using rule 38 (opt_return_type -> empty .)
    ASTERISK        reduce using rule 38 (opt_return_type -> empty .)
    IF              reduce using rule 38 (opt_return_type -> empty .)
    UNLESS          reduce using rule 38 (opt_return_type -> empty .)
    WHILE           reduce using rule 38 (opt_return_type -> empty .)
    UNTIL           reduce using rule 38 (opt_return_type -> empty .)
    LOOP            reduce using rule 38 (opt_return_type -> empty .)
    PLUS            reduce using rule 38 (opt_return_type -> empty .)
    MINUS           reduce using rule 38 (opt_return_type -> empty .)
    EXCLAMATION     reduce using rule 38 (opt_return_type -> empty .)
    TILDE           reduce using rule 38 (opt_return_type -> empty .)
    LPAREN          reduce using rule 38 (opt_return_type -> empty .)
    LBRACKET        reduce using rule 38 (opt_return_type -> empty .)
    INTNUMBER       reduce using rule 38 (opt_return_type -> empty .)
    FLOATNUMBER     reduce using rule 38 (opt_return_type -> empty .)
    CHAR            reduce using rule 38 (opt_return_type -> empty .)
    TRUE            reduce using rule 38 (opt_return_type -> empty .)
    FALSE           reduce using rule 38 (opt_return_type -> empty .)
    STRING          reduce using rule 38 (opt_return_type -> empty .)


state 71

    (1) program -> require_list constant_list module_list function_list .

    $end            reduce using rule 1 (program -> require_list constant_list module_list function_list .)


state 72

    (128) assignment_expression -> assignment_target ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 166
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 73

    (129) assignment_expression -> assignment_target PLUS_ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 167
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 74

    (130) assignment_expression -> assignment_target MINUS_ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 168
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 75

    (131) assignment_expression -> assignment_target MULTI_ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 169
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 76

    (132) assignment_expression -> assignment_target DIVIDE_ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 170
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 77

    (135) assignment_target -> ID LBRACKET . expression RBRACKET
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 171
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 78

    (174) array_literal -> LBRACKET opt_expression_list . RBRACKET

    RBRACKET        shift and go to state 172


state 79

    (77) opt_expression_list -> expression_list .
    (80) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 77 (opt_expression_list -> expression_list .)
    COMMA           shift and go to state 173


state 80

    (78) opt_expression_list -> empty .

    RBRACKET        reduce using rule 78 (opt_expression_list -> empty .)


state 81

    (79) expression_list -> expression .

    COMMA           reduce using rule 79 (expression_list -> expression .)
    RBRACKET        reduce using rule 79 (expression_list -> expression .)
    RPAREN          reduce using rule 79 (expression_list -> expression .)


state 82

    (137) assignment_target -> ASTERISK assignment_target .

    ASSIGN          reduce using rule 137 (assignment_target -> ASTERISK assignment_target .)
    PLUS_ASSIGN     reduce using rule 137 (assignment_target -> ASTERISK assignment_target .)
    MINUS_ASSIGN    reduce using rule 137 (assignment_target -> ASTERISK assignment_target .)
    MULTI_ASSIGN    reduce using rule 137 (assignment_target -> ASTERISK assignment_target .)
    DIVIDE_ASSIGN   reduce using rule 137 (assignment_target -> ASTERISK assignment_target .)


state 83

    (134) assignment_target -> ID .
    (135) assignment_target -> ID . LBRACKET expression RBRACKET

    ASSIGN          reduce using rule 134 (assignment_target -> ID .)
    PLUS_ASSIGN     reduce using rule 134 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 134 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 134 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 134 (assignment_target -> ID .)
    LBRACKET        shift and go to state 77


state 84

    (138) ternary_expression -> range_expression QMARK . expression TCOLON expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    range_expression               shift and go to state 40
    expression                     shift and go to state 174
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 85

    (140) range_expression -> logical_or_expression DOTDOT . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    logical_or_expression          shift and go to state 175
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 86

    (141) range_expression -> logical_or_expression DOTDOTDOT . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    logical_or_expression          shift and go to state 176
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 87

    (144) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    logical_and_expression         shift and go to state 177
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 88

    (146) logical_and_expression -> logical_and_expression AND . equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    equality_expression            shift and go to state 178
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 89

    (148) equality_expression -> equality_expression EQUAL . relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    relational_expression          shift and go to state 179
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 90

    (149) equality_expression -> equality_expression NOT_EQUAL . relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    relational_expression          shift and go to state 180
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 91

    (150) equality_expression -> equality_expression TIPO_EQUAL . relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    relational_expression          shift and go to state 181
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 92

    (152) relational_expression -> relational_expression GREATER_THAN . additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    additive_expression            shift and go to state 182
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 93

    (153) relational_expression -> relational_expression LESS_THAN . additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    additive_expression            shift and go to state 183
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 94

    (154) relational_expression -> relational_expression GREATER_EQUAL . additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 95

    (155) relational_expression -> relational_expression LESS_EQUAL . additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    additive_expression            shift and go to state 185
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 96

    (157) additive_expression -> additive_expression PLUS . multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    multiplicative_expression      shift and go to state 186
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 97

    (158) additive_expression -> additive_expression MINUS . multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    multiplicative_expression      shift and go to state 187
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 98

    (160) multiplicative_expression -> multiplicative_expression MULTI . potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    potenciacao_expression         shift and go to state 188
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 99

    (161) multiplicative_expression -> multiplicative_expression DIVIDE . potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    potenciacao_expression         shift and go to state 189
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 100

    (162) multiplicative_expression -> multiplicative_expression MODULO . potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    potenciacao_expression         shift and go to state 190
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 101

    (165) unary_expression -> PLUS unary_expression .

    POTENCIACAO     reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    MULTI           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    GREATER_THAN    reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    LESS_THAN       reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    GREATER_EQUAL   reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    LESS_EQUAL      reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    NOT_EQUAL       reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    TIPO_EQUAL      reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    DOTDOT          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    DOTDOTDOT       reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    QMARK           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    CONSTANT        reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    MODULE          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    DEF             reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    $end            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    DOT             reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    NEWLINE         reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    SEMICOLON       reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    TCOLON          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    INTERP_END      reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    WHEN            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    LBRACE          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    ELSIF           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    END             reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    ID              reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    CASE            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    RETURN          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    BREAK           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    NEXT            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    UNDERSCORE      reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    ASTERISK        reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    IF              reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    UNLESS          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    WHILE           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    UNTIL           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    LOOP            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    EXCLAMATION     reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    TILDE           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    LPAREN          reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    LBRACKET        reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    INTNUMBER       reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    FLOATNUMBER     reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    CHAR            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    TRUE            reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    FALSE           reduce using rule 165 (unary_expression -> PLUS unary_expression .)
    STRING          reduce using rule 165 (unary_expression -> PLUS unary_expression .)


state 102

    (173) primary_expression -> ID .

    POTENCIACAO     reduce using rule 173 (primary_expression -> ID .)
    MULTI           reduce using rule 173 (primary_expression -> ID .)
    DIVIDE          reduce using rule 173 (primary_expression -> ID .)
    MODULO          reduce using rule 173 (primary_expression -> ID .)
    PLUS            reduce using rule 173 (primary_expression -> ID .)
    MINUS           reduce using rule 173 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 173 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 173 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 173 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 173 (primary_expression -> ID .)
    EQUAL           reduce using rule 173 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 173 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 173 (primary_expression -> ID .)
    AND             reduce using rule 173 (primary_expression -> ID .)
    DOTDOT          reduce using rule 173 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 173 (primary_expression -> ID .)
    OR              reduce using rule 173 (primary_expression -> ID .)
    QMARK           reduce using rule 173 (primary_expression -> ID .)
    CONSTANT        reduce using rule 173 (primary_expression -> ID .)
    MODULE          reduce using rule 173 (primary_expression -> ID .)
    DEF             reduce using rule 173 (primary_expression -> ID .)
    $end            reduce using rule 173 (primary_expression -> ID .)
    COMMA           reduce using rule 173 (primary_expression -> ID .)
    RBRACKET        reduce using rule 173 (primary_expression -> ID .)
    RPAREN          reduce using rule 173 (primary_expression -> ID .)
    DOT             reduce using rule 173 (primary_expression -> ID .)
    NEWLINE         reduce using rule 173 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 173 (primary_expression -> ID .)
    TCOLON          reduce using rule 173 (primary_expression -> ID .)
    INTERP_END      reduce using rule 173 (primary_expression -> ID .)
    WHEN            reduce using rule 173 (primary_expression -> ID .)
    LBRACE          reduce using rule 173 (primary_expression -> ID .)
    ELSIF           reduce using rule 173 (primary_expression -> ID .)
    ELSE            reduce using rule 173 (primary_expression -> ID .)
    END             reduce using rule 173 (primary_expression -> ID .)
    ID              reduce using rule 173 (primary_expression -> ID .)
    CASE            reduce using rule 173 (primary_expression -> ID .)
    RETURN          reduce using rule 173 (primary_expression -> ID .)
    BREAK           reduce using rule 173 (primary_expression -> ID .)
    NEXT            reduce using rule 173 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 173 (primary_expression -> ID .)
    ASTERISK        reduce using rule 173 (primary_expression -> ID .)
    IF              reduce using rule 173 (primary_expression -> ID .)
    UNLESS          reduce using rule 173 (primary_expression -> ID .)
    WHILE           reduce using rule 173 (primary_expression -> ID .)
    UNTIL           reduce using rule 173 (primary_expression -> ID .)
    LOOP            reduce using rule 173 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 173 (primary_expression -> ID .)
    TILDE           reduce using rule 173 (primary_expression -> ID .)
    LPAREN          reduce using rule 173 (primary_expression -> ID .)
    LBRACKET        reduce using rule 173 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 173 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 173 (primary_expression -> ID .)
    CHAR            reduce using rule 173 (primary_expression -> ID .)
    TRUE            reduce using rule 173 (primary_expression -> ID .)
    FALSE           reduce using rule 173 (primary_expression -> ID .)
    STRING          reduce using rule 173 (primary_expression -> ID .)


state 103

    (166) unary_expression -> MINUS unary_expression .

    POTENCIACAO     reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    MULTI           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    GREATER_THAN    reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    LESS_THAN       reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    GREATER_EQUAL   reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    LESS_EQUAL      reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    NOT_EQUAL       reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    TIPO_EQUAL      reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    DOTDOT          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    DOTDOTDOT       reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    QMARK           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    CONSTANT        reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    MODULE          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    DEF             reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    $end            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    DOT             reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    NEWLINE         reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    TCOLON          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    INTERP_END      reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    WHEN            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    LBRACE          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    ELSIF           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    END             reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    ID              reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    CASE            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    RETURN          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    BREAK           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    NEXT            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    UNDERSCORE      reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    ASTERISK        reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    IF              reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    UNLESS          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    WHILE           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    UNTIL           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    LOOP            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    EXCLAMATION     reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    TILDE           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    LPAREN          reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    LBRACKET        reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    INTNUMBER       reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    FLOATNUMBER     reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    CHAR            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    TRUE            reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    FALSE           reduce using rule 166 (unary_expression -> MINUS unary_expression .)
    STRING          reduce using rule 166 (unary_expression -> MINUS unary_expression .)


state 104

    (164) potenciacao_expression -> potenciacao_expression POTENCIACAO . unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 102
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 191
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 105

    (167) unary_expression -> EXCLAMATION unary_expression .

    POTENCIACAO     reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    MULTI           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    DIVIDE          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_THAN    reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_THAN       reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQUAL   reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQUAL      reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    EQUAL           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQUAL       reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    TIPO_EQUAL      reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    AND             reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    DOTDOT          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    DOTDOTDOT       reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    OR              reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    QMARK           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    CONSTANT        reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    MODULE          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    DEF             reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    $end            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACKET        reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    DOT             reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    NEWLINE         reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    SEMICOLON       reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    TCOLON          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    INTERP_END      reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    WHEN            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACE          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    ELSIF           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    ELSE            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    END             reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    ID              reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    CASE            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    RETURN          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    BREAK           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    NEXT            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    UNDERSCORE      reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    ASTERISK        reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    IF              reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    UNLESS          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    WHILE           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    UNTIL           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    LOOP            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    EXCLAMATION     reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    TILDE           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    LPAREN          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACKET        reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    INTNUMBER       reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    FLOATNUMBER     reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    CHAR            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    TRUE            reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    FALSE           reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)
    STRING          reduce using rule 167 (unary_expression -> EXCLAMATION unary_expression .)


state 106

    (168) unary_expression -> TILDE unary_expression .

    POTENCIACAO     reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    MULTI           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    DIVIDE          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    MODULO          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    PLUS            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    MINUS           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    GREATER_THAN    reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    LESS_THAN       reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    GREATER_EQUAL   reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    LESS_EQUAL      reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    EQUAL           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    NOT_EQUAL       reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    TIPO_EQUAL      reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    AND             reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    DOTDOT          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    DOTDOTDOT       reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    OR              reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    QMARK           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    CONSTANT        reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    MODULE          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    DEF             reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    $end            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    COMMA           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    RBRACKET        reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    RPAREN          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    DOT             reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    NEWLINE         reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    SEMICOLON       reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    TCOLON          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    INTERP_END      reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    WHEN            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    LBRACE          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    ELSIF           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    ELSE            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    END             reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    ID              reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    CASE            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    RETURN          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    BREAK           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    NEXT            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    UNDERSCORE      reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    ASTERISK        reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    IF              reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    UNLESS          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    WHILE           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    UNTIL           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    LOOP            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    EXCLAMATION     reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    TILDE           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    LPAREN          reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    LBRACKET        reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    INTNUMBER       reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    FLOATNUMBER     reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    CHAR            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    TRUE            reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    FALSE           reduce using rule 168 (unary_expression -> TILDE unary_expression .)
    STRING          reduce using rule 168 (unary_expression -> TILDE unary_expression .)


state 107

    (170) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 192


state 108

    (67) string_literal -> STRING INTERP_START . expression INTERP_END string_literal
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 193
    string_literal                 shift and go to state 59
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56

state 109

    (24) module -> MODULE ID statements END .

    MODULE          reduce using rule 24 (module -> MODULE ID statements END .)
    DEF             reduce using rule 24 (module -> MODULE ID statements END .)
    $end            reduce using rule 24 (module -> MODULE ID statements END .)


state 110

    (82) statements_list -> statements_list statements_base .

    ID              reduce using rule 82 (statements_list -> statements_list statements_base .)
    CASE            reduce using rule 82 (statements_list -> statements_list statements_base .)
    RETURN          reduce using rule 82 (statements_list -> statements_list statements_base .)
    BREAK           reduce using rule 82 (statements_list -> statements_list statements_base .)
    NEXT            reduce using rule 82 (statements_list -> statements_list statements_base .)
    UNDERSCORE      reduce using rule 82 (statements_list -> statements_list statements_base .)
    ASTERISK        reduce using rule 82 (statements_list -> statements_list statements_base .)
    IF              reduce using rule 82 (statements_list -> statements_list statements_base .)
    UNLESS          reduce using rule 82 (statements_list -> statements_list statements_base .)
    WHILE           reduce using rule 82 (statements_list -> statements_list statements_base .)
    UNTIL           reduce using rule 82 (statements_list -> statements_list statements_base .)
    LOOP            reduce using rule 82 (statements_list -> statements_list statements_base .)
    PLUS            reduce using rule 82 (statements_list -> statements_list statements_base .)
    MINUS           reduce using rule 82 (statements_list -> statements_list statements_base .)
    EXCLAMATION     reduce using rule 82 (statements_list -> statements_list statements_base .)
    TILDE           reduce using rule 82 (statements_list -> statements_list statements_base .)
    LPAREN          reduce using rule 82 (statements_list -> statements_list statements_base .)
    LBRACKET        reduce using rule 82 (statements_list -> statements_list statements_base .)
    INTNUMBER       reduce using rule 82 (statements_list -> statements_list statements_base .)
    FLOATNUMBER     reduce using rule 82 (statements_list -> statements_list statements_base .)
    CHAR            reduce using rule 82 (statements_list -> statements_list statements_base .)
    TRUE            reduce using rule 82 (statements_list -> statements_list statements_base .)
    FALSE           reduce using rule 82 (statements_list -> statements_list statements_base .)
    STRING          reduce using rule 82 (statements_list -> statements_list statements_base .)
    END             reduce using rule 82 (statements_list -> statements_list statements_base .)
    NEWLINE         reduce using rule 82 (statements_list -> statements_list statements_base .)
    SEMICOLON       reduce using rule 82 (statements_list -> statements_list statements_base .)
    ELSIF           reduce using rule 82 (statements_list -> statements_list statements_base .)
    ELSE            reduce using rule 82 (statements_list -> statements_list statements_base .)
    RBRACE          reduce using rule 82 (statements_list -> statements_list statements_base .)
    WHEN            reduce using rule 82 (statements_list -> statements_list statements_base .)


state 111

    (84) statements_base -> statement . NEWLINE
    (85) statements_base -> statement . SEMICOLON

    NEWLINE         shift and go to state 194
    SEMICOLON       shift and go to state 195


state 112

    (86) statement -> expression .
    (116) iterator -> expression . DOT MULTI statements
    (117) iterator -> expression . DOT EACH DO PIPE ID PIPE statements END
    (118) iterator -> expression . DOT EACH LBRACE PIPE ID PIPE RBRACE statements

    NEWLINE         reduce using rule 86 (statement -> expression .)
    SEMICOLON       reduce using rule 86 (statement -> expression .)
    DOT             shift and go to state 196


state 113

    (87) statement -> control_structure .

    NEWLINE         reduce using rule 87 (statement -> control_structure .)
    SEMICOLON       reduce using rule 87 (statement -> control_structure .)


state 114

    (88) statement -> variable_declaration .

    NEWLINE         reduce using rule 88 (statement -> variable_declaration .)
    SEMICOLON       reduce using rule 88 (statement -> variable_declaration .)


state 115

    (89) statement -> function_call .

    NEWLINE         reduce using rule 89 (statement -> function_call .)
    SEMICOLON       reduce using rule 89 (statement -> function_call .)


state 116

    (90) control_structure -> conditional .

    NEWLINE         reduce using rule 90 (control_structure -> conditional .)
    SEMICOLON       reduce using rule 90 (control_structure -> conditional .)


state 117

    (91) control_structure -> loop_structure .

    NEWLINE         reduce using rule 91 (control_structure -> loop_structure .)
    SEMICOLON       reduce using rule 91 (control_structure -> loop_structure .)


state 118

    (92) control_structure -> case_structure .

    NEWLINE         reduce using rule 92 (control_structure -> case_structure .)
    SEMICOLON       reduce using rule 92 (control_structure -> case_structure .)


state 119

    (93) control_structure -> return_statement .

    NEWLINE         reduce using rule 93 (control_structure -> return_statement .)
    SEMICOLON       reduce using rule 93 (control_structure -> return_statement .)


state 120

    (94) control_structure -> break_statement .

    NEWLINE         reduce using rule 94 (control_structure -> break_statement .)
    SEMICOLON       reduce using rule 94 (control_structure -> break_statement .)


state 121

    (95) control_structure -> next_statement .

    NEWLINE         reduce using rule 95 (control_structure -> next_statement .)
    SEMICOLON       reduce using rule 95 (control_structure -> next_statement .)


state 122

    (68) variable_declaration -> ID . COLON types ASSIGN expression
    (69) variable_declaration -> ID . ASSIGN expression
    (70) variable_declaration -> ID . COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> ID . LPAREN expression_list RPAREN
    (76) function_call -> ID . LPAREN RPAREN
    (134) assignment_target -> ID .
    (135) assignment_target -> ID . LBRACKET expression RBRACKET
    (173) primary_expression -> ID .

  ! shift/reduce conflict for ASSIGN resolved as shift
    COLON           shift and go to state 197
    ASSIGN          shift and go to state 198
    COMMA           shift and go to state 199
    LPAREN          shift and go to state 200
    PLUS_ASSIGN     reduce using rule 134 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 134 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 134 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 134 (assignment_target -> ID .)
    LBRACKET        shift and go to state 77
    POTENCIACAO     reduce using rule 173 (primary_expression -> ID .)
    MULTI           reduce using rule 173 (primary_expression -> ID .)
    DIVIDE          reduce using rule 173 (primary_expression -> ID .)
    MODULO          reduce using rule 173 (primary_expression -> ID .)
    PLUS            reduce using rule 173 (primary_expression -> ID .)
    MINUS           reduce using rule 173 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 173 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 173 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 173 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 173 (primary_expression -> ID .)
    EQUAL           reduce using rule 173 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 173 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 173 (primary_expression -> ID .)
    AND             reduce using rule 173 (primary_expression -> ID .)
    DOTDOT          reduce using rule 173 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 173 (primary_expression -> ID .)
    OR              reduce using rule 173 (primary_expression -> ID .)
    QMARK           reduce using rule 173 (primary_expression -> ID .)
    DOT             reduce using rule 173 (primary_expression -> ID .)
    NEWLINE         reduce using rule 173 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 173 (primary_expression -> ID .)

  ! ASSIGN          [ reduce using rule 134 (assignment_target -> ID .) ]


state 123

    (96) conditional -> if_statement .

    NEWLINE         reduce using rule 96 (conditional -> if_statement .)
    SEMICOLON       reduce using rule 96 (conditional -> if_statement .)


state 124

    (97) conditional -> unless_statement .

    NEWLINE         reduce using rule 97 (conditional -> unless_statement .)
    SEMICOLON       reduce using rule 97 (conditional -> unless_statement .)


state 125

    (109) loop_structure -> while .

    NEWLINE         reduce using rule 109 (loop_structure -> while .)
    SEMICOLON       reduce using rule 109 (loop_structure -> while .)


state 126

    (110) loop_structure -> until .

    NEWLINE         reduce using rule 110 (loop_structure -> until .)
    SEMICOLON       reduce using rule 110 (loop_structure -> until .)


state 127

    (111) loop_structure -> loop .

    NEWLINE         reduce using rule 111 (loop_structure -> loop .)
    SEMICOLON       reduce using rule 111 (loop_structure -> loop .)


state 128

    (112) loop_structure -> iterator .

    NEWLINE         reduce using rule 112 (loop_structure -> iterator .)
    SEMICOLON       reduce using rule 112 (loop_structure -> iterator .)


state 129

    (119) case_structure -> CASE . expression when_list opt_else END
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 201
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 130

    (122) return_statement -> RETURN . opt_expression
    (125) opt_expression -> . expression
    (126) opt_expression -> . empty
    (127) expression -> . assignment_expression
    (175) empty -> .
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    NEWLINE         reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    opt_expression                 shift and go to state 202
    expression                     shift and go to state 203
    empty                          shift and go to state 204
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 131

    (123) break_statement -> BREAK . opt_expression
    (125) opt_expression -> . expression
    (126) opt_expression -> . empty
    (127) expression -> . assignment_expression
    (175) empty -> .
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    NEWLINE         reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    opt_expression                 shift and go to state 205
    expression                     shift and go to state 203
    empty                          shift and go to state 204
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 132

    (124) next_statement -> NEXT . opt_expression
    (125) opt_expression -> . expression
    (126) opt_expression -> . empty
    (127) expression -> . assignment_expression
    (175) empty -> .
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    NEWLINE         reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    opt_expression                 shift and go to state 206
    expression                     shift and go to state 203
    empty                          shift and go to state 204
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 133

    (98) if_statement -> IF . if_condition statements opt_elsif opt_else END
    (100) if_condition -> . expression
    (101) if_condition -> . expression LBRACE statements RBRACE
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    if_condition                   shift and go to state 207
    expression                     shift and go to state 208
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 134

    (99) unless_statement -> UNLESS . if_condition statements opt_else END
    (100) if_condition -> . expression
    (101) if_condition -> . expression LBRACE statements RBRACE
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    if_condition                   shift and go to state 209
    expression                     shift and go to state 208
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 135

    (113) while -> WHILE . expression statements
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 210
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 136

    (114) until -> UNTIL . expression statements
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 211
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 137

    (115) loop -> LOOP . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    NEWLINE         reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)

    statements                     shift and go to state 212
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 138

    (33) argument -> ID .
    (34) argument -> ID . COLON types
    (35) argument -> ID . ASSIGN expression
    (36) argument -> ID . COLON types ASSIGN expression

    COMMA           reduce using rule 33 (argument -> ID .)
    RPAREN          reduce using rule 33 (argument -> ID .)
    COLON           shift and go to state 213
    ASSIGN          shift and go to state 214


state 139

    (27) function -> DEF ID LPAREN opt_argument_list . RPAREN opt_return_type statements END

    RPAREN          shift and go to state 215


state 140

    (29) opt_argument_list -> argument_list .

    RPAREN          reduce using rule 29 (opt_argument_list -> argument_list .)


state 141

    (30) opt_argument_list -> empty .

    RPAREN          reduce using rule 30 (opt_argument_list -> empty .)


state 142

    (31) argument_list -> argument .
    (32) argument_list -> argument . COMMA argument_list

    RPAREN          reduce using rule 31 (argument_list -> argument .)
    COMMA           shift and go to state 216


state 143

    (28) function -> DEF ID opt_return_type NEWLINE . statements END
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 217
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 144

    (37) opt_return_type -> COLON types .

    NEWLINE         reduce using rule 37 (opt_return_type -> COLON types .)
    END             reduce using rule 37 (opt_return_type -> COLON types .)
    ID              reduce using rule 37 (opt_return_type -> COLON types .)
    CASE            reduce using rule 37 (opt_return_type -> COLON types .)
    RETURN          reduce using rule 37 (opt_return_type -> COLON types .)
    BREAK           reduce using rule 37 (opt_return_type -> COLON types .)
    NEXT            reduce using rule 37 (opt_return_type -> COLON types .)
    UNDERSCORE      reduce using rule 37 (opt_return_type -> COLON types .)
    ASTERISK        reduce using rule 37 (opt_return_type -> COLON types .)
    IF              reduce using rule 37 (opt_return_type -> COLON types .)
    UNLESS          reduce using rule 37 (opt_return_type -> COLON types .)
    WHILE           reduce using rule 37 (opt_return_type -> COLON types .)
    UNTIL           reduce using rule 37 (opt_return_type -> COLON types .)
    LOOP            reduce using rule 37 (opt_return_type -> COLON types .)
    PLUS            reduce using rule 37 (opt_return_type -> COLON types .)
    MINUS           reduce using rule 37 (opt_return_type -> COLON types .)
    EXCLAMATION     reduce using rule 37 (opt_return_type -> COLON types .)
    TILDE           reduce using rule 37 (opt_return_type -> COLON types .)
    LPAREN          reduce using rule 37 (opt_return_type -> COLON types .)
    LBRACKET        reduce using rule 37 (opt_return_type -> COLON types .)
    INTNUMBER       reduce using rule 37 (opt_return_type -> COLON types .)
    FLOATNUMBER     reduce using rule 37 (opt_return_type -> COLON types .)
    CHAR            reduce using rule 37 (opt_return_type -> COLON types .)
    TRUE            reduce using rule 37 (opt_return_type -> COLON types .)
    FALSE           reduce using rule 37 (opt_return_type -> COLON types .)
    STRING          reduce using rule 37 (opt_return_type -> COLON types .)


state 145

    (39) types -> STRING .

    NEWLINE         reduce using rule 39 (types -> STRING .)
    END             reduce using rule 39 (types -> STRING .)
    ID              reduce using rule 39 (types -> STRING .)
    CASE            reduce using rule 39 (types -> STRING .)
    RETURN          reduce using rule 39 (types -> STRING .)
    BREAK           reduce using rule 39 (types -> STRING .)
    NEXT            reduce using rule 39 (types -> STRING .)
    UNDERSCORE      reduce using rule 39 (types -> STRING .)
    ASTERISK        reduce using rule 39 (types -> STRING .)
    IF              reduce using rule 39 (types -> STRING .)
    UNLESS          reduce using rule 39 (types -> STRING .)
    WHILE           reduce using rule 39 (types -> STRING .)
    UNTIL           reduce using rule 39 (types -> STRING .)
    LOOP            reduce using rule 39 (types -> STRING .)
    PLUS            reduce using rule 39 (types -> STRING .)
    MINUS           reduce using rule 39 (types -> STRING .)
    EXCLAMATION     reduce using rule 39 (types -> STRING .)
    TILDE           reduce using rule 39 (types -> STRING .)
    LPAREN          reduce using rule 39 (types -> STRING .)
    LBRACKET        reduce using rule 39 (types -> STRING .)
    INTNUMBER       reduce using rule 39 (types -> STRING .)
    FLOATNUMBER     reduce using rule 39 (types -> STRING .)
    CHAR            reduce using rule 39 (types -> STRING .)
    TRUE            reduce using rule 39 (types -> STRING .)
    FALSE           reduce using rule 39 (types -> STRING .)
    STRING          reduce using rule 39 (types -> STRING .)
    ASSIGN          reduce using rule 39 (types -> STRING .)
    COMMA           reduce using rule 39 (types -> STRING .)
    RPAREN          reduce using rule 39 (types -> STRING .)


state 146

    (40) types -> CHAR .

    NEWLINE         reduce using rule 40 (types -> CHAR .)
    END             reduce using rule 40 (types -> CHAR .)
    ID              reduce using rule 40 (types -> CHAR .)
    CASE            reduce using rule 40 (types -> CHAR .)
    RETURN          reduce using rule 40 (types -> CHAR .)
    BREAK           reduce using rule 40 (types -> CHAR .)
    NEXT            reduce using rule 40 (types -> CHAR .)
    UNDERSCORE      reduce using rule 40 (types -> CHAR .)
    ASTERISK        reduce using rule 40 (types -> CHAR .)
    IF              reduce using rule 40 (types -> CHAR .)
    UNLESS          reduce using rule 40 (types -> CHAR .)
    WHILE           reduce using rule 40 (types -> CHAR .)
    UNTIL           reduce using rule 40 (types -> CHAR .)
    LOOP            reduce using rule 40 (types -> CHAR .)
    PLUS            reduce using rule 40 (types -> CHAR .)
    MINUS           reduce using rule 40 (types -> CHAR .)
    EXCLAMATION     reduce using rule 40 (types -> CHAR .)
    TILDE           reduce using rule 40 (types -> CHAR .)
    LPAREN          reduce using rule 40 (types -> CHAR .)
    LBRACKET        reduce using rule 40 (types -> CHAR .)
    INTNUMBER       reduce using rule 40 (types -> CHAR .)
    FLOATNUMBER     reduce using rule 40 (types -> CHAR .)
    CHAR            reduce using rule 40 (types -> CHAR .)
    TRUE            reduce using rule 40 (types -> CHAR .)
    FALSE           reduce using rule 40 (types -> CHAR .)
    STRING          reduce using rule 40 (types -> CHAR .)
    ASSIGN          reduce using rule 40 (types -> CHAR .)
    COMMA           reduce using rule 40 (types -> CHAR .)
    RPAREN          reduce using rule 40 (types -> CHAR .)


state 147

    (41) types -> NIL .

    NEWLINE         reduce using rule 41 (types -> NIL .)
    END             reduce using rule 41 (types -> NIL .)
    ID              reduce using rule 41 (types -> NIL .)
    CASE            reduce using rule 41 (types -> NIL .)
    RETURN          reduce using rule 41 (types -> NIL .)
    BREAK           reduce using rule 41 (types -> NIL .)
    NEXT            reduce using rule 41 (types -> NIL .)
    UNDERSCORE      reduce using rule 41 (types -> NIL .)
    ASTERISK        reduce using rule 41 (types -> NIL .)
    IF              reduce using rule 41 (types -> NIL .)
    UNLESS          reduce using rule 41 (types -> NIL .)
    WHILE           reduce using rule 41 (types -> NIL .)
    UNTIL           reduce using rule 41 (types -> NIL .)
    LOOP            reduce using rule 41 (types -> NIL .)
    PLUS            reduce using rule 41 (types -> NIL .)
    MINUS           reduce using rule 41 (types -> NIL .)
    EXCLAMATION     reduce using rule 41 (types -> NIL .)
    TILDE           reduce using rule 41 (types -> NIL .)
    LPAREN          reduce using rule 41 (types -> NIL .)
    LBRACKET        reduce using rule 41 (types -> NIL .)
    INTNUMBER       reduce using rule 41 (types -> NIL .)
    FLOATNUMBER     reduce using rule 41 (types -> NIL .)
    CHAR            reduce using rule 41 (types -> NIL .)
    TRUE            reduce using rule 41 (types -> NIL .)
    FALSE           reduce using rule 41 (types -> NIL .)
    STRING          reduce using rule 41 (types -> NIL .)
    ASSIGN          reduce using rule 41 (types -> NIL .)
    COMMA           reduce using rule 41 (types -> NIL .)
    RPAREN          reduce using rule 41 (types -> NIL .)


state 148

    (42) types -> integer .

    NEWLINE         reduce using rule 42 (types -> integer .)
    END             reduce using rule 42 (types -> integer .)
    ID              reduce using rule 42 (types -> integer .)
    CASE            reduce using rule 42 (types -> integer .)
    RETURN          reduce using rule 42 (types -> integer .)
    BREAK           reduce using rule 42 (types -> integer .)
    NEXT            reduce using rule 42 (types -> integer .)
    UNDERSCORE      reduce using rule 42 (types -> integer .)
    ASTERISK        reduce using rule 42 (types -> integer .)
    IF              reduce using rule 42 (types -> integer .)
    UNLESS          reduce using rule 42 (types -> integer .)
    WHILE           reduce using rule 42 (types -> integer .)
    UNTIL           reduce using rule 42 (types -> integer .)
    LOOP            reduce using rule 42 (types -> integer .)
    PLUS            reduce using rule 42 (types -> integer .)
    MINUS           reduce using rule 42 (types -> integer .)
    EXCLAMATION     reduce using rule 42 (types -> integer .)
    TILDE           reduce using rule 42 (types -> integer .)
    LPAREN          reduce using rule 42 (types -> integer .)
    LBRACKET        reduce using rule 42 (types -> integer .)
    INTNUMBER       reduce using rule 42 (types -> integer .)
    FLOATNUMBER     reduce using rule 42 (types -> integer .)
    CHAR            reduce using rule 42 (types -> integer .)
    TRUE            reduce using rule 42 (types -> integer .)
    FALSE           reduce using rule 42 (types -> integer .)
    STRING          reduce using rule 42 (types -> integer .)
    ASSIGN          reduce using rule 42 (types -> integer .)
    COMMA           reduce using rule 42 (types -> integer .)
    RPAREN          reduce using rule 42 (types -> integer .)


state 149

    (43) types -> float .

    NEWLINE         reduce using rule 43 (types -> float .)
    END             reduce using rule 43 (types -> float .)
    ID              reduce using rule 43 (types -> float .)
    CASE            reduce using rule 43 (types -> float .)
    RETURN          reduce using rule 43 (types -> float .)
    BREAK           reduce using rule 43 (types -> float .)
    NEXT            reduce using rule 43 (types -> float .)
    UNDERSCORE      reduce using rule 43 (types -> float .)
    ASTERISK        reduce using rule 43 (types -> float .)
    IF              reduce using rule 43 (types -> float .)
    UNLESS          reduce using rule 43 (types -> float .)
    WHILE           reduce using rule 43 (types -> float .)
    UNTIL           reduce using rule 43 (types -> float .)
    LOOP            reduce using rule 43 (types -> float .)
    PLUS            reduce using rule 43 (types -> float .)
    MINUS           reduce using rule 43 (types -> float .)
    EXCLAMATION     reduce using rule 43 (types -> float .)
    TILDE           reduce using rule 43 (types -> float .)
    LPAREN          reduce using rule 43 (types -> float .)
    LBRACKET        reduce using rule 43 (types -> float .)
    INTNUMBER       reduce using rule 43 (types -> float .)
    FLOATNUMBER     reduce using rule 43 (types -> float .)
    CHAR            reduce using rule 43 (types -> float .)
    TRUE            reduce using rule 43 (types -> float .)
    FALSE           reduce using rule 43 (types -> float .)
    STRING          reduce using rule 43 (types -> float .)
    ASSIGN          reduce using rule 43 (types -> float .)
    COMMA           reduce using rule 43 (types -> float .)
    RPAREN          reduce using rule 43 (types -> float .)


state 150

    (44) types -> boolean .

    NEWLINE         reduce using rule 44 (types -> boolean .)
    END             reduce using rule 44 (types -> boolean .)
    ID              reduce using rule 44 (types -> boolean .)
    CASE            reduce using rule 44 (types -> boolean .)
    RETURN          reduce using rule 44 (types -> boolean .)
    BREAK           reduce using rule 44 (types -> boolean .)
    NEXT            reduce using rule 44 (types -> boolean .)
    UNDERSCORE      reduce using rule 44 (types -> boolean .)
    ASTERISK        reduce using rule 44 (types -> boolean .)
    IF              reduce using rule 44 (types -> boolean .)
    UNLESS          reduce using rule 44 (types -> boolean .)
    WHILE           reduce using rule 44 (types -> boolean .)
    UNTIL           reduce using rule 44 (types -> boolean .)
    LOOP            reduce using rule 44 (types -> boolean .)
    PLUS            reduce using rule 44 (types -> boolean .)
    MINUS           reduce using rule 44 (types -> boolean .)
    EXCLAMATION     reduce using rule 44 (types -> boolean .)
    TILDE           reduce using rule 44 (types -> boolean .)
    LPAREN          reduce using rule 44 (types -> boolean .)
    LBRACKET        reduce using rule 44 (types -> boolean .)
    INTNUMBER       reduce using rule 44 (types -> boolean .)
    FLOATNUMBER     reduce using rule 44 (types -> boolean .)
    CHAR            reduce using rule 44 (types -> boolean .)
    TRUE            reduce using rule 44 (types -> boolean .)
    FALSE           reduce using rule 44 (types -> boolean .)
    STRING          reduce using rule 44 (types -> boolean .)
    ASSIGN          reduce using rule 44 (types -> boolean .)
    COMMA           reduce using rule 44 (types -> boolean .)
    RPAREN          reduce using rule 44 (types -> boolean .)


state 151

    (45) integer -> INT .

    NEWLINE         reduce using rule 45 (integer -> INT .)
    END             reduce using rule 45 (integer -> INT .)
    ID              reduce using rule 45 (integer -> INT .)
    CASE            reduce using rule 45 (integer -> INT .)
    RETURN          reduce using rule 45 (integer -> INT .)
    BREAK           reduce using rule 45 (integer -> INT .)
    NEXT            reduce using rule 45 (integer -> INT .)
    UNDERSCORE      reduce using rule 45 (integer -> INT .)
    ASTERISK        reduce using rule 45 (integer -> INT .)
    IF              reduce using rule 45 (integer -> INT .)
    UNLESS          reduce using rule 45 (integer -> INT .)
    WHILE           reduce using rule 45 (integer -> INT .)
    UNTIL           reduce using rule 45 (integer -> INT .)
    LOOP            reduce using rule 45 (integer -> INT .)
    PLUS            reduce using rule 45 (integer -> INT .)
    MINUS           reduce using rule 45 (integer -> INT .)
    EXCLAMATION     reduce using rule 45 (integer -> INT .)
    TILDE           reduce using rule 45 (integer -> INT .)
    LPAREN          reduce using rule 45 (integer -> INT .)
    LBRACKET        reduce using rule 45 (integer -> INT .)
    INTNUMBER       reduce using rule 45 (integer -> INT .)
    FLOATNUMBER     reduce using rule 45 (integer -> INT .)
    CHAR            reduce using rule 45 (integer -> INT .)
    TRUE            reduce using rule 45 (integer -> INT .)
    FALSE           reduce using rule 45 (integer -> INT .)
    STRING          reduce using rule 45 (integer -> INT .)
    ASSIGN          reduce using rule 45 (integer -> INT .)
    COMMA           reduce using rule 45 (integer -> INT .)
    RPAREN          reduce using rule 45 (integer -> INT .)


state 152

    (46) integer -> INT8 .

    NEWLINE         reduce using rule 46 (integer -> INT8 .)
    END             reduce using rule 46 (integer -> INT8 .)
    ID              reduce using rule 46 (integer -> INT8 .)
    CASE            reduce using rule 46 (integer -> INT8 .)
    RETURN          reduce using rule 46 (integer -> INT8 .)
    BREAK           reduce using rule 46 (integer -> INT8 .)
    NEXT            reduce using rule 46 (integer -> INT8 .)
    UNDERSCORE      reduce using rule 46 (integer -> INT8 .)
    ASTERISK        reduce using rule 46 (integer -> INT8 .)
    IF              reduce using rule 46 (integer -> INT8 .)
    UNLESS          reduce using rule 46 (integer -> INT8 .)
    WHILE           reduce using rule 46 (integer -> INT8 .)
    UNTIL           reduce using rule 46 (integer -> INT8 .)
    LOOP            reduce using rule 46 (integer -> INT8 .)
    PLUS            reduce using rule 46 (integer -> INT8 .)
    MINUS           reduce using rule 46 (integer -> INT8 .)
    EXCLAMATION     reduce using rule 46 (integer -> INT8 .)
    TILDE           reduce using rule 46 (integer -> INT8 .)
    LPAREN          reduce using rule 46 (integer -> INT8 .)
    LBRACKET        reduce using rule 46 (integer -> INT8 .)
    INTNUMBER       reduce using rule 46 (integer -> INT8 .)
    FLOATNUMBER     reduce using rule 46 (integer -> INT8 .)
    CHAR            reduce using rule 46 (integer -> INT8 .)
    TRUE            reduce using rule 46 (integer -> INT8 .)
    FALSE           reduce using rule 46 (integer -> INT8 .)
    STRING          reduce using rule 46 (integer -> INT8 .)
    ASSIGN          reduce using rule 46 (integer -> INT8 .)
    COMMA           reduce using rule 46 (integer -> INT8 .)
    RPAREN          reduce using rule 46 (integer -> INT8 .)


state 153

    (47) integer -> INT16 .

    NEWLINE         reduce using rule 47 (integer -> INT16 .)
    END             reduce using rule 47 (integer -> INT16 .)
    ID              reduce using rule 47 (integer -> INT16 .)
    CASE            reduce using rule 47 (integer -> INT16 .)
    RETURN          reduce using rule 47 (integer -> INT16 .)
    BREAK           reduce using rule 47 (integer -> INT16 .)
    NEXT            reduce using rule 47 (integer -> INT16 .)
    UNDERSCORE      reduce using rule 47 (integer -> INT16 .)
    ASTERISK        reduce using rule 47 (integer -> INT16 .)
    IF              reduce using rule 47 (integer -> INT16 .)
    UNLESS          reduce using rule 47 (integer -> INT16 .)
    WHILE           reduce using rule 47 (integer -> INT16 .)
    UNTIL           reduce using rule 47 (integer -> INT16 .)
    LOOP            reduce using rule 47 (integer -> INT16 .)
    PLUS            reduce using rule 47 (integer -> INT16 .)
    MINUS           reduce using rule 47 (integer -> INT16 .)
    EXCLAMATION     reduce using rule 47 (integer -> INT16 .)
    TILDE           reduce using rule 47 (integer -> INT16 .)
    LPAREN          reduce using rule 47 (integer -> INT16 .)
    LBRACKET        reduce using rule 47 (integer -> INT16 .)
    INTNUMBER       reduce using rule 47 (integer -> INT16 .)
    FLOATNUMBER     reduce using rule 47 (integer -> INT16 .)
    CHAR            reduce using rule 47 (integer -> INT16 .)
    TRUE            reduce using rule 47 (integer -> INT16 .)
    FALSE           reduce using rule 47 (integer -> INT16 .)
    STRING          reduce using rule 47 (integer -> INT16 .)
    ASSIGN          reduce using rule 47 (integer -> INT16 .)
    COMMA           reduce using rule 47 (integer -> INT16 .)
    RPAREN          reduce using rule 47 (integer -> INT16 .)


state 154

    (48) integer -> INT32 .

    NEWLINE         reduce using rule 48 (integer -> INT32 .)
    END             reduce using rule 48 (integer -> INT32 .)
    ID              reduce using rule 48 (integer -> INT32 .)
    CASE            reduce using rule 48 (integer -> INT32 .)
    RETURN          reduce using rule 48 (integer -> INT32 .)
    BREAK           reduce using rule 48 (integer -> INT32 .)
    NEXT            reduce using rule 48 (integer -> INT32 .)
    UNDERSCORE      reduce using rule 48 (integer -> INT32 .)
    ASTERISK        reduce using rule 48 (integer -> INT32 .)
    IF              reduce using rule 48 (integer -> INT32 .)
    UNLESS          reduce using rule 48 (integer -> INT32 .)
    WHILE           reduce using rule 48 (integer -> INT32 .)
    UNTIL           reduce using rule 48 (integer -> INT32 .)
    LOOP            reduce using rule 48 (integer -> INT32 .)
    PLUS            reduce using rule 48 (integer -> INT32 .)
    MINUS           reduce using rule 48 (integer -> INT32 .)
    EXCLAMATION     reduce using rule 48 (integer -> INT32 .)
    TILDE           reduce using rule 48 (integer -> INT32 .)
    LPAREN          reduce using rule 48 (integer -> INT32 .)
    LBRACKET        reduce using rule 48 (integer -> INT32 .)
    INTNUMBER       reduce using rule 48 (integer -> INT32 .)
    FLOATNUMBER     reduce using rule 48 (integer -> INT32 .)
    CHAR            reduce using rule 48 (integer -> INT32 .)
    TRUE            reduce using rule 48 (integer -> INT32 .)
    FALSE           reduce using rule 48 (integer -> INT32 .)
    STRING          reduce using rule 48 (integer -> INT32 .)
    ASSIGN          reduce using rule 48 (integer -> INT32 .)
    COMMA           reduce using rule 48 (integer -> INT32 .)
    RPAREN          reduce using rule 48 (integer -> INT32 .)


state 155

    (49) integer -> INT64 .

    NEWLINE         reduce using rule 49 (integer -> INT64 .)
    END             reduce using rule 49 (integer -> INT64 .)
    ID              reduce using rule 49 (integer -> INT64 .)
    CASE            reduce using rule 49 (integer -> INT64 .)
    RETURN          reduce using rule 49 (integer -> INT64 .)
    BREAK           reduce using rule 49 (integer -> INT64 .)
    NEXT            reduce using rule 49 (integer -> INT64 .)
    UNDERSCORE      reduce using rule 49 (integer -> INT64 .)
    ASTERISK        reduce using rule 49 (integer -> INT64 .)
    IF              reduce using rule 49 (integer -> INT64 .)
    UNLESS          reduce using rule 49 (integer -> INT64 .)
    WHILE           reduce using rule 49 (integer -> INT64 .)
    UNTIL           reduce using rule 49 (integer -> INT64 .)
    LOOP            reduce using rule 49 (integer -> INT64 .)
    PLUS            reduce using rule 49 (integer -> INT64 .)
    MINUS           reduce using rule 49 (integer -> INT64 .)
    EXCLAMATION     reduce using rule 49 (integer -> INT64 .)
    TILDE           reduce using rule 49 (integer -> INT64 .)
    LPAREN          reduce using rule 49 (integer -> INT64 .)
    LBRACKET        reduce using rule 49 (integer -> INT64 .)
    INTNUMBER       reduce using rule 49 (integer -> INT64 .)
    FLOATNUMBER     reduce using rule 49 (integer -> INT64 .)
    CHAR            reduce using rule 49 (integer -> INT64 .)
    TRUE            reduce using rule 49 (integer -> INT64 .)
    FALSE           reduce using rule 49 (integer -> INT64 .)
    STRING          reduce using rule 49 (integer -> INT64 .)
    ASSIGN          reduce using rule 49 (integer -> INT64 .)
    COMMA           reduce using rule 49 (integer -> INT64 .)
    RPAREN          reduce using rule 49 (integer -> INT64 .)


state 156

    (50) integer -> INT128 .

    NEWLINE         reduce using rule 50 (integer -> INT128 .)
    END             reduce using rule 50 (integer -> INT128 .)
    ID              reduce using rule 50 (integer -> INT128 .)
    CASE            reduce using rule 50 (integer -> INT128 .)
    RETURN          reduce using rule 50 (integer -> INT128 .)
    BREAK           reduce using rule 50 (integer -> INT128 .)
    NEXT            reduce using rule 50 (integer -> INT128 .)
    UNDERSCORE      reduce using rule 50 (integer -> INT128 .)
    ASTERISK        reduce using rule 50 (integer -> INT128 .)
    IF              reduce using rule 50 (integer -> INT128 .)
    UNLESS          reduce using rule 50 (integer -> INT128 .)
    WHILE           reduce using rule 50 (integer -> INT128 .)
    UNTIL           reduce using rule 50 (integer -> INT128 .)
    LOOP            reduce using rule 50 (integer -> INT128 .)
    PLUS            reduce using rule 50 (integer -> INT128 .)
    MINUS           reduce using rule 50 (integer -> INT128 .)
    EXCLAMATION     reduce using rule 50 (integer -> INT128 .)
    TILDE           reduce using rule 50 (integer -> INT128 .)
    LPAREN          reduce using rule 50 (integer -> INT128 .)
    LBRACKET        reduce using rule 50 (integer -> INT128 .)
    INTNUMBER       reduce using rule 50 (integer -> INT128 .)
    FLOATNUMBER     reduce using rule 50 (integer -> INT128 .)
    CHAR            reduce using rule 50 (integer -> INT128 .)
    TRUE            reduce using rule 50 (integer -> INT128 .)
    FALSE           reduce using rule 50 (integer -> INT128 .)
    STRING          reduce using rule 50 (integer -> INT128 .)
    ASSIGN          reduce using rule 50 (integer -> INT128 .)
    COMMA           reduce using rule 50 (integer -> INT128 .)
    RPAREN          reduce using rule 50 (integer -> INT128 .)


state 157

    (51) integer -> UINT8 .

    NEWLINE         reduce using rule 51 (integer -> UINT8 .)
    END             reduce using rule 51 (integer -> UINT8 .)
    ID              reduce using rule 51 (integer -> UINT8 .)
    CASE            reduce using rule 51 (integer -> UINT8 .)
    RETURN          reduce using rule 51 (integer -> UINT8 .)
    BREAK           reduce using rule 51 (integer -> UINT8 .)
    NEXT            reduce using rule 51 (integer -> UINT8 .)
    UNDERSCORE      reduce using rule 51 (integer -> UINT8 .)
    ASTERISK        reduce using rule 51 (integer -> UINT8 .)
    IF              reduce using rule 51 (integer -> UINT8 .)
    UNLESS          reduce using rule 51 (integer -> UINT8 .)
    WHILE           reduce using rule 51 (integer -> UINT8 .)
    UNTIL           reduce using rule 51 (integer -> UINT8 .)
    LOOP            reduce using rule 51 (integer -> UINT8 .)
    PLUS            reduce using rule 51 (integer -> UINT8 .)
    MINUS           reduce using rule 51 (integer -> UINT8 .)
    EXCLAMATION     reduce using rule 51 (integer -> UINT8 .)
    TILDE           reduce using rule 51 (integer -> UINT8 .)
    LPAREN          reduce using rule 51 (integer -> UINT8 .)
    LBRACKET        reduce using rule 51 (integer -> UINT8 .)
    INTNUMBER       reduce using rule 51 (integer -> UINT8 .)
    FLOATNUMBER     reduce using rule 51 (integer -> UINT8 .)
    CHAR            reduce using rule 51 (integer -> UINT8 .)
    TRUE            reduce using rule 51 (integer -> UINT8 .)
    FALSE           reduce using rule 51 (integer -> UINT8 .)
    STRING          reduce using rule 51 (integer -> UINT8 .)
    ASSIGN          reduce using rule 51 (integer -> UINT8 .)
    COMMA           reduce using rule 51 (integer -> UINT8 .)
    RPAREN          reduce using rule 51 (integer -> UINT8 .)


state 158

    (52) integer -> UINT16 .

    NEWLINE         reduce using rule 52 (integer -> UINT16 .)
    END             reduce using rule 52 (integer -> UINT16 .)
    ID              reduce using rule 52 (integer -> UINT16 .)
    CASE            reduce using rule 52 (integer -> UINT16 .)
    RETURN          reduce using rule 52 (integer -> UINT16 .)
    BREAK           reduce using rule 52 (integer -> UINT16 .)
    NEXT            reduce using rule 52 (integer -> UINT16 .)
    UNDERSCORE      reduce using rule 52 (integer -> UINT16 .)
    ASTERISK        reduce using rule 52 (integer -> UINT16 .)
    IF              reduce using rule 52 (integer -> UINT16 .)
    UNLESS          reduce using rule 52 (integer -> UINT16 .)
    WHILE           reduce using rule 52 (integer -> UINT16 .)
    UNTIL           reduce using rule 52 (integer -> UINT16 .)
    LOOP            reduce using rule 52 (integer -> UINT16 .)
    PLUS            reduce using rule 52 (integer -> UINT16 .)
    MINUS           reduce using rule 52 (integer -> UINT16 .)
    EXCLAMATION     reduce using rule 52 (integer -> UINT16 .)
    TILDE           reduce using rule 52 (integer -> UINT16 .)
    LPAREN          reduce using rule 52 (integer -> UINT16 .)
    LBRACKET        reduce using rule 52 (integer -> UINT16 .)
    INTNUMBER       reduce using rule 52 (integer -> UINT16 .)
    FLOATNUMBER     reduce using rule 52 (integer -> UINT16 .)
    CHAR            reduce using rule 52 (integer -> UINT16 .)
    TRUE            reduce using rule 52 (integer -> UINT16 .)
    FALSE           reduce using rule 52 (integer -> UINT16 .)
    STRING          reduce using rule 52 (integer -> UINT16 .)
    ASSIGN          reduce using rule 52 (integer -> UINT16 .)
    COMMA           reduce using rule 52 (integer -> UINT16 .)
    RPAREN          reduce using rule 52 (integer -> UINT16 .)


state 159

    (53) integer -> UINT32 .

    NEWLINE         reduce using rule 53 (integer -> UINT32 .)
    END             reduce using rule 53 (integer -> UINT32 .)
    ID              reduce using rule 53 (integer -> UINT32 .)
    CASE            reduce using rule 53 (integer -> UINT32 .)
    RETURN          reduce using rule 53 (integer -> UINT32 .)
    BREAK           reduce using rule 53 (integer -> UINT32 .)
    NEXT            reduce using rule 53 (integer -> UINT32 .)
    UNDERSCORE      reduce using rule 53 (integer -> UINT32 .)
    ASTERISK        reduce using rule 53 (integer -> UINT32 .)
    IF              reduce using rule 53 (integer -> UINT32 .)
    UNLESS          reduce using rule 53 (integer -> UINT32 .)
    WHILE           reduce using rule 53 (integer -> UINT32 .)
    UNTIL           reduce using rule 53 (integer -> UINT32 .)
    LOOP            reduce using rule 53 (integer -> UINT32 .)
    PLUS            reduce using rule 53 (integer -> UINT32 .)
    MINUS           reduce using rule 53 (integer -> UINT32 .)
    EXCLAMATION     reduce using rule 53 (integer -> UINT32 .)
    TILDE           reduce using rule 53 (integer -> UINT32 .)
    LPAREN          reduce using rule 53 (integer -> UINT32 .)
    LBRACKET        reduce using rule 53 (integer -> UINT32 .)
    INTNUMBER       reduce using rule 53 (integer -> UINT32 .)
    FLOATNUMBER     reduce using rule 53 (integer -> UINT32 .)
    CHAR            reduce using rule 53 (integer -> UINT32 .)
    TRUE            reduce using rule 53 (integer -> UINT32 .)
    FALSE           reduce using rule 53 (integer -> UINT32 .)
    STRING          reduce using rule 53 (integer -> UINT32 .)
    ASSIGN          reduce using rule 53 (integer -> UINT32 .)
    COMMA           reduce using rule 53 (integer -> UINT32 .)
    RPAREN          reduce using rule 53 (integer -> UINT32 .)


state 160

    (54) integer -> UINT64 .

    NEWLINE         reduce using rule 54 (integer -> UINT64 .)
    END             reduce using rule 54 (integer -> UINT64 .)
    ID              reduce using rule 54 (integer -> UINT64 .)
    CASE            reduce using rule 54 (integer -> UINT64 .)
    RETURN          reduce using rule 54 (integer -> UINT64 .)
    BREAK           reduce using rule 54 (integer -> UINT64 .)
    NEXT            reduce using rule 54 (integer -> UINT64 .)
    UNDERSCORE      reduce using rule 54 (integer -> UINT64 .)
    ASTERISK        reduce using rule 54 (integer -> UINT64 .)
    IF              reduce using rule 54 (integer -> UINT64 .)
    UNLESS          reduce using rule 54 (integer -> UINT64 .)
    WHILE           reduce using rule 54 (integer -> UINT64 .)
    UNTIL           reduce using rule 54 (integer -> UINT64 .)
    LOOP            reduce using rule 54 (integer -> UINT64 .)
    PLUS            reduce using rule 54 (integer -> UINT64 .)
    MINUS           reduce using rule 54 (integer -> UINT64 .)
    EXCLAMATION     reduce using rule 54 (integer -> UINT64 .)
    TILDE           reduce using rule 54 (integer -> UINT64 .)
    LPAREN          reduce using rule 54 (integer -> UINT64 .)
    LBRACKET        reduce using rule 54 (integer -> UINT64 .)
    INTNUMBER       reduce using rule 54 (integer -> UINT64 .)
    FLOATNUMBER     reduce using rule 54 (integer -> UINT64 .)
    CHAR            reduce using rule 54 (integer -> UINT64 .)
    TRUE            reduce using rule 54 (integer -> UINT64 .)
    FALSE           reduce using rule 54 (integer -> UINT64 .)
    STRING          reduce using rule 54 (integer -> UINT64 .)
    ASSIGN          reduce using rule 54 (integer -> UINT64 .)
    COMMA           reduce using rule 54 (integer -> UINT64 .)
    RPAREN          reduce using rule 54 (integer -> UINT64 .)


state 161

    (55) integer -> UINT128 .

    NEWLINE         reduce using rule 55 (integer -> UINT128 .)
    END             reduce using rule 55 (integer -> UINT128 .)
    ID              reduce using rule 55 (integer -> UINT128 .)
    CASE            reduce using rule 55 (integer -> UINT128 .)
    RETURN          reduce using rule 55 (integer -> UINT128 .)
    BREAK           reduce using rule 55 (integer -> UINT128 .)
    NEXT            reduce using rule 55 (integer -> UINT128 .)
    UNDERSCORE      reduce using rule 55 (integer -> UINT128 .)
    ASTERISK        reduce using rule 55 (integer -> UINT128 .)
    IF              reduce using rule 55 (integer -> UINT128 .)
    UNLESS          reduce using rule 55 (integer -> UINT128 .)
    WHILE           reduce using rule 55 (integer -> UINT128 .)
    UNTIL           reduce using rule 55 (integer -> UINT128 .)
    LOOP            reduce using rule 55 (integer -> UINT128 .)
    PLUS            reduce using rule 55 (integer -> UINT128 .)
    MINUS           reduce using rule 55 (integer -> UINT128 .)
    EXCLAMATION     reduce using rule 55 (integer -> UINT128 .)
    TILDE           reduce using rule 55 (integer -> UINT128 .)
    LPAREN          reduce using rule 55 (integer -> UINT128 .)
    LBRACKET        reduce using rule 55 (integer -> UINT128 .)
    INTNUMBER       reduce using rule 55 (integer -> UINT128 .)
    FLOATNUMBER     reduce using rule 55 (integer -> UINT128 .)
    CHAR            reduce using rule 55 (integer -> UINT128 .)
    TRUE            reduce using rule 55 (integer -> UINT128 .)
    FALSE           reduce using rule 55 (integer -> UINT128 .)
    STRING          reduce using rule 55 (integer -> UINT128 .)
    ASSIGN          reduce using rule 55 (integer -> UINT128 .)
    COMMA           reduce using rule 55 (integer -> UINT128 .)
    RPAREN          reduce using rule 55 (integer -> UINT128 .)


state 162

    (56) float -> FLOAT .

    NEWLINE         reduce using rule 56 (float -> FLOAT .)
    END             reduce using rule 56 (float -> FLOAT .)
    ID              reduce using rule 56 (float -> FLOAT .)
    CASE            reduce using rule 56 (float -> FLOAT .)
    RETURN          reduce using rule 56 (float -> FLOAT .)
    BREAK           reduce using rule 56 (float -> FLOAT .)
    NEXT            reduce using rule 56 (float -> FLOAT .)
    UNDERSCORE      reduce using rule 56 (float -> FLOAT .)
    ASTERISK        reduce using rule 56 (float -> FLOAT .)
    IF              reduce using rule 56 (float -> FLOAT .)
    UNLESS          reduce using rule 56 (float -> FLOAT .)
    WHILE           reduce using rule 56 (float -> FLOAT .)
    UNTIL           reduce using rule 56 (float -> FLOAT .)
    LOOP            reduce using rule 56 (float -> FLOAT .)
    PLUS            reduce using rule 56 (float -> FLOAT .)
    MINUS           reduce using rule 56 (float -> FLOAT .)
    EXCLAMATION     reduce using rule 56 (float -> FLOAT .)
    TILDE           reduce using rule 56 (float -> FLOAT .)
    LPAREN          reduce using rule 56 (float -> FLOAT .)
    LBRACKET        reduce using rule 56 (float -> FLOAT .)
    INTNUMBER       reduce using rule 56 (float -> FLOAT .)
    FLOATNUMBER     reduce using rule 56 (float -> FLOAT .)
    CHAR            reduce using rule 56 (float -> FLOAT .)
    TRUE            reduce using rule 56 (float -> FLOAT .)
    FALSE           reduce using rule 56 (float -> FLOAT .)
    STRING          reduce using rule 56 (float -> FLOAT .)
    ASSIGN          reduce using rule 56 (float -> FLOAT .)
    COMMA           reduce using rule 56 (float -> FLOAT .)
    RPAREN          reduce using rule 56 (float -> FLOAT .)


state 163

    (57) float -> FLOAT32 .

    NEWLINE         reduce using rule 57 (float -> FLOAT32 .)
    END             reduce using rule 57 (float -> FLOAT32 .)
    ID              reduce using rule 57 (float -> FLOAT32 .)
    CASE            reduce using rule 57 (float -> FLOAT32 .)
    RETURN          reduce using rule 57 (float -> FLOAT32 .)
    BREAK           reduce using rule 57 (float -> FLOAT32 .)
    NEXT            reduce using rule 57 (float -> FLOAT32 .)
    UNDERSCORE      reduce using rule 57 (float -> FLOAT32 .)
    ASTERISK        reduce using rule 57 (float -> FLOAT32 .)
    IF              reduce using rule 57 (float -> FLOAT32 .)
    UNLESS          reduce using rule 57 (float -> FLOAT32 .)
    WHILE           reduce using rule 57 (float -> FLOAT32 .)
    UNTIL           reduce using rule 57 (float -> FLOAT32 .)
    LOOP            reduce using rule 57 (float -> FLOAT32 .)
    PLUS            reduce using rule 57 (float -> FLOAT32 .)
    MINUS           reduce using rule 57 (float -> FLOAT32 .)
    EXCLAMATION     reduce using rule 57 (float -> FLOAT32 .)
    TILDE           reduce using rule 57 (float -> FLOAT32 .)
    LPAREN          reduce using rule 57 (float -> FLOAT32 .)
    LBRACKET        reduce using rule 57 (float -> FLOAT32 .)
    INTNUMBER       reduce using rule 57 (float -> FLOAT32 .)
    FLOATNUMBER     reduce using rule 57 (float -> FLOAT32 .)
    CHAR            reduce using rule 57 (float -> FLOAT32 .)
    TRUE            reduce using rule 57 (float -> FLOAT32 .)
    FALSE           reduce using rule 57 (float -> FLOAT32 .)
    STRING          reduce using rule 57 (float -> FLOAT32 .)
    ASSIGN          reduce using rule 57 (float -> FLOAT32 .)
    COMMA           reduce using rule 57 (float -> FLOAT32 .)
    RPAREN          reduce using rule 57 (float -> FLOAT32 .)


state 164

    (58) float -> FLOAT64 .

    NEWLINE         reduce using rule 58 (float -> FLOAT64 .)
    END             reduce using rule 58 (float -> FLOAT64 .)
    ID              reduce using rule 58 (float -> FLOAT64 .)
    CASE            reduce using rule 58 (float -> FLOAT64 .)
    RETURN          reduce using rule 58 (float -> FLOAT64 .)
    BREAK           reduce using rule 58 (float -> FLOAT64 .)
    NEXT            reduce using rule 58 (float -> FLOAT64 .)
    UNDERSCORE      reduce using rule 58 (float -> FLOAT64 .)
    ASTERISK        reduce using rule 58 (float -> FLOAT64 .)
    IF              reduce using rule 58 (float -> FLOAT64 .)
    UNLESS          reduce using rule 58 (float -> FLOAT64 .)
    WHILE           reduce using rule 58 (float -> FLOAT64 .)
    UNTIL           reduce using rule 58 (float -> FLOAT64 .)
    LOOP            reduce using rule 58 (float -> FLOAT64 .)
    PLUS            reduce using rule 58 (float -> FLOAT64 .)
    MINUS           reduce using rule 58 (float -> FLOAT64 .)
    EXCLAMATION     reduce using rule 58 (float -> FLOAT64 .)
    TILDE           reduce using rule 58 (float -> FLOAT64 .)
    LPAREN          reduce using rule 58 (float -> FLOAT64 .)
    LBRACKET        reduce using rule 58 (float -> FLOAT64 .)
    INTNUMBER       reduce using rule 58 (float -> FLOAT64 .)
    FLOATNUMBER     reduce using rule 58 (float -> FLOAT64 .)
    CHAR            reduce using rule 58 (float -> FLOAT64 .)
    TRUE            reduce using rule 58 (float -> FLOAT64 .)
    FALSE           reduce using rule 58 (float -> FLOAT64 .)
    STRING          reduce using rule 58 (float -> FLOAT64 .)
    ASSIGN          reduce using rule 58 (float -> FLOAT64 .)
    COMMA           reduce using rule 58 (float -> FLOAT64 .)
    RPAREN          reduce using rule 58 (float -> FLOAT64 .)


state 165

    (59) boolean -> BOOL .

    NEWLINE         reduce using rule 59 (boolean -> BOOL .)
    END             reduce using rule 59 (boolean -> BOOL .)
    ID              reduce using rule 59 (boolean -> BOOL .)
    CASE            reduce using rule 59 (boolean -> BOOL .)
    RETURN          reduce using rule 59 (boolean -> BOOL .)
    BREAK           reduce using rule 59 (boolean -> BOOL .)
    NEXT            reduce using rule 59 (boolean -> BOOL .)
    UNDERSCORE      reduce using rule 59 (boolean -> BOOL .)
    ASTERISK        reduce using rule 59 (boolean -> BOOL .)
    IF              reduce using rule 59 (boolean -> BOOL .)
    UNLESS          reduce using rule 59 (boolean -> BOOL .)
    WHILE           reduce using rule 59 (boolean -> BOOL .)
    UNTIL           reduce using rule 59 (boolean -> BOOL .)
    LOOP            reduce using rule 59 (boolean -> BOOL .)
    PLUS            reduce using rule 59 (boolean -> BOOL .)
    MINUS           reduce using rule 59 (boolean -> BOOL .)
    EXCLAMATION     reduce using rule 59 (boolean -> BOOL .)
    TILDE           reduce using rule 59 (boolean -> BOOL .)
    LPAREN          reduce using rule 59 (boolean -> BOOL .)
    LBRACKET        reduce using rule 59 (boolean -> BOOL .)
    INTNUMBER       reduce using rule 59 (boolean -> BOOL .)
    FLOATNUMBER     reduce using rule 59 (boolean -> BOOL .)
    CHAR            reduce using rule 59 (boolean -> BOOL .)
    TRUE            reduce using rule 59 (boolean -> BOOL .)
    FALSE           reduce using rule 59 (boolean -> BOOL .)
    STRING          reduce using rule 59 (boolean -> BOOL .)
    ASSIGN          reduce using rule 59 (boolean -> BOOL .)
    COMMA           reduce using rule 59 (boolean -> BOOL .)
    RPAREN          reduce using rule 59 (boolean -> BOOL .)


state 166

    (128) assignment_expression -> assignment_target ASSIGN expression .

    CONSTANT        reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    MODULE          reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    DEF             reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    $end            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    COMMA           reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACKET        reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    RPAREN          reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    DOT             reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    NEWLINE         reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    SEMICOLON       reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    TCOLON          reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    INTERP_END      reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    WHEN            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACE          reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSIF           reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSE            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    END             reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    ID              reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    CASE            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    RETURN          reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    BREAK           reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    NEXT            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    UNDERSCORE      reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    ASTERISK        reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    IF              reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    UNLESS          reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    WHILE           reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    UNTIL           reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    LOOP            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    PLUS            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    MINUS           reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    EXCLAMATION     reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    TILDE           reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    LPAREN          reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACKET        reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    INTNUMBER       reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    FLOATNUMBER     reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    CHAR            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    TRUE            reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    FALSE           reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)
    STRING          reduce using rule 128 (assignment_expression -> assignment_target ASSIGN expression .)


state 167

    (129) assignment_expression -> assignment_target PLUS_ASSIGN expression .

    CONSTANT        reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MODULE          reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DEF             reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    $end            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    COMMA           reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DOT             reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEWLINE         reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    SEMICOLON       reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TCOLON          reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTERP_END      reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHEN            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACE          reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSE            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    END             reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ID              reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CASE            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RETURN          reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    BREAK           reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEXT            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ASTERISK        reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    IF              reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNLESS          reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHILE           reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNTIL           reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LOOP            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    PLUS            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MINUS           reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TILDE           reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LPAREN          reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CHAR            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TRUE            reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FALSE           reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    STRING          reduce using rule 129 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)


state 168

    (130) assignment_expression -> assignment_target MINUS_ASSIGN expression .

    CONSTANT        reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MODULE          reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DEF             reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    $end            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    COMMA           reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DOT             reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEWLINE         reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    SEMICOLON       reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TCOLON          reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTERP_END      reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHEN            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACE          reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSE            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    END             reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ID              reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CASE            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RETURN          reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    BREAK           reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEXT            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ASTERISK        reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    IF              reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNLESS          reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHILE           reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNTIL           reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LOOP            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    PLUS            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MINUS           reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TILDE           reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LPAREN          reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CHAR            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TRUE            reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FALSE           reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    STRING          reduce using rule 130 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)


state 169

    (131) assignment_expression -> assignment_target MULTI_ASSIGN expression .

    CONSTANT        reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MODULE          reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DEF             reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    $end            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    COMMA           reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACKET        reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RPAREN          reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DOT             reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEWLINE         reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    SEMICOLON       reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TCOLON          reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTERP_END      reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHEN            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACE          reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSIF           reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSE            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    END             reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ID              reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CASE            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RETURN          reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    BREAK           reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEXT            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNDERSCORE      reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ASTERISK        reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    IF              reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNLESS          reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHILE           reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNTIL           reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LOOP            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    PLUS            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MINUS           reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    EXCLAMATION     reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TILDE           reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LPAREN          reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACKET        reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTNUMBER       reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CHAR            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TRUE            reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FALSE           reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    STRING          reduce using rule 131 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)


state 170

    (132) assignment_expression -> assignment_target DIVIDE_ASSIGN expression .

    CONSTANT        reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MODULE          reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DEF             reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    $end            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACKET        reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DOT             reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEWLINE         reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    SEMICOLON       reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TCOLON          reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTERP_END      reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHEN            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACE          reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    END             reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ID              reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    BREAK           reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEXT            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNDERSCORE      reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ASTERISK        reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    IF              reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNLESS          reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHILE           reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNTIL           reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LOOP            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    PLUS            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MINUS           reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    EXCLAMATION     reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TILDE           reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LPAREN          reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTNUMBER       reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CHAR            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TRUE            reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FALSE           reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 132 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)


state 171

    (135) assignment_target -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 218


state 172

    (174) array_literal -> LBRACKET opt_expression_list RBRACKET .

    POTENCIACAO     reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULO          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_THAN    reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_THAN       reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_EQUAL   reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_EQUAL      reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EQUAL           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NOT_EQUAL       reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TIPO_EQUAL      reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    AND             reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOT          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOTDOT       reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    OR              reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    QMARK           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CONSTANT        reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULE          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DEF             reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    $end            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    COMMA           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACKET        reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RPAREN          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOT             reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEWLINE         reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    SEMICOLON       reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TCOLON          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTERP_END      reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHEN            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACE          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSIF           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSE            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    END             reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ID              reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CASE            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RETURN          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    BREAK           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEXT            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNDERSCORE      reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASTERISK        reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    IF              reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNLESS          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHILE           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNTIL           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LOOP            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EXCLAMATION     reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TILDE           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LPAREN          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACKET        reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTNUMBER       reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FLOATNUMBER     reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CHAR            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TRUE            reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FALSE           reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    STRING          reduce using rule 174 (array_literal -> LBRACKET opt_expression_list RBRACKET .)


state 173

    (80) expression_list -> expression_list COMMA . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 219
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 174

    (138) ternary_expression -> range_expression QMARK expression . TCOLON expression

    TCOLON          shift and go to state 220


state 175

    (140) range_expression -> logical_or_expression DOTDOT logical_or_expression .
    (144) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CONSTANT        reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    MODULE          reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    DEF             reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    $end            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    COMMA           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RBRACKET        reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RPAREN          reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    DOT             reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    NEWLINE         reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    SEMICOLON       reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TCOLON          reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    INTERP_END      reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    WHEN            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LBRACE          reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ELSIF           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ELSE            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    END             reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ID              reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CASE            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RETURN          reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    BREAK           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    NEXT            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNDERSCORE      reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ASTERISK        reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    IF              reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNLESS          reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    WHILE           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNTIL           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LOOP            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    PLUS            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    MINUS           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    EXCLAMATION     reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TILDE           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LPAREN          reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LBRACKET        reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    INTNUMBER       reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    FLOATNUMBER     reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CHAR            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TRUE            reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    FALSE           reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    STRING          reduce using rule 140 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    OR              shift and go to state 87


state 176

    (141) range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .
    (144) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CONSTANT        reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    MODULE          reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    DEF             reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    $end            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    COMMA           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RBRACKET        reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RPAREN          reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    DOT             reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    NEWLINE         reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    SEMICOLON       reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TCOLON          reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    INTERP_END      reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    WHEN            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LBRACE          reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ELSIF           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ELSE            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    END             reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ID              reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CASE            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RETURN          reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    BREAK           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    NEXT            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNDERSCORE      reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ASTERISK        reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    IF              reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNLESS          reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    WHILE           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNTIL           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LOOP            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    PLUS            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    MINUS           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    EXCLAMATION     reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TILDE           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LPAREN          reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LBRACKET        reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    INTNUMBER       reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    FLOATNUMBER     reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CHAR            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TRUE            reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    FALSE           reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    STRING          reduce using rule 141 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    OR              shift and go to state 87


state 177

    (144) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (146) logical_and_expression -> logical_and_expression . AND equality_expression

    DOTDOT          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOTDOTDOT       reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    QMARK           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONSTANT        reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MODULE          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DEF             reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    $end            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOT             reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEWLINE         reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    SEMICOLON       reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TCOLON          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTERP_END      reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHEN            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACE          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSIF           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSE            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    END             reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ID              reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CASE            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RETURN          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    BREAK           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEXT            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNDERSCORE      reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASTERISK        reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IF              reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNLESS          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHILE           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNTIL           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LOOP            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    PLUS            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MINUS           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    EXCLAMATION     reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TILDE           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LPAREN          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACKET        reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTNUMBER       reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FLOATNUMBER     reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CHAR            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRUE            reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FALSE           reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRING          reduce using rule 144 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 88


state 178

    (146) logical_and_expression -> logical_and_expression AND equality_expression .
    (148) equality_expression -> equality_expression . EQUAL relational_expression
    (149) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (150) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOTDOT          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOTDOTDOT       reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    QMARK           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONSTANT        reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MODULE          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEF             reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    $end            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOT             reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEWLINE         reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TCOLON          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTERP_END      reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHEN            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACE          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSIF           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSE            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    END             reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ID              reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CASE            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RETURN          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    BREAK           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEXT            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNDERSCORE      reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASTERISK        reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IF              reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNLESS          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHILE           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNTIL           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LOOP            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    PLUS            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MINUS           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EXCLAMATION     reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TILDE           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACKET        reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTNUMBER       reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOATNUMBER     reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRUE            reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FALSE           reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRING          reduce using rule 146 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQUAL           shift and go to state 89
    NOT_EQUAL       shift and go to state 90
    TIPO_EQUAL      shift and go to state 91


state 179

    (148) equality_expression -> equality_expression EQUAL relational_expression .
    (152) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (153) relational_expression -> relational_expression . LESS_THAN additive_expression
    (154) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (155) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOTDOT          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    QMARK           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONSTANT        reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    MODULE          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    DEF             reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    $end            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACKET        reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOT             reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEWLINE         reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    SEMICOLON       reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    TCOLON          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTERP_END      reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHEN            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACE          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSIF           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSE            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    END             reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    ID              reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    CASE            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    RETURN          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    BREAK           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEXT            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    ASTERISK        reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    IF              reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNLESS          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHILE           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNTIL           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOOP            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    PLUS            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    MINUS           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    TILDE           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    LPAREN          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACKET        reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTNUMBER       reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    CHAR            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    TRUE            reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    FALSE           reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 148 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 92
    LESS_THAN       shift and go to state 93
    GREATER_EQUAL   shift and go to state 94
    LESS_EQUAL      shift and go to state 95


state 180

    (149) equality_expression -> equality_expression NOT_EQUAL relational_expression .
    (152) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (153) relational_expression -> relational_expression . LESS_THAN additive_expression
    (154) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (155) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    AND             reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOTDOT          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    OR              reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    QMARK           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CONSTANT        reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MODULE          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DEF             reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    $end            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    COMMA           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACKET        reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RPAREN          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOT             reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEWLINE         reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    SEMICOLON       reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TCOLON          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTERP_END      reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHEN            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACE          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSIF           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSE            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    END             reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ID              reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CASE            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RETURN          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    BREAK           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEXT            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ASTERISK        reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    IF              reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNLESS          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHILE           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNTIL           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LOOP            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    PLUS            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MINUS           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TILDE           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LPAREN          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACKET        reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CHAR            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TRUE            reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FALSE           reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    STRING          reduce using rule 149 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 92
    LESS_THAN       shift and go to state 93
    GREATER_EQUAL   shift and go to state 94
    LESS_EQUAL      shift and go to state 95


state 181

    (150) equality_expression -> equality_expression TIPO_EQUAL relational_expression .
    (152) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (153) relational_expression -> relational_expression . LESS_THAN additive_expression
    (154) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (155) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    AND             reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOTDOT          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    OR              reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    QMARK           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CONSTANT        reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MODULE          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DEF             reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    $end            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    COMMA           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACKET        reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RPAREN          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOT             reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEWLINE         reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    SEMICOLON       reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TCOLON          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTERP_END      reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHEN            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACE          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSIF           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSE            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    END             reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ID              reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CASE            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RETURN          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    BREAK           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEXT            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ASTERISK        reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    IF              reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNLESS          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHILE           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNTIL           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LOOP            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    PLUS            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MINUS           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TILDE           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LPAREN          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACKET        reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CHAR            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TRUE            reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FALSE           reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    STRING          reduce using rule 150 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 92
    LESS_THAN       shift and go to state 93
    GREATER_EQUAL   shift and go to state 94
    LESS_EQUAL      shift and go to state 95


state 182

    (152) relational_expression -> relational_expression GREATER_THAN additive_expression .
    (157) additive_expression -> additive_expression . PLUS multiplicative_expression
    (158) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_THAN       reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EQUAL           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    AND             reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOTDOT          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOTDOTDOT       reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    OR              reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    QMARK           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CONSTANT        reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    MODULE          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DEF             reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    $end            reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    COMMA           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACKET        reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RPAREN          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOT             reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEWLINE         reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    SEMICOLON       reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TCOLON          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTERP_END      reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHEN            reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACE          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSIF           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSE            reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    END             reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ID              reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CASE            reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RETURN          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    BREAK           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEXT            reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNDERSCORE      reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ASTERISK        reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    IF              reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNLESS          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHILE           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNTIL           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LOOP            reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EXCLAMATION     reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TILDE           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LPAREN          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACKET        reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTNUMBER       reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CHAR            reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TRUE            reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FALSE           reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    STRING          reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97

  ! PLUS            [ reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 152 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]


state 183

    (153) relational_expression -> relational_expression LESS_THAN additive_expression .
    (157) additive_expression -> additive_expression . PLUS multiplicative_expression
    (158) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_THAN       reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EQUAL           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    AND             reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOTDOT          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOTDOTDOT       reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    OR              reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    QMARK           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CONSTANT        reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    MODULE          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DEF             reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    $end            reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    COMMA           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACKET        reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RPAREN          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOT             reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEWLINE         reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    SEMICOLON       reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TCOLON          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTERP_END      reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHEN            reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACE          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSIF           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSE            reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    END             reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ID              reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CASE            reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RETURN          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    BREAK           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEXT            reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNDERSCORE      reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ASTERISK        reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    IF              reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNLESS          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHILE           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNTIL           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LOOP            reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EXCLAMATION     reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TILDE           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LPAREN          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACKET        reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTNUMBER       reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CHAR            reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TRUE            reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FALSE           reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    STRING          reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97

  ! PLUS            [ reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 153 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]


state 184

    (154) relational_expression -> relational_expression GREATER_EQUAL additive_expression .
    (157) additive_expression -> additive_expression . PLUS multiplicative_expression
    (158) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EQUAL           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    AND             reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOTDOT          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOTDOTDOT       reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    OR              reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    QMARK           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CONSTANT        reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    MODULE          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DEF             reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    $end            reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    COMMA           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACKET        reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RPAREN          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOT             reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEWLINE         reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    SEMICOLON       reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TCOLON          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTERP_END      reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHEN            reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACE          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSIF           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSE            reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    END             reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ID              reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CASE            reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RETURN          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    BREAK           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEXT            reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ASTERISK        reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    IF              reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNLESS          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHILE           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNTIL           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LOOP            reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TILDE           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LPAREN          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACKET        reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CHAR            reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TRUE            reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FALSE           reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    STRING          reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97

  ! PLUS            [ reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 154 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]


state 185

    (155) relational_expression -> relational_expression LESS_EQUAL additive_expression .
    (157) additive_expression -> additive_expression . PLUS multiplicative_expression
    (158) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EQUAL           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    AND             reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOTDOT          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOTDOTDOT       reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    OR              reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    QMARK           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CONSTANT        reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    MODULE          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DEF             reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    $end            reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    COMMA           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACKET        reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RPAREN          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOT             reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEWLINE         reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    SEMICOLON       reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TCOLON          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTERP_END      reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHEN            reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACE          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSIF           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSE            reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    END             reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ID              reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CASE            reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RETURN          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    BREAK           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEXT            reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ASTERISK        reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    IF              reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNLESS          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHILE           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNTIL           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LOOP            reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TILDE           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LPAREN          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACKET        reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CHAR            reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TRUE            reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FALSE           reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    STRING          reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97

  ! PLUS            [ reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 155 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]


state 186

    (157) additive_expression -> additive_expression PLUS multiplicative_expression .
    (160) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (161) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (162) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOTDOT          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOTDOTDOT       reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QMARK           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONSTANT        reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MODULE          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DEF             reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    $end            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOT             reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEWLINE         reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TCOLON          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTERP_END      reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHEN            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACE          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSIF           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    END             reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ID              reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CASE            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RETURN          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BREAK           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEXT            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASTERISK        reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IF              reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNLESS          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHILE           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNTIL           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOOP            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TILDE           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LPAREN          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACKET        reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTNUMBER       reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CHAR            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TRUE            reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FALSE           reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 157 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTI           shift and go to state 98
    DIVIDE          shift and go to state 99
    MODULO          shift and go to state 100


state 187

    (158) additive_expression -> additive_expression MINUS multiplicative_expression .
    (160) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (161) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (162) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOTDOT          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOTDOTDOT       reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QMARK           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONSTANT        reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MODULE          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DEF             reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    $end            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOT             reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEWLINE         reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TCOLON          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTERP_END      reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHEN            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACE          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSIF           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    END             reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ID              reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CASE            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RETURN          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BREAK           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEXT            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASTERISK        reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IF              reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNLESS          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHILE           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNTIL           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOOP            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TILDE           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LPAREN          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACKET        reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTNUMBER       reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CHAR            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TRUE            reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FALSE           reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRING          reduce using rule 158 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTI           shift and go to state 98
    DIVIDE          shift and go to state 99
    MODULO          shift and go to state 100


state 188

    (160) multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .
    (164) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DIVIDE          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULO          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    PLUS            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MINUS           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_THAN    reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_THAN       reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_EQUAL      reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EQUAL           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NOT_EQUAL       reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    AND             reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOTDOT          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOTDOTDOT       reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    OR              reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    QMARK           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CONSTANT        reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULE          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DEF             reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    $end            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    COMMA           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACKET        reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RPAREN          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOT             reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEWLINE         reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    SEMICOLON       reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TCOLON          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTERP_END      reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHEN            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACE          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSIF           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSE            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    END             reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ID              reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CASE            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RETURN          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    BREAK           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEXT            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNDERSCORE      reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ASTERISK        reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    IF              reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNLESS          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHILE           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNTIL           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LOOP            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EXCLAMATION     reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TILDE           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LPAREN          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACKET        reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTNUMBER       reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FLOATNUMBER     reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CHAR            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TRUE            reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FALSE           reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    STRING          reduce using rule 160 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    POTENCIACAO     shift and go to state 104


state 189

    (161) multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .
    (164) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DIVIDE          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULO          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    PLUS            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MINUS           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_THAN    reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_THAN       reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_EQUAL      reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EQUAL           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NOT_EQUAL       reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    AND             reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOTDOT          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOTDOTDOT       reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    OR              reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    QMARK           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CONSTANT        reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULE          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DEF             reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    $end            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    COMMA           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACKET        reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RPAREN          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOT             reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEWLINE         reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    SEMICOLON       reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TCOLON          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTERP_END      reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHEN            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACE          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSIF           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSE            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    END             reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ID              reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CASE            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RETURN          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    BREAK           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEXT            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNDERSCORE      reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ASTERISK        reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    IF              reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNLESS          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHILE           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNTIL           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LOOP            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EXCLAMATION     reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TILDE           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LPAREN          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACKET        reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTNUMBER       reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FLOATNUMBER     reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CHAR            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TRUE            reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FALSE           reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    STRING          reduce using rule 161 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    POTENCIACAO     shift and go to state 104


state 190

    (162) multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .
    (164) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DIVIDE          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULO          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    PLUS            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MINUS           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_THAN    reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_THAN       reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_EQUAL      reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EQUAL           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NOT_EQUAL       reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    AND             reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOTDOT          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOTDOTDOT       reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    OR              reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    QMARK           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CONSTANT        reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULE          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DEF             reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    $end            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    COMMA           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACKET        reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RPAREN          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOT             reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEWLINE         reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    SEMICOLON       reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TCOLON          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTERP_END      reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHEN            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACE          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSIF           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSE            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    END             reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ID              reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CASE            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RETURN          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    BREAK           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEXT            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNDERSCORE      reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ASTERISK        reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    IF              reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNLESS          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHILE           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNTIL           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LOOP            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EXCLAMATION     reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TILDE           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LPAREN          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACKET        reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTNUMBER       reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FLOATNUMBER     reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CHAR            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TRUE            reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FALSE           reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    STRING          reduce using rule 162 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    POTENCIACAO     shift and go to state 104


state 191

    (164) potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .

    POTENCIACAO     reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MULTI           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DIVIDE          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULO          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    PLUS            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MINUS           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_THAN    reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_THAN       reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_EQUAL   reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_EQUAL      reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EQUAL           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NOT_EQUAL       reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TIPO_EQUAL      reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    AND             reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOTDOT          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOTDOTDOT       reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    OR              reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    QMARK           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CONSTANT        reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULE          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DEF             reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    $end            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    COMMA           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACKET        reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RPAREN          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOT             reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEWLINE         reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    SEMICOLON       reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TCOLON          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTERP_END      reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHEN            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACE          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSIF           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSE            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    END             reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ID              reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CASE            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RETURN          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    BREAK           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEXT            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNDERSCORE      reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ASTERISK        reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    IF              reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNLESS          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHILE           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNTIL           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LOOP            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EXCLAMATION     reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TILDE           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LPAREN          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACKET        reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTNUMBER       reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FLOATNUMBER     reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CHAR            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TRUE            reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FALSE           reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    STRING          reduce using rule 164 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)


state 192

    (170) primary_expression -> LPAREN expression RPAREN .

    POTENCIACAO     reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    MULTI           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    TIPO_EQUAL      reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOTDOT       reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    CONSTANT        reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    TCOLON          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    INTERP_END      reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    NEXT            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    UNDERSCORE      reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    INTNUMBER       reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 170 (primary_expression -> LPAREN expression RPAREN .)


state 193

    (67) string_literal -> STRING INTERP_START expression . INTERP_END string_literal

    INTERP_END      shift and go to state 221


state 194

    (84) statements_base -> statement NEWLINE .

    ID              reduce using rule 84 (statements_base -> statement NEWLINE .)
    CASE            reduce using rule 84 (statements_base -> statement NEWLINE .)
    RETURN          reduce using rule 84 (statements_base -> statement NEWLINE .)
    BREAK           reduce using rule 84 (statements_base -> statement NEWLINE .)
    NEXT            reduce using rule 84 (statements_base -> statement NEWLINE .)
    UNDERSCORE      reduce using rule 84 (statements_base -> statement NEWLINE .)
    ASTERISK        reduce using rule 84 (statements_base -> statement NEWLINE .)
    IF              reduce using rule 84 (statements_base -> statement NEWLINE .)
    UNLESS          reduce using rule 84 (statements_base -> statement NEWLINE .)
    WHILE           reduce using rule 84 (statements_base -> statement NEWLINE .)
    UNTIL           reduce using rule 84 (statements_base -> statement NEWLINE .)
    LOOP            reduce using rule 84 (statements_base -> statement NEWLINE .)
    PLUS            reduce using rule 84 (statements_base -> statement NEWLINE .)
    MINUS           reduce using rule 84 (statements_base -> statement NEWLINE .)
    EXCLAMATION     reduce using rule 84 (statements_base -> statement NEWLINE .)
    TILDE           reduce using rule 84 (statements_base -> statement NEWLINE .)
    LPAREN          reduce using rule 84 (statements_base -> statement NEWLINE .)
    LBRACKET        reduce using rule 84 (statements_base -> statement NEWLINE .)
    INTNUMBER       reduce using rule 84 (statements_base -> statement NEWLINE .)
    FLOATNUMBER     reduce using rule 84 (statements_base -> statement NEWLINE .)
    CHAR            reduce using rule 84 (statements_base -> statement NEWLINE .)
    TRUE            reduce using rule 84 (statements_base -> statement NEWLINE .)
    FALSE           reduce using rule 84 (statements_base -> statement NEWLINE .)
    STRING          reduce using rule 84 (statements_base -> statement NEWLINE .)
    END             reduce using rule 84 (statements_base -> statement NEWLINE .)
    NEWLINE         reduce using rule 84 (statements_base -> statement NEWLINE .)
    SEMICOLON       reduce using rule 84 (statements_base -> statement NEWLINE .)
    ELSIF           reduce using rule 84 (statements_base -> statement NEWLINE .)
    ELSE            reduce using rule 84 (statements_base -> statement NEWLINE .)
    RBRACE          reduce using rule 84 (statements_base -> statement NEWLINE .)
    WHEN            reduce using rule 84 (statements_base -> statement NEWLINE .)


state 195

    (85) statements_base -> statement SEMICOLON .

    ID              reduce using rule 85 (statements_base -> statement SEMICOLON .)
    CASE            reduce using rule 85 (statements_base -> statement SEMICOLON .)
    RETURN          reduce using rule 85 (statements_base -> statement SEMICOLON .)
    BREAK           reduce using rule 85 (statements_base -> statement SEMICOLON .)
    NEXT            reduce using rule 85 (statements_base -> statement SEMICOLON .)
    UNDERSCORE      reduce using rule 85 (statements_base -> statement SEMICOLON .)
    ASTERISK        reduce using rule 85 (statements_base -> statement SEMICOLON .)
    IF              reduce using rule 85 (statements_base -> statement SEMICOLON .)
    UNLESS          reduce using rule 85 (statements_base -> statement SEMICOLON .)
    WHILE           reduce using rule 85 (statements_base -> statement SEMICOLON .)
    UNTIL           reduce using rule 85 (statements_base -> statement SEMICOLON .)
    LOOP            reduce using rule 85 (statements_base -> statement SEMICOLON .)
    PLUS            reduce using rule 85 (statements_base -> statement SEMICOLON .)
    MINUS           reduce using rule 85 (statements_base -> statement SEMICOLON .)
    EXCLAMATION     reduce using rule 85 (statements_base -> statement SEMICOLON .)
    TILDE           reduce using rule 85 (statements_base -> statement SEMICOLON .)
    LPAREN          reduce using rule 85 (statements_base -> statement SEMICOLON .)
    LBRACKET        reduce using rule 85 (statements_base -> statement SEMICOLON .)
    INTNUMBER       reduce using rule 85 (statements_base -> statement SEMICOLON .)
    FLOATNUMBER     reduce using rule 85 (statements_base -> statement SEMICOLON .)
    CHAR            reduce using rule 85 (statements_base -> statement SEMICOLON .)
    TRUE            reduce using rule 85 (statements_base -> statement SEMICOLON .)
    FALSE           reduce using rule 85 (statements_base -> statement SEMICOLON .)
    STRING          reduce using rule 85 (statements_base -> statement SEMICOLON .)
    END             reduce using rule 85 (statements_base -> statement SEMICOLON .)
    NEWLINE         reduce using rule 85 (statements_base -> statement SEMICOLON .)
    SEMICOLON       reduce using rule 85 (statements_base -> statement SEMICOLON .)
    ELSIF           reduce using rule 85 (statements_base -> statement SEMICOLON .)
    ELSE            reduce using rule 85 (statements_base -> statement SEMICOLON .)
    RBRACE          reduce using rule 85 (statements_base -> statement SEMICOLON .)
    WHEN            reduce using rule 85 (statements_base -> statement SEMICOLON .)


state 196

    (116) iterator -> expression DOT . MULTI statements
    (117) iterator -> expression DOT . EACH DO PIPE ID PIPE statements END
    (118) iterator -> expression DOT . EACH LBRACE PIPE ID PIPE RBRACE statements

    MULTI           shift and go to state 222
    EACH            shift and go to state 223


state 197

    (68) variable_declaration -> ID COLON . types ASSIGN expression
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 145
    CHAR            shift and go to state 146
    NIL             shift and go to state 147
    INT             shift and go to state 151
    INT8            shift and go to state 152
    INT16           shift and go to state 153
    INT32           shift and go to state 154
    INT64           shift and go to state 155
    INT128          shift and go to state 156
    UINT8           shift and go to state 157
    UINT16          shift and go to state 158
    UINT32          shift and go to state 159
    UINT64          shift and go to state 160
    UINT128         shift and go to state 161
    FLOAT           shift and go to state 162
    FLOAT32         shift and go to state 163
    FLOAT64         shift and go to state 164
    BOOL            shift and go to state 165

    types                          shift and go to state 224
    integer                        shift and go to state 148
    float                          shift and go to state 149
    boolean                        shift and go to state 150

state 198

    (69) variable_declaration -> ID ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 225
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 199

    (70) variable_declaration -> ID COMMA . list_of_identifiers ASSIGN expression COMMA list_of_values
    (71) list_of_identifiers -> . ID
    (72) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 226

    list_of_identifiers            shift and go to state 227

state 200

    (75) function_call -> ID LPAREN . expression_list RPAREN
    (76) function_call -> ID LPAREN . RPAREN
    (79) expression_list -> . expression
    (80) expression_list -> . expression_list COMMA expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    RPAREN          shift and go to state 229
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression_list                shift and go to state 228
    expression                     shift and go to state 81
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 201

    (119) case_structure -> CASE expression . when_list opt_else END
    (120) when_list -> . WHEN expression statements
    (121) when_list -> . when_list WHEN expression statements

    WHEN            shift and go to state 231

    when_list                      shift and go to state 230

state 202

    (122) return_statement -> RETURN opt_expression .

    NEWLINE         reduce using rule 122 (return_statement -> RETURN opt_expression .)
    SEMICOLON       reduce using rule 122 (return_statement -> RETURN opt_expression .)


state 203

    (125) opt_expression -> expression .

    NEWLINE         reduce using rule 125 (opt_expression -> expression .)
    SEMICOLON       reduce using rule 125 (opt_expression -> expression .)


state 204

    (126) opt_expression -> empty .

    NEWLINE         reduce using rule 126 (opt_expression -> empty .)
    SEMICOLON       reduce using rule 126 (opt_expression -> empty .)


state 205

    (123) break_statement -> BREAK opt_expression .

    NEWLINE         reduce using rule 123 (break_statement -> BREAK opt_expression .)
    SEMICOLON       reduce using rule 123 (break_statement -> BREAK opt_expression .)


state 206

    (124) next_statement -> NEXT opt_expression .

    NEWLINE         reduce using rule 124 (next_statement -> NEXT opt_expression .)
    SEMICOLON       reduce using rule 124 (next_statement -> NEXT opt_expression .)


state 207

    (98) if_statement -> IF if_condition . statements opt_elsif opt_else END
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    ELSIF           reduce using rule 175 (empty -> .)
    ELSE            reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 232
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 208

    (100) if_condition -> expression .
    (101) if_condition -> expression . LBRACE statements RBRACE

    ELSIF           reduce using rule 100 (if_condition -> expression .)
    ELSE            reduce using rule 100 (if_condition -> expression .)
    END             reduce using rule 100 (if_condition -> expression .)
    ID              reduce using rule 100 (if_condition -> expression .)
    CASE            reduce using rule 100 (if_condition -> expression .)
    RETURN          reduce using rule 100 (if_condition -> expression .)
    BREAK           reduce using rule 100 (if_condition -> expression .)
    NEXT            reduce using rule 100 (if_condition -> expression .)
    UNDERSCORE      reduce using rule 100 (if_condition -> expression .)
    ASTERISK        reduce using rule 100 (if_condition -> expression .)
    IF              reduce using rule 100 (if_condition -> expression .)
    UNLESS          reduce using rule 100 (if_condition -> expression .)
    WHILE           reduce using rule 100 (if_condition -> expression .)
    UNTIL           reduce using rule 100 (if_condition -> expression .)
    LOOP            reduce using rule 100 (if_condition -> expression .)
    PLUS            reduce using rule 100 (if_condition -> expression .)
    MINUS           reduce using rule 100 (if_condition -> expression .)
    EXCLAMATION     reduce using rule 100 (if_condition -> expression .)
    TILDE           reduce using rule 100 (if_condition -> expression .)
    LPAREN          reduce using rule 100 (if_condition -> expression .)
    LBRACKET        reduce using rule 100 (if_condition -> expression .)
    INTNUMBER       reduce using rule 100 (if_condition -> expression .)
    FLOATNUMBER     reduce using rule 100 (if_condition -> expression .)
    CHAR            reduce using rule 100 (if_condition -> expression .)
    TRUE            reduce using rule 100 (if_condition -> expression .)
    FALSE           reduce using rule 100 (if_condition -> expression .)
    STRING          reduce using rule 100 (if_condition -> expression .)
    LBRACE          shift and go to state 233


state 209

    (99) unless_statement -> UNLESS if_condition . statements opt_else END
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    ELSE            reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 234
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 210

    (113) while -> WHILE expression . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    NEWLINE         reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)

    statements                     shift and go to state 235
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 211

    (114) until -> UNTIL expression . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    NEWLINE         reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)

    statements                     shift and go to state 236
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 212

    (115) loop -> LOOP statements .

    NEWLINE         reduce using rule 115 (loop -> LOOP statements .)
    SEMICOLON       reduce using rule 115 (loop -> LOOP statements .)


state 213

    (34) argument -> ID COLON . types
    (36) argument -> ID COLON . types ASSIGN expression
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 145
    CHAR            shift and go to state 146
    NIL             shift and go to state 147
    INT             shift and go to state 151
    INT8            shift and go to state 152
    INT16           shift and go to state 153
    INT32           shift and go to state 154
    INT64           shift and go to state 155
    INT128          shift and go to state 156
    UINT8           shift and go to state 157
    UINT16          shift and go to state 158
    UINT32          shift and go to state 159
    UINT64          shift and go to state 160
    UINT128         shift and go to state 161
    FLOAT           shift and go to state 162
    FLOAT32         shift and go to state 163
    FLOAT64         shift and go to state 164
    BOOL            shift and go to state 165

    types                          shift and go to state 237
    integer                        shift and go to state 148
    float                          shift and go to state 149
    boolean                        shift and go to state 150

state 214

    (35) argument -> ID ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 238
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 215

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN . opt_return_type statements END
    (37) opt_return_type -> . COLON types
    (38) opt_return_type -> . empty
    (175) empty -> .

    COLON           shift and go to state 69
    END             reduce using rule 175 (empty -> .)
    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)

    opt_return_type                shift and go to state 239
    empty                          shift and go to state 70

state 216

    (32) argument_list -> argument COMMA . argument_list
    (31) argument_list -> . argument
    (32) argument_list -> . argument COMMA argument_list
    (33) argument -> . ID
    (34) argument -> . ID COLON types
    (35) argument -> . ID ASSIGN expression
    (36) argument -> . ID COLON types ASSIGN expression

    ID              shift and go to state 138

    argument                       shift and go to state 142
    argument_list                  shift and go to state 240

state 217

    (28) function -> DEF ID opt_return_type NEWLINE statements . END

    END             shift and go to state 241


state 218

    (135) assignment_target -> ID LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 135 (assignment_target -> ID LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 135 (assignment_target -> ID LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 135 (assignment_target -> ID LBRACKET expression RBRACKET .)
    MULTI_ASSIGN    reduce using rule 135 (assignment_target -> ID LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 135 (assignment_target -> ID LBRACKET expression RBRACKET .)


state 219

    (80) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 80 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 80 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 80 (expression_list -> expression_list COMMA expression .)


state 220

    (138) ternary_expression -> range_expression QMARK expression TCOLON . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    range_expression               shift and go to state 40
    expression                     shift and go to state 242
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 221

    (67) string_literal -> STRING INTERP_START expression INTERP_END . string_literal
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    STRING          shift and go to state 63

    string_literal                 shift and go to state 243

state 222

    (116) iterator -> expression DOT MULTI . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    NEWLINE         reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)

    statements                     shift and go to state 244
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 223

    (117) iterator -> expression DOT EACH . DO PIPE ID PIPE statements END
    (118) iterator -> expression DOT EACH . LBRACE PIPE ID PIPE RBRACE statements

    DO              shift and go to state 245
    LBRACE          shift and go to state 246


state 224

    (68) variable_declaration -> ID COLON types . ASSIGN expression

    ASSIGN          shift and go to state 247


state 225

    (69) variable_declaration -> ID ASSIGN expression .

    NEWLINE         reduce using rule 69 (variable_declaration -> ID ASSIGN expression .)
    SEMICOLON       reduce using rule 69 (variable_declaration -> ID ASSIGN expression .)


state 226

    (71) list_of_identifiers -> ID .
    (72) list_of_identifiers -> ID . COMMA list_of_identifiers

    ASSIGN          reduce using rule 71 (list_of_identifiers -> ID .)
    COMMA           shift and go to state 248


state 227

    (70) variable_declaration -> ID COMMA list_of_identifiers . ASSIGN expression COMMA list_of_values

    ASSIGN          shift and go to state 249


state 228

    (75) function_call -> ID LPAREN expression_list . RPAREN
    (80) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 250
    COMMA           shift and go to state 173


state 229

    (76) function_call -> ID LPAREN RPAREN .

    NEWLINE         reduce using rule 76 (function_call -> ID LPAREN RPAREN .)
    SEMICOLON       reduce using rule 76 (function_call -> ID LPAREN RPAREN .)


state 230

    (119) case_structure -> CASE expression when_list . opt_else END
    (121) when_list -> when_list . WHEN expression statements
    (107) opt_else -> . ELSE statements
    (108) opt_else -> . empty
    (175) empty -> .

    WHEN            shift and go to state 252
    ELSE            shift and go to state 253
    END             reduce using rule 175 (empty -> .)

    opt_else                       shift and go to state 251
    empty                          shift and go to state 254

state 231

    (120) when_list -> WHEN . expression statements
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 255
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 232

    (98) if_statement -> IF if_condition statements . opt_elsif opt_else END
    (102) opt_elsif -> . elsif_list
    (103) opt_elsif -> . empty
    (104) elsif_list -> . elsif_list elsif
    (105) elsif_list -> . elsif
    (175) empty -> .
    (106) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)
    ELSIF           shift and go to state 260

    opt_elsif                      shift and go to state 256
    elsif_list                     shift and go to state 257
    empty                          shift and go to state 258
    elsif                          shift and go to state 259

state 233

    (101) if_condition -> expression LBRACE . statements RBRACE
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    RBRACE          reduce using rule 175 (empty -> .)

    statements                     shift and go to state 261
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 234

    (99) unless_statement -> UNLESS if_condition statements . opt_else END
    (107) opt_else -> . ELSE statements
    (108) opt_else -> . empty
    (175) empty -> .

    ELSE            shift and go to state 253
    END             reduce using rule 175 (empty -> .)

    opt_else                       shift and go to state 262
    empty                          shift and go to state 254

state 235

    (113) while -> WHILE expression statements .

    NEWLINE         reduce using rule 113 (while -> WHILE expression statements .)
    SEMICOLON       reduce using rule 113 (while -> WHILE expression statements .)


state 236

    (114) until -> UNTIL expression statements .

    NEWLINE         reduce using rule 114 (until -> UNTIL expression statements .)
    SEMICOLON       reduce using rule 114 (until -> UNTIL expression statements .)


state 237

    (34) argument -> ID COLON types .
    (36) argument -> ID COLON types . ASSIGN expression

    COMMA           reduce using rule 34 (argument -> ID COLON types .)
    RPAREN          reduce using rule 34 (argument -> ID COLON types .)
    ASSIGN          shift and go to state 263


state 238

    (35) argument -> ID ASSIGN expression .

    COMMA           reduce using rule 35 (argument -> ID ASSIGN expression .)
    RPAREN          reduce using rule 35 (argument -> ID ASSIGN expression .)


state 239

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type . statements END
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 264
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 240

    (32) argument_list -> argument COMMA argument_list .

    RPAREN          reduce using rule 32 (argument_list -> argument COMMA argument_list .)


state 241

    (28) function -> DEF ID opt_return_type NEWLINE statements END .

    DEF             reduce using rule 28 (function -> DEF ID opt_return_type NEWLINE statements END .)
    $end            reduce using rule 28 (function -> DEF ID opt_return_type NEWLINE statements END .)


state 242

    (138) ternary_expression -> range_expression QMARK expression TCOLON expression .

    CONSTANT        reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    MODULE          reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    DEF             reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    $end            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    COMMA           reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RBRACKET        reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RPAREN          reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    DOT             reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    NEWLINE         reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    SEMICOLON       reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TCOLON          reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    INTERP_END      reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    WHEN            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LBRACE          reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ELSIF           reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ELSE            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    END             reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ID              reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CASE            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RETURN          reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    BREAK           reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    NEXT            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNDERSCORE      reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ASTERISK        reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    IF              reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNLESS          reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    WHILE           reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNTIL           reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LOOP            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    PLUS            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    MINUS           reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    EXCLAMATION     reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TILDE           reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LPAREN          reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LBRACKET        reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    INTNUMBER       reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    FLOATNUMBER     reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CHAR            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TRUE            reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    FALSE           reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    STRING          reduce using rule 138 (ternary_expression -> range_expression QMARK expression TCOLON expression .)


state 243

    (67) string_literal -> STRING INTERP_START expression INTERP_END string_literal .

    POTENCIACAO     reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MULTI           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DIVIDE          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MODULO          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    PLUS            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MINUS           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    GREATER_THAN    reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LESS_THAN       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    GREATER_EQUAL   reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LESS_EQUAL      reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    EQUAL           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NOT_EQUAL       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TIPO_EQUAL      reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    AND             reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOTDOT          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOTDOTDOT       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    OR              reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    QMARK           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CONSTANT        reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MODULE          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DEF             reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    $end            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    COMMA           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RBRACKET        reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RPAREN          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOT             reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NEWLINE         reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    SEMICOLON       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TCOLON          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    INTERP_END      reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    WHEN            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LBRACE          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ELSIF           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ELSE            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    END             reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ID              reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CASE            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RETURN          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    BREAK           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NEXT            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNDERSCORE      reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ASTERISK        reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    IF              reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNLESS          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    WHILE           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNTIL           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LOOP            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    EXCLAMATION     reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TILDE           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LPAREN          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LBRACKET        reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    INTNUMBER       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    FLOATNUMBER     reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CHAR            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TRUE            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    FALSE           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    STRING          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)


state 244

    (116) iterator -> expression DOT MULTI statements .

    NEWLINE         reduce using rule 116 (iterator -> expression DOT MULTI statements .)
    SEMICOLON       reduce using rule 116 (iterator -> expression DOT MULTI statements .)


state 245

    (117) iterator -> expression DOT EACH DO . PIPE ID PIPE statements END

    PIPE            shift and go to state 265


state 246

    (118) iterator -> expression DOT EACH LBRACE . PIPE ID PIPE RBRACE statements

    PIPE            shift and go to state 266


state 247

    (68) variable_declaration -> ID COLON types ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 267
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 248

    (72) list_of_identifiers -> ID COMMA . list_of_identifiers
    (71) list_of_identifiers -> . ID
    (72) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 226

    list_of_identifiers            shift and go to state 268

state 249

    (70) variable_declaration -> ID COMMA list_of_identifiers ASSIGN . expression COMMA list_of_values
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 269
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 250

    (75) function_call -> ID LPAREN expression_list RPAREN .

    NEWLINE         reduce using rule 75 (function_call -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 75 (function_call -> ID LPAREN expression_list RPAREN .)


state 251

    (119) case_structure -> CASE expression when_list opt_else . END

    END             shift and go to state 270


state 252

    (121) when_list -> when_list WHEN . expression statements
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 271
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 253

    (107) opt_else -> ELSE . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 272
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 254

    (108) opt_else -> empty .

    END             reduce using rule 108 (opt_else -> empty .)


state 255

    (120) when_list -> WHEN expression . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    WHEN            reduce using rule 175 (empty -> .)
    ELSE            reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 273
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 256

    (98) if_statement -> IF if_condition statements opt_elsif . opt_else END
    (107) opt_else -> . ELSE statements
    (108) opt_else -> . empty
    (175) empty -> .

    ELSE            shift and go to state 253
    END             reduce using rule 175 (empty -> .)

    opt_else                       shift and go to state 274
    empty                          shift and go to state 254

state 257

    (102) opt_elsif -> elsif_list .
    (104) elsif_list -> elsif_list . elsif
    (106) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 102 (opt_elsif -> elsif_list .)
    END             reduce using rule 102 (opt_elsif -> elsif_list .)
    ELSIF           shift and go to state 260

    elsif                          shift and go to state 275

state 258

    (103) opt_elsif -> empty .

    ELSE            reduce using rule 103 (opt_elsif -> empty .)
    END             reduce using rule 103 (opt_elsif -> empty .)


state 259

    (105) elsif_list -> elsif .

    ELSIF           reduce using rule 105 (elsif_list -> elsif .)
    ELSE            reduce using rule 105 (elsif_list -> elsif .)
    END             reduce using rule 105 (elsif_list -> elsif .)


state 260

    (106) elsif -> ELSIF . if_condition statements
    (100) if_condition -> . expression
    (101) if_condition -> . expression LBRACE statements RBRACE
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    if_condition                   shift and go to state 276
    expression                     shift and go to state 208
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 261

    (101) if_condition -> expression LBRACE statements . RBRACE

    RBRACE          shift and go to state 277


state 262

    (99) unless_statement -> UNLESS if_condition statements opt_else . END

    END             shift and go to state 278


state 263

    (36) argument -> ID COLON types ASSIGN . expression
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 279
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 264

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements . END

    END             shift and go to state 280


state 265

    (117) iterator -> expression DOT EACH DO PIPE . ID PIPE statements END

    ID              shift and go to state 281


state 266

    (118) iterator -> expression DOT EACH LBRACE PIPE . ID PIPE RBRACE statements

    ID              shift and go to state 282


state 267

    (68) variable_declaration -> ID COLON types ASSIGN expression .

    NEWLINE         reduce using rule 68 (variable_declaration -> ID COLON types ASSIGN expression .)
    SEMICOLON       reduce using rule 68 (variable_declaration -> ID COLON types ASSIGN expression .)


state 268

    (72) list_of_identifiers -> ID COMMA list_of_identifiers .

    ASSIGN          reduce using rule 72 (list_of_identifiers -> ID COMMA list_of_identifiers .)


state 269

    (70) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression . COMMA list_of_values

    COMMA           shift and go to state 283


state 270

    (119) case_structure -> CASE expression when_list opt_else END .

    NEWLINE         reduce using rule 119 (case_structure -> CASE expression when_list opt_else END .)
    SEMICOLON       reduce using rule 119 (case_structure -> CASE expression when_list opt_else END .)


state 271

    (121) when_list -> when_list WHEN expression . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    WHEN            reduce using rule 175 (empty -> .)
    ELSE            reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 284
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 272

    (107) opt_else -> ELSE statements .

    END             reduce using rule 107 (opt_else -> ELSE statements .)


state 273

    (120) when_list -> WHEN expression statements .

    WHEN            reduce using rule 120 (when_list -> WHEN expression statements .)
    ELSE            reduce using rule 120 (when_list -> WHEN expression statements .)
    END             reduce using rule 120 (when_list -> WHEN expression statements .)


state 274

    (98) if_statement -> IF if_condition statements opt_elsif opt_else . END

    END             shift and go to state 285


state 275

    (104) elsif_list -> elsif_list elsif .

    ELSIF           reduce using rule 104 (elsif_list -> elsif_list elsif .)
    ELSE            reduce using rule 104 (elsif_list -> elsif_list elsif .)
    END             reduce using rule 104 (elsif_list -> elsif_list elsif .)


state 276

    (106) elsif -> ELSIF if_condition . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    ELSIF           reduce using rule 175 (empty -> .)
    ELSE            reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 286
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 277

    (101) if_condition -> expression LBRACE statements RBRACE .

    ELSIF           reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    ELSE            reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    END             reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    ID              reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    CASE            reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    RETURN          reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    BREAK           reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    NEXT            reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    UNDERSCORE      reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    ASTERISK        reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    IF              reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    UNLESS          reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    WHILE           reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    UNTIL           reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    LOOP            reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    PLUS            reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    MINUS           reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    EXCLAMATION     reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    TILDE           reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    LPAREN          reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    INTNUMBER       reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    FLOATNUMBER     reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    CHAR            reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    TRUE            reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    FALSE           reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)
    STRING          reduce using rule 101 (if_condition -> expression LBRACE statements RBRACE .)


state 278

    (99) unless_statement -> UNLESS if_condition statements opt_else END .

    NEWLINE         reduce using rule 99 (unless_statement -> UNLESS if_condition statements opt_else END .)
    SEMICOLON       reduce using rule 99 (unless_statement -> UNLESS if_condition statements opt_else END .)


state 279

    (36) argument -> ID COLON types ASSIGN expression .

    COMMA           reduce using rule 36 (argument -> ID COLON types ASSIGN expression .)
    RPAREN          reduce using rule 36 (argument -> ID COLON types ASSIGN expression .)


state 280

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .

    DEF             reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)
    $end            reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)


state 281

    (117) iterator -> expression DOT EACH DO PIPE ID . PIPE statements END

    PIPE            shift and go to state 287


state 282

    (118) iterator -> expression DOT EACH LBRACE PIPE ID . PIPE RBRACE statements

    PIPE            shift and go to state 288


state 283

    (70) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA . list_of_values
    (73) list_of_values -> . expression
    (74) list_of_values -> . expression COMMA list_of_values
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 289
    list_of_values                 shift and go to state 290
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 284

    (121) when_list -> when_list WHEN expression statements .

    WHEN            reduce using rule 121 (when_list -> when_list WHEN expression statements .)
    ELSE            reduce using rule 121 (when_list -> when_list WHEN expression statements .)
    END             reduce using rule 121 (when_list -> when_list WHEN expression statements .)


state 285

    (98) if_statement -> IF if_condition statements opt_elsif opt_else END .

    NEWLINE         reduce using rule 98 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    SEMICOLON       reduce using rule 98 (if_statement -> IF if_condition statements opt_elsif opt_else END .)


state 286

    (106) elsif -> ELSIF if_condition statements .

    ELSIF           reduce using rule 106 (elsif -> ELSIF if_condition statements .)
    ELSE            reduce using rule 106 (elsif -> ELSIF if_condition statements .)
    END             reduce using rule 106 (elsif -> ELSIF if_condition statements .)


state 287

    (117) iterator -> expression DOT EACH DO PIPE ID PIPE . statements END
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    END             reduce using rule 175 (empty -> .)

    statements                     shift and go to state 291
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 288

    (118) iterator -> expression DOT EACH LBRACE PIPE ID PIPE . RBRACE statements

    RBRACE          shift and go to state 292


state 289

    (73) list_of_values -> expression .
    (74) list_of_values -> expression . COMMA list_of_values

    NEWLINE         reduce using rule 73 (list_of_values -> expression .)
    SEMICOLON       reduce using rule 73 (list_of_values -> expression .)
    COMMA           shift and go to state 293


state 290

    (70) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .

    NEWLINE         reduce using rule 70 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    SEMICOLON       reduce using rule 70 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)


state 291

    (117) iterator -> expression DOT EACH DO PIPE ID PIPE statements . END

    END             shift and go to state 294


state 292

    (118) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE . statements
    (81) statements -> . statements_list
    (82) statements_list -> . statements_list statements_base
    (83) statements_list -> . empty
    (175) empty -> .

    ID              reduce using rule 175 (empty -> .)
    CASE            reduce using rule 175 (empty -> .)
    RETURN          reduce using rule 175 (empty -> .)
    BREAK           reduce using rule 175 (empty -> .)
    NEXT            reduce using rule 175 (empty -> .)
    UNDERSCORE      reduce using rule 175 (empty -> .)
    ASTERISK        reduce using rule 175 (empty -> .)
    IF              reduce using rule 175 (empty -> .)
    UNLESS          reduce using rule 175 (empty -> .)
    WHILE           reduce using rule 175 (empty -> .)
    UNTIL           reduce using rule 175 (empty -> .)
    LOOP            reduce using rule 175 (empty -> .)
    PLUS            reduce using rule 175 (empty -> .)
    MINUS           reduce using rule 175 (empty -> .)
    EXCLAMATION     reduce using rule 175 (empty -> .)
    TILDE           reduce using rule 175 (empty -> .)
    LPAREN          reduce using rule 175 (empty -> .)
    LBRACKET        reduce using rule 175 (empty -> .)
    INTNUMBER       reduce using rule 175 (empty -> .)
    FLOATNUMBER     reduce using rule 175 (empty -> .)
    CHAR            reduce using rule 175 (empty -> .)
    TRUE            reduce using rule 175 (empty -> .)
    FALSE           reduce using rule 175 (empty -> .)
    STRING          reduce using rule 175 (empty -> .)
    NEWLINE         reduce using rule 175 (empty -> .)
    SEMICOLON       reduce using rule 175 (empty -> .)

    statements                     shift and go to state 295
    statements_list                shift and go to state 65
    empty                          shift and go to state 66

state 293

    (74) list_of_values -> expression COMMA . list_of_values
    (73) list_of_values -> . expression
    (74) list_of_values -> . expression COMMA list_of_values
    (127) expression -> . assignment_expression
    (128) assignment_expression -> . assignment_target ASSIGN expression
    (129) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (130) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (131) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (132) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (133) assignment_expression -> . ternary_expression
    (134) assignment_target -> . ID
    (135) assignment_target -> . ID LBRACKET expression RBRACKET
    (136) assignment_target -> . UNDERSCORE
    (137) assignment_target -> . ASTERISK assignment_target
    (138) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (139) ternary_expression -> . range_expression
    (140) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (141) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (142) range_expression -> . logical_or_expression
    (143) logical_or_expression -> . logical_and_expression
    (144) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (145) logical_and_expression -> . equality_expression
    (146) logical_and_expression -> . logical_and_expression AND equality_expression
    (147) equality_expression -> . relational_expression
    (148) equality_expression -> . equality_expression EQUAL relational_expression
    (149) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (150) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (151) relational_expression -> . additive_expression
    (152) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (153) relational_expression -> . relational_expression LESS_THAN additive_expression
    (154) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (155) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (156) additive_expression -> . multiplicative_expression
    (157) additive_expression -> . additive_expression PLUS multiplicative_expression
    (158) additive_expression -> . additive_expression MINUS multiplicative_expression
    (159) multiplicative_expression -> . potenciacao_expression
    (160) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (161) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (162) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (163) potenciacao_expression -> . unary_expression
    (164) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (165) unary_expression -> . PLUS unary_expression
    (166) unary_expression -> . MINUS unary_expression
    (167) unary_expression -> . EXCLAMATION unary_expression
    (168) unary_expression -> . TILDE unary_expression
    (169) unary_expression -> . primary_expression
    (170) primary_expression -> . LPAREN expression RPAREN
    (171) primary_expression -> . array_literal
    (172) primary_expression -> . literal
    (173) primary_expression -> . ID
    (174) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 289
    list_of_values                 shift and go to state 296
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 294

    (117) iterator -> expression DOT EACH DO PIPE ID PIPE statements END .

    NEWLINE         reduce using rule 117 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    SEMICOLON       reduce using rule 117 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)


state 295

    (118) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .

    NEWLINE         reduce using rule 118 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    SEMICOLON       reduce using rule 118 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)


state 296

    (74) list_of_values -> expression COMMA list_of_values .

    NEWLINE         reduce using rule 74 (list_of_values -> expression COMMA list_of_values .)
    SEMICOLON       reduce using rule 74 (list_of_values -> expression COMMA list_of_values .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 45 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 45 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 122 resolved as shift
