Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASSOCIACAO
    AT
    BEGIN
    BINNUMBER
    CLASS
    CLASSVAR
    CLASS_VAR
    DEFINE_BLOCO
    DOLAR_SIGN
    ENUM
    GLOBALVAR
    HEXNUMBER
    IN
    INCLUDE
    INSTANCEVAR
    INSTANCE_VAR
    LITERAL
    MACRO
    MODULO_ASSIGN
    NOT
    OCTNUMBER
    OF
    OR_ASSIGN
    OUT
    PASSA_ARGUMENTO
    POTENCIACAO_ASSIGN
    PRIVATE
    PROTECTED
    SAFE_CALL
    SCOPE
    SELECT
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SIZEOF
    STRUCT
    SYMBOL
    THEN
    TYPE
    TYPEOF
    UNINITIALIZED
    UNION
    VAR_GLOBAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> require_list constant_list module_list function_list
Rule 2     program -> require_list constant_list module_list
Rule 3     program -> require_list constant_list function_list
Rule 4     program -> require_list module_list function_list
Rule 5     program -> constant_list module_list function_list
Rule 6     program -> require_list constant_list
Rule 7     program -> require_list module_list
Rule 8     program -> constant_list module_list
Rule 9     program -> require_list function_list
Rule 10    program -> constant_list function_list
Rule 11    program -> module_list function_list
Rule 12    program -> require_list
Rule 13    program -> constant_list
Rule 14    program -> module_list
Rule 15    program -> function_list
Rule 16    require_list -> require require_list
Rule 17    require_list -> require
Rule 18    require -> REQUIRE STRING
Rule 19    constant_list -> constant constant_list
Rule 20    constant_list -> constant
Rule 21    constant -> CONSTANT ASSIGN expression
Rule 22    module_list -> module module_list
Rule 23    module_list -> module
Rule 24    module -> MODULE ID statements END
Rule 25    function_list -> function
Rule 26    function_list -> function function_list
Rule 27    function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
Rule 28    function -> DEF ID opt_return_type NEWLINE statements END
Rule 29    opt_argument_list -> argument_list
Rule 30    opt_argument_list -> empty
Rule 31    argument_list -> argument
Rule 32    argument_list -> argument COMMA argument_list
Rule 33    argument -> ID
Rule 34    argument -> ID COLON types
Rule 35    argument -> ID ASSIGN expression
Rule 36    argument -> ID COLON types ASSIGN expression
Rule 37    opt_return_type -> COLON types
Rule 38    opt_return_type -> empty
Rule 39    types -> STRING
Rule 40    types -> CHAR
Rule 41    types -> NIL
Rule 42    types -> integer
Rule 43    types -> float
Rule 44    types -> boolean
Rule 45    integer -> INT
Rule 46    integer -> INT8
Rule 47    integer -> INT16
Rule 48    integer -> INT32
Rule 49    integer -> INT64
Rule 50    integer -> INT128
Rule 51    integer -> UINT8
Rule 52    integer -> UINT16
Rule 53    integer -> UINT32
Rule 54    integer -> UINT64
Rule 55    integer -> UINT128
Rule 56    float -> FLOAT
Rule 57    float -> FLOAT32
Rule 58    float -> FLOAT64
Rule 59    boolean -> BOOL
Rule 60    literal -> INTNUMBER
Rule 61    literal -> FLOATNUMBER
Rule 62    literal -> string_literal
Rule 63    literal -> CHAR
Rule 64    literal -> TRUE
Rule 65    literal -> FALSE
Rule 66    string_literal -> STRING
Rule 67    string_literal -> STRING INTERP_START expression INTERP_END string_literal
Rule 68    variable_declaration -> ID COLON types ASSIGN expression
Rule 69    variable_declaration -> ID ASSIGN expression
Rule 70    variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
Rule 71    list_of_identifiers -> ID
Rule 72    list_of_identifiers -> ID COMMA list_of_identifiers
Rule 73    list_of_values -> expression
Rule 74    list_of_values -> expression COMMA list_of_values
Rule 75    function_call -> ID LPAREN expression_list RPAREN
Rule 76    function_call -> ID LPAREN RPAREN
Rule 77    opt_expression_list -> expression_list
Rule 78    opt_expression_list -> empty
Rule 79    expression_list -> expression
Rule 80    expression_list -> expression_list COMMA expression
Rule 81    statements -> statement
Rule 82    statements -> statement NEWLINE statements
Rule 83    statement -> expression
Rule 84    statement -> control_structure
Rule 85    statement -> variable_declaration
Rule 86    statement -> function_call
Rule 87    control_structure -> conditional
Rule 88    control_structure -> loop_structure
Rule 89    control_structure -> case_structure
Rule 90    control_structure -> return_statement
Rule 91    control_structure -> break_statement
Rule 92    control_structure -> next_statement
Rule 93    conditional -> if_statement
Rule 94    conditional -> unless_statement
Rule 95    if_statement -> IF if_condition statements opt_elsif opt_else END
Rule 96    unless_statement -> UNLESS if_condition statements opt_else END
Rule 97    if_condition -> expression
Rule 98    if_condition -> expression LBRACE statements RBRACE
Rule 99    opt_elsif -> elsif_list
Rule 100   opt_elsif -> empty
Rule 101   elsif_list -> elsif_list elsif
Rule 102   elsif_list -> elsif
Rule 103   elsif -> ELSIF if_condition statements
Rule 104   opt_else -> ELSE statements
Rule 105   opt_else -> empty
Rule 106   loop_structure -> while
Rule 107   loop_structure -> until
Rule 108   loop_structure -> loop
Rule 109   loop_structure -> iterator
Rule 110   while -> WHILE expression statements
Rule 111   until -> UNTIL expression statements
Rule 112   loop -> LOOP statements
Rule 113   iterator -> expression DOT MULTI statements
Rule 114   iterator -> expression DOT EACH DO PIPE ID PIPE statements END
Rule 115   iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
Rule 116   case_structure -> CASE expression when_list opt_else END
Rule 117   when_list -> WHEN expression statements
Rule 118   when_list -> when_list WHEN expression statements
Rule 119   return_statement -> RETURN opt_expression
Rule 120   break_statement -> BREAK opt_expression
Rule 121   next_statement -> NEXT opt_expression
Rule 122   opt_expression -> expression
Rule 123   opt_expression -> empty
Rule 124   expression -> assignment_expression
Rule 125   assignment_expression -> assignment_target ASSIGN expression
Rule 126   assignment_expression -> assignment_target PLUS_ASSIGN expression
Rule 127   assignment_expression -> assignment_target MINUS_ASSIGN expression
Rule 128   assignment_expression -> assignment_target MULTI_ASSIGN expression
Rule 129   assignment_expression -> assignment_target DIVIDE_ASSIGN expression
Rule 130   assignment_expression -> ternary_expression
Rule 131   assignment_target -> ID LBRACKET expression RBRACKET
Rule 132   assignment_target -> UNDERSCORE
Rule 133   assignment_target -> ASTERISK assignment_target
Rule 134   ternary_expression -> range_expression QMARK expression TCOLON expression
Rule 135   ternary_expression -> range_expression
Rule 136   range_expression -> logical_or_expression DOTDOT logical_or_expression
Rule 137   range_expression -> logical_or_expression DOTDOTDOT logical_or_expression
Rule 138   range_expression -> logical_or_expression
Rule 139   logical_or_expression -> logical_and_expression
Rule 140   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 141   logical_and_expression -> equality_expression
Rule 142   logical_and_expression -> logical_and_expression AND equality_expression
Rule 143   equality_expression -> relational_expression
Rule 144   equality_expression -> equality_expression EQUAL relational_expression
Rule 145   equality_expression -> equality_expression NOT_EQUAL relational_expression
Rule 146   equality_expression -> equality_expression TIPO_EQUAL relational_expression
Rule 147   relational_expression -> additive_expression
Rule 148   relational_expression -> relational_expression GREATER_THAN additive_expression
Rule 149   relational_expression -> relational_expression LESS_THAN additive_expression
Rule 150   relational_expression -> relational_expression GREATER_EQUAL additive_expression
Rule 151   relational_expression -> relational_expression LESS_EQUAL additive_expression
Rule 152   additive_expression -> multiplicative_expression
Rule 153   additive_expression -> multiplicative_expression PLUS additive_expression
Rule 154   additive_expression -> multiplicative_expression MINUS additive_expression
Rule 155   multiplicative_expression -> potenciacao_expression
Rule 156   multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression
Rule 157   multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression
Rule 158   multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression
Rule 159   potenciacao_expression -> unary_expression
Rule 160   potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression
Rule 161   unary_expression -> PLUS unary_expression
Rule 162   unary_expression -> MINUS unary_expression
Rule 163   unary_expression -> EXCLAMATION unary_expression
Rule 164   unary_expression -> TILDE unary_expression
Rule 165   unary_expression -> primary_expression
Rule 166   primary_expression -> LPAREN expression RPAREN
Rule 167   primary_expression -> array_literal
Rule 168   primary_expression -> literal
Rule 169   primary_expression -> ID
Rule 170   array_literal -> LBRACKET opt_expression_list RBRACKET
Rule 171   empty -> <empty>

Terminals, with rules where they appear

AND                  : 142
AS                   : 
ASSIGN               : 21 35 36 68 69 70 125
ASSOCIACAO           : 
ASTERISK             : 133
AT                   : 
BEGIN                : 
BINNUMBER            : 
BOOL                 : 59
BREAK                : 120
CASE                 : 116
CHAR                 : 40 63
CLASS                : 
CLASSVAR             : 
CLASS_VAR            : 
COLON                : 34 36 37 68
COMMA                : 32 70 70 72 74 80
CONSTANT             : 21
DEF                  : 27 28
DEFINE_BLOCO         : 
DIVIDE               : 157
DIVIDE_ASSIGN        : 129
DO                   : 114
DOLAR_SIGN           : 
DOT                  : 113 114 115
DOTDOT               : 136
DOTDOTDOT            : 137
EACH                 : 114 115
ELSE                 : 104
ELSIF                : 103
END                  : 24 27 28 95 96 114 116
ENUM                 : 
EQUAL                : 144
EXCLAMATION          : 163
FALSE                : 65
FLOAT                : 56
FLOAT32              : 57
FLOAT64              : 58
FLOATNUMBER          : 61
GLOBALVAR            : 
GREATER_EQUAL        : 150
GREATER_THAN         : 148
HEXNUMBER            : 
ID                   : 24 27 28 33 34 35 36 68 69 70 71 72 75 76 114 115 131 169
IF                   : 95
IN                   : 
INCLUDE              : 
INSTANCEVAR          : 
INSTANCE_VAR         : 
INT                  : 45
INT128               : 50
INT16                : 47
INT32                : 48
INT64                : 49
INT8                 : 46
INTERP_END           : 67
INTERP_START         : 67
INTNUMBER            : 60
LBRACE               : 98 115
LBRACKET             : 131 170
LESS_EQUAL           : 151
LESS_THAN            : 149
LITERAL              : 
LOOP                 : 112
LPAREN               : 27 75 76 166
MACRO                : 
MINUS                : 154 162
MINUS_ASSIGN         : 127
MODULE               : 24
MODULO               : 158
MODULO_ASSIGN        : 
MULTI                : 113 156
MULTI_ASSIGN         : 128
NEWLINE              : 28 82
NEXT                 : 121
NIL                  : 41
NOT                  : 
NOT_EQUAL            : 145
OCTNUMBER            : 
OF                   : 
OR                   : 140
OR_ASSIGN            : 
OUT                  : 
PASSA_ARGUMENTO      : 
PIPE                 : 114 114 115 115
PLUS                 : 153 161
PLUS_ASSIGN          : 126
POTENCIACAO          : 160
POTENCIACAO_ASSIGN   : 
PRIVATE              : 
PROTECTED            : 
QMARK                : 134
RBRACE               : 98 115
RBRACKET             : 131 170
REQUIRE              : 18
RETURN               : 119
RPAREN               : 27 75 76 166
SAFE_CALL            : 
SCOPE                : 
SELECT               : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SIZEOF               : 
STRING               : 18 39 66 67
STRUCT               : 
SYMBOL               : 
TCOLON               : 134
THEN                 : 
TILDE                : 164
TIPO_EQUAL           : 146
TRUE                 : 64
TYPE                 : 
TYPEOF               : 
UINT128              : 55
UINT16               : 52
UINT32               : 53
UINT64               : 54
UINT8                : 51
UNDERSCORE           : 132
UNINITIALIZED        : 
UNION                : 
UNLESS               : 96
UNTIL                : 111
VAR_GLOBAL           : 
WHEN                 : 117 118
WHILE                : 110
YIELD                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 147 148 149 150 151 153 154
argument             : 31 32
argument_list        : 29 32
array_literal        : 167
assignment_expression : 124
assignment_target    : 125 126 127 128 129 133
boolean              : 44
break_statement      : 91
case_structure       : 89
conditional          : 87
constant             : 19 20
constant_list        : 1 2 3 5 6 8 10 13 19
control_structure    : 84
elsif                : 101 102
elsif_list           : 99 101
empty                : 30 38 78 100 105 123
equality_expression  : 141 142 144 145 146
expression           : 21 35 36 67 68 69 70 73 74 79 80 83 97 98 110 111 113 114 115 116 117 118 122 125 126 127 128 129 131 134 134 166
expression_list      : 75 77 80
float                : 43
function             : 25 26
function_call        : 86
function_list        : 1 3 4 5 9 10 11 15 26
if_condition         : 95 96 103
if_statement         : 93
integer              : 42
iterator             : 109
list_of_identifiers  : 70 72
list_of_values       : 70 74
literal              : 168
logical_and_expression : 139 140 142
logical_or_expression : 136 136 137 137 138 140
loop                 : 108
loop_structure       : 88
module               : 22 23
module_list          : 1 2 4 5 7 8 11 14 22
multiplicative_expression : 152 153 154 156 157 158
next_statement       : 92
opt_argument_list    : 27
opt_else             : 95 96 116
opt_elsif            : 95
opt_expression       : 119 120 121
opt_expression_list  : 170
opt_return_type      : 27 28
potenciacao_expression : 155 156 157 158 160
primary_expression   : 165
program              : 0
range_expression     : 134 135
relational_expression : 143 144 145 146 148 149 150 151
require              : 16 17
require_list         : 1 2 3 4 6 7 9 12 16
return_statement     : 90
statement            : 81 82
statements           : 24 27 28 82 95 96 98 103 104 110 111 112 113 114 115 117 118
string_literal       : 62 67
ternary_expression   : 130
types                : 34 36 37 68
unary_expression     : 159 160 161 162 163 164
unless_statement     : 94
until                : 107
variable_declaration : 85
when_list            : 116 118
while                : 106

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . require_list constant_list module_list function_list
    (2) program -> . require_list constant_list module_list
    (3) program -> . require_list constant_list function_list
    (4) program -> . require_list module_list function_list
    (5) program -> . constant_list module_list function_list
    (6) program -> . require_list constant_list
    (7) program -> . require_list module_list
    (8) program -> . constant_list module_list
    (9) program -> . require_list function_list
    (10) program -> . constant_list function_list
    (11) program -> . module_list function_list
    (12) program -> . require_list
    (13) program -> . constant_list
    (14) program -> . module_list
    (15) program -> . function_list
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (18) require -> . REQUIRE STRING
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    REQUIRE         shift and go to state 10
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    program                        shift and go to state 1
    require_list                   shift and go to state 2
    constant_list                  shift and go to state 3
    module_list                    shift and go to state 4
    function_list                  shift and go to state 5
    require                        shift and go to state 6
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> require_list . constant_list module_list function_list
    (2) program -> require_list . constant_list module_list
    (3) program -> require_list . constant_list function_list
    (4) program -> require_list . module_list function_list
    (6) program -> require_list . constant_list
    (7) program -> require_list . module_list
    (9) program -> require_list . function_list
    (12) program -> require_list .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 12 (program -> require_list .)
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    constant_list                  shift and go to state 14
    module_list                    shift and go to state 15
    function_list                  shift and go to state 16
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 3

    (5) program -> constant_list . module_list function_list
    (8) program -> constant_list . module_list
    (10) program -> constant_list . function_list
    (13) program -> constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 13 (program -> constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 17
    function_list                  shift and go to state 18
    module                         shift and go to state 8
    function                       shift and go to state 9

state 4

    (11) program -> module_list . function_list
    (14) program -> module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 14 (program -> module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 19
    function                       shift and go to state 9

state 5

    (15) program -> function_list .

    $end            reduce using rule 15 (program -> function_list .)


state 6

    (16) require_list -> require . require_list
    (17) require_list -> require .
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (18) require -> . REQUIRE STRING

    CONSTANT        reduce using rule 17 (require_list -> require .)
    MODULE          reduce using rule 17 (require_list -> require .)
    DEF             reduce using rule 17 (require_list -> require .)
    $end            reduce using rule 17 (require_list -> require .)
    REQUIRE         shift and go to state 10

    require                        shift and go to state 6
    require_list                   shift and go to state 20

state 7

    (19) constant_list -> constant . constant_list
    (20) constant_list -> constant .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (21) constant -> . CONSTANT ASSIGN expression

    MODULE          reduce using rule 20 (constant_list -> constant .)
    DEF             reduce using rule 20 (constant_list -> constant .)
    $end            reduce using rule 20 (constant_list -> constant .)
    CONSTANT        shift and go to state 11

    constant                       shift and go to state 7
    constant_list                  shift and go to state 21

state 8

    (22) module_list -> module . module_list
    (23) module_list -> module .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (24) module -> . MODULE ID statements END

    DEF             reduce using rule 23 (module_list -> module .)
    $end            reduce using rule 23 (module_list -> module .)
    MODULE          shift and go to state 12

    module                         shift and go to state 8
    module_list                    shift and go to state 22

state 9

    (25) function_list -> function .
    (26) function_list -> function . function_list
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 25 (function_list -> function .)
    DEF             shift and go to state 13

    function                       shift and go to state 9
    function_list                  shift and go to state 23

state 10

    (18) require -> REQUIRE . STRING

    STRING          shift and go to state 24


state 11

    (21) constant -> CONSTANT . ASSIGN expression

    ASSIGN          shift and go to state 25


state 12

    (24) module -> MODULE . ID statements END

    ID              shift and go to state 26


state 13

    (27) function -> DEF . ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> DEF . ID opt_return_type NEWLINE statements END

    ID              shift and go to state 27


state 14

    (1) program -> require_list constant_list . module_list function_list
    (2) program -> require_list constant_list . module_list
    (3) program -> require_list constant_list . function_list
    (6) program -> require_list constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (24) module -> . MODULE ID statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 6 (program -> require_list constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 28
    function_list                  shift and go to state 29
    module                         shift and go to state 8
    function                       shift and go to state 9

state 15

    (4) program -> require_list module_list . function_list
    (7) program -> require_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 7 (program -> require_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 30
    function                       shift and go to state 9

state 16

    (9) program -> require_list function_list .

    $end            reduce using rule 9 (program -> require_list function_list .)


state 17

    (5) program -> constant_list module_list . function_list
    (8) program -> constant_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 8 (program -> constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 31
    function                       shift and go to state 9

state 18

    (10) program -> constant_list function_list .

    $end            reduce using rule 10 (program -> constant_list function_list .)


state 19

    (11) program -> module_list function_list .

    $end            reduce using rule 11 (program -> module_list function_list .)


state 20

    (16) require_list -> require require_list .

    CONSTANT        reduce using rule 16 (require_list -> require require_list .)
    MODULE          reduce using rule 16 (require_list -> require require_list .)
    DEF             reduce using rule 16 (require_list -> require require_list .)
    $end            reduce using rule 16 (require_list -> require require_list .)


state 21

    (19) constant_list -> constant constant_list .

    MODULE          reduce using rule 19 (constant_list -> constant constant_list .)
    DEF             reduce using rule 19 (constant_list -> constant constant_list .)
    $end            reduce using rule 19 (constant_list -> constant constant_list .)


state 22

    (22) module_list -> module module_list .

    DEF             reduce using rule 22 (module_list -> module module_list .)
    $end            reduce using rule 22 (module_list -> module module_list .)


state 23

    (26) function_list -> function function_list .

    $end            reduce using rule 26 (function_list -> function function_list .)


state 24

    (18) require -> REQUIRE STRING .

    REQUIRE         reduce using rule 18 (require -> REQUIRE STRING .)
    CONSTANT        reduce using rule 18 (require -> REQUIRE STRING .)
    MODULE          reduce using rule 18 (require -> REQUIRE STRING .)
    DEF             reduce using rule 18 (require -> REQUIRE STRING .)
    $end            reduce using rule 18 (require -> REQUIRE STRING .)


state 25

    (21) constant -> CONSTANT ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 32
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 26

    (24) module -> MODULE ID . statements END
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements                     shift and go to state 65
    statement                      shift and go to state 66
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 27

    (27) function -> DEF ID . LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> DEF ID . opt_return_type NEWLINE statements END
    (37) opt_return_type -> . COLON types
    (38) opt_return_type -> . empty
    (171) empty -> .

    LPAREN          shift and go to state 92
    COLON           shift and go to state 94
    NEWLINE         reduce using rule 171 (empty -> .)

    opt_return_type                shift and go to state 93
    empty                          shift and go to state 95

state 28

    (1) program -> require_list constant_list module_list . function_list
    (2) program -> require_list constant_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (28) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 2 (program -> require_list constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 96
    function                       shift and go to state 9

state 29

    (3) program -> require_list constant_list function_list .

    $end            reduce using rule 3 (program -> require_list constant_list function_list .)


state 30

    (4) program -> require_list module_list function_list .

    $end            reduce using rule 4 (program -> require_list module_list function_list .)


state 31

    (5) program -> constant_list module_list function_list .

    $end            reduce using rule 5 (program -> constant_list module_list function_list .)


state 32

    (21) constant -> CONSTANT ASSIGN expression .

    CONSTANT        reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    MODULE          reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    DEF             reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    $end            reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)


state 33

    (124) expression -> assignment_expression .

    CONSTANT        reduce using rule 124 (expression -> assignment_expression .)
    MODULE          reduce using rule 124 (expression -> assignment_expression .)
    DEF             reduce using rule 124 (expression -> assignment_expression .)
    $end            reduce using rule 124 (expression -> assignment_expression .)
    DOT             reduce using rule 124 (expression -> assignment_expression .)
    NEWLINE         reduce using rule 124 (expression -> assignment_expression .)
    END             reduce using rule 124 (expression -> assignment_expression .)
    COMMA           reduce using rule 124 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 124 (expression -> assignment_expression .)
    RPAREN          reduce using rule 124 (expression -> assignment_expression .)
    WHEN            reduce using rule 124 (expression -> assignment_expression .)
    ELSIF           reduce using rule 124 (expression -> assignment_expression .)
    ELSE            reduce using rule 124 (expression -> assignment_expression .)
    RBRACE          reduce using rule 124 (expression -> assignment_expression .)
    LBRACE          reduce using rule 124 (expression -> assignment_expression .)
    ID              reduce using rule 124 (expression -> assignment_expression .)
    CASE            reduce using rule 124 (expression -> assignment_expression .)
    RETURN          reduce using rule 124 (expression -> assignment_expression .)
    BREAK           reduce using rule 124 (expression -> assignment_expression .)
    NEXT            reduce using rule 124 (expression -> assignment_expression .)
    UNDERSCORE      reduce using rule 124 (expression -> assignment_expression .)
    ASTERISK        reduce using rule 124 (expression -> assignment_expression .)
    IF              reduce using rule 124 (expression -> assignment_expression .)
    UNLESS          reduce using rule 124 (expression -> assignment_expression .)
    WHILE           reduce using rule 124 (expression -> assignment_expression .)
    UNTIL           reduce using rule 124 (expression -> assignment_expression .)
    LOOP            reduce using rule 124 (expression -> assignment_expression .)
    PLUS            reduce using rule 124 (expression -> assignment_expression .)
    MINUS           reduce using rule 124 (expression -> assignment_expression .)
    EXCLAMATION     reduce using rule 124 (expression -> assignment_expression .)
    TILDE           reduce using rule 124 (expression -> assignment_expression .)
    LPAREN          reduce using rule 124 (expression -> assignment_expression .)
    LBRACKET        reduce using rule 124 (expression -> assignment_expression .)
    INTNUMBER       reduce using rule 124 (expression -> assignment_expression .)
    FLOATNUMBER     reduce using rule 124 (expression -> assignment_expression .)
    CHAR            reduce using rule 124 (expression -> assignment_expression .)
    TRUE            reduce using rule 124 (expression -> assignment_expression .)
    FALSE           reduce using rule 124 (expression -> assignment_expression .)
    STRING          reduce using rule 124 (expression -> assignment_expression .)
    TCOLON          reduce using rule 124 (expression -> assignment_expression .)
    INTERP_END      reduce using rule 124 (expression -> assignment_expression .)


state 34

    (125) assignment_expression -> assignment_target . ASSIGN expression
    (126) assignment_expression -> assignment_target . PLUS_ASSIGN expression
    (127) assignment_expression -> assignment_target . MINUS_ASSIGN expression
    (128) assignment_expression -> assignment_target . MULTI_ASSIGN expression
    (129) assignment_expression -> assignment_target . DIVIDE_ASSIGN expression

    ASSIGN          shift and go to state 97
    PLUS_ASSIGN     shift and go to state 98
    MINUS_ASSIGN    shift and go to state 99
    MULTI_ASSIGN    shift and go to state 100
    DIVIDE_ASSIGN   shift and go to state 101


state 35

    (130) assignment_expression -> ternary_expression .

    CONSTANT        reduce using rule 130 (assignment_expression -> ternary_expression .)
    MODULE          reduce using rule 130 (assignment_expression -> ternary_expression .)
    DEF             reduce using rule 130 (assignment_expression -> ternary_expression .)
    $end            reduce using rule 130 (assignment_expression -> ternary_expression .)
    DOT             reduce using rule 130 (assignment_expression -> ternary_expression .)
    NEWLINE         reduce using rule 130 (assignment_expression -> ternary_expression .)
    END             reduce using rule 130 (assignment_expression -> ternary_expression .)
    COMMA           reduce using rule 130 (assignment_expression -> ternary_expression .)
    RBRACKET        reduce using rule 130 (assignment_expression -> ternary_expression .)
    RPAREN          reduce using rule 130 (assignment_expression -> ternary_expression .)
    WHEN            reduce using rule 130 (assignment_expression -> ternary_expression .)
    ELSIF           reduce using rule 130 (assignment_expression -> ternary_expression .)
    ELSE            reduce using rule 130 (assignment_expression -> ternary_expression .)
    RBRACE          reduce using rule 130 (assignment_expression -> ternary_expression .)
    LBRACE          reduce using rule 130 (assignment_expression -> ternary_expression .)
    ID              reduce using rule 130 (assignment_expression -> ternary_expression .)
    CASE            reduce using rule 130 (assignment_expression -> ternary_expression .)
    RETURN          reduce using rule 130 (assignment_expression -> ternary_expression .)
    BREAK           reduce using rule 130 (assignment_expression -> ternary_expression .)
    NEXT            reduce using rule 130 (assignment_expression -> ternary_expression .)
    UNDERSCORE      reduce using rule 130 (assignment_expression -> ternary_expression .)
    ASTERISK        reduce using rule 130 (assignment_expression -> ternary_expression .)
    IF              reduce using rule 130 (assignment_expression -> ternary_expression .)
    UNLESS          reduce using rule 130 (assignment_expression -> ternary_expression .)
    WHILE           reduce using rule 130 (assignment_expression -> ternary_expression .)
    UNTIL           reduce using rule 130 (assignment_expression -> ternary_expression .)
    LOOP            reduce using rule 130 (assignment_expression -> ternary_expression .)
    PLUS            reduce using rule 130 (assignment_expression -> ternary_expression .)
    MINUS           reduce using rule 130 (assignment_expression -> ternary_expression .)
    EXCLAMATION     reduce using rule 130 (assignment_expression -> ternary_expression .)
    TILDE           reduce using rule 130 (assignment_expression -> ternary_expression .)
    LPAREN          reduce using rule 130 (assignment_expression -> ternary_expression .)
    LBRACKET        reduce using rule 130 (assignment_expression -> ternary_expression .)
    INTNUMBER       reduce using rule 130 (assignment_expression -> ternary_expression .)
    FLOATNUMBER     reduce using rule 130 (assignment_expression -> ternary_expression .)
    CHAR            reduce using rule 130 (assignment_expression -> ternary_expression .)
    TRUE            reduce using rule 130 (assignment_expression -> ternary_expression .)
    FALSE           reduce using rule 130 (assignment_expression -> ternary_expression .)
    STRING          reduce using rule 130 (assignment_expression -> ternary_expression .)
    TCOLON          reduce using rule 130 (assignment_expression -> ternary_expression .)
    INTERP_END      reduce using rule 130 (assignment_expression -> ternary_expression .)


state 36

    (131) assignment_target -> ID . LBRACKET expression RBRACKET
    (169) primary_expression -> ID .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 102
    POTENCIACAO     reduce using rule 169 (primary_expression -> ID .)
    PLUS            reduce using rule 169 (primary_expression -> ID .)
    MINUS           reduce using rule 169 (primary_expression -> ID .)
    MULTI           reduce using rule 169 (primary_expression -> ID .)
    DIVIDE          reduce using rule 169 (primary_expression -> ID .)
    MODULO          reduce using rule 169 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 169 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 169 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 169 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 169 (primary_expression -> ID .)
    EQUAL           reduce using rule 169 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 169 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 169 (primary_expression -> ID .)
    AND             reduce using rule 169 (primary_expression -> ID .)
    DOTDOT          reduce using rule 169 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 169 (primary_expression -> ID .)
    OR              reduce using rule 169 (primary_expression -> ID .)
    QMARK           reduce using rule 169 (primary_expression -> ID .)
    CONSTANT        reduce using rule 169 (primary_expression -> ID .)
    MODULE          reduce using rule 169 (primary_expression -> ID .)
    DEF             reduce using rule 169 (primary_expression -> ID .)
    $end            reduce using rule 169 (primary_expression -> ID .)
    COMMA           reduce using rule 169 (primary_expression -> ID .)
    RBRACKET        reduce using rule 169 (primary_expression -> ID .)
    RPAREN          reduce using rule 169 (primary_expression -> ID .)
    WHEN            reduce using rule 169 (primary_expression -> ID .)
    NEWLINE         reduce using rule 169 (primary_expression -> ID .)
    END             reduce using rule 169 (primary_expression -> ID .)
    ELSIF           reduce using rule 169 (primary_expression -> ID .)
    ELSE            reduce using rule 169 (primary_expression -> ID .)
    RBRACE          reduce using rule 169 (primary_expression -> ID .)
    LBRACE          reduce using rule 169 (primary_expression -> ID .)
    ID              reduce using rule 169 (primary_expression -> ID .)
    CASE            reduce using rule 169 (primary_expression -> ID .)
    RETURN          reduce using rule 169 (primary_expression -> ID .)
    BREAK           reduce using rule 169 (primary_expression -> ID .)
    NEXT            reduce using rule 169 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 169 (primary_expression -> ID .)
    ASTERISK        reduce using rule 169 (primary_expression -> ID .)
    IF              reduce using rule 169 (primary_expression -> ID .)
    UNLESS          reduce using rule 169 (primary_expression -> ID .)
    WHILE           reduce using rule 169 (primary_expression -> ID .)
    UNTIL           reduce using rule 169 (primary_expression -> ID .)
    LOOP            reduce using rule 169 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 169 (primary_expression -> ID .)
    TILDE           reduce using rule 169 (primary_expression -> ID .)
    LPAREN          reduce using rule 169 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 169 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 169 (primary_expression -> ID .)
    CHAR            reduce using rule 169 (primary_expression -> ID .)
    TRUE            reduce using rule 169 (primary_expression -> ID .)
    FALSE           reduce using rule 169 (primary_expression -> ID .)
    STRING          reduce using rule 169 (primary_expression -> ID .)
    DOT             reduce using rule 169 (primary_expression -> ID .)
    TCOLON          reduce using rule 169 (primary_expression -> ID .)
    INTERP_END      reduce using rule 169 (primary_expression -> ID .)

  ! LBRACKET        [ reduce using rule 169 (primary_expression -> ID .) ]


state 37

    (170) array_literal -> LBRACKET . opt_expression_list RBRACKET
    (77) opt_expression_list -> . expression_list
    (78) opt_expression_list -> . empty
    (79) expression_list -> . expression
    (80) expression_list -> . expression_list COMMA expression
    (171) empty -> .
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    RBRACKET        reduce using rule 171 (empty -> .)
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    opt_expression_list            shift and go to state 103
    expression_list                shift and go to state 104
    empty                          shift and go to state 105
    expression                     shift and go to state 106
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 38

    (132) assignment_target -> UNDERSCORE .

    ASSIGN          reduce using rule 132 (assignment_target -> UNDERSCORE .)
    PLUS_ASSIGN     reduce using rule 132 (assignment_target -> UNDERSCORE .)
    MINUS_ASSIGN    reduce using rule 132 (assignment_target -> UNDERSCORE .)
    MULTI_ASSIGN    reduce using rule 132 (assignment_target -> UNDERSCORE .)
    DIVIDE_ASSIGN   reduce using rule 132 (assignment_target -> UNDERSCORE .)


state 39

    (133) assignment_target -> ASTERISK . assignment_target
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target

    ID              shift and go to state 108
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39

    assignment_target              shift and go to state 107

state 40

    (134) ternary_expression -> range_expression . QMARK expression TCOLON expression
    (135) ternary_expression -> range_expression .

    QMARK           shift and go to state 109
    CONSTANT        reduce using rule 135 (ternary_expression -> range_expression .)
    MODULE          reduce using rule 135 (ternary_expression -> range_expression .)
    DEF             reduce using rule 135 (ternary_expression -> range_expression .)
    $end            reduce using rule 135 (ternary_expression -> range_expression .)
    DOT             reduce using rule 135 (ternary_expression -> range_expression .)
    NEWLINE         reduce using rule 135 (ternary_expression -> range_expression .)
    END             reduce using rule 135 (ternary_expression -> range_expression .)
    COMMA           reduce using rule 135 (ternary_expression -> range_expression .)
    RBRACKET        reduce using rule 135 (ternary_expression -> range_expression .)
    RPAREN          reduce using rule 135 (ternary_expression -> range_expression .)
    WHEN            reduce using rule 135 (ternary_expression -> range_expression .)
    ELSIF           reduce using rule 135 (ternary_expression -> range_expression .)
    ELSE            reduce using rule 135 (ternary_expression -> range_expression .)
    RBRACE          reduce using rule 135 (ternary_expression -> range_expression .)
    LBRACE          reduce using rule 135 (ternary_expression -> range_expression .)
    ID              reduce using rule 135 (ternary_expression -> range_expression .)
    CASE            reduce using rule 135 (ternary_expression -> range_expression .)
    RETURN          reduce using rule 135 (ternary_expression -> range_expression .)
    BREAK           reduce using rule 135 (ternary_expression -> range_expression .)
    NEXT            reduce using rule 135 (ternary_expression -> range_expression .)
    UNDERSCORE      reduce using rule 135 (ternary_expression -> range_expression .)
    ASTERISK        reduce using rule 135 (ternary_expression -> range_expression .)
    IF              reduce using rule 135 (ternary_expression -> range_expression .)
    UNLESS          reduce using rule 135 (ternary_expression -> range_expression .)
    WHILE           reduce using rule 135 (ternary_expression -> range_expression .)
    UNTIL           reduce using rule 135 (ternary_expression -> range_expression .)
    LOOP            reduce using rule 135 (ternary_expression -> range_expression .)
    PLUS            reduce using rule 135 (ternary_expression -> range_expression .)
    MINUS           reduce using rule 135 (ternary_expression -> range_expression .)
    EXCLAMATION     reduce using rule 135 (ternary_expression -> range_expression .)
    TILDE           reduce using rule 135 (ternary_expression -> range_expression .)
    LPAREN          reduce using rule 135 (ternary_expression -> range_expression .)
    LBRACKET        reduce using rule 135 (ternary_expression -> range_expression .)
    INTNUMBER       reduce using rule 135 (ternary_expression -> range_expression .)
    FLOATNUMBER     reduce using rule 135 (ternary_expression -> range_expression .)
    CHAR            reduce using rule 135 (ternary_expression -> range_expression .)
    TRUE            reduce using rule 135 (ternary_expression -> range_expression .)
    FALSE           reduce using rule 135 (ternary_expression -> range_expression .)
    STRING          reduce using rule 135 (ternary_expression -> range_expression .)
    TCOLON          reduce using rule 135 (ternary_expression -> range_expression .)
    INTERP_END      reduce using rule 135 (ternary_expression -> range_expression .)


state 41

    (136) range_expression -> logical_or_expression . DOTDOT logical_or_expression
    (137) range_expression -> logical_or_expression . DOTDOTDOT logical_or_expression
    (138) range_expression -> logical_or_expression .
    (140) logical_or_expression -> logical_or_expression . OR logical_and_expression

    DOTDOT          shift and go to state 110
    DOTDOTDOT       shift and go to state 111
    QMARK           reduce using rule 138 (range_expression -> logical_or_expression .)
    CONSTANT        reduce using rule 138 (range_expression -> logical_or_expression .)
    MODULE          reduce using rule 138 (range_expression -> logical_or_expression .)
    DEF             reduce using rule 138 (range_expression -> logical_or_expression .)
    $end            reduce using rule 138 (range_expression -> logical_or_expression .)
    DOT             reduce using rule 138 (range_expression -> logical_or_expression .)
    NEWLINE         reduce using rule 138 (range_expression -> logical_or_expression .)
    END             reduce using rule 138 (range_expression -> logical_or_expression .)
    COMMA           reduce using rule 138 (range_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 138 (range_expression -> logical_or_expression .)
    RPAREN          reduce using rule 138 (range_expression -> logical_or_expression .)
    WHEN            reduce using rule 138 (range_expression -> logical_or_expression .)
    ELSIF           reduce using rule 138 (range_expression -> logical_or_expression .)
    ELSE            reduce using rule 138 (range_expression -> logical_or_expression .)
    RBRACE          reduce using rule 138 (range_expression -> logical_or_expression .)
    LBRACE          reduce using rule 138 (range_expression -> logical_or_expression .)
    ID              reduce using rule 138 (range_expression -> logical_or_expression .)
    CASE            reduce using rule 138 (range_expression -> logical_or_expression .)
    RETURN          reduce using rule 138 (range_expression -> logical_or_expression .)
    BREAK           reduce using rule 138 (range_expression -> logical_or_expression .)
    NEXT            reduce using rule 138 (range_expression -> logical_or_expression .)
    UNDERSCORE      reduce using rule 138 (range_expression -> logical_or_expression .)
    ASTERISK        reduce using rule 138 (range_expression -> logical_or_expression .)
    IF              reduce using rule 138 (range_expression -> logical_or_expression .)
    UNLESS          reduce using rule 138 (range_expression -> logical_or_expression .)
    WHILE           reduce using rule 138 (range_expression -> logical_or_expression .)
    UNTIL           reduce using rule 138 (range_expression -> logical_or_expression .)
    LOOP            reduce using rule 138 (range_expression -> logical_or_expression .)
    PLUS            reduce using rule 138 (range_expression -> logical_or_expression .)
    MINUS           reduce using rule 138 (range_expression -> logical_or_expression .)
    EXCLAMATION     reduce using rule 138 (range_expression -> logical_or_expression .)
    TILDE           reduce using rule 138 (range_expression -> logical_or_expression .)
    LPAREN          reduce using rule 138 (range_expression -> logical_or_expression .)
    LBRACKET        reduce using rule 138 (range_expression -> logical_or_expression .)
    INTNUMBER       reduce using rule 138 (range_expression -> logical_or_expression .)
    FLOATNUMBER     reduce using rule 138 (range_expression -> logical_or_expression .)
    CHAR            reduce using rule 138 (range_expression -> logical_or_expression .)
    TRUE            reduce using rule 138 (range_expression -> logical_or_expression .)
    FALSE           reduce using rule 138 (range_expression -> logical_or_expression .)
    STRING          reduce using rule 138 (range_expression -> logical_or_expression .)
    TCOLON          reduce using rule 138 (range_expression -> logical_or_expression .)
    INTERP_END      reduce using rule 138 (range_expression -> logical_or_expression .)
    OR              shift and go to state 112


state 42

    (139) logical_or_expression -> logical_and_expression .
    (142) logical_and_expression -> logical_and_expression . AND equality_expression

    DOTDOT          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    DOTDOTDOT       reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    QMARK           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    CONSTANT        reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    MODULE          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    DEF             reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    DOT             reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    NEWLINE         reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    END             reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    WHEN            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    ELSIF           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    ELSE            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    LBRACE          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    ID              reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    CASE            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    NEXT            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    UNDERSCORE      reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    ASTERISK        reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    UNLESS          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    WHILE           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    UNTIL           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    LOOP            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    PLUS            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    EXCLAMATION     reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    TILDE           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    LBRACKET        reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    INTNUMBER       reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    FLOATNUMBER     reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    TRUE            reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    FALSE           reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    STRING          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    TCOLON          reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    INTERP_END      reduce using rule 139 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 113


state 43

    (141) logical_and_expression -> equality_expression .
    (144) equality_expression -> equality_expression . EQUAL relational_expression
    (145) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (146) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 141 (logical_and_expression -> equality_expression .)
    DOTDOT          reduce using rule 141 (logical_and_expression -> equality_expression .)
    DOTDOTDOT       reduce using rule 141 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 141 (logical_and_expression -> equality_expression .)
    QMARK           reduce using rule 141 (logical_and_expression -> equality_expression .)
    CONSTANT        reduce using rule 141 (logical_and_expression -> equality_expression .)
    MODULE          reduce using rule 141 (logical_and_expression -> equality_expression .)
    DEF             reduce using rule 141 (logical_and_expression -> equality_expression .)
    $end            reduce using rule 141 (logical_and_expression -> equality_expression .)
    DOT             reduce using rule 141 (logical_and_expression -> equality_expression .)
    NEWLINE         reduce using rule 141 (logical_and_expression -> equality_expression .)
    END             reduce using rule 141 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 141 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 141 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 141 (logical_and_expression -> equality_expression .)
    WHEN            reduce using rule 141 (logical_and_expression -> equality_expression .)
    ELSIF           reduce using rule 141 (logical_and_expression -> equality_expression .)
    ELSE            reduce using rule 141 (logical_and_expression -> equality_expression .)
    RBRACE          reduce using rule 141 (logical_and_expression -> equality_expression .)
    LBRACE          reduce using rule 141 (logical_and_expression -> equality_expression .)
    ID              reduce using rule 141 (logical_and_expression -> equality_expression .)
    CASE            reduce using rule 141 (logical_and_expression -> equality_expression .)
    RETURN          reduce using rule 141 (logical_and_expression -> equality_expression .)
    BREAK           reduce using rule 141 (logical_and_expression -> equality_expression .)
    NEXT            reduce using rule 141 (logical_and_expression -> equality_expression .)
    UNDERSCORE      reduce using rule 141 (logical_and_expression -> equality_expression .)
    ASTERISK        reduce using rule 141 (logical_and_expression -> equality_expression .)
    IF              reduce using rule 141 (logical_and_expression -> equality_expression .)
    UNLESS          reduce using rule 141 (logical_and_expression -> equality_expression .)
    WHILE           reduce using rule 141 (logical_and_expression -> equality_expression .)
    UNTIL           reduce using rule 141 (logical_and_expression -> equality_expression .)
    LOOP            reduce using rule 141 (logical_and_expression -> equality_expression .)
    PLUS            reduce using rule 141 (logical_and_expression -> equality_expression .)
    MINUS           reduce using rule 141 (logical_and_expression -> equality_expression .)
    EXCLAMATION     reduce using rule 141 (logical_and_expression -> equality_expression .)
    TILDE           reduce using rule 141 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 141 (logical_and_expression -> equality_expression .)
    LBRACKET        reduce using rule 141 (logical_and_expression -> equality_expression .)
    INTNUMBER       reduce using rule 141 (logical_and_expression -> equality_expression .)
    FLOATNUMBER     reduce using rule 141 (logical_and_expression -> equality_expression .)
    CHAR            reduce using rule 141 (logical_and_expression -> equality_expression .)
    TRUE            reduce using rule 141 (logical_and_expression -> equality_expression .)
    FALSE           reduce using rule 141 (logical_and_expression -> equality_expression .)
    STRING          reduce using rule 141 (logical_and_expression -> equality_expression .)
    TCOLON          reduce using rule 141 (logical_and_expression -> equality_expression .)
    INTERP_END      reduce using rule 141 (logical_and_expression -> equality_expression .)
    EQUAL           shift and go to state 114
    NOT_EQUAL       shift and go to state 115
    TIPO_EQUAL      shift and go to state 116


state 44

    (143) equality_expression -> relational_expression .
    (148) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (149) relational_expression -> relational_expression . LESS_THAN additive_expression
    (150) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (151) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 143 (equality_expression -> relational_expression .)
    NOT_EQUAL       reduce using rule 143 (equality_expression -> relational_expression .)
    TIPO_EQUAL      reduce using rule 143 (equality_expression -> relational_expression .)
    AND             reduce using rule 143 (equality_expression -> relational_expression .)
    DOTDOT          reduce using rule 143 (equality_expression -> relational_expression .)
    DOTDOTDOT       reduce using rule 143 (equality_expression -> relational_expression .)
    OR              reduce using rule 143 (equality_expression -> relational_expression .)
    QMARK           reduce using rule 143 (equality_expression -> relational_expression .)
    CONSTANT        reduce using rule 143 (equality_expression -> relational_expression .)
    MODULE          reduce using rule 143 (equality_expression -> relational_expression .)
    DEF             reduce using rule 143 (equality_expression -> relational_expression .)
    $end            reduce using rule 143 (equality_expression -> relational_expression .)
    DOT             reduce using rule 143 (equality_expression -> relational_expression .)
    NEWLINE         reduce using rule 143 (equality_expression -> relational_expression .)
    END             reduce using rule 143 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 143 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 143 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 143 (equality_expression -> relational_expression .)
    WHEN            reduce using rule 143 (equality_expression -> relational_expression .)
    ELSIF           reduce using rule 143 (equality_expression -> relational_expression .)
    ELSE            reduce using rule 143 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 143 (equality_expression -> relational_expression .)
    LBRACE          reduce using rule 143 (equality_expression -> relational_expression .)
    ID              reduce using rule 143 (equality_expression -> relational_expression .)
    CASE            reduce using rule 143 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 143 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 143 (equality_expression -> relational_expression .)
    NEXT            reduce using rule 143 (equality_expression -> relational_expression .)
    UNDERSCORE      reduce using rule 143 (equality_expression -> relational_expression .)
    ASTERISK        reduce using rule 143 (equality_expression -> relational_expression .)
    IF              reduce using rule 143 (equality_expression -> relational_expression .)
    UNLESS          reduce using rule 143 (equality_expression -> relational_expression .)
    WHILE           reduce using rule 143 (equality_expression -> relational_expression .)
    UNTIL           reduce using rule 143 (equality_expression -> relational_expression .)
    LOOP            reduce using rule 143 (equality_expression -> relational_expression .)
    PLUS            reduce using rule 143 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 143 (equality_expression -> relational_expression .)
    EXCLAMATION     reduce using rule 143 (equality_expression -> relational_expression .)
    TILDE           reduce using rule 143 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 143 (equality_expression -> relational_expression .)
    LBRACKET        reduce using rule 143 (equality_expression -> relational_expression .)
    INTNUMBER       reduce using rule 143 (equality_expression -> relational_expression .)
    FLOATNUMBER     reduce using rule 143 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 143 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 143 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 143 (equality_expression -> relational_expression .)
    STRING          reduce using rule 143 (equality_expression -> relational_expression .)
    TCOLON          reduce using rule 143 (equality_expression -> relational_expression .)
    INTERP_END      reduce using rule 143 (equality_expression -> relational_expression .)
    GREATER_THAN    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_EQUAL   shift and go to state 119
    LESS_EQUAL      shift and go to state 120


state 45

    (147) relational_expression -> additive_expression .

    GREATER_THAN    reduce using rule 147 (relational_expression -> additive_expression .)
    LESS_THAN       reduce using rule 147 (relational_expression -> additive_expression .)
    GREATER_EQUAL   reduce using rule 147 (relational_expression -> additive_expression .)
    LESS_EQUAL      reduce using rule 147 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 147 (relational_expression -> additive_expression .)
    NOT_EQUAL       reduce using rule 147 (relational_expression -> additive_expression .)
    TIPO_EQUAL      reduce using rule 147 (relational_expression -> additive_expression .)
    AND             reduce using rule 147 (relational_expression -> additive_expression .)
    DOTDOT          reduce using rule 147 (relational_expression -> additive_expression .)
    DOTDOTDOT       reduce using rule 147 (relational_expression -> additive_expression .)
    OR              reduce using rule 147 (relational_expression -> additive_expression .)
    QMARK           reduce using rule 147 (relational_expression -> additive_expression .)
    CONSTANT        reduce using rule 147 (relational_expression -> additive_expression .)
    MODULE          reduce using rule 147 (relational_expression -> additive_expression .)
    DEF             reduce using rule 147 (relational_expression -> additive_expression .)
    $end            reduce using rule 147 (relational_expression -> additive_expression .)
    DOT             reduce using rule 147 (relational_expression -> additive_expression .)
    NEWLINE         reduce using rule 147 (relational_expression -> additive_expression .)
    END             reduce using rule 147 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 147 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 147 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 147 (relational_expression -> additive_expression .)
    WHEN            reduce using rule 147 (relational_expression -> additive_expression .)
    ELSIF           reduce using rule 147 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 147 (relational_expression -> additive_expression .)
    RBRACE          reduce using rule 147 (relational_expression -> additive_expression .)
    LBRACE          reduce using rule 147 (relational_expression -> additive_expression .)
    ID              reduce using rule 147 (relational_expression -> additive_expression .)
    CASE            reduce using rule 147 (relational_expression -> additive_expression .)
    RETURN          reduce using rule 147 (relational_expression -> additive_expression .)
    BREAK           reduce using rule 147 (relational_expression -> additive_expression .)
    NEXT            reduce using rule 147 (relational_expression -> additive_expression .)
    UNDERSCORE      reduce using rule 147 (relational_expression -> additive_expression .)
    ASTERISK        reduce using rule 147 (relational_expression -> additive_expression .)
    IF              reduce using rule 147 (relational_expression -> additive_expression .)
    UNLESS          reduce using rule 147 (relational_expression -> additive_expression .)
    WHILE           reduce using rule 147 (relational_expression -> additive_expression .)
    UNTIL           reduce using rule 147 (relational_expression -> additive_expression .)
    LOOP            reduce using rule 147 (relational_expression -> additive_expression .)
    PLUS            reduce using rule 147 (relational_expression -> additive_expression .)
    MINUS           reduce using rule 147 (relational_expression -> additive_expression .)
    EXCLAMATION     reduce using rule 147 (relational_expression -> additive_expression .)
    TILDE           reduce using rule 147 (relational_expression -> additive_expression .)
    LPAREN          reduce using rule 147 (relational_expression -> additive_expression .)
    LBRACKET        reduce using rule 147 (relational_expression -> additive_expression .)
    INTNUMBER       reduce using rule 147 (relational_expression -> additive_expression .)
    FLOATNUMBER     reduce using rule 147 (relational_expression -> additive_expression .)
    CHAR            reduce using rule 147 (relational_expression -> additive_expression .)
    TRUE            reduce using rule 147 (relational_expression -> additive_expression .)
    FALSE           reduce using rule 147 (relational_expression -> additive_expression .)
    STRING          reduce using rule 147 (relational_expression -> additive_expression .)
    TCOLON          reduce using rule 147 (relational_expression -> additive_expression .)
    INTERP_END      reduce using rule 147 (relational_expression -> additive_expression .)


state 46

    (152) additive_expression -> multiplicative_expression .
    (153) additive_expression -> multiplicative_expression . PLUS additive_expression
    (154) additive_expression -> multiplicative_expression . MINUS additive_expression
    (156) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (157) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (158) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GREATER_THAN    reduce using rule 152 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 152 (additive_expression -> multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 152 (additive_expression -> multiplicative_expression .)
    LESS_EQUAL      reduce using rule 152 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    NOT_EQUAL       reduce using rule 152 (additive_expression -> multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 152 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 152 (additive_expression -> multiplicative_expression .)
    DOTDOT          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    DOTDOTDOT       reduce using rule 152 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 152 (additive_expression -> multiplicative_expression .)
    QMARK           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    CONSTANT        reduce using rule 152 (additive_expression -> multiplicative_expression .)
    MODULE          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    DEF             reduce using rule 152 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 152 (additive_expression -> multiplicative_expression .)
    DOT             reduce using rule 152 (additive_expression -> multiplicative_expression .)
    NEWLINE         reduce using rule 152 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 152 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 152 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    WHEN            reduce using rule 152 (additive_expression -> multiplicative_expression .)
    ELSIF           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 152 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    LBRACE          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    ID              reduce using rule 152 (additive_expression -> multiplicative_expression .)
    CASE            reduce using rule 152 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    NEXT            reduce using rule 152 (additive_expression -> multiplicative_expression .)
    UNDERSCORE      reduce using rule 152 (additive_expression -> multiplicative_expression .)
    ASTERISK        reduce using rule 152 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 152 (additive_expression -> multiplicative_expression .)
    UNLESS          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    WHILE           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    UNTIL           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    LOOP            reduce using rule 152 (additive_expression -> multiplicative_expression .)
    EXCLAMATION     reduce using rule 152 (additive_expression -> multiplicative_expression .)
    TILDE           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    LBRACKET        reduce using rule 152 (additive_expression -> multiplicative_expression .)
    INTNUMBER       reduce using rule 152 (additive_expression -> multiplicative_expression .)
    FLOATNUMBER     reduce using rule 152 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 152 (additive_expression -> multiplicative_expression .)
    TRUE            reduce using rule 152 (additive_expression -> multiplicative_expression .)
    FALSE           reduce using rule 152 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    TCOLON          reduce using rule 152 (additive_expression -> multiplicative_expression .)
    INTERP_END      reduce using rule 152 (additive_expression -> multiplicative_expression .)
    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    MULTI           shift and go to state 123
    DIVIDE          shift and go to state 124
    MODULO          shift and go to state 125

  ! PLUS            [ reduce using rule 152 (additive_expression -> multiplicative_expression .) ]
  ! MINUS           [ reduce using rule 152 (additive_expression -> multiplicative_expression .) ]


state 47

    (161) unary_expression -> PLUS . unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 126
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 48

    (162) unary_expression -> MINUS . unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 128
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 49

    (155) multiplicative_expression -> potenciacao_expression .
    (160) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    PLUS            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    MINUS           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    MULTI           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    DIVIDE          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    MODULO          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    GREATER_THAN    reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    LESS_THAN       reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    LESS_EQUAL      reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    EQUAL           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    NOT_EQUAL       reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    AND             reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    DOTDOT          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    DOTDOTDOT       reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    OR              reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    QMARK           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    CONSTANT        reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    MODULE          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    DEF             reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    $end            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    DOT             reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    NEWLINE         reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    END             reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    COMMA           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    RBRACKET        reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    RPAREN          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    WHEN            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    ELSIF           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    ELSE            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    RBRACE          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    LBRACE          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    ID              reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    CASE            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    RETURN          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    BREAK           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    NEXT            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    UNDERSCORE      reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    ASTERISK        reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    IF              reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    UNLESS          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    WHILE           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    UNTIL           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    LOOP            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    EXCLAMATION     reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    TILDE           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    LPAREN          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    LBRACKET        reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    INTNUMBER       reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    FLOATNUMBER     reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    CHAR            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    TRUE            reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    FALSE           reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    STRING          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    TCOLON          reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    INTERP_END      reduce using rule 155 (multiplicative_expression -> potenciacao_expression .)
    POTENCIACAO     shift and go to state 129


state 50

    (159) potenciacao_expression -> unary_expression .

    POTENCIACAO     reduce using rule 159 (potenciacao_expression -> unary_expression .)
    PLUS            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    MINUS           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    MULTI           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    DIVIDE          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    MODULO          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 159 (potenciacao_expression -> unary_expression .)
    LESS_THAN       reduce using rule 159 (potenciacao_expression -> unary_expression .)
    GREATER_EQUAL   reduce using rule 159 (potenciacao_expression -> unary_expression .)
    LESS_EQUAL      reduce using rule 159 (potenciacao_expression -> unary_expression .)
    EQUAL           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 159 (potenciacao_expression -> unary_expression .)
    TIPO_EQUAL      reduce using rule 159 (potenciacao_expression -> unary_expression .)
    AND             reduce using rule 159 (potenciacao_expression -> unary_expression .)
    DOTDOT          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    DOTDOTDOT       reduce using rule 159 (potenciacao_expression -> unary_expression .)
    OR              reduce using rule 159 (potenciacao_expression -> unary_expression .)
    QMARK           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    CONSTANT        reduce using rule 159 (potenciacao_expression -> unary_expression .)
    MODULE          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    DEF             reduce using rule 159 (potenciacao_expression -> unary_expression .)
    $end            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    DOT             reduce using rule 159 (potenciacao_expression -> unary_expression .)
    NEWLINE         reduce using rule 159 (potenciacao_expression -> unary_expression .)
    END             reduce using rule 159 (potenciacao_expression -> unary_expression .)
    COMMA           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    RBRACKET        reduce using rule 159 (potenciacao_expression -> unary_expression .)
    RPAREN          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    WHEN            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    ELSIF           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    ELSE            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    RBRACE          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    LBRACE          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    ID              reduce using rule 159 (potenciacao_expression -> unary_expression .)
    CASE            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    RETURN          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    BREAK           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    NEXT            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    UNDERSCORE      reduce using rule 159 (potenciacao_expression -> unary_expression .)
    ASTERISK        reduce using rule 159 (potenciacao_expression -> unary_expression .)
    IF              reduce using rule 159 (potenciacao_expression -> unary_expression .)
    UNLESS          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    WHILE           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    UNTIL           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    LOOP            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    EXCLAMATION     reduce using rule 159 (potenciacao_expression -> unary_expression .)
    TILDE           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    LPAREN          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    LBRACKET        reduce using rule 159 (potenciacao_expression -> unary_expression .)
    INTNUMBER       reduce using rule 159 (potenciacao_expression -> unary_expression .)
    FLOATNUMBER     reduce using rule 159 (potenciacao_expression -> unary_expression .)
    CHAR            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    TRUE            reduce using rule 159 (potenciacao_expression -> unary_expression .)
    FALSE           reduce using rule 159 (potenciacao_expression -> unary_expression .)
    STRING          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    TCOLON          reduce using rule 159 (potenciacao_expression -> unary_expression .)
    INTERP_END      reduce using rule 159 (potenciacao_expression -> unary_expression .)


state 51

    (163) unary_expression -> EXCLAMATION . unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 130
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 52

    (164) unary_expression -> TILDE . unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 53

    (165) unary_expression -> primary_expression .

    POTENCIACAO     reduce using rule 165 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 165 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 165 (unary_expression -> primary_expression .)
    MULTI           reduce using rule 165 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 165 (unary_expression -> primary_expression .)
    MODULO          reduce using rule 165 (unary_expression -> primary_expression .)
    GREATER_THAN    reduce using rule 165 (unary_expression -> primary_expression .)
    LESS_THAN       reduce using rule 165 (unary_expression -> primary_expression .)
    GREATER_EQUAL   reduce using rule 165 (unary_expression -> primary_expression .)
    LESS_EQUAL      reduce using rule 165 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 165 (unary_expression -> primary_expression .)
    NOT_EQUAL       reduce using rule 165 (unary_expression -> primary_expression .)
    TIPO_EQUAL      reduce using rule 165 (unary_expression -> primary_expression .)
    AND             reduce using rule 165 (unary_expression -> primary_expression .)
    DOTDOT          reduce using rule 165 (unary_expression -> primary_expression .)
    DOTDOTDOT       reduce using rule 165 (unary_expression -> primary_expression .)
    OR              reduce using rule 165 (unary_expression -> primary_expression .)
    QMARK           reduce using rule 165 (unary_expression -> primary_expression .)
    CONSTANT        reduce using rule 165 (unary_expression -> primary_expression .)
    MODULE          reduce using rule 165 (unary_expression -> primary_expression .)
    DEF             reduce using rule 165 (unary_expression -> primary_expression .)
    $end            reduce using rule 165 (unary_expression -> primary_expression .)
    DOT             reduce using rule 165 (unary_expression -> primary_expression .)
    NEWLINE         reduce using rule 165 (unary_expression -> primary_expression .)
    END             reduce using rule 165 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 165 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 165 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 165 (unary_expression -> primary_expression .)
    WHEN            reduce using rule 165 (unary_expression -> primary_expression .)
    ELSIF           reduce using rule 165 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 165 (unary_expression -> primary_expression .)
    RBRACE          reduce using rule 165 (unary_expression -> primary_expression .)
    LBRACE          reduce using rule 165 (unary_expression -> primary_expression .)
    ID              reduce using rule 165 (unary_expression -> primary_expression .)
    CASE            reduce using rule 165 (unary_expression -> primary_expression .)
    RETURN          reduce using rule 165 (unary_expression -> primary_expression .)
    BREAK           reduce using rule 165 (unary_expression -> primary_expression .)
    NEXT            reduce using rule 165 (unary_expression -> primary_expression .)
    UNDERSCORE      reduce using rule 165 (unary_expression -> primary_expression .)
    ASTERISK        reduce using rule 165 (unary_expression -> primary_expression .)
    IF              reduce using rule 165 (unary_expression -> primary_expression .)
    UNLESS          reduce using rule 165 (unary_expression -> primary_expression .)
    WHILE           reduce using rule 165 (unary_expression -> primary_expression .)
    UNTIL           reduce using rule 165 (unary_expression -> primary_expression .)
    LOOP            reduce using rule 165 (unary_expression -> primary_expression .)
    EXCLAMATION     reduce using rule 165 (unary_expression -> primary_expression .)
    TILDE           reduce using rule 165 (unary_expression -> primary_expression .)
    LPAREN          reduce using rule 165 (unary_expression -> primary_expression .)
    LBRACKET        reduce using rule 165 (unary_expression -> primary_expression .)
    INTNUMBER       reduce using rule 165 (unary_expression -> primary_expression .)
    FLOATNUMBER     reduce using rule 165 (unary_expression -> primary_expression .)
    CHAR            reduce using rule 165 (unary_expression -> primary_expression .)
    TRUE            reduce using rule 165 (unary_expression -> primary_expression .)
    FALSE           reduce using rule 165 (unary_expression -> primary_expression .)
    STRING          reduce using rule 165 (unary_expression -> primary_expression .)
    TCOLON          reduce using rule 165 (unary_expression -> primary_expression .)
    INTERP_END      reduce using rule 165 (unary_expression -> primary_expression .)


state 54

    (166) primary_expression -> LPAREN . expression RPAREN
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 132
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 55

    (167) primary_expression -> array_literal .

    POTENCIACAO     reduce using rule 167 (primary_expression -> array_literal .)
    PLUS            reduce using rule 167 (primary_expression -> array_literal .)
    MINUS           reduce using rule 167 (primary_expression -> array_literal .)
    MULTI           reduce using rule 167 (primary_expression -> array_literal .)
    DIVIDE          reduce using rule 167 (primary_expression -> array_literal .)
    MODULO          reduce using rule 167 (primary_expression -> array_literal .)
    GREATER_THAN    reduce using rule 167 (primary_expression -> array_literal .)
    LESS_THAN       reduce using rule 167 (primary_expression -> array_literal .)
    GREATER_EQUAL   reduce using rule 167 (primary_expression -> array_literal .)
    LESS_EQUAL      reduce using rule 167 (primary_expression -> array_literal .)
    EQUAL           reduce using rule 167 (primary_expression -> array_literal .)
    NOT_EQUAL       reduce using rule 167 (primary_expression -> array_literal .)
    TIPO_EQUAL      reduce using rule 167 (primary_expression -> array_literal .)
    AND             reduce using rule 167 (primary_expression -> array_literal .)
    DOTDOT          reduce using rule 167 (primary_expression -> array_literal .)
    DOTDOTDOT       reduce using rule 167 (primary_expression -> array_literal .)
    OR              reduce using rule 167 (primary_expression -> array_literal .)
    QMARK           reduce using rule 167 (primary_expression -> array_literal .)
    CONSTANT        reduce using rule 167 (primary_expression -> array_literal .)
    MODULE          reduce using rule 167 (primary_expression -> array_literal .)
    DEF             reduce using rule 167 (primary_expression -> array_literal .)
    $end            reduce using rule 167 (primary_expression -> array_literal .)
    DOT             reduce using rule 167 (primary_expression -> array_literal .)
    NEWLINE         reduce using rule 167 (primary_expression -> array_literal .)
    END             reduce using rule 167 (primary_expression -> array_literal .)
    COMMA           reduce using rule 167 (primary_expression -> array_literal .)
    RBRACKET        reduce using rule 167 (primary_expression -> array_literal .)
    RPAREN          reduce using rule 167 (primary_expression -> array_literal .)
    WHEN            reduce using rule 167 (primary_expression -> array_literal .)
    ELSIF           reduce using rule 167 (primary_expression -> array_literal .)
    ELSE            reduce using rule 167 (primary_expression -> array_literal .)
    RBRACE          reduce using rule 167 (primary_expression -> array_literal .)
    LBRACE          reduce using rule 167 (primary_expression -> array_literal .)
    ID              reduce using rule 167 (primary_expression -> array_literal .)
    CASE            reduce using rule 167 (primary_expression -> array_literal .)
    RETURN          reduce using rule 167 (primary_expression -> array_literal .)
    BREAK           reduce using rule 167 (primary_expression -> array_literal .)
    NEXT            reduce using rule 167 (primary_expression -> array_literal .)
    UNDERSCORE      reduce using rule 167 (primary_expression -> array_literal .)
    ASTERISK        reduce using rule 167 (primary_expression -> array_literal .)
    IF              reduce using rule 167 (primary_expression -> array_literal .)
    UNLESS          reduce using rule 167 (primary_expression -> array_literal .)
    WHILE           reduce using rule 167 (primary_expression -> array_literal .)
    UNTIL           reduce using rule 167 (primary_expression -> array_literal .)
    LOOP            reduce using rule 167 (primary_expression -> array_literal .)
    EXCLAMATION     reduce using rule 167 (primary_expression -> array_literal .)
    TILDE           reduce using rule 167 (primary_expression -> array_literal .)
    LPAREN          reduce using rule 167 (primary_expression -> array_literal .)
    LBRACKET        reduce using rule 167 (primary_expression -> array_literal .)
    INTNUMBER       reduce using rule 167 (primary_expression -> array_literal .)
    FLOATNUMBER     reduce using rule 167 (primary_expression -> array_literal .)
    CHAR            reduce using rule 167 (primary_expression -> array_literal .)
    TRUE            reduce using rule 167 (primary_expression -> array_literal .)
    FALSE           reduce using rule 167 (primary_expression -> array_literal .)
    STRING          reduce using rule 167 (primary_expression -> array_literal .)
    TCOLON          reduce using rule 167 (primary_expression -> array_literal .)
    INTERP_END      reduce using rule 167 (primary_expression -> array_literal .)


state 56

    (168) primary_expression -> literal .

    POTENCIACAO     reduce using rule 168 (primary_expression -> literal .)
    PLUS            reduce using rule 168 (primary_expression -> literal .)
    MINUS           reduce using rule 168 (primary_expression -> literal .)
    MULTI           reduce using rule 168 (primary_expression -> literal .)
    DIVIDE          reduce using rule 168 (primary_expression -> literal .)
    MODULO          reduce using rule 168 (primary_expression -> literal .)
    GREATER_THAN    reduce using rule 168 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 168 (primary_expression -> literal .)
    GREATER_EQUAL   reduce using rule 168 (primary_expression -> literal .)
    LESS_EQUAL      reduce using rule 168 (primary_expression -> literal .)
    EQUAL           reduce using rule 168 (primary_expression -> literal .)
    NOT_EQUAL       reduce using rule 168 (primary_expression -> literal .)
    TIPO_EQUAL      reduce using rule 168 (primary_expression -> literal .)
    AND             reduce using rule 168 (primary_expression -> literal .)
    DOTDOT          reduce using rule 168 (primary_expression -> literal .)
    DOTDOTDOT       reduce using rule 168 (primary_expression -> literal .)
    OR              reduce using rule 168 (primary_expression -> literal .)
    QMARK           reduce using rule 168 (primary_expression -> literal .)
    CONSTANT        reduce using rule 168 (primary_expression -> literal .)
    MODULE          reduce using rule 168 (primary_expression -> literal .)
    DEF             reduce using rule 168 (primary_expression -> literal .)
    $end            reduce using rule 168 (primary_expression -> literal .)
    DOT             reduce using rule 168 (primary_expression -> literal .)
    NEWLINE         reduce using rule 168 (primary_expression -> literal .)
    END             reduce using rule 168 (primary_expression -> literal .)
    COMMA           reduce using rule 168 (primary_expression -> literal .)
    RBRACKET        reduce using rule 168 (primary_expression -> literal .)
    RPAREN          reduce using rule 168 (primary_expression -> literal .)
    WHEN            reduce using rule 168 (primary_expression -> literal .)
    ELSIF           reduce using rule 168 (primary_expression -> literal .)
    ELSE            reduce using rule 168 (primary_expression -> literal .)
    RBRACE          reduce using rule 168 (primary_expression -> literal .)
    LBRACE          reduce using rule 168 (primary_expression -> literal .)
    ID              reduce using rule 168 (primary_expression -> literal .)
    CASE            reduce using rule 168 (primary_expression -> literal .)
    RETURN          reduce using rule 168 (primary_expression -> literal .)
    BREAK           reduce using rule 168 (primary_expression -> literal .)
    NEXT            reduce using rule 168 (primary_expression -> literal .)
    UNDERSCORE      reduce using rule 168 (primary_expression -> literal .)
    ASTERISK        reduce using rule 168 (primary_expression -> literal .)
    IF              reduce using rule 168 (primary_expression -> literal .)
    UNLESS          reduce using rule 168 (primary_expression -> literal .)
    WHILE           reduce using rule 168 (primary_expression -> literal .)
    UNTIL           reduce using rule 168 (primary_expression -> literal .)
    LOOP            reduce using rule 168 (primary_expression -> literal .)
    EXCLAMATION     reduce using rule 168 (primary_expression -> literal .)
    TILDE           reduce using rule 168 (primary_expression -> literal .)
    LPAREN          reduce using rule 168 (primary_expression -> literal .)
    LBRACKET        reduce using rule 168 (primary_expression -> literal .)
    INTNUMBER       reduce using rule 168 (primary_expression -> literal .)
    FLOATNUMBER     reduce using rule 168 (primary_expression -> literal .)
    CHAR            reduce using rule 168 (primary_expression -> literal .)
    TRUE            reduce using rule 168 (primary_expression -> literal .)
    FALSE           reduce using rule 168 (primary_expression -> literal .)
    STRING          reduce using rule 168 (primary_expression -> literal .)
    TCOLON          reduce using rule 168 (primary_expression -> literal .)
    INTERP_END      reduce using rule 168 (primary_expression -> literal .)


state 57

    (60) literal -> INTNUMBER .

    POTENCIACAO     reduce using rule 60 (literal -> INTNUMBER .)
    PLUS            reduce using rule 60 (literal -> INTNUMBER .)
    MINUS           reduce using rule 60 (literal -> INTNUMBER .)
    MULTI           reduce using rule 60 (literal -> INTNUMBER .)
    DIVIDE          reduce using rule 60 (literal -> INTNUMBER .)
    MODULO          reduce using rule 60 (literal -> INTNUMBER .)
    GREATER_THAN    reduce using rule 60 (literal -> INTNUMBER .)
    LESS_THAN       reduce using rule 60 (literal -> INTNUMBER .)
    GREATER_EQUAL   reduce using rule 60 (literal -> INTNUMBER .)
    LESS_EQUAL      reduce using rule 60 (literal -> INTNUMBER .)
    EQUAL           reduce using rule 60 (literal -> INTNUMBER .)
    NOT_EQUAL       reduce using rule 60 (literal -> INTNUMBER .)
    TIPO_EQUAL      reduce using rule 60 (literal -> INTNUMBER .)
    AND             reduce using rule 60 (literal -> INTNUMBER .)
    DOTDOT          reduce using rule 60 (literal -> INTNUMBER .)
    DOTDOTDOT       reduce using rule 60 (literal -> INTNUMBER .)
    OR              reduce using rule 60 (literal -> INTNUMBER .)
    QMARK           reduce using rule 60 (literal -> INTNUMBER .)
    CONSTANT        reduce using rule 60 (literal -> INTNUMBER .)
    MODULE          reduce using rule 60 (literal -> INTNUMBER .)
    DEF             reduce using rule 60 (literal -> INTNUMBER .)
    $end            reduce using rule 60 (literal -> INTNUMBER .)
    DOT             reduce using rule 60 (literal -> INTNUMBER .)
    NEWLINE         reduce using rule 60 (literal -> INTNUMBER .)
    END             reduce using rule 60 (literal -> INTNUMBER .)
    COMMA           reduce using rule 60 (literal -> INTNUMBER .)
    RBRACKET        reduce using rule 60 (literal -> INTNUMBER .)
    RPAREN          reduce using rule 60 (literal -> INTNUMBER .)
    WHEN            reduce using rule 60 (literal -> INTNUMBER .)
    ELSIF           reduce using rule 60 (literal -> INTNUMBER .)
    ELSE            reduce using rule 60 (literal -> INTNUMBER .)
    RBRACE          reduce using rule 60 (literal -> INTNUMBER .)
    LBRACE          reduce using rule 60 (literal -> INTNUMBER .)
    ID              reduce using rule 60 (literal -> INTNUMBER .)
    CASE            reduce using rule 60 (literal -> INTNUMBER .)
    RETURN          reduce using rule 60 (literal -> INTNUMBER .)
    BREAK           reduce using rule 60 (literal -> INTNUMBER .)
    NEXT            reduce using rule 60 (literal -> INTNUMBER .)
    UNDERSCORE      reduce using rule 60 (literal -> INTNUMBER .)
    ASTERISK        reduce using rule 60 (literal -> INTNUMBER .)
    IF              reduce using rule 60 (literal -> INTNUMBER .)
    UNLESS          reduce using rule 60 (literal -> INTNUMBER .)
    WHILE           reduce using rule 60 (literal -> INTNUMBER .)
    UNTIL           reduce using rule 60 (literal -> INTNUMBER .)
    LOOP            reduce using rule 60 (literal -> INTNUMBER .)
    EXCLAMATION     reduce using rule 60 (literal -> INTNUMBER .)
    TILDE           reduce using rule 60 (literal -> INTNUMBER .)
    LPAREN          reduce using rule 60 (literal -> INTNUMBER .)
    LBRACKET        reduce using rule 60 (literal -> INTNUMBER .)
    INTNUMBER       reduce using rule 60 (literal -> INTNUMBER .)
    FLOATNUMBER     reduce using rule 60 (literal -> INTNUMBER .)
    CHAR            reduce using rule 60 (literal -> INTNUMBER .)
    TRUE            reduce using rule 60 (literal -> INTNUMBER .)
    FALSE           reduce using rule 60 (literal -> INTNUMBER .)
    STRING          reduce using rule 60 (literal -> INTNUMBER .)
    TCOLON          reduce using rule 60 (literal -> INTNUMBER .)
    INTERP_END      reduce using rule 60 (literal -> INTNUMBER .)


state 58

    (61) literal -> FLOATNUMBER .

    POTENCIACAO     reduce using rule 61 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 61 (literal -> FLOATNUMBER .)
    MINUS           reduce using rule 61 (literal -> FLOATNUMBER .)
    MULTI           reduce using rule 61 (literal -> FLOATNUMBER .)
    DIVIDE          reduce using rule 61 (literal -> FLOATNUMBER .)
    MODULO          reduce using rule 61 (literal -> FLOATNUMBER .)
    GREATER_THAN    reduce using rule 61 (literal -> FLOATNUMBER .)
    LESS_THAN       reduce using rule 61 (literal -> FLOATNUMBER .)
    GREATER_EQUAL   reduce using rule 61 (literal -> FLOATNUMBER .)
    LESS_EQUAL      reduce using rule 61 (literal -> FLOATNUMBER .)
    EQUAL           reduce using rule 61 (literal -> FLOATNUMBER .)
    NOT_EQUAL       reduce using rule 61 (literal -> FLOATNUMBER .)
    TIPO_EQUAL      reduce using rule 61 (literal -> FLOATNUMBER .)
    AND             reduce using rule 61 (literal -> FLOATNUMBER .)
    DOTDOT          reduce using rule 61 (literal -> FLOATNUMBER .)
    DOTDOTDOT       reduce using rule 61 (literal -> FLOATNUMBER .)
    OR              reduce using rule 61 (literal -> FLOATNUMBER .)
    QMARK           reduce using rule 61 (literal -> FLOATNUMBER .)
    CONSTANT        reduce using rule 61 (literal -> FLOATNUMBER .)
    MODULE          reduce using rule 61 (literal -> FLOATNUMBER .)
    DEF             reduce using rule 61 (literal -> FLOATNUMBER .)
    $end            reduce using rule 61 (literal -> FLOATNUMBER .)
    DOT             reduce using rule 61 (literal -> FLOATNUMBER .)
    NEWLINE         reduce using rule 61 (literal -> FLOATNUMBER .)
    END             reduce using rule 61 (literal -> FLOATNUMBER .)
    COMMA           reduce using rule 61 (literal -> FLOATNUMBER .)
    RBRACKET        reduce using rule 61 (literal -> FLOATNUMBER .)
    RPAREN          reduce using rule 61 (literal -> FLOATNUMBER .)
    WHEN            reduce using rule 61 (literal -> FLOATNUMBER .)
    ELSIF           reduce using rule 61 (literal -> FLOATNUMBER .)
    ELSE            reduce using rule 61 (literal -> FLOATNUMBER .)
    RBRACE          reduce using rule 61 (literal -> FLOATNUMBER .)
    LBRACE          reduce using rule 61 (literal -> FLOATNUMBER .)
    ID              reduce using rule 61 (literal -> FLOATNUMBER .)
    CASE            reduce using rule 61 (literal -> FLOATNUMBER .)
    RETURN          reduce using rule 61 (literal -> FLOATNUMBER .)
    BREAK           reduce using rule 61 (literal -> FLOATNUMBER .)
    NEXT            reduce using rule 61 (literal -> FLOATNUMBER .)
    UNDERSCORE      reduce using rule 61 (literal -> FLOATNUMBER .)
    ASTERISK        reduce using rule 61 (literal -> FLOATNUMBER .)
    IF              reduce using rule 61 (literal -> FLOATNUMBER .)
    UNLESS          reduce using rule 61 (literal -> FLOATNUMBER .)
    WHILE           reduce using rule 61 (literal -> FLOATNUMBER .)
    UNTIL           reduce using rule 61 (literal -> FLOATNUMBER .)
    LOOP            reduce using rule 61 (literal -> FLOATNUMBER .)
    EXCLAMATION     reduce using rule 61 (literal -> FLOATNUMBER .)
    TILDE           reduce using rule 61 (literal -> FLOATNUMBER .)
    LPAREN          reduce using rule 61 (literal -> FLOATNUMBER .)
    LBRACKET        reduce using rule 61 (literal -> FLOATNUMBER .)
    INTNUMBER       reduce using rule 61 (literal -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 61 (literal -> FLOATNUMBER .)
    CHAR            reduce using rule 61 (literal -> FLOATNUMBER .)
    TRUE            reduce using rule 61 (literal -> FLOATNUMBER .)
    FALSE           reduce using rule 61 (literal -> FLOATNUMBER .)
    STRING          reduce using rule 61 (literal -> FLOATNUMBER .)
    TCOLON          reduce using rule 61 (literal -> FLOATNUMBER .)
    INTERP_END      reduce using rule 61 (literal -> FLOATNUMBER .)


state 59

    (62) literal -> string_literal .

    POTENCIACAO     reduce using rule 62 (literal -> string_literal .)
    PLUS            reduce using rule 62 (literal -> string_literal .)
    MINUS           reduce using rule 62 (literal -> string_literal .)
    MULTI           reduce using rule 62 (literal -> string_literal .)
    DIVIDE          reduce using rule 62 (literal -> string_literal .)
    MODULO          reduce using rule 62 (literal -> string_literal .)
    GREATER_THAN    reduce using rule 62 (literal -> string_literal .)
    LESS_THAN       reduce using rule 62 (literal -> string_literal .)
    GREATER_EQUAL   reduce using rule 62 (literal -> string_literal .)
    LESS_EQUAL      reduce using rule 62 (literal -> string_literal .)
    EQUAL           reduce using rule 62 (literal -> string_literal .)
    NOT_EQUAL       reduce using rule 62 (literal -> string_literal .)
    TIPO_EQUAL      reduce using rule 62 (literal -> string_literal .)
    AND             reduce using rule 62 (literal -> string_literal .)
    DOTDOT          reduce using rule 62 (literal -> string_literal .)
    DOTDOTDOT       reduce using rule 62 (literal -> string_literal .)
    OR              reduce using rule 62 (literal -> string_literal .)
    QMARK           reduce using rule 62 (literal -> string_literal .)
    CONSTANT        reduce using rule 62 (literal -> string_literal .)
    MODULE          reduce using rule 62 (literal -> string_literal .)
    DEF             reduce using rule 62 (literal -> string_literal .)
    $end            reduce using rule 62 (literal -> string_literal .)
    DOT             reduce using rule 62 (literal -> string_literal .)
    NEWLINE         reduce using rule 62 (literal -> string_literal .)
    END             reduce using rule 62 (literal -> string_literal .)
    COMMA           reduce using rule 62 (literal -> string_literal .)
    RBRACKET        reduce using rule 62 (literal -> string_literal .)
    RPAREN          reduce using rule 62 (literal -> string_literal .)
    WHEN            reduce using rule 62 (literal -> string_literal .)
    ELSIF           reduce using rule 62 (literal -> string_literal .)
    ELSE            reduce using rule 62 (literal -> string_literal .)
    RBRACE          reduce using rule 62 (literal -> string_literal .)
    LBRACE          reduce using rule 62 (literal -> string_literal .)
    ID              reduce using rule 62 (literal -> string_literal .)
    CASE            reduce using rule 62 (literal -> string_literal .)
    RETURN          reduce using rule 62 (literal -> string_literal .)
    BREAK           reduce using rule 62 (literal -> string_literal .)
    NEXT            reduce using rule 62 (literal -> string_literal .)
    UNDERSCORE      reduce using rule 62 (literal -> string_literal .)
    ASTERISK        reduce using rule 62 (literal -> string_literal .)
    IF              reduce using rule 62 (literal -> string_literal .)
    UNLESS          reduce using rule 62 (literal -> string_literal .)
    WHILE           reduce using rule 62 (literal -> string_literal .)
    UNTIL           reduce using rule 62 (literal -> string_literal .)
    LOOP            reduce using rule 62 (literal -> string_literal .)
    EXCLAMATION     reduce using rule 62 (literal -> string_literal .)
    TILDE           reduce using rule 62 (literal -> string_literal .)
    LPAREN          reduce using rule 62 (literal -> string_literal .)
    LBRACKET        reduce using rule 62 (literal -> string_literal .)
    INTNUMBER       reduce using rule 62 (literal -> string_literal .)
    FLOATNUMBER     reduce using rule 62 (literal -> string_literal .)
    CHAR            reduce using rule 62 (literal -> string_literal .)
    TRUE            reduce using rule 62 (literal -> string_literal .)
    FALSE           reduce using rule 62 (literal -> string_literal .)
    STRING          reduce using rule 62 (literal -> string_literal .)
    TCOLON          reduce using rule 62 (literal -> string_literal .)
    INTERP_END      reduce using rule 62 (literal -> string_literal .)


state 60

    (63) literal -> CHAR .

    POTENCIACAO     reduce using rule 63 (literal -> CHAR .)
    PLUS            reduce using rule 63 (literal -> CHAR .)
    MINUS           reduce using rule 63 (literal -> CHAR .)
    MULTI           reduce using rule 63 (literal -> CHAR .)
    DIVIDE          reduce using rule 63 (literal -> CHAR .)
    MODULO          reduce using rule 63 (literal -> CHAR .)
    GREATER_THAN    reduce using rule 63 (literal -> CHAR .)
    LESS_THAN       reduce using rule 63 (literal -> CHAR .)
    GREATER_EQUAL   reduce using rule 63 (literal -> CHAR .)
    LESS_EQUAL      reduce using rule 63 (literal -> CHAR .)
    EQUAL           reduce using rule 63 (literal -> CHAR .)
    NOT_EQUAL       reduce using rule 63 (literal -> CHAR .)
    TIPO_EQUAL      reduce using rule 63 (literal -> CHAR .)
    AND             reduce using rule 63 (literal -> CHAR .)
    DOTDOT          reduce using rule 63 (literal -> CHAR .)
    DOTDOTDOT       reduce using rule 63 (literal -> CHAR .)
    OR              reduce using rule 63 (literal -> CHAR .)
    QMARK           reduce using rule 63 (literal -> CHAR .)
    CONSTANT        reduce using rule 63 (literal -> CHAR .)
    MODULE          reduce using rule 63 (literal -> CHAR .)
    DEF             reduce using rule 63 (literal -> CHAR .)
    $end            reduce using rule 63 (literal -> CHAR .)
    DOT             reduce using rule 63 (literal -> CHAR .)
    NEWLINE         reduce using rule 63 (literal -> CHAR .)
    END             reduce using rule 63 (literal -> CHAR .)
    COMMA           reduce using rule 63 (literal -> CHAR .)
    RBRACKET        reduce using rule 63 (literal -> CHAR .)
    RPAREN          reduce using rule 63 (literal -> CHAR .)
    WHEN            reduce using rule 63 (literal -> CHAR .)
    ELSIF           reduce using rule 63 (literal -> CHAR .)
    ELSE            reduce using rule 63 (literal -> CHAR .)
    RBRACE          reduce using rule 63 (literal -> CHAR .)
    LBRACE          reduce using rule 63 (literal -> CHAR .)
    ID              reduce using rule 63 (literal -> CHAR .)
    CASE            reduce using rule 63 (literal -> CHAR .)
    RETURN          reduce using rule 63 (literal -> CHAR .)
    BREAK           reduce using rule 63 (literal -> CHAR .)
    NEXT            reduce using rule 63 (literal -> CHAR .)
    UNDERSCORE      reduce using rule 63 (literal -> CHAR .)
    ASTERISK        reduce using rule 63 (literal -> CHAR .)
    IF              reduce using rule 63 (literal -> CHAR .)
    UNLESS          reduce using rule 63 (literal -> CHAR .)
    WHILE           reduce using rule 63 (literal -> CHAR .)
    UNTIL           reduce using rule 63 (literal -> CHAR .)
    LOOP            reduce using rule 63 (literal -> CHAR .)
    EXCLAMATION     reduce using rule 63 (literal -> CHAR .)
    TILDE           reduce using rule 63 (literal -> CHAR .)
    LPAREN          reduce using rule 63 (literal -> CHAR .)
    LBRACKET        reduce using rule 63 (literal -> CHAR .)
    INTNUMBER       reduce using rule 63 (literal -> CHAR .)
    FLOATNUMBER     reduce using rule 63 (literal -> CHAR .)
    CHAR            reduce using rule 63 (literal -> CHAR .)
    TRUE            reduce using rule 63 (literal -> CHAR .)
    FALSE           reduce using rule 63 (literal -> CHAR .)
    STRING          reduce using rule 63 (literal -> CHAR .)
    TCOLON          reduce using rule 63 (literal -> CHAR .)
    INTERP_END      reduce using rule 63 (literal -> CHAR .)


state 61

    (64) literal -> TRUE .

    POTENCIACAO     reduce using rule 64 (literal -> TRUE .)
    PLUS            reduce using rule 64 (literal -> TRUE .)
    MINUS           reduce using rule 64 (literal -> TRUE .)
    MULTI           reduce using rule 64 (literal -> TRUE .)
    DIVIDE          reduce using rule 64 (literal -> TRUE .)
    MODULO          reduce using rule 64 (literal -> TRUE .)
    GREATER_THAN    reduce using rule 64 (literal -> TRUE .)
    LESS_THAN       reduce using rule 64 (literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 64 (literal -> TRUE .)
    LESS_EQUAL      reduce using rule 64 (literal -> TRUE .)
    EQUAL           reduce using rule 64 (literal -> TRUE .)
    NOT_EQUAL       reduce using rule 64 (literal -> TRUE .)
    TIPO_EQUAL      reduce using rule 64 (literal -> TRUE .)
    AND             reduce using rule 64 (literal -> TRUE .)
    DOTDOT          reduce using rule 64 (literal -> TRUE .)
    DOTDOTDOT       reduce using rule 64 (literal -> TRUE .)
    OR              reduce using rule 64 (literal -> TRUE .)
    QMARK           reduce using rule 64 (literal -> TRUE .)
    CONSTANT        reduce using rule 64 (literal -> TRUE .)
    MODULE          reduce using rule 64 (literal -> TRUE .)
    DEF             reduce using rule 64 (literal -> TRUE .)
    $end            reduce using rule 64 (literal -> TRUE .)
    DOT             reduce using rule 64 (literal -> TRUE .)
    NEWLINE         reduce using rule 64 (literal -> TRUE .)
    END             reduce using rule 64 (literal -> TRUE .)
    COMMA           reduce using rule 64 (literal -> TRUE .)
    RBRACKET        reduce using rule 64 (literal -> TRUE .)
    RPAREN          reduce using rule 64 (literal -> TRUE .)
    WHEN            reduce using rule 64 (literal -> TRUE .)
    ELSIF           reduce using rule 64 (literal -> TRUE .)
    ELSE            reduce using rule 64 (literal -> TRUE .)
    RBRACE          reduce using rule 64 (literal -> TRUE .)
    LBRACE          reduce using rule 64 (literal -> TRUE .)
    ID              reduce using rule 64 (literal -> TRUE .)
    CASE            reduce using rule 64 (literal -> TRUE .)
    RETURN          reduce using rule 64 (literal -> TRUE .)
    BREAK           reduce using rule 64 (literal -> TRUE .)
    NEXT            reduce using rule 64 (literal -> TRUE .)
    UNDERSCORE      reduce using rule 64 (literal -> TRUE .)
    ASTERISK        reduce using rule 64 (literal -> TRUE .)
    IF              reduce using rule 64 (literal -> TRUE .)
    UNLESS          reduce using rule 64 (literal -> TRUE .)
    WHILE           reduce using rule 64 (literal -> TRUE .)
    UNTIL           reduce using rule 64 (literal -> TRUE .)
    LOOP            reduce using rule 64 (literal -> TRUE .)
    EXCLAMATION     reduce using rule 64 (literal -> TRUE .)
    TILDE           reduce using rule 64 (literal -> TRUE .)
    LPAREN          reduce using rule 64 (literal -> TRUE .)
    LBRACKET        reduce using rule 64 (literal -> TRUE .)
    INTNUMBER       reduce using rule 64 (literal -> TRUE .)
    FLOATNUMBER     reduce using rule 64 (literal -> TRUE .)
    CHAR            reduce using rule 64 (literal -> TRUE .)
    TRUE            reduce using rule 64 (literal -> TRUE .)
    FALSE           reduce using rule 64 (literal -> TRUE .)
    STRING          reduce using rule 64 (literal -> TRUE .)
    TCOLON          reduce using rule 64 (literal -> TRUE .)
    INTERP_END      reduce using rule 64 (literal -> TRUE .)


state 62

    (65) literal -> FALSE .

    POTENCIACAO     reduce using rule 65 (literal -> FALSE .)
    PLUS            reduce using rule 65 (literal -> FALSE .)
    MINUS           reduce using rule 65 (literal -> FALSE .)
    MULTI           reduce using rule 65 (literal -> FALSE .)
    DIVIDE          reduce using rule 65 (literal -> FALSE .)
    MODULO          reduce using rule 65 (literal -> FALSE .)
    GREATER_THAN    reduce using rule 65 (literal -> FALSE .)
    LESS_THAN       reduce using rule 65 (literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 65 (literal -> FALSE .)
    LESS_EQUAL      reduce using rule 65 (literal -> FALSE .)
    EQUAL           reduce using rule 65 (literal -> FALSE .)
    NOT_EQUAL       reduce using rule 65 (literal -> FALSE .)
    TIPO_EQUAL      reduce using rule 65 (literal -> FALSE .)
    AND             reduce using rule 65 (literal -> FALSE .)
    DOTDOT          reduce using rule 65 (literal -> FALSE .)
    DOTDOTDOT       reduce using rule 65 (literal -> FALSE .)
    OR              reduce using rule 65 (literal -> FALSE .)
    QMARK           reduce using rule 65 (literal -> FALSE .)
    CONSTANT        reduce using rule 65 (literal -> FALSE .)
    MODULE          reduce using rule 65 (literal -> FALSE .)
    DEF             reduce using rule 65 (literal -> FALSE .)
    $end            reduce using rule 65 (literal -> FALSE .)
    DOT             reduce using rule 65 (literal -> FALSE .)
    NEWLINE         reduce using rule 65 (literal -> FALSE .)
    END             reduce using rule 65 (literal -> FALSE .)
    COMMA           reduce using rule 65 (literal -> FALSE .)
    RBRACKET        reduce using rule 65 (literal -> FALSE .)
    RPAREN          reduce using rule 65 (literal -> FALSE .)
    WHEN            reduce using rule 65 (literal -> FALSE .)
    ELSIF           reduce using rule 65 (literal -> FALSE .)
    ELSE            reduce using rule 65 (literal -> FALSE .)
    RBRACE          reduce using rule 65 (literal -> FALSE .)
    LBRACE          reduce using rule 65 (literal -> FALSE .)
    ID              reduce using rule 65 (literal -> FALSE .)
    CASE            reduce using rule 65 (literal -> FALSE .)
    RETURN          reduce using rule 65 (literal -> FALSE .)
    BREAK           reduce using rule 65 (literal -> FALSE .)
    NEXT            reduce using rule 65 (literal -> FALSE .)
    UNDERSCORE      reduce using rule 65 (literal -> FALSE .)
    ASTERISK        reduce using rule 65 (literal -> FALSE .)
    IF              reduce using rule 65 (literal -> FALSE .)
    UNLESS          reduce using rule 65 (literal -> FALSE .)
    WHILE           reduce using rule 65 (literal -> FALSE .)
    UNTIL           reduce using rule 65 (literal -> FALSE .)
    LOOP            reduce using rule 65 (literal -> FALSE .)
    EXCLAMATION     reduce using rule 65 (literal -> FALSE .)
    TILDE           reduce using rule 65 (literal -> FALSE .)
    LPAREN          reduce using rule 65 (literal -> FALSE .)
    LBRACKET        reduce using rule 65 (literal -> FALSE .)
    INTNUMBER       reduce using rule 65 (literal -> FALSE .)
    FLOATNUMBER     reduce using rule 65 (literal -> FALSE .)
    CHAR            reduce using rule 65 (literal -> FALSE .)
    TRUE            reduce using rule 65 (literal -> FALSE .)
    FALSE           reduce using rule 65 (literal -> FALSE .)
    STRING          reduce using rule 65 (literal -> FALSE .)
    TCOLON          reduce using rule 65 (literal -> FALSE .)
    INTERP_END      reduce using rule 65 (literal -> FALSE .)


state 63

    (66) string_literal -> STRING .
    (67) string_literal -> STRING . INTERP_START expression INTERP_END string_literal

    POTENCIACAO     reduce using rule 66 (string_literal -> STRING .)
    PLUS            reduce using rule 66 (string_literal -> STRING .)
    MINUS           reduce using rule 66 (string_literal -> STRING .)
    MULTI           reduce using rule 66 (string_literal -> STRING .)
    DIVIDE          reduce using rule 66 (string_literal -> STRING .)
    MODULO          reduce using rule 66 (string_literal -> STRING .)
    GREATER_THAN    reduce using rule 66 (string_literal -> STRING .)
    LESS_THAN       reduce using rule 66 (string_literal -> STRING .)
    GREATER_EQUAL   reduce using rule 66 (string_literal -> STRING .)
    LESS_EQUAL      reduce using rule 66 (string_literal -> STRING .)
    EQUAL           reduce using rule 66 (string_literal -> STRING .)
    NOT_EQUAL       reduce using rule 66 (string_literal -> STRING .)
    TIPO_EQUAL      reduce using rule 66 (string_literal -> STRING .)
    AND             reduce using rule 66 (string_literal -> STRING .)
    DOTDOT          reduce using rule 66 (string_literal -> STRING .)
    DOTDOTDOT       reduce using rule 66 (string_literal -> STRING .)
    OR              reduce using rule 66 (string_literal -> STRING .)
    QMARK           reduce using rule 66 (string_literal -> STRING .)
    CONSTANT        reduce using rule 66 (string_literal -> STRING .)
    MODULE          reduce using rule 66 (string_literal -> STRING .)
    DEF             reduce using rule 66 (string_literal -> STRING .)
    $end            reduce using rule 66 (string_literal -> STRING .)
    DOT             reduce using rule 66 (string_literal -> STRING .)
    NEWLINE         reduce using rule 66 (string_literal -> STRING .)
    END             reduce using rule 66 (string_literal -> STRING .)
    COMMA           reduce using rule 66 (string_literal -> STRING .)
    RBRACKET        reduce using rule 66 (string_literal -> STRING .)
    RPAREN          reduce using rule 66 (string_literal -> STRING .)
    WHEN            reduce using rule 66 (string_literal -> STRING .)
    ELSIF           reduce using rule 66 (string_literal -> STRING .)
    ELSE            reduce using rule 66 (string_literal -> STRING .)
    RBRACE          reduce using rule 66 (string_literal -> STRING .)
    LBRACE          reduce using rule 66 (string_literal -> STRING .)
    ID              reduce using rule 66 (string_literal -> STRING .)
    CASE            reduce using rule 66 (string_literal -> STRING .)
    RETURN          reduce using rule 66 (string_literal -> STRING .)
    BREAK           reduce using rule 66 (string_literal -> STRING .)
    NEXT            reduce using rule 66 (string_literal -> STRING .)
    UNDERSCORE      reduce using rule 66 (string_literal -> STRING .)
    ASTERISK        reduce using rule 66 (string_literal -> STRING .)
    IF              reduce using rule 66 (string_literal -> STRING .)
    UNLESS          reduce using rule 66 (string_literal -> STRING .)
    WHILE           reduce using rule 66 (string_literal -> STRING .)
    UNTIL           reduce using rule 66 (string_literal -> STRING .)
    LOOP            reduce using rule 66 (string_literal -> STRING .)
    EXCLAMATION     reduce using rule 66 (string_literal -> STRING .)
    TILDE           reduce using rule 66 (string_literal -> STRING .)
    LPAREN          reduce using rule 66 (string_literal -> STRING .)
    LBRACKET        reduce using rule 66 (string_literal -> STRING .)
    INTNUMBER       reduce using rule 66 (string_literal -> STRING .)
    FLOATNUMBER     reduce using rule 66 (string_literal -> STRING .)
    CHAR            reduce using rule 66 (string_literal -> STRING .)
    TRUE            reduce using rule 66 (string_literal -> STRING .)
    FALSE           reduce using rule 66 (string_literal -> STRING .)
    STRING          reduce using rule 66 (string_literal -> STRING .)
    TCOLON          reduce using rule 66 (string_literal -> STRING .)
    INTERP_END      reduce using rule 66 (string_literal -> STRING .)
    INTERP_START    shift and go to state 133


state 64

    (68) variable_declaration -> ID . COLON types ASSIGN expression
    (69) variable_declaration -> ID . ASSIGN expression
    (70) variable_declaration -> ID . COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> ID . LPAREN expression_list RPAREN
    (76) function_call -> ID . LPAREN RPAREN
    (131) assignment_target -> ID . LBRACKET expression RBRACKET
    (169) primary_expression -> ID .

    COLON           shift and go to state 134
    ASSIGN          shift and go to state 135
    COMMA           shift and go to state 136
    LPAREN          shift and go to state 137
    LBRACKET        shift and go to state 102
    POTENCIACAO     reduce using rule 169 (primary_expression -> ID .)
    PLUS            reduce using rule 169 (primary_expression -> ID .)
    MINUS           reduce using rule 169 (primary_expression -> ID .)
    MULTI           reduce using rule 169 (primary_expression -> ID .)
    DIVIDE          reduce using rule 169 (primary_expression -> ID .)
    MODULO          reduce using rule 169 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 169 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 169 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 169 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 169 (primary_expression -> ID .)
    EQUAL           reduce using rule 169 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 169 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 169 (primary_expression -> ID .)
    AND             reduce using rule 169 (primary_expression -> ID .)
    DOTDOT          reduce using rule 169 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 169 (primary_expression -> ID .)
    OR              reduce using rule 169 (primary_expression -> ID .)
    QMARK           reduce using rule 169 (primary_expression -> ID .)
    DOT             reduce using rule 169 (primary_expression -> ID .)
    NEWLINE         reduce using rule 169 (primary_expression -> ID .)
    END             reduce using rule 169 (primary_expression -> ID .)
    ELSIF           reduce using rule 169 (primary_expression -> ID .)
    ELSE            reduce using rule 169 (primary_expression -> ID .)
    RBRACE          reduce using rule 169 (primary_expression -> ID .)
    WHEN            reduce using rule 169 (primary_expression -> ID .)


state 65

    (24) module -> MODULE ID statements . END

    END             shift and go to state 138


state 66

    (81) statements -> statement .
    (82) statements -> statement . NEWLINE statements

  ! shift/reduce conflict for NEWLINE resolved as shift
    END             reduce using rule 81 (statements -> statement .)
    ELSIF           reduce using rule 81 (statements -> statement .)
    ELSE            reduce using rule 81 (statements -> statement .)
    RBRACE          reduce using rule 81 (statements -> statement .)
    WHEN            reduce using rule 81 (statements -> statement .)
    NEWLINE         shift and go to state 139

  ! NEWLINE         [ reduce using rule 81 (statements -> statement .) ]


state 67

    (83) statement -> expression .
    (113) iterator -> expression . DOT MULTI statements
    (114) iterator -> expression . DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> expression . DOT EACH LBRACE PIPE ID PIPE RBRACE statements

    NEWLINE         reduce using rule 83 (statement -> expression .)
    END             reduce using rule 83 (statement -> expression .)
    ELSIF           reduce using rule 83 (statement -> expression .)
    ELSE            reduce using rule 83 (statement -> expression .)
    RBRACE          reduce using rule 83 (statement -> expression .)
    WHEN            reduce using rule 83 (statement -> expression .)
    DOT             shift and go to state 140


state 68

    (84) statement -> control_structure .

    NEWLINE         reduce using rule 84 (statement -> control_structure .)
    END             reduce using rule 84 (statement -> control_structure .)
    ELSIF           reduce using rule 84 (statement -> control_structure .)
    ELSE            reduce using rule 84 (statement -> control_structure .)
    RBRACE          reduce using rule 84 (statement -> control_structure .)
    WHEN            reduce using rule 84 (statement -> control_structure .)


state 69

    (85) statement -> variable_declaration .

    NEWLINE         reduce using rule 85 (statement -> variable_declaration .)
    END             reduce using rule 85 (statement -> variable_declaration .)
    ELSIF           reduce using rule 85 (statement -> variable_declaration .)
    ELSE            reduce using rule 85 (statement -> variable_declaration .)
    RBRACE          reduce using rule 85 (statement -> variable_declaration .)
    WHEN            reduce using rule 85 (statement -> variable_declaration .)


state 70

    (86) statement -> function_call .

    NEWLINE         reduce using rule 86 (statement -> function_call .)
    END             reduce using rule 86 (statement -> function_call .)
    ELSIF           reduce using rule 86 (statement -> function_call .)
    ELSE            reduce using rule 86 (statement -> function_call .)
    RBRACE          reduce using rule 86 (statement -> function_call .)
    WHEN            reduce using rule 86 (statement -> function_call .)


state 71

    (87) control_structure -> conditional .

    NEWLINE         reduce using rule 87 (control_structure -> conditional .)
    END             reduce using rule 87 (control_structure -> conditional .)
    ELSIF           reduce using rule 87 (control_structure -> conditional .)
    ELSE            reduce using rule 87 (control_structure -> conditional .)
    RBRACE          reduce using rule 87 (control_structure -> conditional .)
    WHEN            reduce using rule 87 (control_structure -> conditional .)


state 72

    (88) control_structure -> loop_structure .

    NEWLINE         reduce using rule 88 (control_structure -> loop_structure .)
    END             reduce using rule 88 (control_structure -> loop_structure .)
    ELSIF           reduce using rule 88 (control_structure -> loop_structure .)
    ELSE            reduce using rule 88 (control_structure -> loop_structure .)
    RBRACE          reduce using rule 88 (control_structure -> loop_structure .)
    WHEN            reduce using rule 88 (control_structure -> loop_structure .)


state 73

    (89) control_structure -> case_structure .

    NEWLINE         reduce using rule 89 (control_structure -> case_structure .)
    END             reduce using rule 89 (control_structure -> case_structure .)
    ELSIF           reduce using rule 89 (control_structure -> case_structure .)
    ELSE            reduce using rule 89 (control_structure -> case_structure .)
    RBRACE          reduce using rule 89 (control_structure -> case_structure .)
    WHEN            reduce using rule 89 (control_structure -> case_structure .)


state 74

    (90) control_structure -> return_statement .

    NEWLINE         reduce using rule 90 (control_structure -> return_statement .)
    END             reduce using rule 90 (control_structure -> return_statement .)
    ELSIF           reduce using rule 90 (control_structure -> return_statement .)
    ELSE            reduce using rule 90 (control_structure -> return_statement .)
    RBRACE          reduce using rule 90 (control_structure -> return_statement .)
    WHEN            reduce using rule 90 (control_structure -> return_statement .)


state 75

    (91) control_structure -> break_statement .

    NEWLINE         reduce using rule 91 (control_structure -> break_statement .)
    END             reduce using rule 91 (control_structure -> break_statement .)
    ELSIF           reduce using rule 91 (control_structure -> break_statement .)
    ELSE            reduce using rule 91 (control_structure -> break_statement .)
    RBRACE          reduce using rule 91 (control_structure -> break_statement .)
    WHEN            reduce using rule 91 (control_structure -> break_statement .)


state 76

    (92) control_structure -> next_statement .

    NEWLINE         reduce using rule 92 (control_structure -> next_statement .)
    END             reduce using rule 92 (control_structure -> next_statement .)
    ELSIF           reduce using rule 92 (control_structure -> next_statement .)
    ELSE            reduce using rule 92 (control_structure -> next_statement .)
    RBRACE          reduce using rule 92 (control_structure -> next_statement .)
    WHEN            reduce using rule 92 (control_structure -> next_statement .)


state 77

    (93) conditional -> if_statement .

    NEWLINE         reduce using rule 93 (conditional -> if_statement .)
    END             reduce using rule 93 (conditional -> if_statement .)
    ELSIF           reduce using rule 93 (conditional -> if_statement .)
    ELSE            reduce using rule 93 (conditional -> if_statement .)
    RBRACE          reduce using rule 93 (conditional -> if_statement .)
    WHEN            reduce using rule 93 (conditional -> if_statement .)


state 78

    (94) conditional -> unless_statement .

    NEWLINE         reduce using rule 94 (conditional -> unless_statement .)
    END             reduce using rule 94 (conditional -> unless_statement .)
    ELSIF           reduce using rule 94 (conditional -> unless_statement .)
    ELSE            reduce using rule 94 (conditional -> unless_statement .)
    RBRACE          reduce using rule 94 (conditional -> unless_statement .)
    WHEN            reduce using rule 94 (conditional -> unless_statement .)


state 79

    (106) loop_structure -> while .

    NEWLINE         reduce using rule 106 (loop_structure -> while .)
    END             reduce using rule 106 (loop_structure -> while .)
    ELSIF           reduce using rule 106 (loop_structure -> while .)
    ELSE            reduce using rule 106 (loop_structure -> while .)
    RBRACE          reduce using rule 106 (loop_structure -> while .)
    WHEN            reduce using rule 106 (loop_structure -> while .)


state 80

    (107) loop_structure -> until .

    NEWLINE         reduce using rule 107 (loop_structure -> until .)
    END             reduce using rule 107 (loop_structure -> until .)
    ELSIF           reduce using rule 107 (loop_structure -> until .)
    ELSE            reduce using rule 107 (loop_structure -> until .)
    RBRACE          reduce using rule 107 (loop_structure -> until .)
    WHEN            reduce using rule 107 (loop_structure -> until .)


state 81

    (108) loop_structure -> loop .

    NEWLINE         reduce using rule 108 (loop_structure -> loop .)
    END             reduce using rule 108 (loop_structure -> loop .)
    ELSIF           reduce using rule 108 (loop_structure -> loop .)
    ELSE            reduce using rule 108 (loop_structure -> loop .)
    RBRACE          reduce using rule 108 (loop_structure -> loop .)
    WHEN            reduce using rule 108 (loop_structure -> loop .)


state 82

    (109) loop_structure -> iterator .

    NEWLINE         reduce using rule 109 (loop_structure -> iterator .)
    END             reduce using rule 109 (loop_structure -> iterator .)
    ELSIF           reduce using rule 109 (loop_structure -> iterator .)
    ELSE            reduce using rule 109 (loop_structure -> iterator .)
    RBRACE          reduce using rule 109 (loop_structure -> iterator .)
    WHEN            reduce using rule 109 (loop_structure -> iterator .)


state 83

    (116) case_structure -> CASE . expression when_list opt_else END
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 141
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 84

    (119) return_statement -> RETURN . opt_expression
    (122) opt_expression -> . expression
    (123) opt_expression -> . empty
    (124) expression -> . assignment_expression
    (171) empty -> .
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    NEWLINE         reduce using rule 171 (empty -> .)
    END             reduce using rule 171 (empty -> .)
    ELSIF           reduce using rule 171 (empty -> .)
    ELSE            reduce using rule 171 (empty -> .)
    RBRACE          reduce using rule 171 (empty -> .)
    WHEN            reduce using rule 171 (empty -> .)
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    opt_expression                 shift and go to state 142
    expression                     shift and go to state 143
    empty                          shift and go to state 144
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 85

    (120) break_statement -> BREAK . opt_expression
    (122) opt_expression -> . expression
    (123) opt_expression -> . empty
    (124) expression -> . assignment_expression
    (171) empty -> .
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    NEWLINE         reduce using rule 171 (empty -> .)
    END             reduce using rule 171 (empty -> .)
    ELSIF           reduce using rule 171 (empty -> .)
    ELSE            reduce using rule 171 (empty -> .)
    RBRACE          reduce using rule 171 (empty -> .)
    WHEN            reduce using rule 171 (empty -> .)
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    opt_expression                 shift and go to state 145
    expression                     shift and go to state 143
    empty                          shift and go to state 144
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 86

    (121) next_statement -> NEXT . opt_expression
    (122) opt_expression -> . expression
    (123) opt_expression -> . empty
    (124) expression -> . assignment_expression
    (171) empty -> .
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    NEWLINE         reduce using rule 171 (empty -> .)
    END             reduce using rule 171 (empty -> .)
    ELSIF           reduce using rule 171 (empty -> .)
    ELSE            reduce using rule 171 (empty -> .)
    RBRACE          reduce using rule 171 (empty -> .)
    WHEN            reduce using rule 171 (empty -> .)
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    opt_expression                 shift and go to state 146
    expression                     shift and go to state 143
    empty                          shift and go to state 144
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 87

    (95) if_statement -> IF . if_condition statements opt_elsif opt_else END
    (97) if_condition -> . expression
    (98) if_condition -> . expression LBRACE statements RBRACE
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    if_condition                   shift and go to state 147
    expression                     shift and go to state 148
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 88

    (96) unless_statement -> UNLESS . if_condition statements opt_else END
    (97) if_condition -> . expression
    (98) if_condition -> . expression LBRACE statements RBRACE
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    if_condition                   shift and go to state 149
    expression                     shift and go to state 148
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 89

    (110) while -> WHILE . expression statements
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 150
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 90

    (111) until -> UNTIL . expression statements
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 151
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 91

    (112) loop -> LOOP . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements                     shift and go to state 152
    statement                      shift and go to state 66
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 92

    (27) function -> DEF ID LPAREN . opt_argument_list RPAREN opt_return_type statements END
    (29) opt_argument_list -> . argument_list
    (30) opt_argument_list -> . empty
    (31) argument_list -> . argument
    (32) argument_list -> . argument COMMA argument_list
    (171) empty -> .
    (33) argument -> . ID
    (34) argument -> . ID COLON types
    (35) argument -> . ID ASSIGN expression
    (36) argument -> . ID COLON types ASSIGN expression

    RPAREN          reduce using rule 171 (empty -> .)
    ID              shift and go to state 153

    opt_argument_list              shift and go to state 154
    argument_list                  shift and go to state 155
    empty                          shift and go to state 156
    argument                       shift and go to state 157

state 93

    (28) function -> DEF ID opt_return_type . NEWLINE statements END

    NEWLINE         shift and go to state 158


state 94

    (37) opt_return_type -> COLON . types
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 160
    CHAR            shift and go to state 161
    NIL             shift and go to state 162
    INT             shift and go to state 166
    INT8            shift and go to state 167
    INT16           shift and go to state 168
    INT32           shift and go to state 169
    INT64           shift and go to state 170
    INT128          shift and go to state 171
    UINT8           shift and go to state 172
    UINT16          shift and go to state 173
    UINT32          shift and go to state 174
    UINT64          shift and go to state 175
    UINT128         shift and go to state 176
    FLOAT           shift and go to state 177
    FLOAT32         shift and go to state 178
    FLOAT64         shift and go to state 179
    BOOL            shift and go to state 180

    types                          shift and go to state 159
    integer                        shift and go to state 163
    float                          shift and go to state 164
    boolean                        shift and go to state 165

state 95

    (38) opt_return_type -> empty .

    NEWLINE         reduce using rule 38 (opt_return_type -> empty .)
    ID              reduce using rule 38 (opt_return_type -> empty .)
    CASE            reduce using rule 38 (opt_return_type -> empty .)
    RETURN          reduce using rule 38 (opt_return_type -> empty .)
    BREAK           reduce using rule 38 (opt_return_type -> empty .)
    NEXT            reduce using rule 38 (opt_return_type -> empty .)
    UNDERSCORE      reduce using rule 38 (opt_return_type -> empty .)
    ASTERISK        reduce using rule 38 (opt_return_type -> empty .)
    IF              reduce using rule 38 (opt_return_type -> empty .)
    UNLESS          reduce using rule 38 (opt_return_type -> empty .)
    WHILE           reduce using rule 38 (opt_return_type -> empty .)
    UNTIL           reduce using rule 38 (opt_return_type -> empty .)
    LOOP            reduce using rule 38 (opt_return_type -> empty .)
    PLUS            reduce using rule 38 (opt_return_type -> empty .)
    MINUS           reduce using rule 38 (opt_return_type -> empty .)
    EXCLAMATION     reduce using rule 38 (opt_return_type -> empty .)
    TILDE           reduce using rule 38 (opt_return_type -> empty .)
    LPAREN          reduce using rule 38 (opt_return_type -> empty .)
    LBRACKET        reduce using rule 38 (opt_return_type -> empty .)
    INTNUMBER       reduce using rule 38 (opt_return_type -> empty .)
    FLOATNUMBER     reduce using rule 38 (opt_return_type -> empty .)
    CHAR            reduce using rule 38 (opt_return_type -> empty .)
    TRUE            reduce using rule 38 (opt_return_type -> empty .)
    FALSE           reduce using rule 38 (opt_return_type -> empty .)
    STRING          reduce using rule 38 (opt_return_type -> empty .)


state 96

    (1) program -> require_list constant_list module_list function_list .

    $end            reduce using rule 1 (program -> require_list constant_list module_list function_list .)


state 97

    (125) assignment_expression -> assignment_target ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 181
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 98

    (126) assignment_expression -> assignment_target PLUS_ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 182
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 99

    (127) assignment_expression -> assignment_target MINUS_ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 183
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 100

    (128) assignment_expression -> assignment_target MULTI_ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 184
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 101

    (129) assignment_expression -> assignment_target DIVIDE_ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    assignment_target              shift and go to state 34
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 33
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 102

    (131) assignment_target -> ID LBRACKET . expression RBRACKET
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 186
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 103

    (170) array_literal -> LBRACKET opt_expression_list . RBRACKET

    RBRACKET        shift and go to state 187


state 104

    (77) opt_expression_list -> expression_list .
    (80) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 77 (opt_expression_list -> expression_list .)
    COMMA           shift and go to state 188


state 105

    (78) opt_expression_list -> empty .

    RBRACKET        reduce using rule 78 (opt_expression_list -> empty .)


state 106

    (79) expression_list -> expression .

    COMMA           reduce using rule 79 (expression_list -> expression .)
    RBRACKET        reduce using rule 79 (expression_list -> expression .)
    RPAREN          reduce using rule 79 (expression_list -> expression .)


state 107

    (133) assignment_target -> ASTERISK assignment_target .

    ASSIGN          reduce using rule 133 (assignment_target -> ASTERISK assignment_target .)
    PLUS_ASSIGN     reduce using rule 133 (assignment_target -> ASTERISK assignment_target .)
    MINUS_ASSIGN    reduce using rule 133 (assignment_target -> ASTERISK assignment_target .)
    MULTI_ASSIGN    reduce using rule 133 (assignment_target -> ASTERISK assignment_target .)
    DIVIDE_ASSIGN   reduce using rule 133 (assignment_target -> ASTERISK assignment_target .)


state 108

    (131) assignment_target -> ID . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 102


state 109

    (134) ternary_expression -> range_expression QMARK . expression TCOLON expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    range_expression               shift and go to state 40
    expression                     shift and go to state 189
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 110

    (136) range_expression -> logical_or_expression DOTDOT . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    logical_or_expression          shift and go to state 190
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 111

    (137) range_expression -> logical_or_expression DOTDOTDOT . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    logical_or_expression          shift and go to state 191
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 112

    (140) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    logical_and_expression         shift and go to state 192
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 113

    (142) logical_and_expression -> logical_and_expression AND . equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 114

    (144) equality_expression -> equality_expression EQUAL . relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    relational_expression          shift and go to state 194
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 115

    (145) equality_expression -> equality_expression NOT_EQUAL . relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    relational_expression          shift and go to state 195
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 116

    (146) equality_expression -> equality_expression TIPO_EQUAL . relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    relational_expression          shift and go to state 196
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 117

    (148) relational_expression -> relational_expression GREATER_THAN . additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 118

    (149) relational_expression -> relational_expression LESS_THAN . additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 119

    (150) relational_expression -> relational_expression GREATER_EQUAL . additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    additive_expression            shift and go to state 199
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 120

    (151) relational_expression -> relational_expression LESS_EQUAL . additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    additive_expression            shift and go to state 200
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 121

    (153) additive_expression -> multiplicative_expression PLUS . additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    multiplicative_expression      shift and go to state 46
    additive_expression            shift and go to state 201
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 122

    (154) additive_expression -> multiplicative_expression MINUS . additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    multiplicative_expression      shift and go to state 46
    additive_expression            shift and go to state 202
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 123

    (156) multiplicative_expression -> multiplicative_expression MULTI . potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    potenciacao_expression         shift and go to state 203
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 124

    (157) multiplicative_expression -> multiplicative_expression DIVIDE . potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    potenciacao_expression         shift and go to state 204
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 125

    (158) multiplicative_expression -> multiplicative_expression MODULO . potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    potenciacao_expression         shift and go to state 205
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 126

    (161) unary_expression -> PLUS unary_expression .

    POTENCIACAO     reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    MULTI           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    GREATER_THAN    reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    LESS_THAN       reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    GREATER_EQUAL   reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    LESS_EQUAL      reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    NOT_EQUAL       reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    TIPO_EQUAL      reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    DOTDOT          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    DOTDOTDOT       reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    QMARK           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    CONSTANT        reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    MODULE          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    DEF             reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    $end            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    DOT             reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    NEWLINE         reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    END             reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    WHEN            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    ELSIF           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    RBRACE          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    LBRACE          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    ID              reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    CASE            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    RETURN          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    BREAK           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    NEXT            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    UNDERSCORE      reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    ASTERISK        reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    IF              reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    UNLESS          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    WHILE           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    UNTIL           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    LOOP            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    EXCLAMATION     reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    TILDE           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    LPAREN          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    LBRACKET        reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    INTNUMBER       reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    FLOATNUMBER     reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    CHAR            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    TRUE            reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    FALSE           reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    STRING          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    TCOLON          reduce using rule 161 (unary_expression -> PLUS unary_expression .)
    INTERP_END      reduce using rule 161 (unary_expression -> PLUS unary_expression .)


state 127

    (169) primary_expression -> ID .

    POTENCIACAO     reduce using rule 169 (primary_expression -> ID .)
    PLUS            reduce using rule 169 (primary_expression -> ID .)
    MINUS           reduce using rule 169 (primary_expression -> ID .)
    MULTI           reduce using rule 169 (primary_expression -> ID .)
    DIVIDE          reduce using rule 169 (primary_expression -> ID .)
    MODULO          reduce using rule 169 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 169 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 169 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 169 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 169 (primary_expression -> ID .)
    EQUAL           reduce using rule 169 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 169 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 169 (primary_expression -> ID .)
    AND             reduce using rule 169 (primary_expression -> ID .)
    DOTDOT          reduce using rule 169 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 169 (primary_expression -> ID .)
    OR              reduce using rule 169 (primary_expression -> ID .)
    QMARK           reduce using rule 169 (primary_expression -> ID .)
    CONSTANT        reduce using rule 169 (primary_expression -> ID .)
    MODULE          reduce using rule 169 (primary_expression -> ID .)
    DEF             reduce using rule 169 (primary_expression -> ID .)
    $end            reduce using rule 169 (primary_expression -> ID .)
    DOT             reduce using rule 169 (primary_expression -> ID .)
    NEWLINE         reduce using rule 169 (primary_expression -> ID .)
    END             reduce using rule 169 (primary_expression -> ID .)
    COMMA           reduce using rule 169 (primary_expression -> ID .)
    RBRACKET        reduce using rule 169 (primary_expression -> ID .)
    RPAREN          reduce using rule 169 (primary_expression -> ID .)
    WHEN            reduce using rule 169 (primary_expression -> ID .)
    ELSIF           reduce using rule 169 (primary_expression -> ID .)
    ELSE            reduce using rule 169 (primary_expression -> ID .)
    RBRACE          reduce using rule 169 (primary_expression -> ID .)
    LBRACE          reduce using rule 169 (primary_expression -> ID .)
    ID              reduce using rule 169 (primary_expression -> ID .)
    CASE            reduce using rule 169 (primary_expression -> ID .)
    RETURN          reduce using rule 169 (primary_expression -> ID .)
    BREAK           reduce using rule 169 (primary_expression -> ID .)
    NEXT            reduce using rule 169 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 169 (primary_expression -> ID .)
    ASTERISK        reduce using rule 169 (primary_expression -> ID .)
    IF              reduce using rule 169 (primary_expression -> ID .)
    UNLESS          reduce using rule 169 (primary_expression -> ID .)
    WHILE           reduce using rule 169 (primary_expression -> ID .)
    UNTIL           reduce using rule 169 (primary_expression -> ID .)
    LOOP            reduce using rule 169 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 169 (primary_expression -> ID .)
    TILDE           reduce using rule 169 (primary_expression -> ID .)
    LPAREN          reduce using rule 169 (primary_expression -> ID .)
    LBRACKET        reduce using rule 169 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 169 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 169 (primary_expression -> ID .)
    CHAR            reduce using rule 169 (primary_expression -> ID .)
    TRUE            reduce using rule 169 (primary_expression -> ID .)
    FALSE           reduce using rule 169 (primary_expression -> ID .)
    STRING          reduce using rule 169 (primary_expression -> ID .)
    TCOLON          reduce using rule 169 (primary_expression -> ID .)
    INTERP_END      reduce using rule 169 (primary_expression -> ID .)


state 128

    (162) unary_expression -> MINUS unary_expression .

    POTENCIACAO     reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    MULTI           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    GREATER_THAN    reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    LESS_THAN       reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    GREATER_EQUAL   reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    LESS_EQUAL      reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    NOT_EQUAL       reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    TIPO_EQUAL      reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    DOTDOT          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    DOTDOTDOT       reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    QMARK           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    CONSTANT        reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    MODULE          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    DEF             reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    $end            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    DOT             reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    NEWLINE         reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    END             reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    WHEN            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    ELSIF           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    RBRACE          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    LBRACE          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    ID              reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    CASE            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    RETURN          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    BREAK           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    NEXT            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    UNDERSCORE      reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    ASTERISK        reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    IF              reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    UNLESS          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    WHILE           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    UNTIL           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    LOOP            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    EXCLAMATION     reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    TILDE           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    LPAREN          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    LBRACKET        reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    INTNUMBER       reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    FLOATNUMBER     reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    CHAR            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    TRUE            reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    FALSE           reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    STRING          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    TCOLON          reduce using rule 162 (unary_expression -> MINUS unary_expression .)
    INTERP_END      reduce using rule 162 (unary_expression -> MINUS unary_expression .)


state 129

    (160) potenciacao_expression -> potenciacao_expression POTENCIACAO . unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    ID              shift and go to state 127
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    unary_expression               shift and go to state 206
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 130

    (163) unary_expression -> EXCLAMATION unary_expression .

    POTENCIACAO     reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    MULTI           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    DIVIDE          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_THAN    reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_THAN       reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQUAL   reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQUAL      reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    EQUAL           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQUAL       reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    TIPO_EQUAL      reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    AND             reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    DOTDOT          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    DOTDOTDOT       reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    OR              reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    QMARK           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    CONSTANT        reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    MODULE          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    DEF             reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    $end            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    DOT             reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    NEWLINE         reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    END             reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACKET        reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    WHEN            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    ELSIF           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    ELSE            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACE          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACE          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    ID              reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    CASE            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    RETURN          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    BREAK           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    NEXT            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    UNDERSCORE      reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    ASTERISK        reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    IF              reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    UNLESS          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    WHILE           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    UNTIL           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    LOOP            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    EXCLAMATION     reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    TILDE           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    LPAREN          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACKET        reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    INTNUMBER       reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    FLOATNUMBER     reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    CHAR            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    TRUE            reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    FALSE           reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    STRING          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    TCOLON          reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)
    INTERP_END      reduce using rule 163 (unary_expression -> EXCLAMATION unary_expression .)


state 131

    (164) unary_expression -> TILDE unary_expression .

    POTENCIACAO     reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    PLUS            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    MINUS           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    MULTI           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    DIVIDE          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    MODULO          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    GREATER_THAN    reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    LESS_THAN       reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    GREATER_EQUAL   reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    LESS_EQUAL      reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    EQUAL           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    NOT_EQUAL       reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    TIPO_EQUAL      reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    AND             reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    DOTDOT          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    DOTDOTDOT       reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    OR              reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    QMARK           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    CONSTANT        reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    MODULE          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    DEF             reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    $end            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    DOT             reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    NEWLINE         reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    END             reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    COMMA           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    RBRACKET        reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    RPAREN          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    WHEN            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    ELSIF           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    ELSE            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    RBRACE          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    LBRACE          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    ID              reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    CASE            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    RETURN          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    BREAK           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    NEXT            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    UNDERSCORE      reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    ASTERISK        reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    IF              reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    UNLESS          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    WHILE           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    UNTIL           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    LOOP            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    EXCLAMATION     reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    TILDE           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    LPAREN          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    LBRACKET        reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    INTNUMBER       reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    FLOATNUMBER     reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    CHAR            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    TRUE            reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    FALSE           reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    STRING          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    TCOLON          reduce using rule 164 (unary_expression -> TILDE unary_expression .)
    INTERP_END      reduce using rule 164 (unary_expression -> TILDE unary_expression .)


state 132

    (166) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 207


state 133

    (67) string_literal -> STRING INTERP_START . expression INTERP_END string_literal
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 208
    string_literal                 shift and go to state 59
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56

state 134

    (68) variable_declaration -> ID COLON . types ASSIGN expression
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 160
    CHAR            shift and go to state 161
    NIL             shift and go to state 162
    INT             shift and go to state 166
    INT8            shift and go to state 167
    INT16           shift and go to state 168
    INT32           shift and go to state 169
    INT64           shift and go to state 170
    INT128          shift and go to state 171
    UINT8           shift and go to state 172
    UINT16          shift and go to state 173
    UINT32          shift and go to state 174
    UINT64          shift and go to state 175
    UINT128         shift and go to state 176
    FLOAT           shift and go to state 177
    FLOAT32         shift and go to state 178
    FLOAT64         shift and go to state 179
    BOOL            shift and go to state 180

    types                          shift and go to state 209
    integer                        shift and go to state 163
    float                          shift and go to state 164
    boolean                        shift and go to state 165

state 135

    (69) variable_declaration -> ID ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 210
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 136

    (70) variable_declaration -> ID COMMA . list_of_identifiers ASSIGN expression COMMA list_of_values
    (71) list_of_identifiers -> . ID
    (72) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 211

    list_of_identifiers            shift and go to state 212

state 137

    (75) function_call -> ID LPAREN . expression_list RPAREN
    (76) function_call -> ID LPAREN . RPAREN
    (79) expression_list -> . expression
    (80) expression_list -> . expression_list COMMA expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    RPAREN          shift and go to state 214
    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression_list                shift and go to state 213
    expression                     shift and go to state 106
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 138

    (24) module -> MODULE ID statements END .

    MODULE          reduce using rule 24 (module -> MODULE ID statements END .)
    DEF             reduce using rule 24 (module -> MODULE ID statements END .)
    $end            reduce using rule 24 (module -> MODULE ID statements END .)


state 139

    (82) statements -> statement NEWLINE . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statement                      shift and go to state 66
    statements                     shift and go to state 215
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 140

    (113) iterator -> expression DOT . MULTI statements
    (114) iterator -> expression DOT . EACH DO PIPE ID PIPE statements END
    (115) iterator -> expression DOT . EACH LBRACE PIPE ID PIPE RBRACE statements

    MULTI           shift and go to state 216
    EACH            shift and go to state 217


state 141

    (116) case_structure -> CASE expression . when_list opt_else END
    (117) when_list -> . WHEN expression statements
    (118) when_list -> . when_list WHEN expression statements

    WHEN            shift and go to state 219

    when_list                      shift and go to state 218

state 142

    (119) return_statement -> RETURN opt_expression .

    NEWLINE         reduce using rule 119 (return_statement -> RETURN opt_expression .)
    END             reduce using rule 119 (return_statement -> RETURN opt_expression .)
    ELSIF           reduce using rule 119 (return_statement -> RETURN opt_expression .)
    ELSE            reduce using rule 119 (return_statement -> RETURN opt_expression .)
    RBRACE          reduce using rule 119 (return_statement -> RETURN opt_expression .)
    WHEN            reduce using rule 119 (return_statement -> RETURN opt_expression .)


state 143

    (122) opt_expression -> expression .

    NEWLINE         reduce using rule 122 (opt_expression -> expression .)
    END             reduce using rule 122 (opt_expression -> expression .)
    ELSIF           reduce using rule 122 (opt_expression -> expression .)
    ELSE            reduce using rule 122 (opt_expression -> expression .)
    RBRACE          reduce using rule 122 (opt_expression -> expression .)
    WHEN            reduce using rule 122 (opt_expression -> expression .)


state 144

    (123) opt_expression -> empty .

    NEWLINE         reduce using rule 123 (opt_expression -> empty .)
    END             reduce using rule 123 (opt_expression -> empty .)
    ELSIF           reduce using rule 123 (opt_expression -> empty .)
    ELSE            reduce using rule 123 (opt_expression -> empty .)
    RBRACE          reduce using rule 123 (opt_expression -> empty .)
    WHEN            reduce using rule 123 (opt_expression -> empty .)


state 145

    (120) break_statement -> BREAK opt_expression .

    NEWLINE         reduce using rule 120 (break_statement -> BREAK opt_expression .)
    END             reduce using rule 120 (break_statement -> BREAK opt_expression .)
    ELSIF           reduce using rule 120 (break_statement -> BREAK opt_expression .)
    ELSE            reduce using rule 120 (break_statement -> BREAK opt_expression .)
    RBRACE          reduce using rule 120 (break_statement -> BREAK opt_expression .)
    WHEN            reduce using rule 120 (break_statement -> BREAK opt_expression .)


state 146

    (121) next_statement -> NEXT opt_expression .

    NEWLINE         reduce using rule 121 (next_statement -> NEXT opt_expression .)
    END             reduce using rule 121 (next_statement -> NEXT opt_expression .)
    ELSIF           reduce using rule 121 (next_statement -> NEXT opt_expression .)
    ELSE            reduce using rule 121 (next_statement -> NEXT opt_expression .)
    RBRACE          reduce using rule 121 (next_statement -> NEXT opt_expression .)
    WHEN            reduce using rule 121 (next_statement -> NEXT opt_expression .)


state 147

    (95) if_statement -> IF if_condition . statements opt_elsif opt_else END
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements                     shift and go to state 220
    statement                      shift and go to state 66
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 148

    (97) if_condition -> expression .
    (98) if_condition -> expression . LBRACE statements RBRACE

    ID              reduce using rule 97 (if_condition -> expression .)
    CASE            reduce using rule 97 (if_condition -> expression .)
    RETURN          reduce using rule 97 (if_condition -> expression .)
    BREAK           reduce using rule 97 (if_condition -> expression .)
    NEXT            reduce using rule 97 (if_condition -> expression .)
    UNDERSCORE      reduce using rule 97 (if_condition -> expression .)
    ASTERISK        reduce using rule 97 (if_condition -> expression .)
    IF              reduce using rule 97 (if_condition -> expression .)
    UNLESS          reduce using rule 97 (if_condition -> expression .)
    WHILE           reduce using rule 97 (if_condition -> expression .)
    UNTIL           reduce using rule 97 (if_condition -> expression .)
    LOOP            reduce using rule 97 (if_condition -> expression .)
    PLUS            reduce using rule 97 (if_condition -> expression .)
    MINUS           reduce using rule 97 (if_condition -> expression .)
    EXCLAMATION     reduce using rule 97 (if_condition -> expression .)
    TILDE           reduce using rule 97 (if_condition -> expression .)
    LPAREN          reduce using rule 97 (if_condition -> expression .)
    LBRACKET        reduce using rule 97 (if_condition -> expression .)
    INTNUMBER       reduce using rule 97 (if_condition -> expression .)
    FLOATNUMBER     reduce using rule 97 (if_condition -> expression .)
    CHAR            reduce using rule 97 (if_condition -> expression .)
    TRUE            reduce using rule 97 (if_condition -> expression .)
    FALSE           reduce using rule 97 (if_condition -> expression .)
    STRING          reduce using rule 97 (if_condition -> expression .)
    LBRACE          shift and go to state 221


state 149

    (96) unless_statement -> UNLESS if_condition . statements opt_else END
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements                     shift and go to state 222
    statement                      shift and go to state 66
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 150

    (110) while -> WHILE expression . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 67
    statements                     shift and go to state 223
    statement                      shift and go to state 66
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 151

    (111) until -> UNTIL expression . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 67
    statements                     shift and go to state 224
    statement                      shift and go to state 66
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 152

    (112) loop -> LOOP statements .

    NEWLINE         reduce using rule 112 (loop -> LOOP statements .)
    END             reduce using rule 112 (loop -> LOOP statements .)
    ELSIF           reduce using rule 112 (loop -> LOOP statements .)
    ELSE            reduce using rule 112 (loop -> LOOP statements .)
    RBRACE          reduce using rule 112 (loop -> LOOP statements .)
    WHEN            reduce using rule 112 (loop -> LOOP statements .)


state 153

    (33) argument -> ID .
    (34) argument -> ID . COLON types
    (35) argument -> ID . ASSIGN expression
    (36) argument -> ID . COLON types ASSIGN expression

    COMMA           reduce using rule 33 (argument -> ID .)
    RPAREN          reduce using rule 33 (argument -> ID .)
    COLON           shift and go to state 225
    ASSIGN          shift and go to state 226


state 154

    (27) function -> DEF ID LPAREN opt_argument_list . RPAREN opt_return_type statements END

    RPAREN          shift and go to state 227


state 155

    (29) opt_argument_list -> argument_list .

    RPAREN          reduce using rule 29 (opt_argument_list -> argument_list .)


state 156

    (30) opt_argument_list -> empty .

    RPAREN          reduce using rule 30 (opt_argument_list -> empty .)


state 157

    (31) argument_list -> argument .
    (32) argument_list -> argument . COMMA argument_list

    RPAREN          reduce using rule 31 (argument_list -> argument .)
    COMMA           shift and go to state 228


state 158

    (28) function -> DEF ID opt_return_type NEWLINE . statements END
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements                     shift and go to state 229
    statement                      shift and go to state 66
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 159

    (37) opt_return_type -> COLON types .

    NEWLINE         reduce using rule 37 (opt_return_type -> COLON types .)
    ID              reduce using rule 37 (opt_return_type -> COLON types .)
    CASE            reduce using rule 37 (opt_return_type -> COLON types .)
    RETURN          reduce using rule 37 (opt_return_type -> COLON types .)
    BREAK           reduce using rule 37 (opt_return_type -> COLON types .)
    NEXT            reduce using rule 37 (opt_return_type -> COLON types .)
    UNDERSCORE      reduce using rule 37 (opt_return_type -> COLON types .)
    ASTERISK        reduce using rule 37 (opt_return_type -> COLON types .)
    IF              reduce using rule 37 (opt_return_type -> COLON types .)
    UNLESS          reduce using rule 37 (opt_return_type -> COLON types .)
    WHILE           reduce using rule 37 (opt_return_type -> COLON types .)
    UNTIL           reduce using rule 37 (opt_return_type -> COLON types .)
    LOOP            reduce using rule 37 (opt_return_type -> COLON types .)
    PLUS            reduce using rule 37 (opt_return_type -> COLON types .)
    MINUS           reduce using rule 37 (opt_return_type -> COLON types .)
    EXCLAMATION     reduce using rule 37 (opt_return_type -> COLON types .)
    TILDE           reduce using rule 37 (opt_return_type -> COLON types .)
    LPAREN          reduce using rule 37 (opt_return_type -> COLON types .)
    LBRACKET        reduce using rule 37 (opt_return_type -> COLON types .)
    INTNUMBER       reduce using rule 37 (opt_return_type -> COLON types .)
    FLOATNUMBER     reduce using rule 37 (opt_return_type -> COLON types .)
    CHAR            reduce using rule 37 (opt_return_type -> COLON types .)
    TRUE            reduce using rule 37 (opt_return_type -> COLON types .)
    FALSE           reduce using rule 37 (opt_return_type -> COLON types .)
    STRING          reduce using rule 37 (opt_return_type -> COLON types .)


state 160

    (39) types -> STRING .

    NEWLINE         reduce using rule 39 (types -> STRING .)
    ID              reduce using rule 39 (types -> STRING .)
    CASE            reduce using rule 39 (types -> STRING .)
    RETURN          reduce using rule 39 (types -> STRING .)
    BREAK           reduce using rule 39 (types -> STRING .)
    NEXT            reduce using rule 39 (types -> STRING .)
    UNDERSCORE      reduce using rule 39 (types -> STRING .)
    ASTERISK        reduce using rule 39 (types -> STRING .)
    IF              reduce using rule 39 (types -> STRING .)
    UNLESS          reduce using rule 39 (types -> STRING .)
    WHILE           reduce using rule 39 (types -> STRING .)
    UNTIL           reduce using rule 39 (types -> STRING .)
    LOOP            reduce using rule 39 (types -> STRING .)
    PLUS            reduce using rule 39 (types -> STRING .)
    MINUS           reduce using rule 39 (types -> STRING .)
    EXCLAMATION     reduce using rule 39 (types -> STRING .)
    TILDE           reduce using rule 39 (types -> STRING .)
    LPAREN          reduce using rule 39 (types -> STRING .)
    LBRACKET        reduce using rule 39 (types -> STRING .)
    INTNUMBER       reduce using rule 39 (types -> STRING .)
    FLOATNUMBER     reduce using rule 39 (types -> STRING .)
    CHAR            reduce using rule 39 (types -> STRING .)
    TRUE            reduce using rule 39 (types -> STRING .)
    FALSE           reduce using rule 39 (types -> STRING .)
    STRING          reduce using rule 39 (types -> STRING .)
    ASSIGN          reduce using rule 39 (types -> STRING .)
    COMMA           reduce using rule 39 (types -> STRING .)
    RPAREN          reduce using rule 39 (types -> STRING .)


state 161

    (40) types -> CHAR .

    NEWLINE         reduce using rule 40 (types -> CHAR .)
    ID              reduce using rule 40 (types -> CHAR .)
    CASE            reduce using rule 40 (types -> CHAR .)
    RETURN          reduce using rule 40 (types -> CHAR .)
    BREAK           reduce using rule 40 (types -> CHAR .)
    NEXT            reduce using rule 40 (types -> CHAR .)
    UNDERSCORE      reduce using rule 40 (types -> CHAR .)
    ASTERISK        reduce using rule 40 (types -> CHAR .)
    IF              reduce using rule 40 (types -> CHAR .)
    UNLESS          reduce using rule 40 (types -> CHAR .)
    WHILE           reduce using rule 40 (types -> CHAR .)
    UNTIL           reduce using rule 40 (types -> CHAR .)
    LOOP            reduce using rule 40 (types -> CHAR .)
    PLUS            reduce using rule 40 (types -> CHAR .)
    MINUS           reduce using rule 40 (types -> CHAR .)
    EXCLAMATION     reduce using rule 40 (types -> CHAR .)
    TILDE           reduce using rule 40 (types -> CHAR .)
    LPAREN          reduce using rule 40 (types -> CHAR .)
    LBRACKET        reduce using rule 40 (types -> CHAR .)
    INTNUMBER       reduce using rule 40 (types -> CHAR .)
    FLOATNUMBER     reduce using rule 40 (types -> CHAR .)
    CHAR            reduce using rule 40 (types -> CHAR .)
    TRUE            reduce using rule 40 (types -> CHAR .)
    FALSE           reduce using rule 40 (types -> CHAR .)
    STRING          reduce using rule 40 (types -> CHAR .)
    ASSIGN          reduce using rule 40 (types -> CHAR .)
    COMMA           reduce using rule 40 (types -> CHAR .)
    RPAREN          reduce using rule 40 (types -> CHAR .)


state 162

    (41) types -> NIL .

    NEWLINE         reduce using rule 41 (types -> NIL .)
    ID              reduce using rule 41 (types -> NIL .)
    CASE            reduce using rule 41 (types -> NIL .)
    RETURN          reduce using rule 41 (types -> NIL .)
    BREAK           reduce using rule 41 (types -> NIL .)
    NEXT            reduce using rule 41 (types -> NIL .)
    UNDERSCORE      reduce using rule 41 (types -> NIL .)
    ASTERISK        reduce using rule 41 (types -> NIL .)
    IF              reduce using rule 41 (types -> NIL .)
    UNLESS          reduce using rule 41 (types -> NIL .)
    WHILE           reduce using rule 41 (types -> NIL .)
    UNTIL           reduce using rule 41 (types -> NIL .)
    LOOP            reduce using rule 41 (types -> NIL .)
    PLUS            reduce using rule 41 (types -> NIL .)
    MINUS           reduce using rule 41 (types -> NIL .)
    EXCLAMATION     reduce using rule 41 (types -> NIL .)
    TILDE           reduce using rule 41 (types -> NIL .)
    LPAREN          reduce using rule 41 (types -> NIL .)
    LBRACKET        reduce using rule 41 (types -> NIL .)
    INTNUMBER       reduce using rule 41 (types -> NIL .)
    FLOATNUMBER     reduce using rule 41 (types -> NIL .)
    CHAR            reduce using rule 41 (types -> NIL .)
    TRUE            reduce using rule 41 (types -> NIL .)
    FALSE           reduce using rule 41 (types -> NIL .)
    STRING          reduce using rule 41 (types -> NIL .)
    ASSIGN          reduce using rule 41 (types -> NIL .)
    COMMA           reduce using rule 41 (types -> NIL .)
    RPAREN          reduce using rule 41 (types -> NIL .)


state 163

    (42) types -> integer .

    NEWLINE         reduce using rule 42 (types -> integer .)
    ID              reduce using rule 42 (types -> integer .)
    CASE            reduce using rule 42 (types -> integer .)
    RETURN          reduce using rule 42 (types -> integer .)
    BREAK           reduce using rule 42 (types -> integer .)
    NEXT            reduce using rule 42 (types -> integer .)
    UNDERSCORE      reduce using rule 42 (types -> integer .)
    ASTERISK        reduce using rule 42 (types -> integer .)
    IF              reduce using rule 42 (types -> integer .)
    UNLESS          reduce using rule 42 (types -> integer .)
    WHILE           reduce using rule 42 (types -> integer .)
    UNTIL           reduce using rule 42 (types -> integer .)
    LOOP            reduce using rule 42 (types -> integer .)
    PLUS            reduce using rule 42 (types -> integer .)
    MINUS           reduce using rule 42 (types -> integer .)
    EXCLAMATION     reduce using rule 42 (types -> integer .)
    TILDE           reduce using rule 42 (types -> integer .)
    LPAREN          reduce using rule 42 (types -> integer .)
    LBRACKET        reduce using rule 42 (types -> integer .)
    INTNUMBER       reduce using rule 42 (types -> integer .)
    FLOATNUMBER     reduce using rule 42 (types -> integer .)
    CHAR            reduce using rule 42 (types -> integer .)
    TRUE            reduce using rule 42 (types -> integer .)
    FALSE           reduce using rule 42 (types -> integer .)
    STRING          reduce using rule 42 (types -> integer .)
    ASSIGN          reduce using rule 42 (types -> integer .)
    COMMA           reduce using rule 42 (types -> integer .)
    RPAREN          reduce using rule 42 (types -> integer .)


state 164

    (43) types -> float .

    NEWLINE         reduce using rule 43 (types -> float .)
    ID              reduce using rule 43 (types -> float .)
    CASE            reduce using rule 43 (types -> float .)
    RETURN          reduce using rule 43 (types -> float .)
    BREAK           reduce using rule 43 (types -> float .)
    NEXT            reduce using rule 43 (types -> float .)
    UNDERSCORE      reduce using rule 43 (types -> float .)
    ASTERISK        reduce using rule 43 (types -> float .)
    IF              reduce using rule 43 (types -> float .)
    UNLESS          reduce using rule 43 (types -> float .)
    WHILE           reduce using rule 43 (types -> float .)
    UNTIL           reduce using rule 43 (types -> float .)
    LOOP            reduce using rule 43 (types -> float .)
    PLUS            reduce using rule 43 (types -> float .)
    MINUS           reduce using rule 43 (types -> float .)
    EXCLAMATION     reduce using rule 43 (types -> float .)
    TILDE           reduce using rule 43 (types -> float .)
    LPAREN          reduce using rule 43 (types -> float .)
    LBRACKET        reduce using rule 43 (types -> float .)
    INTNUMBER       reduce using rule 43 (types -> float .)
    FLOATNUMBER     reduce using rule 43 (types -> float .)
    CHAR            reduce using rule 43 (types -> float .)
    TRUE            reduce using rule 43 (types -> float .)
    FALSE           reduce using rule 43 (types -> float .)
    STRING          reduce using rule 43 (types -> float .)
    ASSIGN          reduce using rule 43 (types -> float .)
    COMMA           reduce using rule 43 (types -> float .)
    RPAREN          reduce using rule 43 (types -> float .)


state 165

    (44) types -> boolean .

    NEWLINE         reduce using rule 44 (types -> boolean .)
    ID              reduce using rule 44 (types -> boolean .)
    CASE            reduce using rule 44 (types -> boolean .)
    RETURN          reduce using rule 44 (types -> boolean .)
    BREAK           reduce using rule 44 (types -> boolean .)
    NEXT            reduce using rule 44 (types -> boolean .)
    UNDERSCORE      reduce using rule 44 (types -> boolean .)
    ASTERISK        reduce using rule 44 (types -> boolean .)
    IF              reduce using rule 44 (types -> boolean .)
    UNLESS          reduce using rule 44 (types -> boolean .)
    WHILE           reduce using rule 44 (types -> boolean .)
    UNTIL           reduce using rule 44 (types -> boolean .)
    LOOP            reduce using rule 44 (types -> boolean .)
    PLUS            reduce using rule 44 (types -> boolean .)
    MINUS           reduce using rule 44 (types -> boolean .)
    EXCLAMATION     reduce using rule 44 (types -> boolean .)
    TILDE           reduce using rule 44 (types -> boolean .)
    LPAREN          reduce using rule 44 (types -> boolean .)
    LBRACKET        reduce using rule 44 (types -> boolean .)
    INTNUMBER       reduce using rule 44 (types -> boolean .)
    FLOATNUMBER     reduce using rule 44 (types -> boolean .)
    CHAR            reduce using rule 44 (types -> boolean .)
    TRUE            reduce using rule 44 (types -> boolean .)
    FALSE           reduce using rule 44 (types -> boolean .)
    STRING          reduce using rule 44 (types -> boolean .)
    ASSIGN          reduce using rule 44 (types -> boolean .)
    COMMA           reduce using rule 44 (types -> boolean .)
    RPAREN          reduce using rule 44 (types -> boolean .)


state 166

    (45) integer -> INT .

    NEWLINE         reduce using rule 45 (integer -> INT .)
    ID              reduce using rule 45 (integer -> INT .)
    CASE            reduce using rule 45 (integer -> INT .)
    RETURN          reduce using rule 45 (integer -> INT .)
    BREAK           reduce using rule 45 (integer -> INT .)
    NEXT            reduce using rule 45 (integer -> INT .)
    UNDERSCORE      reduce using rule 45 (integer -> INT .)
    ASTERISK        reduce using rule 45 (integer -> INT .)
    IF              reduce using rule 45 (integer -> INT .)
    UNLESS          reduce using rule 45 (integer -> INT .)
    WHILE           reduce using rule 45 (integer -> INT .)
    UNTIL           reduce using rule 45 (integer -> INT .)
    LOOP            reduce using rule 45 (integer -> INT .)
    PLUS            reduce using rule 45 (integer -> INT .)
    MINUS           reduce using rule 45 (integer -> INT .)
    EXCLAMATION     reduce using rule 45 (integer -> INT .)
    TILDE           reduce using rule 45 (integer -> INT .)
    LPAREN          reduce using rule 45 (integer -> INT .)
    LBRACKET        reduce using rule 45 (integer -> INT .)
    INTNUMBER       reduce using rule 45 (integer -> INT .)
    FLOATNUMBER     reduce using rule 45 (integer -> INT .)
    CHAR            reduce using rule 45 (integer -> INT .)
    TRUE            reduce using rule 45 (integer -> INT .)
    FALSE           reduce using rule 45 (integer -> INT .)
    STRING          reduce using rule 45 (integer -> INT .)
    ASSIGN          reduce using rule 45 (integer -> INT .)
    COMMA           reduce using rule 45 (integer -> INT .)
    RPAREN          reduce using rule 45 (integer -> INT .)


state 167

    (46) integer -> INT8 .

    NEWLINE         reduce using rule 46 (integer -> INT8 .)
    ID              reduce using rule 46 (integer -> INT8 .)
    CASE            reduce using rule 46 (integer -> INT8 .)
    RETURN          reduce using rule 46 (integer -> INT8 .)
    BREAK           reduce using rule 46 (integer -> INT8 .)
    NEXT            reduce using rule 46 (integer -> INT8 .)
    UNDERSCORE      reduce using rule 46 (integer -> INT8 .)
    ASTERISK        reduce using rule 46 (integer -> INT8 .)
    IF              reduce using rule 46 (integer -> INT8 .)
    UNLESS          reduce using rule 46 (integer -> INT8 .)
    WHILE           reduce using rule 46 (integer -> INT8 .)
    UNTIL           reduce using rule 46 (integer -> INT8 .)
    LOOP            reduce using rule 46 (integer -> INT8 .)
    PLUS            reduce using rule 46 (integer -> INT8 .)
    MINUS           reduce using rule 46 (integer -> INT8 .)
    EXCLAMATION     reduce using rule 46 (integer -> INT8 .)
    TILDE           reduce using rule 46 (integer -> INT8 .)
    LPAREN          reduce using rule 46 (integer -> INT8 .)
    LBRACKET        reduce using rule 46 (integer -> INT8 .)
    INTNUMBER       reduce using rule 46 (integer -> INT8 .)
    FLOATNUMBER     reduce using rule 46 (integer -> INT8 .)
    CHAR            reduce using rule 46 (integer -> INT8 .)
    TRUE            reduce using rule 46 (integer -> INT8 .)
    FALSE           reduce using rule 46 (integer -> INT8 .)
    STRING          reduce using rule 46 (integer -> INT8 .)
    ASSIGN          reduce using rule 46 (integer -> INT8 .)
    COMMA           reduce using rule 46 (integer -> INT8 .)
    RPAREN          reduce using rule 46 (integer -> INT8 .)


state 168

    (47) integer -> INT16 .

    NEWLINE         reduce using rule 47 (integer -> INT16 .)
    ID              reduce using rule 47 (integer -> INT16 .)
    CASE            reduce using rule 47 (integer -> INT16 .)
    RETURN          reduce using rule 47 (integer -> INT16 .)
    BREAK           reduce using rule 47 (integer -> INT16 .)
    NEXT            reduce using rule 47 (integer -> INT16 .)
    UNDERSCORE      reduce using rule 47 (integer -> INT16 .)
    ASTERISK        reduce using rule 47 (integer -> INT16 .)
    IF              reduce using rule 47 (integer -> INT16 .)
    UNLESS          reduce using rule 47 (integer -> INT16 .)
    WHILE           reduce using rule 47 (integer -> INT16 .)
    UNTIL           reduce using rule 47 (integer -> INT16 .)
    LOOP            reduce using rule 47 (integer -> INT16 .)
    PLUS            reduce using rule 47 (integer -> INT16 .)
    MINUS           reduce using rule 47 (integer -> INT16 .)
    EXCLAMATION     reduce using rule 47 (integer -> INT16 .)
    TILDE           reduce using rule 47 (integer -> INT16 .)
    LPAREN          reduce using rule 47 (integer -> INT16 .)
    LBRACKET        reduce using rule 47 (integer -> INT16 .)
    INTNUMBER       reduce using rule 47 (integer -> INT16 .)
    FLOATNUMBER     reduce using rule 47 (integer -> INT16 .)
    CHAR            reduce using rule 47 (integer -> INT16 .)
    TRUE            reduce using rule 47 (integer -> INT16 .)
    FALSE           reduce using rule 47 (integer -> INT16 .)
    STRING          reduce using rule 47 (integer -> INT16 .)
    ASSIGN          reduce using rule 47 (integer -> INT16 .)
    COMMA           reduce using rule 47 (integer -> INT16 .)
    RPAREN          reduce using rule 47 (integer -> INT16 .)


state 169

    (48) integer -> INT32 .

    NEWLINE         reduce using rule 48 (integer -> INT32 .)
    ID              reduce using rule 48 (integer -> INT32 .)
    CASE            reduce using rule 48 (integer -> INT32 .)
    RETURN          reduce using rule 48 (integer -> INT32 .)
    BREAK           reduce using rule 48 (integer -> INT32 .)
    NEXT            reduce using rule 48 (integer -> INT32 .)
    UNDERSCORE      reduce using rule 48 (integer -> INT32 .)
    ASTERISK        reduce using rule 48 (integer -> INT32 .)
    IF              reduce using rule 48 (integer -> INT32 .)
    UNLESS          reduce using rule 48 (integer -> INT32 .)
    WHILE           reduce using rule 48 (integer -> INT32 .)
    UNTIL           reduce using rule 48 (integer -> INT32 .)
    LOOP            reduce using rule 48 (integer -> INT32 .)
    PLUS            reduce using rule 48 (integer -> INT32 .)
    MINUS           reduce using rule 48 (integer -> INT32 .)
    EXCLAMATION     reduce using rule 48 (integer -> INT32 .)
    TILDE           reduce using rule 48 (integer -> INT32 .)
    LPAREN          reduce using rule 48 (integer -> INT32 .)
    LBRACKET        reduce using rule 48 (integer -> INT32 .)
    INTNUMBER       reduce using rule 48 (integer -> INT32 .)
    FLOATNUMBER     reduce using rule 48 (integer -> INT32 .)
    CHAR            reduce using rule 48 (integer -> INT32 .)
    TRUE            reduce using rule 48 (integer -> INT32 .)
    FALSE           reduce using rule 48 (integer -> INT32 .)
    STRING          reduce using rule 48 (integer -> INT32 .)
    ASSIGN          reduce using rule 48 (integer -> INT32 .)
    COMMA           reduce using rule 48 (integer -> INT32 .)
    RPAREN          reduce using rule 48 (integer -> INT32 .)


state 170

    (49) integer -> INT64 .

    NEWLINE         reduce using rule 49 (integer -> INT64 .)
    ID              reduce using rule 49 (integer -> INT64 .)
    CASE            reduce using rule 49 (integer -> INT64 .)
    RETURN          reduce using rule 49 (integer -> INT64 .)
    BREAK           reduce using rule 49 (integer -> INT64 .)
    NEXT            reduce using rule 49 (integer -> INT64 .)
    UNDERSCORE      reduce using rule 49 (integer -> INT64 .)
    ASTERISK        reduce using rule 49 (integer -> INT64 .)
    IF              reduce using rule 49 (integer -> INT64 .)
    UNLESS          reduce using rule 49 (integer -> INT64 .)
    WHILE           reduce using rule 49 (integer -> INT64 .)
    UNTIL           reduce using rule 49 (integer -> INT64 .)
    LOOP            reduce using rule 49 (integer -> INT64 .)
    PLUS            reduce using rule 49 (integer -> INT64 .)
    MINUS           reduce using rule 49 (integer -> INT64 .)
    EXCLAMATION     reduce using rule 49 (integer -> INT64 .)
    TILDE           reduce using rule 49 (integer -> INT64 .)
    LPAREN          reduce using rule 49 (integer -> INT64 .)
    LBRACKET        reduce using rule 49 (integer -> INT64 .)
    INTNUMBER       reduce using rule 49 (integer -> INT64 .)
    FLOATNUMBER     reduce using rule 49 (integer -> INT64 .)
    CHAR            reduce using rule 49 (integer -> INT64 .)
    TRUE            reduce using rule 49 (integer -> INT64 .)
    FALSE           reduce using rule 49 (integer -> INT64 .)
    STRING          reduce using rule 49 (integer -> INT64 .)
    ASSIGN          reduce using rule 49 (integer -> INT64 .)
    COMMA           reduce using rule 49 (integer -> INT64 .)
    RPAREN          reduce using rule 49 (integer -> INT64 .)


state 171

    (50) integer -> INT128 .

    NEWLINE         reduce using rule 50 (integer -> INT128 .)
    ID              reduce using rule 50 (integer -> INT128 .)
    CASE            reduce using rule 50 (integer -> INT128 .)
    RETURN          reduce using rule 50 (integer -> INT128 .)
    BREAK           reduce using rule 50 (integer -> INT128 .)
    NEXT            reduce using rule 50 (integer -> INT128 .)
    UNDERSCORE      reduce using rule 50 (integer -> INT128 .)
    ASTERISK        reduce using rule 50 (integer -> INT128 .)
    IF              reduce using rule 50 (integer -> INT128 .)
    UNLESS          reduce using rule 50 (integer -> INT128 .)
    WHILE           reduce using rule 50 (integer -> INT128 .)
    UNTIL           reduce using rule 50 (integer -> INT128 .)
    LOOP            reduce using rule 50 (integer -> INT128 .)
    PLUS            reduce using rule 50 (integer -> INT128 .)
    MINUS           reduce using rule 50 (integer -> INT128 .)
    EXCLAMATION     reduce using rule 50 (integer -> INT128 .)
    TILDE           reduce using rule 50 (integer -> INT128 .)
    LPAREN          reduce using rule 50 (integer -> INT128 .)
    LBRACKET        reduce using rule 50 (integer -> INT128 .)
    INTNUMBER       reduce using rule 50 (integer -> INT128 .)
    FLOATNUMBER     reduce using rule 50 (integer -> INT128 .)
    CHAR            reduce using rule 50 (integer -> INT128 .)
    TRUE            reduce using rule 50 (integer -> INT128 .)
    FALSE           reduce using rule 50 (integer -> INT128 .)
    STRING          reduce using rule 50 (integer -> INT128 .)
    ASSIGN          reduce using rule 50 (integer -> INT128 .)
    COMMA           reduce using rule 50 (integer -> INT128 .)
    RPAREN          reduce using rule 50 (integer -> INT128 .)


state 172

    (51) integer -> UINT8 .

    NEWLINE         reduce using rule 51 (integer -> UINT8 .)
    ID              reduce using rule 51 (integer -> UINT8 .)
    CASE            reduce using rule 51 (integer -> UINT8 .)
    RETURN          reduce using rule 51 (integer -> UINT8 .)
    BREAK           reduce using rule 51 (integer -> UINT8 .)
    NEXT            reduce using rule 51 (integer -> UINT8 .)
    UNDERSCORE      reduce using rule 51 (integer -> UINT8 .)
    ASTERISK        reduce using rule 51 (integer -> UINT8 .)
    IF              reduce using rule 51 (integer -> UINT8 .)
    UNLESS          reduce using rule 51 (integer -> UINT8 .)
    WHILE           reduce using rule 51 (integer -> UINT8 .)
    UNTIL           reduce using rule 51 (integer -> UINT8 .)
    LOOP            reduce using rule 51 (integer -> UINT8 .)
    PLUS            reduce using rule 51 (integer -> UINT8 .)
    MINUS           reduce using rule 51 (integer -> UINT8 .)
    EXCLAMATION     reduce using rule 51 (integer -> UINT8 .)
    TILDE           reduce using rule 51 (integer -> UINT8 .)
    LPAREN          reduce using rule 51 (integer -> UINT8 .)
    LBRACKET        reduce using rule 51 (integer -> UINT8 .)
    INTNUMBER       reduce using rule 51 (integer -> UINT8 .)
    FLOATNUMBER     reduce using rule 51 (integer -> UINT8 .)
    CHAR            reduce using rule 51 (integer -> UINT8 .)
    TRUE            reduce using rule 51 (integer -> UINT8 .)
    FALSE           reduce using rule 51 (integer -> UINT8 .)
    STRING          reduce using rule 51 (integer -> UINT8 .)
    ASSIGN          reduce using rule 51 (integer -> UINT8 .)
    COMMA           reduce using rule 51 (integer -> UINT8 .)
    RPAREN          reduce using rule 51 (integer -> UINT8 .)


state 173

    (52) integer -> UINT16 .

    NEWLINE         reduce using rule 52 (integer -> UINT16 .)
    ID              reduce using rule 52 (integer -> UINT16 .)
    CASE            reduce using rule 52 (integer -> UINT16 .)
    RETURN          reduce using rule 52 (integer -> UINT16 .)
    BREAK           reduce using rule 52 (integer -> UINT16 .)
    NEXT            reduce using rule 52 (integer -> UINT16 .)
    UNDERSCORE      reduce using rule 52 (integer -> UINT16 .)
    ASTERISK        reduce using rule 52 (integer -> UINT16 .)
    IF              reduce using rule 52 (integer -> UINT16 .)
    UNLESS          reduce using rule 52 (integer -> UINT16 .)
    WHILE           reduce using rule 52 (integer -> UINT16 .)
    UNTIL           reduce using rule 52 (integer -> UINT16 .)
    LOOP            reduce using rule 52 (integer -> UINT16 .)
    PLUS            reduce using rule 52 (integer -> UINT16 .)
    MINUS           reduce using rule 52 (integer -> UINT16 .)
    EXCLAMATION     reduce using rule 52 (integer -> UINT16 .)
    TILDE           reduce using rule 52 (integer -> UINT16 .)
    LPAREN          reduce using rule 52 (integer -> UINT16 .)
    LBRACKET        reduce using rule 52 (integer -> UINT16 .)
    INTNUMBER       reduce using rule 52 (integer -> UINT16 .)
    FLOATNUMBER     reduce using rule 52 (integer -> UINT16 .)
    CHAR            reduce using rule 52 (integer -> UINT16 .)
    TRUE            reduce using rule 52 (integer -> UINT16 .)
    FALSE           reduce using rule 52 (integer -> UINT16 .)
    STRING          reduce using rule 52 (integer -> UINT16 .)
    ASSIGN          reduce using rule 52 (integer -> UINT16 .)
    COMMA           reduce using rule 52 (integer -> UINT16 .)
    RPAREN          reduce using rule 52 (integer -> UINT16 .)


state 174

    (53) integer -> UINT32 .

    NEWLINE         reduce using rule 53 (integer -> UINT32 .)
    ID              reduce using rule 53 (integer -> UINT32 .)
    CASE            reduce using rule 53 (integer -> UINT32 .)
    RETURN          reduce using rule 53 (integer -> UINT32 .)
    BREAK           reduce using rule 53 (integer -> UINT32 .)
    NEXT            reduce using rule 53 (integer -> UINT32 .)
    UNDERSCORE      reduce using rule 53 (integer -> UINT32 .)
    ASTERISK        reduce using rule 53 (integer -> UINT32 .)
    IF              reduce using rule 53 (integer -> UINT32 .)
    UNLESS          reduce using rule 53 (integer -> UINT32 .)
    WHILE           reduce using rule 53 (integer -> UINT32 .)
    UNTIL           reduce using rule 53 (integer -> UINT32 .)
    LOOP            reduce using rule 53 (integer -> UINT32 .)
    PLUS            reduce using rule 53 (integer -> UINT32 .)
    MINUS           reduce using rule 53 (integer -> UINT32 .)
    EXCLAMATION     reduce using rule 53 (integer -> UINT32 .)
    TILDE           reduce using rule 53 (integer -> UINT32 .)
    LPAREN          reduce using rule 53 (integer -> UINT32 .)
    LBRACKET        reduce using rule 53 (integer -> UINT32 .)
    INTNUMBER       reduce using rule 53 (integer -> UINT32 .)
    FLOATNUMBER     reduce using rule 53 (integer -> UINT32 .)
    CHAR            reduce using rule 53 (integer -> UINT32 .)
    TRUE            reduce using rule 53 (integer -> UINT32 .)
    FALSE           reduce using rule 53 (integer -> UINT32 .)
    STRING          reduce using rule 53 (integer -> UINT32 .)
    ASSIGN          reduce using rule 53 (integer -> UINT32 .)
    COMMA           reduce using rule 53 (integer -> UINT32 .)
    RPAREN          reduce using rule 53 (integer -> UINT32 .)


state 175

    (54) integer -> UINT64 .

    NEWLINE         reduce using rule 54 (integer -> UINT64 .)
    ID              reduce using rule 54 (integer -> UINT64 .)
    CASE            reduce using rule 54 (integer -> UINT64 .)
    RETURN          reduce using rule 54 (integer -> UINT64 .)
    BREAK           reduce using rule 54 (integer -> UINT64 .)
    NEXT            reduce using rule 54 (integer -> UINT64 .)
    UNDERSCORE      reduce using rule 54 (integer -> UINT64 .)
    ASTERISK        reduce using rule 54 (integer -> UINT64 .)
    IF              reduce using rule 54 (integer -> UINT64 .)
    UNLESS          reduce using rule 54 (integer -> UINT64 .)
    WHILE           reduce using rule 54 (integer -> UINT64 .)
    UNTIL           reduce using rule 54 (integer -> UINT64 .)
    LOOP            reduce using rule 54 (integer -> UINT64 .)
    PLUS            reduce using rule 54 (integer -> UINT64 .)
    MINUS           reduce using rule 54 (integer -> UINT64 .)
    EXCLAMATION     reduce using rule 54 (integer -> UINT64 .)
    TILDE           reduce using rule 54 (integer -> UINT64 .)
    LPAREN          reduce using rule 54 (integer -> UINT64 .)
    LBRACKET        reduce using rule 54 (integer -> UINT64 .)
    INTNUMBER       reduce using rule 54 (integer -> UINT64 .)
    FLOATNUMBER     reduce using rule 54 (integer -> UINT64 .)
    CHAR            reduce using rule 54 (integer -> UINT64 .)
    TRUE            reduce using rule 54 (integer -> UINT64 .)
    FALSE           reduce using rule 54 (integer -> UINT64 .)
    STRING          reduce using rule 54 (integer -> UINT64 .)
    ASSIGN          reduce using rule 54 (integer -> UINT64 .)
    COMMA           reduce using rule 54 (integer -> UINT64 .)
    RPAREN          reduce using rule 54 (integer -> UINT64 .)


state 176

    (55) integer -> UINT128 .

    NEWLINE         reduce using rule 55 (integer -> UINT128 .)
    ID              reduce using rule 55 (integer -> UINT128 .)
    CASE            reduce using rule 55 (integer -> UINT128 .)
    RETURN          reduce using rule 55 (integer -> UINT128 .)
    BREAK           reduce using rule 55 (integer -> UINT128 .)
    NEXT            reduce using rule 55 (integer -> UINT128 .)
    UNDERSCORE      reduce using rule 55 (integer -> UINT128 .)
    ASTERISK        reduce using rule 55 (integer -> UINT128 .)
    IF              reduce using rule 55 (integer -> UINT128 .)
    UNLESS          reduce using rule 55 (integer -> UINT128 .)
    WHILE           reduce using rule 55 (integer -> UINT128 .)
    UNTIL           reduce using rule 55 (integer -> UINT128 .)
    LOOP            reduce using rule 55 (integer -> UINT128 .)
    PLUS            reduce using rule 55 (integer -> UINT128 .)
    MINUS           reduce using rule 55 (integer -> UINT128 .)
    EXCLAMATION     reduce using rule 55 (integer -> UINT128 .)
    TILDE           reduce using rule 55 (integer -> UINT128 .)
    LPAREN          reduce using rule 55 (integer -> UINT128 .)
    LBRACKET        reduce using rule 55 (integer -> UINT128 .)
    INTNUMBER       reduce using rule 55 (integer -> UINT128 .)
    FLOATNUMBER     reduce using rule 55 (integer -> UINT128 .)
    CHAR            reduce using rule 55 (integer -> UINT128 .)
    TRUE            reduce using rule 55 (integer -> UINT128 .)
    FALSE           reduce using rule 55 (integer -> UINT128 .)
    STRING          reduce using rule 55 (integer -> UINT128 .)
    ASSIGN          reduce using rule 55 (integer -> UINT128 .)
    COMMA           reduce using rule 55 (integer -> UINT128 .)
    RPAREN          reduce using rule 55 (integer -> UINT128 .)


state 177

    (56) float -> FLOAT .

    NEWLINE         reduce using rule 56 (float -> FLOAT .)
    ID              reduce using rule 56 (float -> FLOAT .)
    CASE            reduce using rule 56 (float -> FLOAT .)
    RETURN          reduce using rule 56 (float -> FLOAT .)
    BREAK           reduce using rule 56 (float -> FLOAT .)
    NEXT            reduce using rule 56 (float -> FLOAT .)
    UNDERSCORE      reduce using rule 56 (float -> FLOAT .)
    ASTERISK        reduce using rule 56 (float -> FLOAT .)
    IF              reduce using rule 56 (float -> FLOAT .)
    UNLESS          reduce using rule 56 (float -> FLOAT .)
    WHILE           reduce using rule 56 (float -> FLOAT .)
    UNTIL           reduce using rule 56 (float -> FLOAT .)
    LOOP            reduce using rule 56 (float -> FLOAT .)
    PLUS            reduce using rule 56 (float -> FLOAT .)
    MINUS           reduce using rule 56 (float -> FLOAT .)
    EXCLAMATION     reduce using rule 56 (float -> FLOAT .)
    TILDE           reduce using rule 56 (float -> FLOAT .)
    LPAREN          reduce using rule 56 (float -> FLOAT .)
    LBRACKET        reduce using rule 56 (float -> FLOAT .)
    INTNUMBER       reduce using rule 56 (float -> FLOAT .)
    FLOATNUMBER     reduce using rule 56 (float -> FLOAT .)
    CHAR            reduce using rule 56 (float -> FLOAT .)
    TRUE            reduce using rule 56 (float -> FLOAT .)
    FALSE           reduce using rule 56 (float -> FLOAT .)
    STRING          reduce using rule 56 (float -> FLOAT .)
    ASSIGN          reduce using rule 56 (float -> FLOAT .)
    COMMA           reduce using rule 56 (float -> FLOAT .)
    RPAREN          reduce using rule 56 (float -> FLOAT .)


state 178

    (57) float -> FLOAT32 .

    NEWLINE         reduce using rule 57 (float -> FLOAT32 .)
    ID              reduce using rule 57 (float -> FLOAT32 .)
    CASE            reduce using rule 57 (float -> FLOAT32 .)
    RETURN          reduce using rule 57 (float -> FLOAT32 .)
    BREAK           reduce using rule 57 (float -> FLOAT32 .)
    NEXT            reduce using rule 57 (float -> FLOAT32 .)
    UNDERSCORE      reduce using rule 57 (float -> FLOAT32 .)
    ASTERISK        reduce using rule 57 (float -> FLOAT32 .)
    IF              reduce using rule 57 (float -> FLOAT32 .)
    UNLESS          reduce using rule 57 (float -> FLOAT32 .)
    WHILE           reduce using rule 57 (float -> FLOAT32 .)
    UNTIL           reduce using rule 57 (float -> FLOAT32 .)
    LOOP            reduce using rule 57 (float -> FLOAT32 .)
    PLUS            reduce using rule 57 (float -> FLOAT32 .)
    MINUS           reduce using rule 57 (float -> FLOAT32 .)
    EXCLAMATION     reduce using rule 57 (float -> FLOAT32 .)
    TILDE           reduce using rule 57 (float -> FLOAT32 .)
    LPAREN          reduce using rule 57 (float -> FLOAT32 .)
    LBRACKET        reduce using rule 57 (float -> FLOAT32 .)
    INTNUMBER       reduce using rule 57 (float -> FLOAT32 .)
    FLOATNUMBER     reduce using rule 57 (float -> FLOAT32 .)
    CHAR            reduce using rule 57 (float -> FLOAT32 .)
    TRUE            reduce using rule 57 (float -> FLOAT32 .)
    FALSE           reduce using rule 57 (float -> FLOAT32 .)
    STRING          reduce using rule 57 (float -> FLOAT32 .)
    ASSIGN          reduce using rule 57 (float -> FLOAT32 .)
    COMMA           reduce using rule 57 (float -> FLOAT32 .)
    RPAREN          reduce using rule 57 (float -> FLOAT32 .)


state 179

    (58) float -> FLOAT64 .

    NEWLINE         reduce using rule 58 (float -> FLOAT64 .)
    ID              reduce using rule 58 (float -> FLOAT64 .)
    CASE            reduce using rule 58 (float -> FLOAT64 .)
    RETURN          reduce using rule 58 (float -> FLOAT64 .)
    BREAK           reduce using rule 58 (float -> FLOAT64 .)
    NEXT            reduce using rule 58 (float -> FLOAT64 .)
    UNDERSCORE      reduce using rule 58 (float -> FLOAT64 .)
    ASTERISK        reduce using rule 58 (float -> FLOAT64 .)
    IF              reduce using rule 58 (float -> FLOAT64 .)
    UNLESS          reduce using rule 58 (float -> FLOAT64 .)
    WHILE           reduce using rule 58 (float -> FLOAT64 .)
    UNTIL           reduce using rule 58 (float -> FLOAT64 .)
    LOOP            reduce using rule 58 (float -> FLOAT64 .)
    PLUS            reduce using rule 58 (float -> FLOAT64 .)
    MINUS           reduce using rule 58 (float -> FLOAT64 .)
    EXCLAMATION     reduce using rule 58 (float -> FLOAT64 .)
    TILDE           reduce using rule 58 (float -> FLOAT64 .)
    LPAREN          reduce using rule 58 (float -> FLOAT64 .)
    LBRACKET        reduce using rule 58 (float -> FLOAT64 .)
    INTNUMBER       reduce using rule 58 (float -> FLOAT64 .)
    FLOATNUMBER     reduce using rule 58 (float -> FLOAT64 .)
    CHAR            reduce using rule 58 (float -> FLOAT64 .)
    TRUE            reduce using rule 58 (float -> FLOAT64 .)
    FALSE           reduce using rule 58 (float -> FLOAT64 .)
    STRING          reduce using rule 58 (float -> FLOAT64 .)
    ASSIGN          reduce using rule 58 (float -> FLOAT64 .)
    COMMA           reduce using rule 58 (float -> FLOAT64 .)
    RPAREN          reduce using rule 58 (float -> FLOAT64 .)


state 180

    (59) boolean -> BOOL .

    NEWLINE         reduce using rule 59 (boolean -> BOOL .)
    ID              reduce using rule 59 (boolean -> BOOL .)
    CASE            reduce using rule 59 (boolean -> BOOL .)
    RETURN          reduce using rule 59 (boolean -> BOOL .)
    BREAK           reduce using rule 59 (boolean -> BOOL .)
    NEXT            reduce using rule 59 (boolean -> BOOL .)
    UNDERSCORE      reduce using rule 59 (boolean -> BOOL .)
    ASTERISK        reduce using rule 59 (boolean -> BOOL .)
    IF              reduce using rule 59 (boolean -> BOOL .)
    UNLESS          reduce using rule 59 (boolean -> BOOL .)
    WHILE           reduce using rule 59 (boolean -> BOOL .)
    UNTIL           reduce using rule 59 (boolean -> BOOL .)
    LOOP            reduce using rule 59 (boolean -> BOOL .)
    PLUS            reduce using rule 59 (boolean -> BOOL .)
    MINUS           reduce using rule 59 (boolean -> BOOL .)
    EXCLAMATION     reduce using rule 59 (boolean -> BOOL .)
    TILDE           reduce using rule 59 (boolean -> BOOL .)
    LPAREN          reduce using rule 59 (boolean -> BOOL .)
    LBRACKET        reduce using rule 59 (boolean -> BOOL .)
    INTNUMBER       reduce using rule 59 (boolean -> BOOL .)
    FLOATNUMBER     reduce using rule 59 (boolean -> BOOL .)
    CHAR            reduce using rule 59 (boolean -> BOOL .)
    TRUE            reduce using rule 59 (boolean -> BOOL .)
    FALSE           reduce using rule 59 (boolean -> BOOL .)
    STRING          reduce using rule 59 (boolean -> BOOL .)
    ASSIGN          reduce using rule 59 (boolean -> BOOL .)
    COMMA           reduce using rule 59 (boolean -> BOOL .)
    RPAREN          reduce using rule 59 (boolean -> BOOL .)


state 181

    (125) assignment_expression -> assignment_target ASSIGN expression .

    CONSTANT        reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    MODULE          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    DEF             reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    $end            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    DOT             reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    NEWLINE         reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    END             reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    COMMA           reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACKET        reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    RPAREN          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    WHEN            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSIF           reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSE            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACE          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACE          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    ID              reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    CASE            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    RETURN          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    BREAK           reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    NEXT            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    UNDERSCORE      reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    ASTERISK        reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    IF              reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    UNLESS          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    WHILE           reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    UNTIL           reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    LOOP            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    PLUS            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    MINUS           reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    EXCLAMATION     reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    TILDE           reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    LPAREN          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACKET        reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    INTNUMBER       reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    FLOATNUMBER     reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    CHAR            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    TRUE            reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    FALSE           reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    STRING          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    TCOLON          reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)
    INTERP_END      reduce using rule 125 (assignment_expression -> assignment_target ASSIGN expression .)


state 182

    (126) assignment_expression -> assignment_target PLUS_ASSIGN expression .

    CONSTANT        reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MODULE          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DEF             reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    $end            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DOT             reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEWLINE         reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    END             reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    COMMA           reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHEN            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSE            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACE          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACE          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ID              reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CASE            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RETURN          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    BREAK           reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEXT            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ASTERISK        reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    IF              reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNLESS          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHILE           reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNTIL           reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LOOP            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    PLUS            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MINUS           reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TILDE           reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LPAREN          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CHAR            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TRUE            reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FALSE           reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    STRING          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TCOLON          reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTERP_END      reduce using rule 126 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)


state 183

    (127) assignment_expression -> assignment_target MINUS_ASSIGN expression .

    CONSTANT        reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MODULE          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DEF             reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    $end            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DOT             reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEWLINE         reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    END             reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    COMMA           reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHEN            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSE            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACE          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACE          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ID              reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CASE            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RETURN          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    BREAK           reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEXT            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ASTERISK        reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    IF              reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNLESS          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHILE           reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNTIL           reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LOOP            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    PLUS            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MINUS           reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TILDE           reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LPAREN          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CHAR            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TRUE            reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FALSE           reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    STRING          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TCOLON          reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTERP_END      reduce using rule 127 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)


state 184

    (128) assignment_expression -> assignment_target MULTI_ASSIGN expression .

    CONSTANT        reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MODULE          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DEF             reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    $end            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DOT             reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEWLINE         reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    END             reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    COMMA           reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACKET        reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RPAREN          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHEN            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSIF           reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSE            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACE          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACE          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ID              reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CASE            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RETURN          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    BREAK           reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEXT            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNDERSCORE      reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ASTERISK        reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    IF              reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNLESS          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHILE           reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNTIL           reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LOOP            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    PLUS            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MINUS           reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    EXCLAMATION     reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TILDE           reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LPAREN          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACKET        reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTNUMBER       reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CHAR            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TRUE            reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FALSE           reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    STRING          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TCOLON          reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTERP_END      reduce using rule 128 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)


state 185

    (129) assignment_expression -> assignment_target DIVIDE_ASSIGN expression .

    CONSTANT        reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MODULE          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DEF             reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    $end            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DOT             reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEWLINE         reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    END             reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACKET        reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHEN            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACE          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACE          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ID              reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    BREAK           reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEXT            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNDERSCORE      reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ASTERISK        reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    IF              reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNLESS          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHILE           reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNTIL           reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LOOP            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    PLUS            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MINUS           reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    EXCLAMATION     reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TILDE           reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LPAREN          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTNUMBER       reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CHAR            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TRUE            reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FALSE           reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TCOLON          reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTERP_END      reduce using rule 129 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)


state 186

    (131) assignment_target -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 230


state 187

    (170) array_literal -> LBRACKET opt_expression_list RBRACKET .

    POTENCIACAO     reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULO          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_THAN    reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_THAN       reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_EQUAL   reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_EQUAL      reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EQUAL           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NOT_EQUAL       reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TIPO_EQUAL      reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    AND             reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOT          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOTDOT       reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    OR              reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    QMARK           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CONSTANT        reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULE          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DEF             reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    $end            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOT             reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEWLINE         reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    END             reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    COMMA           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACKET        reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RPAREN          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHEN            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSIF           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSE            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACE          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACE          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ID              reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CASE            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RETURN          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    BREAK           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEXT            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNDERSCORE      reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASTERISK        reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    IF              reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNLESS          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHILE           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNTIL           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LOOP            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EXCLAMATION     reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TILDE           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LPAREN          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACKET        reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTNUMBER       reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FLOATNUMBER     reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CHAR            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TRUE            reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FALSE           reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    STRING          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TCOLON          reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTERP_END      reduce using rule 170 (array_literal -> LBRACKET opt_expression_list RBRACKET .)


state 188

    (80) expression_list -> expression_list COMMA . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 231
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 189

    (134) ternary_expression -> range_expression QMARK expression . TCOLON expression

    TCOLON          shift and go to state 232


state 190

    (136) range_expression -> logical_or_expression DOTDOT logical_or_expression .
    (140) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CONSTANT        reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    MODULE          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    DEF             reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    $end            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    DOT             reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    NEWLINE         reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    END             reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    COMMA           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RBRACKET        reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RPAREN          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    WHEN            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ELSIF           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ELSE            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RBRACE          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LBRACE          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ID              reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CASE            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RETURN          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    BREAK           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    NEXT            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNDERSCORE      reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ASTERISK        reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    IF              reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNLESS          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    WHILE           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNTIL           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LOOP            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    PLUS            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    MINUS           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    EXCLAMATION     reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TILDE           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LPAREN          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LBRACKET        reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    INTNUMBER       reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    FLOATNUMBER     reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CHAR            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TRUE            reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    FALSE           reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    STRING          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TCOLON          reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    INTERP_END      reduce using rule 136 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    OR              shift and go to state 112


state 191

    (137) range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .
    (140) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CONSTANT        reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    MODULE          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    DEF             reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    $end            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    DOT             reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    NEWLINE         reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    END             reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    COMMA           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RBRACKET        reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RPAREN          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    WHEN            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ELSIF           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ELSE            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RBRACE          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LBRACE          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ID              reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CASE            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RETURN          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    BREAK           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    NEXT            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNDERSCORE      reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ASTERISK        reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    IF              reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNLESS          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    WHILE           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNTIL           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LOOP            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    PLUS            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    MINUS           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    EXCLAMATION     reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TILDE           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LPAREN          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LBRACKET        reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    INTNUMBER       reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    FLOATNUMBER     reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CHAR            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TRUE            reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    FALSE           reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    STRING          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TCOLON          reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    INTERP_END      reduce using rule 137 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    OR              shift and go to state 112


state 192

    (140) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (142) logical_and_expression -> logical_and_expression . AND equality_expression

    DOTDOT          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOTDOTDOT       reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    QMARK           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONSTANT        reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MODULE          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DEF             reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    $end            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOT             reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEWLINE         reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    END             reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHEN            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSIF           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSE            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACE          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACE          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ID              reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CASE            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RETURN          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    BREAK           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEXT            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNDERSCORE      reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASTERISK        reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IF              reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNLESS          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHILE           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNTIL           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LOOP            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    PLUS            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MINUS           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    EXCLAMATION     reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TILDE           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LPAREN          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACKET        reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTNUMBER       reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FLOATNUMBER     reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CHAR            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRUE            reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FALSE           reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRING          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TCOLON          reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTERP_END      reduce using rule 140 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 113


state 193

    (142) logical_and_expression -> logical_and_expression AND equality_expression .
    (144) equality_expression -> equality_expression . EQUAL relational_expression
    (145) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (146) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOTDOT          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOTDOTDOT       reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    QMARK           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONSTANT        reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MODULE          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEF             reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    $end            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOT             reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEWLINE         reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    END             reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHEN            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSIF           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSE            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACE          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACE          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ID              reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CASE            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RETURN          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    BREAK           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEXT            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNDERSCORE      reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASTERISK        reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IF              reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNLESS          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHILE           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNTIL           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LOOP            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    PLUS            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MINUS           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EXCLAMATION     reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TILDE           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACKET        reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTNUMBER       reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOATNUMBER     reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRUE            reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FALSE           reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRING          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TCOLON          reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTERP_END      reduce using rule 142 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQUAL           shift and go to state 114
    NOT_EQUAL       shift and go to state 115
    TIPO_EQUAL      shift and go to state 116


state 194

    (144) equality_expression -> equality_expression EQUAL relational_expression .
    (148) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (149) relational_expression -> relational_expression . LESS_THAN additive_expression
    (150) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (151) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOTDOT          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    QMARK           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONSTANT        reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    MODULE          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    DEF             reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    $end            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOT             reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEWLINE         reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    END             reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACKET        reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHEN            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSIF           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSE            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACE          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACE          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    ID              reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    CASE            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    RETURN          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    BREAK           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEXT            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    ASTERISK        reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    IF              reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNLESS          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHILE           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNTIL           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOOP            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    PLUS            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    MINUS           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    TILDE           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    LPAREN          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACKET        reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTNUMBER       reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    CHAR            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    TRUE            reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    FALSE           reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    TCOLON          reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTERP_END      reduce using rule 144 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_EQUAL   shift and go to state 119
    LESS_EQUAL      shift and go to state 120


state 195

    (145) equality_expression -> equality_expression NOT_EQUAL relational_expression .
    (148) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (149) relational_expression -> relational_expression . LESS_THAN additive_expression
    (150) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (151) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    AND             reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOTDOT          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    OR              reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    QMARK           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CONSTANT        reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MODULE          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DEF             reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    $end            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOT             reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEWLINE         reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    END             reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    COMMA           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACKET        reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RPAREN          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHEN            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSIF           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSE            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACE          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACE          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ID              reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CASE            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RETURN          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    BREAK           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEXT            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ASTERISK        reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    IF              reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNLESS          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHILE           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNTIL           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LOOP            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    PLUS            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MINUS           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TILDE           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LPAREN          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACKET        reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CHAR            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TRUE            reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FALSE           reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    STRING          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TCOLON          reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTERP_END      reduce using rule 145 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_EQUAL   shift and go to state 119
    LESS_EQUAL      shift and go to state 120


state 196

    (146) equality_expression -> equality_expression TIPO_EQUAL relational_expression .
    (148) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (149) relational_expression -> relational_expression . LESS_THAN additive_expression
    (150) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (151) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    AND             reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOTDOT          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    OR              reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    QMARK           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CONSTANT        reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MODULE          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DEF             reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    $end            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOT             reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEWLINE         reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    END             reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    COMMA           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACKET        reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RPAREN          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHEN            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSIF           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSE            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACE          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACE          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ID              reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CASE            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RETURN          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    BREAK           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEXT            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ASTERISK        reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    IF              reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNLESS          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHILE           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNTIL           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LOOP            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    PLUS            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MINUS           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TILDE           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LPAREN          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACKET        reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CHAR            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TRUE            reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FALSE           reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    STRING          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TCOLON          reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTERP_END      reduce using rule 146 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 117
    LESS_THAN       shift and go to state 118
    GREATER_EQUAL   shift and go to state 119
    LESS_EQUAL      shift and go to state 120


state 197

    (148) relational_expression -> relational_expression GREATER_THAN additive_expression .

    GREATER_THAN    reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_THAN       reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EQUAL           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    AND             reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOTDOT          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOTDOTDOT       reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    OR              reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    QMARK           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CONSTANT        reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    MODULE          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DEF             reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    $end            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOT             reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEWLINE         reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    END             reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    COMMA           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACKET        reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RPAREN          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHEN            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSIF           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSE            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACE          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACE          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ID              reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CASE            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RETURN          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    BREAK           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEXT            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNDERSCORE      reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ASTERISK        reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    IF              reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNLESS          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHILE           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNTIL           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LOOP            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    PLUS            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    MINUS           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EXCLAMATION     reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TILDE           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LPAREN          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACKET        reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTNUMBER       reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CHAR            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TRUE            reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FALSE           reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    STRING          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TCOLON          reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTERP_END      reduce using rule 148 (relational_expression -> relational_expression GREATER_THAN additive_expression .)


state 198

    (149) relational_expression -> relational_expression LESS_THAN additive_expression .

    GREATER_THAN    reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_THAN       reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EQUAL           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    AND             reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOTDOT          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOTDOTDOT       reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    OR              reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    QMARK           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CONSTANT        reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    MODULE          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DEF             reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    $end            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOT             reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEWLINE         reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    END             reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    COMMA           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACKET        reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RPAREN          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHEN            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSIF           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSE            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACE          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACE          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ID              reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CASE            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RETURN          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    BREAK           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEXT            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNDERSCORE      reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ASTERISK        reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    IF              reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNLESS          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHILE           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNTIL           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LOOP            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    PLUS            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    MINUS           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EXCLAMATION     reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TILDE           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LPAREN          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACKET        reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTNUMBER       reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CHAR            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TRUE            reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FALSE           reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    STRING          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TCOLON          reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTERP_END      reduce using rule 149 (relational_expression -> relational_expression LESS_THAN additive_expression .)


state 199

    (150) relational_expression -> relational_expression GREATER_EQUAL additive_expression .

    GREATER_THAN    reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EQUAL           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    AND             reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOTDOT          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOTDOTDOT       reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    OR              reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    QMARK           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CONSTANT        reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    MODULE          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DEF             reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    $end            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOT             reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEWLINE         reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    END             reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    COMMA           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACKET        reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RPAREN          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHEN            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSIF           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSE            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACE          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACE          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ID              reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CASE            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RETURN          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    BREAK           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEXT            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ASTERISK        reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    IF              reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNLESS          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHILE           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNTIL           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LOOP            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    PLUS            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    MINUS           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TILDE           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LPAREN          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACKET        reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CHAR            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TRUE            reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FALSE           reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    STRING          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TCOLON          reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTERP_END      reduce using rule 150 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)


state 200

    (151) relational_expression -> relational_expression LESS_EQUAL additive_expression .

    GREATER_THAN    reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EQUAL           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    AND             reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOTDOT          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOTDOTDOT       reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    OR              reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    QMARK           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CONSTANT        reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    MODULE          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DEF             reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    $end            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOT             reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEWLINE         reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    END             reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    COMMA           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACKET        reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RPAREN          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHEN            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSIF           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSE            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACE          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACE          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ID              reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CASE            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RETURN          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    BREAK           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEXT            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ASTERISK        reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    IF              reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNLESS          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHILE           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNTIL           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LOOP            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    PLUS            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    MINUS           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TILDE           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LPAREN          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACKET        reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CHAR            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TRUE            reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FALSE           reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    STRING          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TCOLON          reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTERP_END      reduce using rule 151 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)


state 201

    (153) additive_expression -> multiplicative_expression PLUS additive_expression .

    GREATER_THAN    reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    LESS_THAN       reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    GREATER_EQUAL   reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    LESS_EQUAL      reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    EQUAL           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    NOT_EQUAL       reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    TIPO_EQUAL      reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    AND             reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    DOTDOT          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    DOTDOTDOT       reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    OR              reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    QMARK           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    CONSTANT        reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    MODULE          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    DEF             reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    $end            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    DOT             reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    NEWLINE         reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    END             reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    COMMA           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    RBRACKET        reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    RPAREN          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    WHEN            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    ELSIF           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    ELSE            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    RBRACE          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    LBRACE          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    ID              reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    CASE            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    RETURN          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    BREAK           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    NEXT            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    UNDERSCORE      reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    ASTERISK        reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    IF              reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    UNLESS          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    WHILE           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    UNTIL           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    LOOP            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    PLUS            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    MINUS           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    EXCLAMATION     reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    TILDE           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    LPAREN          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    LBRACKET        reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    INTNUMBER       reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    FLOATNUMBER     reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    CHAR            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    TRUE            reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    FALSE           reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    STRING          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    TCOLON          reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)
    INTERP_END      reduce using rule 153 (additive_expression -> multiplicative_expression PLUS additive_expression .)


state 202

    (154) additive_expression -> multiplicative_expression MINUS additive_expression .

    GREATER_THAN    reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    LESS_THAN       reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    GREATER_EQUAL   reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    LESS_EQUAL      reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    EQUAL           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    NOT_EQUAL       reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    TIPO_EQUAL      reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    AND             reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    DOTDOT          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    DOTDOTDOT       reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    OR              reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    QMARK           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    CONSTANT        reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    MODULE          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    DEF             reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    $end            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    DOT             reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    NEWLINE         reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    END             reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    COMMA           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    RBRACKET        reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    RPAREN          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    WHEN            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    ELSIF           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    ELSE            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    RBRACE          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    LBRACE          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    ID              reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    CASE            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    RETURN          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    BREAK           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    NEXT            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    UNDERSCORE      reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    ASTERISK        reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    IF              reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    UNLESS          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    WHILE           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    UNTIL           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    LOOP            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    PLUS            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    MINUS           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    EXCLAMATION     reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    TILDE           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    LPAREN          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    LBRACKET        reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    INTNUMBER       reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    FLOATNUMBER     reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    CHAR            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    TRUE            reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    FALSE           reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    STRING          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    TCOLON          reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)
    INTERP_END      reduce using rule 154 (additive_expression -> multiplicative_expression MINUS additive_expression .)


state 203

    (156) multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .
    (160) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    PLUS            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MINUS           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MULTI           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DIVIDE          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULO          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_THAN    reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_THAN       reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_EQUAL      reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EQUAL           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NOT_EQUAL       reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    AND             reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOTDOT          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOTDOTDOT       reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    OR              reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    QMARK           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CONSTANT        reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULE          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DEF             reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    $end            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOT             reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEWLINE         reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    END             reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    COMMA           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACKET        reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RPAREN          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHEN            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSIF           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSE            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACE          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACE          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ID              reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CASE            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RETURN          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    BREAK           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEXT            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNDERSCORE      reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ASTERISK        reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    IF              reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNLESS          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHILE           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNTIL           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LOOP            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EXCLAMATION     reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TILDE           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LPAREN          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACKET        reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTNUMBER       reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FLOATNUMBER     reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CHAR            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TRUE            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FALSE           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    STRING          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TCOLON          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTERP_END      reduce using rule 156 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    POTENCIACAO     shift and go to state 129


state 204

    (157) multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .
    (160) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    PLUS            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MINUS           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MULTI           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DIVIDE          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULO          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_THAN    reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_THAN       reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_EQUAL      reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EQUAL           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NOT_EQUAL       reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    AND             reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOTDOT          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOTDOTDOT       reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    OR              reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    QMARK           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CONSTANT        reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULE          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DEF             reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    $end            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOT             reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEWLINE         reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    END             reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    COMMA           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACKET        reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RPAREN          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHEN            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSIF           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSE            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACE          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACE          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ID              reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CASE            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RETURN          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    BREAK           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEXT            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNDERSCORE      reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ASTERISK        reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    IF              reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNLESS          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHILE           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNTIL           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LOOP            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EXCLAMATION     reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TILDE           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LPAREN          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACKET        reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTNUMBER       reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FLOATNUMBER     reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CHAR            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TRUE            reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FALSE           reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    STRING          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TCOLON          reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTERP_END      reduce using rule 157 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    POTENCIACAO     shift and go to state 129


state 205

    (158) multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .
    (160) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    PLUS            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MINUS           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MULTI           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DIVIDE          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULO          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_THAN    reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_THAN       reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_EQUAL      reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EQUAL           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NOT_EQUAL       reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    AND             reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOTDOT          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOTDOTDOT       reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    OR              reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    QMARK           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CONSTANT        reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULE          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DEF             reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    $end            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOT             reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEWLINE         reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    END             reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    COMMA           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACKET        reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RPAREN          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHEN            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSIF           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSE            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACE          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACE          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ID              reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CASE            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RETURN          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    BREAK           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEXT            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNDERSCORE      reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ASTERISK        reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    IF              reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNLESS          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHILE           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNTIL           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LOOP            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EXCLAMATION     reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TILDE           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LPAREN          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACKET        reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTNUMBER       reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FLOATNUMBER     reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CHAR            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TRUE            reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FALSE           reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    STRING          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TCOLON          reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTERP_END      reduce using rule 158 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    POTENCIACAO     shift and go to state 129


state 206

    (160) potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .

    POTENCIACAO     reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    PLUS            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MINUS           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MULTI           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DIVIDE          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULO          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_THAN    reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_THAN       reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_EQUAL   reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_EQUAL      reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EQUAL           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NOT_EQUAL       reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TIPO_EQUAL      reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    AND             reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOTDOT          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOTDOTDOT       reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    OR              reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    QMARK           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CONSTANT        reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULE          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DEF             reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    $end            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOT             reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEWLINE         reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    END             reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    COMMA           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACKET        reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RPAREN          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHEN            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSIF           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSE            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACE          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACE          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ID              reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CASE            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RETURN          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    BREAK           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEXT            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNDERSCORE      reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ASTERISK        reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    IF              reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNLESS          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHILE           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNTIL           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LOOP            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EXCLAMATION     reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TILDE           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LPAREN          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACKET        reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTNUMBER       reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FLOATNUMBER     reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CHAR            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TRUE            reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FALSE           reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    STRING          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TCOLON          reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTERP_END      reduce using rule 160 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)


state 207

    (166) primary_expression -> LPAREN expression RPAREN .

    POTENCIACAO     reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    MULTI           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    TIPO_EQUAL      reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOTDOT       reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    CONSTANT        reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    NEXT            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    UNDERSCORE      reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    INTNUMBER       reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    TCOLON          reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)
    INTERP_END      reduce using rule 166 (primary_expression -> LPAREN expression RPAREN .)


state 208

    (67) string_literal -> STRING INTERP_START expression . INTERP_END string_literal

    INTERP_END      shift and go to state 233


state 209

    (68) variable_declaration -> ID COLON types . ASSIGN expression

    ASSIGN          shift and go to state 234


state 210

    (69) variable_declaration -> ID ASSIGN expression .

    NEWLINE         reduce using rule 69 (variable_declaration -> ID ASSIGN expression .)
    END             reduce using rule 69 (variable_declaration -> ID ASSIGN expression .)
    ELSIF           reduce using rule 69 (variable_declaration -> ID ASSIGN expression .)
    ELSE            reduce using rule 69 (variable_declaration -> ID ASSIGN expression .)
    RBRACE          reduce using rule 69 (variable_declaration -> ID ASSIGN expression .)
    WHEN            reduce using rule 69 (variable_declaration -> ID ASSIGN expression .)


state 211

    (71) list_of_identifiers -> ID .
    (72) list_of_identifiers -> ID . COMMA list_of_identifiers

    ASSIGN          reduce using rule 71 (list_of_identifiers -> ID .)
    COMMA           shift and go to state 235


state 212

    (70) variable_declaration -> ID COMMA list_of_identifiers . ASSIGN expression COMMA list_of_values

    ASSIGN          shift and go to state 236


state 213

    (75) function_call -> ID LPAREN expression_list . RPAREN
    (80) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 237
    COMMA           shift and go to state 188


state 214

    (76) function_call -> ID LPAREN RPAREN .

    NEWLINE         reduce using rule 76 (function_call -> ID LPAREN RPAREN .)
    END             reduce using rule 76 (function_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 76 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 76 (function_call -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 76 (function_call -> ID LPAREN RPAREN .)
    WHEN            reduce using rule 76 (function_call -> ID LPAREN RPAREN .)


state 215

    (82) statements -> statement NEWLINE statements .

    END             reduce using rule 82 (statements -> statement NEWLINE statements .)
    NEWLINE         reduce using rule 82 (statements -> statement NEWLINE statements .)
    ELSIF           reduce using rule 82 (statements -> statement NEWLINE statements .)
    ELSE            reduce using rule 82 (statements -> statement NEWLINE statements .)
    RBRACE          reduce using rule 82 (statements -> statement NEWLINE statements .)
    WHEN            reduce using rule 82 (statements -> statement NEWLINE statements .)


state 216

    (113) iterator -> expression DOT MULTI . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 67
    statements                     shift and go to state 238
    statement                      shift and go to state 66
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 217

    (114) iterator -> expression DOT EACH . DO PIPE ID PIPE statements END
    (115) iterator -> expression DOT EACH . LBRACE PIPE ID PIPE RBRACE statements

    DO              shift and go to state 239
    LBRACE          shift and go to state 240


state 218

    (116) case_structure -> CASE expression when_list . opt_else END
    (118) when_list -> when_list . WHEN expression statements
    (104) opt_else -> . ELSE statements
    (105) opt_else -> . empty
    (171) empty -> .

    WHEN            shift and go to state 242
    ELSE            shift and go to state 243
    END             reduce using rule 171 (empty -> .)

    opt_else                       shift and go to state 241
    empty                          shift and go to state 244

state 219

    (117) when_list -> WHEN . expression statements
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 245
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 220

    (95) if_statement -> IF if_condition statements . opt_elsif opt_else END
    (99) opt_elsif -> . elsif_list
    (100) opt_elsif -> . empty
    (101) elsif_list -> . elsif_list elsif
    (102) elsif_list -> . elsif
    (171) empty -> .
    (103) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 171 (empty -> .)
    END             reduce using rule 171 (empty -> .)
    ELSIF           shift and go to state 250

    opt_elsif                      shift and go to state 246
    elsif_list                     shift and go to state 247
    empty                          shift and go to state 248
    elsif                          shift and go to state 249

state 221

    (98) if_condition -> expression LBRACE . statements RBRACE
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 67
    statements                     shift and go to state 251
    statement                      shift and go to state 66
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 222

    (96) unless_statement -> UNLESS if_condition statements . opt_else END
    (104) opt_else -> . ELSE statements
    (105) opt_else -> . empty
    (171) empty -> .

    ELSE            shift and go to state 243
    END             reduce using rule 171 (empty -> .)

    opt_else                       shift and go to state 252
    empty                          shift and go to state 244

state 223

    (110) while -> WHILE expression statements .

    NEWLINE         reduce using rule 110 (while -> WHILE expression statements .)
    END             reduce using rule 110 (while -> WHILE expression statements .)
    ELSIF           reduce using rule 110 (while -> WHILE expression statements .)
    ELSE            reduce using rule 110 (while -> WHILE expression statements .)
    RBRACE          reduce using rule 110 (while -> WHILE expression statements .)
    WHEN            reduce using rule 110 (while -> WHILE expression statements .)


state 224

    (111) until -> UNTIL expression statements .

    NEWLINE         reduce using rule 111 (until -> UNTIL expression statements .)
    END             reduce using rule 111 (until -> UNTIL expression statements .)
    ELSIF           reduce using rule 111 (until -> UNTIL expression statements .)
    ELSE            reduce using rule 111 (until -> UNTIL expression statements .)
    RBRACE          reduce using rule 111 (until -> UNTIL expression statements .)
    WHEN            reduce using rule 111 (until -> UNTIL expression statements .)


state 225

    (34) argument -> ID COLON . types
    (36) argument -> ID COLON . types ASSIGN expression
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 160
    CHAR            shift and go to state 161
    NIL             shift and go to state 162
    INT             shift and go to state 166
    INT8            shift and go to state 167
    INT16           shift and go to state 168
    INT32           shift and go to state 169
    INT64           shift and go to state 170
    INT128          shift and go to state 171
    UINT8           shift and go to state 172
    UINT16          shift and go to state 173
    UINT32          shift and go to state 174
    UINT64          shift and go to state 175
    UINT128         shift and go to state 176
    FLOAT           shift and go to state 177
    FLOAT32         shift and go to state 178
    FLOAT64         shift and go to state 179
    BOOL            shift and go to state 180

    types                          shift and go to state 253
    integer                        shift and go to state 163
    float                          shift and go to state 164
    boolean                        shift and go to state 165

state 226

    (35) argument -> ID ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 254
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 227

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN . opt_return_type statements END
    (37) opt_return_type -> . COLON types
    (38) opt_return_type -> . empty
    (171) empty -> .

    COLON           shift and go to state 94
    ID              reduce using rule 171 (empty -> .)
    CASE            reduce using rule 171 (empty -> .)
    RETURN          reduce using rule 171 (empty -> .)
    BREAK           reduce using rule 171 (empty -> .)
    NEXT            reduce using rule 171 (empty -> .)
    UNDERSCORE      reduce using rule 171 (empty -> .)
    ASTERISK        reduce using rule 171 (empty -> .)
    IF              reduce using rule 171 (empty -> .)
    UNLESS          reduce using rule 171 (empty -> .)
    WHILE           reduce using rule 171 (empty -> .)
    UNTIL           reduce using rule 171 (empty -> .)
    LOOP            reduce using rule 171 (empty -> .)
    PLUS            reduce using rule 171 (empty -> .)
    MINUS           reduce using rule 171 (empty -> .)
    EXCLAMATION     reduce using rule 171 (empty -> .)
    TILDE           reduce using rule 171 (empty -> .)
    LPAREN          reduce using rule 171 (empty -> .)
    LBRACKET        reduce using rule 171 (empty -> .)
    INTNUMBER       reduce using rule 171 (empty -> .)
    FLOATNUMBER     reduce using rule 171 (empty -> .)
    CHAR            reduce using rule 171 (empty -> .)
    TRUE            reduce using rule 171 (empty -> .)
    FALSE           reduce using rule 171 (empty -> .)
    STRING          reduce using rule 171 (empty -> .)

    opt_return_type                shift and go to state 255
    empty                          shift and go to state 95

state 228

    (32) argument_list -> argument COMMA . argument_list
    (31) argument_list -> . argument
    (32) argument_list -> . argument COMMA argument_list
    (33) argument -> . ID
    (34) argument -> . ID COLON types
    (35) argument -> . ID ASSIGN expression
    (36) argument -> . ID COLON types ASSIGN expression

    ID              shift and go to state 153

    argument                       shift and go to state 157
    argument_list                  shift and go to state 256

state 229

    (28) function -> DEF ID opt_return_type NEWLINE statements . END

    END             shift and go to state 257


state 230

    (131) assignment_target -> ID LBRACKET expression RBRACKET .

    ASSIGN          reduce using rule 131 (assignment_target -> ID LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 131 (assignment_target -> ID LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 131 (assignment_target -> ID LBRACKET expression RBRACKET .)
    MULTI_ASSIGN    reduce using rule 131 (assignment_target -> ID LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 131 (assignment_target -> ID LBRACKET expression RBRACKET .)


state 231

    (80) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 80 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 80 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 80 (expression_list -> expression_list COMMA expression .)


state 232

    (134) ternary_expression -> range_expression QMARK expression TCOLON . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    range_expression               shift and go to state 40
    expression                     shift and go to state 258
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 233

    (67) string_literal -> STRING INTERP_START expression INTERP_END . string_literal
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    STRING          shift and go to state 63

    string_literal                 shift and go to state 259

state 234

    (68) variable_declaration -> ID COLON types ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 260
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 235

    (72) list_of_identifiers -> ID COMMA . list_of_identifiers
    (71) list_of_identifiers -> . ID
    (72) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 211

    list_of_identifiers            shift and go to state 261

state 236

    (70) variable_declaration -> ID COMMA list_of_identifiers ASSIGN . expression COMMA list_of_values
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 262
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 237

    (75) function_call -> ID LPAREN expression_list RPAREN .

    NEWLINE         reduce using rule 75 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 75 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSIF           reduce using rule 75 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 75 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACE          reduce using rule 75 (function_call -> ID LPAREN expression_list RPAREN .)
    WHEN            reduce using rule 75 (function_call -> ID LPAREN expression_list RPAREN .)


state 238

    (113) iterator -> expression DOT MULTI statements .

    NEWLINE         reduce using rule 113 (iterator -> expression DOT MULTI statements .)
    END             reduce using rule 113 (iterator -> expression DOT MULTI statements .)
    ELSIF           reduce using rule 113 (iterator -> expression DOT MULTI statements .)
    ELSE            reduce using rule 113 (iterator -> expression DOT MULTI statements .)
    RBRACE          reduce using rule 113 (iterator -> expression DOT MULTI statements .)
    WHEN            reduce using rule 113 (iterator -> expression DOT MULTI statements .)


state 239

    (114) iterator -> expression DOT EACH DO . PIPE ID PIPE statements END

    PIPE            shift and go to state 263


state 240

    (115) iterator -> expression DOT EACH LBRACE . PIPE ID PIPE RBRACE statements

    PIPE            shift and go to state 264


state 241

    (116) case_structure -> CASE expression when_list opt_else . END

    END             shift and go to state 265


state 242

    (118) when_list -> when_list WHEN . expression statements
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 266
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 243

    (104) opt_else -> ELSE . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements                     shift and go to state 267
    statement                      shift and go to state 66
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 244

    (105) opt_else -> empty .

    END             reduce using rule 105 (opt_else -> empty .)


state 245

    (117) when_list -> WHEN expression . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 67
    statements                     shift and go to state 268
    statement                      shift and go to state 66
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 246

    (95) if_statement -> IF if_condition statements opt_elsif . opt_else END
    (104) opt_else -> . ELSE statements
    (105) opt_else -> . empty
    (171) empty -> .

    ELSE            shift and go to state 243
    END             reduce using rule 171 (empty -> .)

    opt_else                       shift and go to state 269
    empty                          shift and go to state 244

state 247

    (99) opt_elsif -> elsif_list .
    (101) elsif_list -> elsif_list . elsif
    (103) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 99 (opt_elsif -> elsif_list .)
    END             reduce using rule 99 (opt_elsif -> elsif_list .)
    ELSIF           shift and go to state 250

    elsif                          shift and go to state 270

state 248

    (100) opt_elsif -> empty .

    ELSE            reduce using rule 100 (opt_elsif -> empty .)
    END             reduce using rule 100 (opt_elsif -> empty .)


state 249

    (102) elsif_list -> elsif .

    ELSIF           reduce using rule 102 (elsif_list -> elsif .)
    ELSE            reduce using rule 102 (elsif_list -> elsif .)
    END             reduce using rule 102 (elsif_list -> elsif .)


state 250

    (103) elsif -> ELSIF . if_condition statements
    (97) if_condition -> . expression
    (98) if_condition -> . expression LBRACE statements RBRACE
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    if_condition                   shift and go to state 271
    expression                     shift and go to state 148
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 251

    (98) if_condition -> expression LBRACE statements . RBRACE

    RBRACE          shift and go to state 272


state 252

    (96) unless_statement -> UNLESS if_condition statements opt_else . END

    END             shift and go to state 273


state 253

    (34) argument -> ID COLON types .
    (36) argument -> ID COLON types . ASSIGN expression

    COMMA           reduce using rule 34 (argument -> ID COLON types .)
    RPAREN          reduce using rule 34 (argument -> ID COLON types .)
    ASSIGN          shift and go to state 274


state 254

    (35) argument -> ID ASSIGN expression .

    COMMA           reduce using rule 35 (argument -> ID ASSIGN expression .)
    RPAREN          reduce using rule 35 (argument -> ID ASSIGN expression .)


state 255

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type . statements END
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements                     shift and go to state 275
    statement                      shift and go to state 66
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 256

    (32) argument_list -> argument COMMA argument_list .

    RPAREN          reduce using rule 32 (argument_list -> argument COMMA argument_list .)


state 257

    (28) function -> DEF ID opt_return_type NEWLINE statements END .

    DEF             reduce using rule 28 (function -> DEF ID opt_return_type NEWLINE statements END .)
    $end            reduce using rule 28 (function -> DEF ID opt_return_type NEWLINE statements END .)


state 258

    (134) ternary_expression -> range_expression QMARK expression TCOLON expression .

    CONSTANT        reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    MODULE          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    DEF             reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    $end            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    DOT             reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    NEWLINE         reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    END             reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    COMMA           reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RBRACKET        reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RPAREN          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    WHEN            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ELSIF           reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ELSE            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RBRACE          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LBRACE          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ID              reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CASE            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RETURN          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    BREAK           reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    NEXT            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNDERSCORE      reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ASTERISK        reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    IF              reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNLESS          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    WHILE           reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNTIL           reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LOOP            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    PLUS            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    MINUS           reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    EXCLAMATION     reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TILDE           reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LPAREN          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LBRACKET        reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    INTNUMBER       reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    FLOATNUMBER     reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CHAR            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TRUE            reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    FALSE           reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    STRING          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TCOLON          reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    INTERP_END      reduce using rule 134 (ternary_expression -> range_expression QMARK expression TCOLON expression .)


state 259

    (67) string_literal -> STRING INTERP_START expression INTERP_END string_literal .

    POTENCIACAO     reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    PLUS            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MINUS           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MULTI           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DIVIDE          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MODULO          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    GREATER_THAN    reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LESS_THAN       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    GREATER_EQUAL   reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LESS_EQUAL      reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    EQUAL           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NOT_EQUAL       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TIPO_EQUAL      reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    AND             reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOTDOT          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOTDOTDOT       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    OR              reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    QMARK           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CONSTANT        reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MODULE          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DEF             reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    $end            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOT             reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NEWLINE         reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    END             reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    COMMA           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RBRACKET        reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RPAREN          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    WHEN            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ELSIF           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ELSE            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RBRACE          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LBRACE          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ID              reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CASE            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RETURN          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    BREAK           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NEXT            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNDERSCORE      reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ASTERISK        reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    IF              reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNLESS          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    WHILE           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNTIL           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LOOP            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    EXCLAMATION     reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TILDE           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LPAREN          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LBRACKET        reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    INTNUMBER       reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    FLOATNUMBER     reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CHAR            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TRUE            reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    FALSE           reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    STRING          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TCOLON          reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    INTERP_END      reduce using rule 67 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)


state 260

    (68) variable_declaration -> ID COLON types ASSIGN expression .

    NEWLINE         reduce using rule 68 (variable_declaration -> ID COLON types ASSIGN expression .)
    END             reduce using rule 68 (variable_declaration -> ID COLON types ASSIGN expression .)
    ELSIF           reduce using rule 68 (variable_declaration -> ID COLON types ASSIGN expression .)
    ELSE            reduce using rule 68 (variable_declaration -> ID COLON types ASSIGN expression .)
    RBRACE          reduce using rule 68 (variable_declaration -> ID COLON types ASSIGN expression .)
    WHEN            reduce using rule 68 (variable_declaration -> ID COLON types ASSIGN expression .)


state 261

    (72) list_of_identifiers -> ID COMMA list_of_identifiers .

    ASSIGN          reduce using rule 72 (list_of_identifiers -> ID COMMA list_of_identifiers .)


state 262

    (70) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression . COMMA list_of_values

    COMMA           shift and go to state 276


state 263

    (114) iterator -> expression DOT EACH DO PIPE . ID PIPE statements END

    ID              shift and go to state 277


state 264

    (115) iterator -> expression DOT EACH LBRACE PIPE . ID PIPE RBRACE statements

    ID              shift and go to state 278


state 265

    (116) case_structure -> CASE expression when_list opt_else END .

    NEWLINE         reduce using rule 116 (case_structure -> CASE expression when_list opt_else END .)
    END             reduce using rule 116 (case_structure -> CASE expression when_list opt_else END .)
    ELSIF           reduce using rule 116 (case_structure -> CASE expression when_list opt_else END .)
    ELSE            reduce using rule 116 (case_structure -> CASE expression when_list opt_else END .)
    RBRACE          reduce using rule 116 (case_structure -> CASE expression when_list opt_else END .)
    WHEN            reduce using rule 116 (case_structure -> CASE expression when_list opt_else END .)


state 266

    (118) when_list -> when_list WHEN expression . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 67
    statements                     shift and go to state 279
    statement                      shift and go to state 66
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 267

    (104) opt_else -> ELSE statements .

    END             reduce using rule 104 (opt_else -> ELSE statements .)


state 268

    (117) when_list -> WHEN expression statements .

    WHEN            reduce using rule 117 (when_list -> WHEN expression statements .)
    ELSE            reduce using rule 117 (when_list -> WHEN expression statements .)
    END             reduce using rule 117 (when_list -> WHEN expression statements .)


state 269

    (95) if_statement -> IF if_condition statements opt_elsif opt_else . END

    END             shift and go to state 280


state 270

    (101) elsif_list -> elsif_list elsif .

    ELSIF           reduce using rule 101 (elsif_list -> elsif_list elsif .)
    ELSE            reduce using rule 101 (elsif_list -> elsif_list elsif .)
    END             reduce using rule 101 (elsif_list -> elsif_list elsif .)


state 271

    (103) elsif -> ELSIF if_condition . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    statements                     shift and go to state 281
    statement                      shift and go to state 66
    expression                     shift and go to state 67
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 272

    (98) if_condition -> expression LBRACE statements RBRACE .

    ID              reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    CASE            reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    RETURN          reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    BREAK           reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    NEXT            reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    UNDERSCORE      reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    ASTERISK        reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    IF              reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    UNLESS          reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    WHILE           reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    UNTIL           reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    LOOP            reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    PLUS            reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    MINUS           reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    EXCLAMATION     reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    TILDE           reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    LPAREN          reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    INTNUMBER       reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    FLOATNUMBER     reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    CHAR            reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    TRUE            reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    FALSE           reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)
    STRING          reduce using rule 98 (if_condition -> expression LBRACE statements RBRACE .)


state 273

    (96) unless_statement -> UNLESS if_condition statements opt_else END .

    NEWLINE         reduce using rule 96 (unless_statement -> UNLESS if_condition statements opt_else END .)
    END             reduce using rule 96 (unless_statement -> UNLESS if_condition statements opt_else END .)
    ELSIF           reduce using rule 96 (unless_statement -> UNLESS if_condition statements opt_else END .)
    ELSE            reduce using rule 96 (unless_statement -> UNLESS if_condition statements opt_else END .)
    RBRACE          reduce using rule 96 (unless_statement -> UNLESS if_condition statements opt_else END .)
    WHEN            reduce using rule 96 (unless_statement -> UNLESS if_condition statements opt_else END .)


state 274

    (36) argument -> ID COLON types ASSIGN . expression
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 282
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 275

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements . END

    END             shift and go to state 283


state 276

    (70) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA . list_of_values
    (73) list_of_values -> . expression
    (74) list_of_values -> . expression COMMA list_of_values
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 284
    list_of_values                 shift and go to state 285
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 277

    (114) iterator -> expression DOT EACH DO PIPE ID . PIPE statements END

    PIPE            shift and go to state 286


state 278

    (115) iterator -> expression DOT EACH LBRACE PIPE ID . PIPE RBRACE statements

    PIPE            shift and go to state 287


state 279

    (118) when_list -> when_list WHEN expression statements .

    WHEN            reduce using rule 118 (when_list -> when_list WHEN expression statements .)
    ELSE            reduce using rule 118 (when_list -> when_list WHEN expression statements .)
    END             reduce using rule 118 (when_list -> when_list WHEN expression statements .)


state 280

    (95) if_statement -> IF if_condition statements opt_elsif opt_else END .

    NEWLINE         reduce using rule 95 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    END             reduce using rule 95 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    ELSIF           reduce using rule 95 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    ELSE            reduce using rule 95 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    RBRACE          reduce using rule 95 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    WHEN            reduce using rule 95 (if_statement -> IF if_condition statements opt_elsif opt_else END .)


state 281

    (103) elsif -> ELSIF if_condition statements .

    ELSIF           reduce using rule 103 (elsif -> ELSIF if_condition statements .)
    ELSE            reduce using rule 103 (elsif -> ELSIF if_condition statements .)
    END             reduce using rule 103 (elsif -> ELSIF if_condition statements .)


state 282

    (36) argument -> ID COLON types ASSIGN expression .

    COMMA           reduce using rule 36 (argument -> ID COLON types ASSIGN expression .)
    RPAREN          reduce using rule 36 (argument -> ID COLON types ASSIGN expression .)


state 283

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .

    DEF             reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)
    $end            reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)


state 284

    (73) list_of_values -> expression .
    (74) list_of_values -> expression . COMMA list_of_values

    NEWLINE         reduce using rule 73 (list_of_values -> expression .)
    END             reduce using rule 73 (list_of_values -> expression .)
    ELSIF           reduce using rule 73 (list_of_values -> expression .)
    ELSE            reduce using rule 73 (list_of_values -> expression .)
    RBRACE          reduce using rule 73 (list_of_values -> expression .)
    WHEN            reduce using rule 73 (list_of_values -> expression .)
    COMMA           shift and go to state 288


state 285

    (70) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .

    NEWLINE         reduce using rule 70 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    END             reduce using rule 70 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSIF           reduce using rule 70 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSE            reduce using rule 70 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    RBRACE          reduce using rule 70 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    WHEN            reduce using rule 70 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)


state 286

    (114) iterator -> expression DOT EACH DO PIPE ID PIPE . statements END
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 67
    statements                     shift and go to state 289
    statement                      shift and go to state 66
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 287

    (115) iterator -> expression DOT EACH LBRACE PIPE ID PIPE . RBRACE statements

    RBRACE          shift and go to state 290


state 288

    (74) list_of_values -> expression COMMA . list_of_values
    (73) list_of_values -> . expression
    (74) list_of_values -> . expression COMMA list_of_values
    (124) expression -> . assignment_expression
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 36
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 284
    list_of_values                 shift and go to state 291
    assignment_expression          shift and go to state 33
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 289

    (114) iterator -> expression DOT EACH DO PIPE ID PIPE statements . END

    END             shift and go to state 292


state 290

    (115) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE . statements
    (81) statements -> . statement
    (82) statements -> . statement NEWLINE statements
    (83) statement -> . expression
    (84) statement -> . control_structure
    (85) statement -> . variable_declaration
    (86) statement -> . function_call
    (124) expression -> . assignment_expression
    (87) control_structure -> . conditional
    (88) control_structure -> . loop_structure
    (89) control_structure -> . case_structure
    (90) control_structure -> . return_statement
    (91) control_structure -> . break_statement
    (92) control_structure -> . next_statement
    (68) variable_declaration -> . ID COLON types ASSIGN expression
    (69) variable_declaration -> . ID ASSIGN expression
    (70) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (75) function_call -> . ID LPAREN expression_list RPAREN
    (76) function_call -> . ID LPAREN RPAREN
    (125) assignment_expression -> . assignment_target ASSIGN expression
    (126) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (127) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (129) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (130) assignment_expression -> . ternary_expression
    (93) conditional -> . if_statement
    (94) conditional -> . unless_statement
    (106) loop_structure -> . while
    (107) loop_structure -> . until
    (108) loop_structure -> . loop
    (109) loop_structure -> . iterator
    (116) case_structure -> . CASE expression when_list opt_else END
    (119) return_statement -> . RETURN opt_expression
    (120) break_statement -> . BREAK opt_expression
    (121) next_statement -> . NEXT opt_expression
    (131) assignment_target -> . ID LBRACKET expression RBRACKET
    (132) assignment_target -> . UNDERSCORE
    (133) assignment_target -> . ASTERISK assignment_target
    (134) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (135) ternary_expression -> . range_expression
    (95) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (96) unless_statement -> . UNLESS if_condition statements opt_else END
    (110) while -> . WHILE expression statements
    (111) until -> . UNTIL expression statements
    (112) loop -> . LOOP statements
    (113) iterator -> . expression DOT MULTI statements
    (114) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (115) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (136) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (137) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression
    (139) logical_or_expression -> . logical_and_expression
    (140) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (141) logical_and_expression -> . equality_expression
    (142) logical_and_expression -> . logical_and_expression AND equality_expression
    (143) equality_expression -> . relational_expression
    (144) equality_expression -> . equality_expression EQUAL relational_expression
    (145) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (146) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (147) relational_expression -> . additive_expression
    (148) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (149) relational_expression -> . relational_expression LESS_THAN additive_expression
    (150) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (151) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (152) additive_expression -> . multiplicative_expression
    (153) additive_expression -> . multiplicative_expression PLUS additive_expression
    (154) additive_expression -> . multiplicative_expression MINUS additive_expression
    (155) multiplicative_expression -> . potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (159) potenciacao_expression -> . unary_expression
    (160) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (161) unary_expression -> . PLUS unary_expression
    (162) unary_expression -> . MINUS unary_expression
    (163) unary_expression -> . EXCLAMATION unary_expression
    (164) unary_expression -> . TILDE unary_expression
    (165) unary_expression -> . primary_expression
    (166) primary_expression -> . LPAREN expression RPAREN
    (167) primary_expression -> . array_literal
    (168) primary_expression -> . literal
    (169) primary_expression -> . ID
    (170) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (66) string_literal -> . STRING
    (67) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 64
    CASE            shift and go to state 83
    RETURN          shift and go to state 84
    BREAK           shift and go to state 85
    NEXT            shift and go to state 86
    UNDERSCORE      shift and go to state 38
    ASTERISK        shift and go to state 39
    IF              shift and go to state 87
    UNLESS          shift and go to state 88
    WHILE           shift and go to state 89
    UNTIL           shift and go to state 90
    LOOP            shift and go to state 91
    PLUS            shift and go to state 47
    MINUS           shift and go to state 48
    EXCLAMATION     shift and go to state 51
    TILDE           shift and go to state 52
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 37
    INTNUMBER       shift and go to state 57
    FLOATNUMBER     shift and go to state 58
    CHAR            shift and go to state 60
    TRUE            shift and go to state 61
    FALSE           shift and go to state 62
    STRING          shift and go to state 63

    expression                     shift and go to state 67
    statements                     shift and go to state 293
    statement                      shift and go to state 66
    control_structure              shift and go to state 68
    variable_declaration           shift and go to state 69
    function_call                  shift and go to state 70
    assignment_expression          shift and go to state 33
    conditional                    shift and go to state 71
    loop_structure                 shift and go to state 72
    case_structure                 shift and go to state 73
    return_statement               shift and go to state 74
    break_statement                shift and go to state 75
    next_statement                 shift and go to state 76
    assignment_target              shift and go to state 34
    ternary_expression             shift and go to state 35
    if_statement                   shift and go to state 77
    unless_statement               shift and go to state 78
    while                          shift and go to state 79
    until                          shift and go to state 80
    loop                           shift and go to state 81
    iterator                       shift and go to state 82
    range_expression               shift and go to state 40
    logical_or_expression          shift and go to state 41
    logical_and_expression         shift and go to state 42
    equality_expression            shift and go to state 43
    relational_expression          shift and go to state 44
    additive_expression            shift and go to state 45
    multiplicative_expression      shift and go to state 46
    potenciacao_expression         shift and go to state 49
    unary_expression               shift and go to state 50
    primary_expression             shift and go to state 53
    array_literal                  shift and go to state 55
    literal                        shift and go to state 56
    string_literal                 shift and go to state 59

state 291

    (74) list_of_values -> expression COMMA list_of_values .

    NEWLINE         reduce using rule 74 (list_of_values -> expression COMMA list_of_values .)
    END             reduce using rule 74 (list_of_values -> expression COMMA list_of_values .)
    ELSIF           reduce using rule 74 (list_of_values -> expression COMMA list_of_values .)
    ELSE            reduce using rule 74 (list_of_values -> expression COMMA list_of_values .)
    RBRACE          reduce using rule 74 (list_of_values -> expression COMMA list_of_values .)
    WHEN            reduce using rule 74 (list_of_values -> expression COMMA list_of_values .)


state 292

    (114) iterator -> expression DOT EACH DO PIPE ID PIPE statements END .

    NEWLINE         reduce using rule 114 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    END             reduce using rule 114 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    ELSIF           reduce using rule 114 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    ELSE            reduce using rule 114 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    RBRACE          reduce using rule 114 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    WHEN            reduce using rule 114 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)


state 293

    (115) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .

    NEWLINE         reduce using rule 115 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    END             reduce using rule 115 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    ELSIF           reduce using rule 115 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    ELSE            reduce using rule 115 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    RBRACE          reduce using rule 115 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    WHEN            reduce using rule 115 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 46 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 46 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 66 resolved as shift
