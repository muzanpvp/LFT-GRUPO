Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASSOCIACAO
    AT
    BEGIN
    BINNUMBER
    CLASS
    CLASSVAR
    CLASS_VAR
    DEFINE_BLOCO
    DOLAR_SIGN
    ENUM
    GLOBALVAR
    HEXNUMBER
    IN
    INCLUDE
    INSTANCEVAR
    INSTANCE_VAR
    LITERAL
    MACRO
    MODULO_ASSIGN
    NOT
    OCTNUMBER
    OF
    OR_ASSIGN
    OUT
    PASSA_ARGUMENTO
    POTENCIACAO_ASSIGN
    PRIVATE
    PROTECTED
    SAFE_CALL
    SCOPE
    SELECT
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SIZEOF
    STRUCT
    SYMBOL
    THEN
    TYPE
    TYPEOF
    UNINITIALIZED
    UNION
    VAR_GLOBAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> require_list constant_list module_list function_list
Rule 2     program -> require_list constant_list module_list
Rule 3     program -> require_list constant_list function_list
Rule 4     program -> require_list module_list function_list
Rule 5     program -> constant_list module_list function_list
Rule 6     program -> require_list constant_list
Rule 7     program -> require_list module_list
Rule 8     program -> constant_list module_list
Rule 9     program -> require_list function_list
Rule 10    program -> constant_list function_list
Rule 11    program -> module_list function_list
Rule 12    program -> require_list
Rule 13    program -> constant_list
Rule 14    program -> module_list
Rule 15    program -> function_list
Rule 16    require_list -> require require_list
Rule 17    require_list -> require
Rule 18    require -> REQUIRE STRING
Rule 19    constant_list -> constant constant_list
Rule 20    constant_list -> constant
Rule 21    constant -> CONSTANT ASSIGN expression
Rule 22    module_list -> module module_list
Rule 23    module_list -> module
Rule 24    module -> MODULE ID NEWLINE statements END
Rule 25    function_list -> function
Rule 26    function_list -> function function_list
Rule 27    function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
Rule 28    function -> DEF ID opt_return_type NEWLINE statements_block END
Rule 29    opt_argument_list -> argument_list
Rule 30    opt_argument_list -> empty
Rule 31    argument_list -> argument
Rule 32    argument_list -> argument COMMA argument_list
Rule 33    argument -> ID
Rule 34    argument -> ID COLON types
Rule 35    argument -> ID ASSIGN expression
Rule 36    argument -> ID COLON types ASSIGN expression
Rule 37    opt_return_type -> COLON types
Rule 38    opt_return_type -> empty
Rule 39    types -> STRING
Rule 40    types -> CHAR
Rule 41    types -> NIL
Rule 42    types -> integer
Rule 43    types -> float
Rule 44    types -> boolean
Rule 45    integer -> INT
Rule 46    integer -> INT8
Rule 47    integer -> INT16
Rule 48    integer -> INT32
Rule 49    integer -> INT64
Rule 50    integer -> INT128
Rule 51    integer -> UINT8
Rule 52    integer -> UINT16
Rule 53    integer -> UINT32
Rule 54    integer -> UINT64
Rule 55    integer -> UINT128
Rule 56    float -> FLOAT
Rule 57    float -> FLOAT32
Rule 58    float -> FLOAT64
Rule 59    boolean -> BOOL
Rule 60    literal -> INTNUMBER
Rule 61    literal -> FLOATNUMBER
Rule 62    literal -> string_literal
Rule 63    literal -> CHAR
Rule 64    literal -> TRUE
Rule 65    literal -> FALSE
Rule 66    function_call -> ID LPAREN expression_list RPAREN
Rule 67    opt_expression_list -> expression_list
Rule 68    opt_expression_list -> empty
Rule 69    expression_list -> expression
Rule 70    expression_list -> expression_list COMMA expression
Rule 71    variable_declaration -> ID types ASSIGN expression
Rule 72    variable_declaration -> ID ASSIGN expression
Rule 73    variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
Rule 74    list_of_identifiers -> ID
Rule 75    list_of_identifiers -> ID COMMA list_of_identifiers
Rule 76    list_of_values -> expression
Rule 77    list_of_values -> expression COMMA list_of_values
Rule 78    expression -> ternary_expression
Rule 79    expression -> assignment_expression
Rule 80    assignment_expression -> assignment_target ASSIGN expression
Rule 81    assignment_expression -> assignment_target PLUS_ASSIGN expression
Rule 82    assignment_expression -> assignment_target MINUS_ASSIGN expression
Rule 83    assignment_expression -> assignment_target MULTI_ASSIGN expression
Rule 84    assignment_expression -> assignment_target DIVIDE_ASSIGN expression
Rule 85    assignment_target -> postfix_expression
Rule 86    assignment_target -> UNDERSCORE
Rule 87    assignment_target -> ASTERISK assignment_target
Rule 88    ternary_expression -> logical_or_expression QMARK expression TCOLON expression
Rule 89    ternary_expression -> logical_or_expression
Rule 90    logical_or_expression -> logical_and_expression
Rule 91    logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 92    logical_and_expression -> equality_expression
Rule 93    logical_and_expression -> logical_and_expression AND equality_expression
Rule 94    equality_expression -> relational_expression
Rule 95    equality_expression -> equality_expression EQUAL relational_expression
Rule 96    equality_expression -> equality_expression NOT_EQUAL relational_expression
Rule 97    equality_expression -> equality_expression TIPO_EQUAL relational_expression
Rule 98    relational_expression -> additive_expression
Rule 99    relational_expression -> relational_expression GREATER_THAN additive_expression
Rule 100   relational_expression -> relational_expression LESS_THAN additive_expression
Rule 101   relational_expression -> relational_expression GREATER_EQUAL additive_expression
Rule 102   relational_expression -> relational_expression LESS_EQUAL additive_expression
Rule 103   additive_expression -> multiplicative_expression
Rule 104   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 105   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 106   multiplicative_expression -> potenciacao_expression
Rule 107   multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression
Rule 108   multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression
Rule 109   multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression
Rule 110   potenciacao_expression -> unary_expression
Rule 111   potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression
Rule 112   unary_expression -> PLUS unary_expression
Rule 113   unary_expression -> MINUS unary_expression
Rule 114   unary_expression -> EXCLAMATION unary_expression
Rule 115   unary_expression -> TILDE unary_expression
Rule 116   unary_expression -> postfix_expression
Rule 117   postfix_expression -> primary_expression postfix_suffixes
Rule 118   postfix_suffixes -> postfix_suffix postfix_suffixes
Rule 119   postfix_suffixes -> postfix_suffix
Rule 120   postfix_suffix -> LBRACKET expression RBRACKET
Rule 121   postfix_suffix -> DOTDOT primary_expression
Rule 122   postfix_suffix -> DOTDOTDOT primary_expression
Rule 123   primary_expression -> expression_between_parentesis
Rule 124   primary_expression -> array_literal
Rule 125   primary_expression -> literal
Rule 126   primary_expression -> ID
Rule 127   expression_between_parentesis -> LPAREN expression RPAREN
Rule 128   array_literal -> LBRACKET opt_expression_list RBRACKET
Rule 129   string_literal -> STRING
Rule 130   string_literal -> STRING INTERP_START expression INTERP_END string_literal
Rule 131   statements -> statement
Rule 132   statements -> statement NEWLINE statements
Rule 133   statement -> expression
Rule 134   statement -> control_structure
Rule 135   statement -> variable_declaration
Rule 136   control_structure -> conditional
Rule 137   control_structure -> loop_structure
Rule 138   control_structure -> case_structure
Rule 139   control_structure -> return_statement
Rule 140   control_structure -> break_statement
Rule 141   control_structure -> next_statement
Rule 142   conditional -> if_statement
Rule 143   conditional -> unless_statement
Rule 144   if_statement -> IF expression statements_block opt_elsif opt_else END
Rule 145   unless_statement -> UNLESS expression statements_block opt_else END
Rule 146   opt_elsif -> ELSIF expression statements_block opt_elsif
Rule 147   opt_elsif -> empty
Rule 148   opt_else -> ELSE statements_block
Rule 149   opt_else -> empty
Rule 150   loop_structure -> while
Rule 151   loop_structure -> until
Rule 152   loop_structure -> loop
Rule 153   loop_structure -> iterator
Rule 154   while -> WHILE expression statements_block
Rule 155   until -> UNTIL expression statements_block
Rule 156   loop -> LOOP statements_block
Rule 157   iterator -> expression DOT MULTI statements_block
Rule 158   iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END
Rule 159   iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
Rule 160   case_structure -> CASE expression when_list opt_else END
Rule 161   when_list -> WHEN expression statements_block
Rule 162   when_list -> when_list WHEN expression statements_block
Rule 163   return_statement -> RETURN opt_expression
Rule 164   break_statement -> BREAK opt_expression
Rule 165   next_statement -> NEXT opt_expression
Rule 166   opt_expression -> expression
Rule 167   opt_expression -> empty
Rule 168   statements_block -> statements
Rule 169   empty -> <empty>

Terminals, with rules where they appear

AND                  : 93
AS                   : 
ASSIGN               : 21 35 36 71 72 73 80
ASSOCIACAO           : 
ASTERISK             : 87
AT                   : 
BEGIN                : 
BINNUMBER            : 
BOOL                 : 59
BREAK                : 164
CASE                 : 160
CHAR                 : 40 63
CLASS                : 
CLASSVAR             : 
CLASS_VAR            : 
COLON                : 34 36 37
COMMA                : 32 70 73 73 75 77
CONSTANT             : 21
DEF                  : 27 28
DEFINE_BLOCO         : 
DIVIDE               : 108
DIVIDE_ASSIGN        : 84
DO                   : 158
DOLAR_SIGN           : 
DOT                  : 157 158 159
DOTDOT               : 121
DOTDOTDOT            : 122
EACH                 : 158 159
ELSE                 : 148
ELSIF                : 146
END                  : 24 27 28 144 145 158 160
ENUM                 : 
EQUAL                : 95
EXCLAMATION          : 114
FALSE                : 65
FLOAT                : 56
FLOAT32              : 57
FLOAT64              : 58
FLOATNUMBER          : 61
GLOBALVAR            : 
GREATER_EQUAL        : 101
GREATER_THAN         : 99
HEXNUMBER            : 
ID                   : 24 27 28 33 34 35 36 66 71 72 73 74 75 126 158 159
IF                   : 144
IN                   : 
INCLUDE              : 
INSTANCEVAR          : 
INSTANCE_VAR         : 
INT                  : 45
INT128               : 50
INT16                : 47
INT32                : 48
INT64                : 49
INT8                 : 46
INTERP_END           : 130
INTERP_START         : 130
INTNUMBER            : 60
LBRACE               : 159
LBRACKET             : 120 128
LESS_EQUAL           : 102
LESS_THAN            : 100
LITERAL              : 
LOOP                 : 156
LPAREN               : 27 66 127
MACRO                : 
MINUS                : 105 113
MINUS_ASSIGN         : 82
MODULE               : 24
MODULO               : 109
MODULO_ASSIGN        : 
MULTI                : 107 157
MULTI_ASSIGN         : 83
NEWLINE              : 24 28 132
NEXT                 : 165
NIL                  : 41
NOT                  : 
NOT_EQUAL            : 96
OCTNUMBER            : 
OF                   : 
OR                   : 91
OR_ASSIGN            : 
OUT                  : 
PASSA_ARGUMENTO      : 
PIPE                 : 158 158 159 159
PLUS                 : 104 112
PLUS_ASSIGN          : 81
POTENCIACAO          : 111
POTENCIACAO_ASSIGN   : 
PRIVATE              : 
PROTECTED            : 
QMARK                : 88
RBRACE               : 159
RBRACKET             : 120 128
REQUIRE              : 18
RETURN               : 163
RPAREN               : 27 66 127
SAFE_CALL            : 
SCOPE                : 
SELECT               : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SIZEOF               : 
STRING               : 18 39 129 130
STRUCT               : 
SYMBOL               : 
TCOLON               : 88
THEN                 : 
TILDE                : 115
TIPO_EQUAL           : 97
TRUE                 : 64
TYPE                 : 
TYPEOF               : 
UINT128              : 55
UINT16               : 52
UINT32               : 53
UINT64               : 54
UINT8                : 51
UNDERSCORE           : 86
UNINITIALIZED        : 
UNION                : 
UNLESS               : 145
UNTIL                : 155
VAR_GLOBAL           : 
WHEN                 : 161 162
WHILE                : 154
YIELD                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 98 99 100 101 102 104 105
argument             : 31 32
argument_list        : 29 32
array_literal        : 124
assignment_expression : 79
assignment_target    : 80 81 82 83 84 87
boolean              : 44
break_statement      : 140
case_structure       : 138
conditional          : 136
constant             : 19 20
constant_list        : 1 2 3 5 6 8 10 13 19
control_structure    : 134
empty                : 30 38 68 147 149 167
equality_expression  : 92 93 95 96 97
expression           : 21 35 36 69 70 71 72 73 76 77 80 81 82 83 84 88 88 120 127 130 133 144 145 146 154 155 157 158 159 160 161 162 166
expression_between_parentesis : 123
expression_list      : 66 67 70
float                : 43
function             : 25 26
function_call        : 
function_list        : 1 3 4 5 9 10 11 15 26
if_statement         : 142
integer              : 42
iterator             : 153
list_of_identifiers  : 73 75
list_of_values       : 73 77
literal              : 125
logical_and_expression : 90 91 93
logical_or_expression : 88 89 91
loop                 : 152
loop_structure       : 137
module               : 22 23
module_list          : 1 2 4 5 7 8 11 14 22
multiplicative_expression : 103 104 105 107 108 109
next_statement       : 141
opt_argument_list    : 27
opt_else             : 144 145 160
opt_elsif            : 144 146
opt_expression       : 163 164 165
opt_expression_list  : 128
opt_return_type      : 27 28
postfix_expression   : 85 116
postfix_suffix       : 118 119
postfix_suffixes     : 117 118
potenciacao_expression : 106 107 108 109 111
primary_expression   : 117 121 122
program              : 0
relational_expression : 94 95 96 97 99 100 101 102
require              : 16 17
require_list         : 1 2 3 4 6 7 9 12 16
return_statement     : 139
statement            : 131 132
statements           : 24 132 168
statements_block     : 27 28 144 145 146 148 154 155 156 157 158 159 161 162
string_literal       : 62 130
ternary_expression   : 78
types                : 34 36 37 71
unary_expression     : 110 111 112 113 114 115
unless_statement     : 143
until                : 151
variable_declaration : 135
when_list            : 160 162
while                : 150

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . require_list constant_list module_list function_list
    (2) program -> . require_list constant_list module_list
    (3) program -> . require_list constant_list function_list
    (4) program -> . require_list module_list function_list
    (5) program -> . constant_list module_list function_list
    (6) program -> . require_list constant_list
    (7) program -> . require_list module_list
    (8) program -> . constant_list module_list
    (9) program -> . require_list function_list
    (10) program -> . constant_list function_list
    (11) program -> . module_list function_list
    (12) program -> . require_list
    (13) program -> . constant_list
    (14) program -> . module_list
    (15) program -> . function_list
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (18) require -> . REQUIRE STRING
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID NEWLINE statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    REQUIRE         shift and go to state 10
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    program                        shift and go to state 1
    require_list                   shift and go to state 2
    constant_list                  shift and go to state 3
    module_list                    shift and go to state 4
    function_list                  shift and go to state 5
    require                        shift and go to state 6
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> require_list . constant_list module_list function_list
    (2) program -> require_list . constant_list module_list
    (3) program -> require_list . constant_list function_list
    (4) program -> require_list . module_list function_list
    (6) program -> require_list . constant_list
    (7) program -> require_list . module_list
    (9) program -> require_list . function_list
    (12) program -> require_list .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID NEWLINE statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    $end            reduce using rule 12 (program -> require_list .)
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    constant_list                  shift and go to state 14
    module_list                    shift and go to state 15
    function_list                  shift and go to state 16
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 3

    (5) program -> constant_list . module_list function_list
    (8) program -> constant_list . module_list
    (10) program -> constant_list . function_list
    (13) program -> constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (24) module -> . MODULE ID NEWLINE statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    $end            reduce using rule 13 (program -> constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 17
    function_list                  shift and go to state 18
    module                         shift and go to state 8
    function                       shift and go to state 9

state 4

    (11) program -> module_list . function_list
    (14) program -> module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    $end            reduce using rule 14 (program -> module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 19
    function                       shift and go to state 9

state 5

    (15) program -> function_list .

    $end            reduce using rule 15 (program -> function_list .)


state 6

    (16) require_list -> require . require_list
    (17) require_list -> require .
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (18) require -> . REQUIRE STRING

    CONSTANT        reduce using rule 17 (require_list -> require .)
    MODULE          reduce using rule 17 (require_list -> require .)
    DEF             reduce using rule 17 (require_list -> require .)
    $end            reduce using rule 17 (require_list -> require .)
    REQUIRE         shift and go to state 10

    require                        shift and go to state 6
    require_list                   shift and go to state 20

state 7

    (19) constant_list -> constant . constant_list
    (20) constant_list -> constant .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (21) constant -> . CONSTANT ASSIGN expression

    MODULE          reduce using rule 20 (constant_list -> constant .)
    DEF             reduce using rule 20 (constant_list -> constant .)
    $end            reduce using rule 20 (constant_list -> constant .)
    CONSTANT        shift and go to state 11

    constant                       shift and go to state 7
    constant_list                  shift and go to state 21

state 8

    (22) module_list -> module . module_list
    (23) module_list -> module .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (24) module -> . MODULE ID NEWLINE statements END

    DEF             reduce using rule 23 (module_list -> module .)
    $end            reduce using rule 23 (module_list -> module .)
    MODULE          shift and go to state 12

    module                         shift and go to state 8
    module_list                    shift and go to state 22

state 9

    (25) function_list -> function .
    (26) function_list -> function . function_list
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    $end            reduce using rule 25 (function_list -> function .)
    DEF             shift and go to state 13

    function                       shift and go to state 9
    function_list                  shift and go to state 23

state 10

    (18) require -> REQUIRE . STRING

    STRING          shift and go to state 24


state 11

    (21) constant -> CONSTANT . ASSIGN expression

    ASSIGN          shift and go to state 25


state 12

    (24) module -> MODULE . ID NEWLINE statements END

    ID              shift and go to state 26


state 13

    (27) function -> DEF . ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> DEF . ID opt_return_type NEWLINE statements_block END

    ID              shift and go to state 27


state 14

    (1) program -> require_list constant_list . module_list function_list
    (2) program -> require_list constant_list . module_list
    (3) program -> require_list constant_list . function_list
    (6) program -> require_list constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (24) module -> . MODULE ID NEWLINE statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    $end            reduce using rule 6 (program -> require_list constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 28
    function_list                  shift and go to state 29
    module                         shift and go to state 8
    function                       shift and go to state 9

state 15

    (4) program -> require_list module_list . function_list
    (7) program -> require_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    $end            reduce using rule 7 (program -> require_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 30
    function                       shift and go to state 9

state 16

    (9) program -> require_list function_list .

    $end            reduce using rule 9 (program -> require_list function_list .)


state 17

    (5) program -> constant_list module_list . function_list
    (8) program -> constant_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    $end            reduce using rule 8 (program -> constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 31
    function                       shift and go to state 9

state 18

    (10) program -> constant_list function_list .

    $end            reduce using rule 10 (program -> constant_list function_list .)


state 19

    (11) program -> module_list function_list .

    $end            reduce using rule 11 (program -> module_list function_list .)


state 20

    (16) require_list -> require require_list .

    CONSTANT        reduce using rule 16 (require_list -> require require_list .)
    MODULE          reduce using rule 16 (require_list -> require require_list .)
    DEF             reduce using rule 16 (require_list -> require require_list .)
    $end            reduce using rule 16 (require_list -> require require_list .)


state 21

    (19) constant_list -> constant constant_list .

    MODULE          reduce using rule 19 (constant_list -> constant constant_list .)
    DEF             reduce using rule 19 (constant_list -> constant constant_list .)
    $end            reduce using rule 19 (constant_list -> constant constant_list .)


state 22

    (22) module_list -> module module_list .

    DEF             reduce using rule 22 (module_list -> module module_list .)
    $end            reduce using rule 22 (module_list -> module module_list .)


state 23

    (26) function_list -> function function_list .

    $end            reduce using rule 26 (function_list -> function function_list .)


state 24

    (18) require -> REQUIRE STRING .

    REQUIRE         reduce using rule 18 (require -> REQUIRE STRING .)
    CONSTANT        reduce using rule 18 (require -> REQUIRE STRING .)
    MODULE          reduce using rule 18 (require -> REQUIRE STRING .)
    DEF             reduce using rule 18 (require -> REQUIRE STRING .)
    $end            reduce using rule 18 (require -> REQUIRE STRING .)


state 25

    (21) constant -> CONSTANT ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 32
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 26

    (24) module -> MODULE ID . NEWLINE statements END

    NEWLINE         shift and go to state 65


state 27

    (27) function -> DEF ID . LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> DEF ID . opt_return_type NEWLINE statements_block END
    (37) opt_return_type -> . COLON types
    (38) opt_return_type -> . empty
    (169) empty -> .

    LPAREN          shift and go to state 66
    COLON           shift and go to state 68
    NEWLINE         reduce using rule 169 (empty -> .)

    opt_return_type                shift and go to state 67
    empty                          shift and go to state 69

state 28

    (1) program -> require_list constant_list module_list . function_list
    (2) program -> require_list constant_list module_list .
    (25) function_list -> . function
    (26) function_list -> . function function_list
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
    (28) function -> . DEF ID opt_return_type NEWLINE statements_block END

    $end            reduce using rule 2 (program -> require_list constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 70
    function                       shift and go to state 9

state 29

    (3) program -> require_list constant_list function_list .

    $end            reduce using rule 3 (program -> require_list constant_list function_list .)


state 30

    (4) program -> require_list module_list function_list .

    $end            reduce using rule 4 (program -> require_list module_list function_list .)


state 31

    (5) program -> constant_list module_list function_list .

    $end            reduce using rule 5 (program -> constant_list module_list function_list .)


state 32

    (21) constant -> CONSTANT ASSIGN expression .

    CONSTANT        reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    MODULE          reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    DEF             reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    $end            reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)


state 33

    (78) expression -> ternary_expression .

    CONSTANT        reduce using rule 78 (expression -> ternary_expression .)
    MODULE          reduce using rule 78 (expression -> ternary_expression .)
    DEF             reduce using rule 78 (expression -> ternary_expression .)
    $end            reduce using rule 78 (expression -> ternary_expression .)
    RPAREN          reduce using rule 78 (expression -> ternary_expression .)
    COMMA           reduce using rule 78 (expression -> ternary_expression .)
    RBRACKET        reduce using rule 78 (expression -> ternary_expression .)
    DOT             reduce using rule 78 (expression -> ternary_expression .)
    NEWLINE         reduce using rule 78 (expression -> ternary_expression .)
    END             reduce using rule 78 (expression -> ternary_expression .)
    TCOLON          reduce using rule 78 (expression -> ternary_expression .)
    INTERP_END      reduce using rule 78 (expression -> ternary_expression .)
    WHEN            reduce using rule 78 (expression -> ternary_expression .)
    ELSIF           reduce using rule 78 (expression -> ternary_expression .)
    ELSE            reduce using rule 78 (expression -> ternary_expression .)
    ID              reduce using rule 78 (expression -> ternary_expression .)
    CASE            reduce using rule 78 (expression -> ternary_expression .)
    RETURN          reduce using rule 78 (expression -> ternary_expression .)
    BREAK           reduce using rule 78 (expression -> ternary_expression .)
    NEXT            reduce using rule 78 (expression -> ternary_expression .)
    UNDERSCORE      reduce using rule 78 (expression -> ternary_expression .)
    ASTERISK        reduce using rule 78 (expression -> ternary_expression .)
    IF              reduce using rule 78 (expression -> ternary_expression .)
    UNLESS          reduce using rule 78 (expression -> ternary_expression .)
    WHILE           reduce using rule 78 (expression -> ternary_expression .)
    UNTIL           reduce using rule 78 (expression -> ternary_expression .)
    LOOP            reduce using rule 78 (expression -> ternary_expression .)
    LPAREN          reduce using rule 78 (expression -> ternary_expression .)
    LBRACKET        reduce using rule 78 (expression -> ternary_expression .)
    INTNUMBER       reduce using rule 78 (expression -> ternary_expression .)
    FLOATNUMBER     reduce using rule 78 (expression -> ternary_expression .)
    CHAR            reduce using rule 78 (expression -> ternary_expression .)
    TRUE            reduce using rule 78 (expression -> ternary_expression .)
    FALSE           reduce using rule 78 (expression -> ternary_expression .)
    STRING          reduce using rule 78 (expression -> ternary_expression .)
    PLUS            reduce using rule 78 (expression -> ternary_expression .)
    MINUS           reduce using rule 78 (expression -> ternary_expression .)
    EXCLAMATION     reduce using rule 78 (expression -> ternary_expression .)
    TILDE           reduce using rule 78 (expression -> ternary_expression .)


state 34

    (79) expression -> assignment_expression .

    CONSTANT        reduce using rule 79 (expression -> assignment_expression .)
    MODULE          reduce using rule 79 (expression -> assignment_expression .)
    DEF             reduce using rule 79 (expression -> assignment_expression .)
    $end            reduce using rule 79 (expression -> assignment_expression .)
    RPAREN          reduce using rule 79 (expression -> assignment_expression .)
    COMMA           reduce using rule 79 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 79 (expression -> assignment_expression .)
    DOT             reduce using rule 79 (expression -> assignment_expression .)
    NEWLINE         reduce using rule 79 (expression -> assignment_expression .)
    END             reduce using rule 79 (expression -> assignment_expression .)
    TCOLON          reduce using rule 79 (expression -> assignment_expression .)
    INTERP_END      reduce using rule 79 (expression -> assignment_expression .)
    WHEN            reduce using rule 79 (expression -> assignment_expression .)
    ELSIF           reduce using rule 79 (expression -> assignment_expression .)
    ELSE            reduce using rule 79 (expression -> assignment_expression .)
    ID              reduce using rule 79 (expression -> assignment_expression .)
    CASE            reduce using rule 79 (expression -> assignment_expression .)
    RETURN          reduce using rule 79 (expression -> assignment_expression .)
    BREAK           reduce using rule 79 (expression -> assignment_expression .)
    NEXT            reduce using rule 79 (expression -> assignment_expression .)
    UNDERSCORE      reduce using rule 79 (expression -> assignment_expression .)
    ASTERISK        reduce using rule 79 (expression -> assignment_expression .)
    IF              reduce using rule 79 (expression -> assignment_expression .)
    UNLESS          reduce using rule 79 (expression -> assignment_expression .)
    WHILE           reduce using rule 79 (expression -> assignment_expression .)
    UNTIL           reduce using rule 79 (expression -> assignment_expression .)
    LOOP            reduce using rule 79 (expression -> assignment_expression .)
    LPAREN          reduce using rule 79 (expression -> assignment_expression .)
    LBRACKET        reduce using rule 79 (expression -> assignment_expression .)
    INTNUMBER       reduce using rule 79 (expression -> assignment_expression .)
    FLOATNUMBER     reduce using rule 79 (expression -> assignment_expression .)
    CHAR            reduce using rule 79 (expression -> assignment_expression .)
    TRUE            reduce using rule 79 (expression -> assignment_expression .)
    FALSE           reduce using rule 79 (expression -> assignment_expression .)
    STRING          reduce using rule 79 (expression -> assignment_expression .)
    PLUS            reduce using rule 79 (expression -> assignment_expression .)
    MINUS           reduce using rule 79 (expression -> assignment_expression .)
    EXCLAMATION     reduce using rule 79 (expression -> assignment_expression .)
    TILDE           reduce using rule 79 (expression -> assignment_expression .)


state 35

    (88) ternary_expression -> logical_or_expression . QMARK expression TCOLON expression
    (89) ternary_expression -> logical_or_expression .
    (91) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           shift and go to state 71
    CONSTANT        reduce using rule 89 (ternary_expression -> logical_or_expression .)
    MODULE          reduce using rule 89 (ternary_expression -> logical_or_expression .)
    DEF             reduce using rule 89 (ternary_expression -> logical_or_expression .)
    $end            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    RPAREN          reduce using rule 89 (ternary_expression -> logical_or_expression .)
    COMMA           reduce using rule 89 (ternary_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 89 (ternary_expression -> logical_or_expression .)
    DOT             reduce using rule 89 (ternary_expression -> logical_or_expression .)
    NEWLINE         reduce using rule 89 (ternary_expression -> logical_or_expression .)
    END             reduce using rule 89 (ternary_expression -> logical_or_expression .)
    TCOLON          reduce using rule 89 (ternary_expression -> logical_or_expression .)
    INTERP_END      reduce using rule 89 (ternary_expression -> logical_or_expression .)
    WHEN            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    ELSIF           reduce using rule 89 (ternary_expression -> logical_or_expression .)
    ELSE            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    ID              reduce using rule 89 (ternary_expression -> logical_or_expression .)
    CASE            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    RETURN          reduce using rule 89 (ternary_expression -> logical_or_expression .)
    BREAK           reduce using rule 89 (ternary_expression -> logical_or_expression .)
    NEXT            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    UNDERSCORE      reduce using rule 89 (ternary_expression -> logical_or_expression .)
    ASTERISK        reduce using rule 89 (ternary_expression -> logical_or_expression .)
    IF              reduce using rule 89 (ternary_expression -> logical_or_expression .)
    UNLESS          reduce using rule 89 (ternary_expression -> logical_or_expression .)
    WHILE           reduce using rule 89 (ternary_expression -> logical_or_expression .)
    UNTIL           reduce using rule 89 (ternary_expression -> logical_or_expression .)
    LOOP            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    LPAREN          reduce using rule 89 (ternary_expression -> logical_or_expression .)
    LBRACKET        reduce using rule 89 (ternary_expression -> logical_or_expression .)
    INTNUMBER       reduce using rule 89 (ternary_expression -> logical_or_expression .)
    FLOATNUMBER     reduce using rule 89 (ternary_expression -> logical_or_expression .)
    CHAR            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    TRUE            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    FALSE           reduce using rule 89 (ternary_expression -> logical_or_expression .)
    STRING          reduce using rule 89 (ternary_expression -> logical_or_expression .)
    PLUS            reduce using rule 89 (ternary_expression -> logical_or_expression .)
    MINUS           reduce using rule 89 (ternary_expression -> logical_or_expression .)
    EXCLAMATION     reduce using rule 89 (ternary_expression -> logical_or_expression .)
    TILDE           reduce using rule 89 (ternary_expression -> logical_or_expression .)
    OR              shift and go to state 72


state 36

    (80) assignment_expression -> assignment_target . ASSIGN expression
    (81) assignment_expression -> assignment_target . PLUS_ASSIGN expression
    (82) assignment_expression -> assignment_target . MINUS_ASSIGN expression
    (83) assignment_expression -> assignment_target . MULTI_ASSIGN expression
    (84) assignment_expression -> assignment_target . DIVIDE_ASSIGN expression

    ASSIGN          shift and go to state 73
    PLUS_ASSIGN     shift and go to state 74
    MINUS_ASSIGN    shift and go to state 75
    MULTI_ASSIGN    shift and go to state 76
    DIVIDE_ASSIGN   shift and go to state 77


state 37

    (90) logical_or_expression -> logical_and_expression .
    (93) logical_and_expression -> logical_and_expression . AND equality_expression

    QMARK           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    CONSTANT        reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    MODULE          reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    DEF             reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    DOT             reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    NEWLINE         reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    END             reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    TCOLON          reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    INTERP_END      reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    WHEN            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    ELSIF           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    ELSE            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    ID              reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    CASE            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    NEXT            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    UNDERSCORE      reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    ASTERISK        reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    UNLESS          reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    WHILE           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    UNTIL           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    LOOP            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    LBRACKET        reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    INTNUMBER       reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    FLOATNUMBER     reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    TRUE            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    FALSE           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    STRING          reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    PLUS            reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    EXCLAMATION     reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    TILDE           reduce using rule 90 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 78


state 38

    (85) assignment_target -> postfix_expression .
    (116) unary_expression -> postfix_expression .

    ASSIGN          reduce using rule 85 (assignment_target -> postfix_expression .)
    PLUS_ASSIGN     reduce using rule 85 (assignment_target -> postfix_expression .)
    MINUS_ASSIGN    reduce using rule 85 (assignment_target -> postfix_expression .)
    MULTI_ASSIGN    reduce using rule 85 (assignment_target -> postfix_expression .)
    DIVIDE_ASSIGN   reduce using rule 85 (assignment_target -> postfix_expression .)
    POTENCIACAO     reduce using rule 116 (unary_expression -> postfix_expression .)
    MULTI           reduce using rule 116 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 116 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 116 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 116 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 116 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 116 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 116 (unary_expression -> postfix_expression .)
    GREATER_EQUAL   reduce using rule 116 (unary_expression -> postfix_expression .)
    LESS_EQUAL      reduce using rule 116 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 116 (unary_expression -> postfix_expression .)
    NOT_EQUAL       reduce using rule 116 (unary_expression -> postfix_expression .)
    TIPO_EQUAL      reduce using rule 116 (unary_expression -> postfix_expression .)
    AND             reduce using rule 116 (unary_expression -> postfix_expression .)
    QMARK           reduce using rule 116 (unary_expression -> postfix_expression .)
    OR              reduce using rule 116 (unary_expression -> postfix_expression .)
    CONSTANT        reduce using rule 116 (unary_expression -> postfix_expression .)
    MODULE          reduce using rule 116 (unary_expression -> postfix_expression .)
    DEF             reduce using rule 116 (unary_expression -> postfix_expression .)
    $end            reduce using rule 116 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 116 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 116 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 116 (unary_expression -> postfix_expression .)
    DOT             reduce using rule 116 (unary_expression -> postfix_expression .)
    NEWLINE         reduce using rule 116 (unary_expression -> postfix_expression .)
    END             reduce using rule 116 (unary_expression -> postfix_expression .)
    TCOLON          reduce using rule 116 (unary_expression -> postfix_expression .)
    INTERP_END      reduce using rule 116 (unary_expression -> postfix_expression .)
    WHEN            reduce using rule 116 (unary_expression -> postfix_expression .)
    ELSIF           reduce using rule 116 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 116 (unary_expression -> postfix_expression .)
    ID              reduce using rule 116 (unary_expression -> postfix_expression .)
    CASE            reduce using rule 116 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 116 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 116 (unary_expression -> postfix_expression .)
    NEXT            reduce using rule 116 (unary_expression -> postfix_expression .)
    UNDERSCORE      reduce using rule 116 (unary_expression -> postfix_expression .)
    ASTERISK        reduce using rule 116 (unary_expression -> postfix_expression .)
    IF              reduce using rule 116 (unary_expression -> postfix_expression .)
    UNLESS          reduce using rule 116 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 116 (unary_expression -> postfix_expression .)
    UNTIL           reduce using rule 116 (unary_expression -> postfix_expression .)
    LOOP            reduce using rule 116 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 116 (unary_expression -> postfix_expression .)
    LBRACKET        reduce using rule 116 (unary_expression -> postfix_expression .)
    INTNUMBER       reduce using rule 116 (unary_expression -> postfix_expression .)
    FLOATNUMBER     reduce using rule 116 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 116 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 116 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 116 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 116 (unary_expression -> postfix_expression .)
    EXCLAMATION     reduce using rule 116 (unary_expression -> postfix_expression .)
    TILDE           reduce using rule 116 (unary_expression -> postfix_expression .)


state 39

    (86) assignment_target -> UNDERSCORE .

    ASSIGN          reduce using rule 86 (assignment_target -> UNDERSCORE .)
    PLUS_ASSIGN     reduce using rule 86 (assignment_target -> UNDERSCORE .)
    MINUS_ASSIGN    reduce using rule 86 (assignment_target -> UNDERSCORE .)
    MULTI_ASSIGN    reduce using rule 86 (assignment_target -> UNDERSCORE .)
    DIVIDE_ASSIGN   reduce using rule 86 (assignment_target -> UNDERSCORE .)


state 40

    (87) assignment_target -> ASTERISK . assignment_target
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    assignment_target              shift and go to state 79
    postfix_expression             shift and go to state 80
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 41

    (92) logical_and_expression -> equality_expression .
    (95) equality_expression -> equality_expression . EQUAL relational_expression
    (96) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (97) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 92 (logical_and_expression -> equality_expression .)
    QMARK           reduce using rule 92 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 92 (logical_and_expression -> equality_expression .)
    CONSTANT        reduce using rule 92 (logical_and_expression -> equality_expression .)
    MODULE          reduce using rule 92 (logical_and_expression -> equality_expression .)
    DEF             reduce using rule 92 (logical_and_expression -> equality_expression .)
    $end            reduce using rule 92 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 92 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 92 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 92 (logical_and_expression -> equality_expression .)
    DOT             reduce using rule 92 (logical_and_expression -> equality_expression .)
    NEWLINE         reduce using rule 92 (logical_and_expression -> equality_expression .)
    END             reduce using rule 92 (logical_and_expression -> equality_expression .)
    TCOLON          reduce using rule 92 (logical_and_expression -> equality_expression .)
    INTERP_END      reduce using rule 92 (logical_and_expression -> equality_expression .)
    WHEN            reduce using rule 92 (logical_and_expression -> equality_expression .)
    ELSIF           reduce using rule 92 (logical_and_expression -> equality_expression .)
    ELSE            reduce using rule 92 (logical_and_expression -> equality_expression .)
    ID              reduce using rule 92 (logical_and_expression -> equality_expression .)
    CASE            reduce using rule 92 (logical_and_expression -> equality_expression .)
    RETURN          reduce using rule 92 (logical_and_expression -> equality_expression .)
    BREAK           reduce using rule 92 (logical_and_expression -> equality_expression .)
    NEXT            reduce using rule 92 (logical_and_expression -> equality_expression .)
    UNDERSCORE      reduce using rule 92 (logical_and_expression -> equality_expression .)
    ASTERISK        reduce using rule 92 (logical_and_expression -> equality_expression .)
    IF              reduce using rule 92 (logical_and_expression -> equality_expression .)
    UNLESS          reduce using rule 92 (logical_and_expression -> equality_expression .)
    WHILE           reduce using rule 92 (logical_and_expression -> equality_expression .)
    UNTIL           reduce using rule 92 (logical_and_expression -> equality_expression .)
    LOOP            reduce using rule 92 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 92 (logical_and_expression -> equality_expression .)
    LBRACKET        reduce using rule 92 (logical_and_expression -> equality_expression .)
    INTNUMBER       reduce using rule 92 (logical_and_expression -> equality_expression .)
    FLOATNUMBER     reduce using rule 92 (logical_and_expression -> equality_expression .)
    CHAR            reduce using rule 92 (logical_and_expression -> equality_expression .)
    TRUE            reduce using rule 92 (logical_and_expression -> equality_expression .)
    FALSE           reduce using rule 92 (logical_and_expression -> equality_expression .)
    STRING          reduce using rule 92 (logical_and_expression -> equality_expression .)
    PLUS            reduce using rule 92 (logical_and_expression -> equality_expression .)
    MINUS           reduce using rule 92 (logical_and_expression -> equality_expression .)
    EXCLAMATION     reduce using rule 92 (logical_and_expression -> equality_expression .)
    TILDE           reduce using rule 92 (logical_and_expression -> equality_expression .)
    EQUAL           shift and go to state 81
    NOT_EQUAL       shift and go to state 82
    TIPO_EQUAL      shift and go to state 83


state 42

    (117) postfix_expression -> primary_expression . postfix_suffixes
    (118) postfix_suffixes -> . postfix_suffix postfix_suffixes
    (119) postfix_suffixes -> . postfix_suffix
    (120) postfix_suffix -> . LBRACKET expression RBRACKET
    (121) postfix_suffix -> . DOTDOT primary_expression
    (122) postfix_suffix -> . DOTDOTDOT primary_expression

    LBRACKET        shift and go to state 86
    DOTDOT          shift and go to state 87
    DOTDOTDOT       shift and go to state 88

    postfix_suffixes               shift and go to state 84
    postfix_suffix                 shift and go to state 85

state 43

    (94) equality_expression -> relational_expression .
    (99) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (100) relational_expression -> relational_expression . LESS_THAN additive_expression
    (101) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (102) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 94 (equality_expression -> relational_expression .)
    NOT_EQUAL       reduce using rule 94 (equality_expression -> relational_expression .)
    TIPO_EQUAL      reduce using rule 94 (equality_expression -> relational_expression .)
    AND             reduce using rule 94 (equality_expression -> relational_expression .)
    QMARK           reduce using rule 94 (equality_expression -> relational_expression .)
    OR              reduce using rule 94 (equality_expression -> relational_expression .)
    CONSTANT        reduce using rule 94 (equality_expression -> relational_expression .)
    MODULE          reduce using rule 94 (equality_expression -> relational_expression .)
    DEF             reduce using rule 94 (equality_expression -> relational_expression .)
    $end            reduce using rule 94 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 94 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 94 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 94 (equality_expression -> relational_expression .)
    DOT             reduce using rule 94 (equality_expression -> relational_expression .)
    NEWLINE         reduce using rule 94 (equality_expression -> relational_expression .)
    END             reduce using rule 94 (equality_expression -> relational_expression .)
    TCOLON          reduce using rule 94 (equality_expression -> relational_expression .)
    INTERP_END      reduce using rule 94 (equality_expression -> relational_expression .)
    WHEN            reduce using rule 94 (equality_expression -> relational_expression .)
    ELSIF           reduce using rule 94 (equality_expression -> relational_expression .)
    ELSE            reduce using rule 94 (equality_expression -> relational_expression .)
    ID              reduce using rule 94 (equality_expression -> relational_expression .)
    CASE            reduce using rule 94 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 94 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 94 (equality_expression -> relational_expression .)
    NEXT            reduce using rule 94 (equality_expression -> relational_expression .)
    UNDERSCORE      reduce using rule 94 (equality_expression -> relational_expression .)
    ASTERISK        reduce using rule 94 (equality_expression -> relational_expression .)
    IF              reduce using rule 94 (equality_expression -> relational_expression .)
    UNLESS          reduce using rule 94 (equality_expression -> relational_expression .)
    WHILE           reduce using rule 94 (equality_expression -> relational_expression .)
    UNTIL           reduce using rule 94 (equality_expression -> relational_expression .)
    LOOP            reduce using rule 94 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 94 (equality_expression -> relational_expression .)
    LBRACKET        reduce using rule 94 (equality_expression -> relational_expression .)
    INTNUMBER       reduce using rule 94 (equality_expression -> relational_expression .)
    FLOATNUMBER     reduce using rule 94 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 94 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 94 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 94 (equality_expression -> relational_expression .)
    STRING          reduce using rule 94 (equality_expression -> relational_expression .)
    PLUS            reduce using rule 94 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 94 (equality_expression -> relational_expression .)
    EXCLAMATION     reduce using rule 94 (equality_expression -> relational_expression .)
    TILDE           reduce using rule 94 (equality_expression -> relational_expression .)
    GREATER_THAN    shift and go to state 89
    LESS_THAN       shift and go to state 90
    GREATER_EQUAL   shift and go to state 91
    LESS_EQUAL      shift and go to state 92


state 44

    (123) primary_expression -> expression_between_parentesis .

    LBRACKET        reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    DOTDOT          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    DOTDOTDOT       reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    ASSIGN          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    PLUS_ASSIGN     reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    MINUS_ASSIGN    reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    MULTI_ASSIGN    reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    DIVIDE_ASSIGN   reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    POTENCIACAO     reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    MULTI           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    DIVIDE          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    MODULO          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    PLUS            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    MINUS           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    GREATER_THAN    reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    LESS_THAN       reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    GREATER_EQUAL   reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    LESS_EQUAL      reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    EQUAL           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    NOT_EQUAL       reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    TIPO_EQUAL      reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    AND             reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    QMARK           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    OR              reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    CONSTANT        reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    MODULE          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    DEF             reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    $end            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    RPAREN          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    COMMA           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    RBRACKET        reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    DOT             reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    NEWLINE         reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    END             reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    TCOLON          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    INTERP_END      reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    WHEN            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    ELSIF           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    ELSE            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    ID              reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    CASE            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    RETURN          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    BREAK           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    NEXT            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    UNDERSCORE      reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    ASTERISK        reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    IF              reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    UNLESS          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    WHILE           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    UNTIL           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    LOOP            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    LPAREN          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    INTNUMBER       reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    FLOATNUMBER     reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    CHAR            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    TRUE            reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    FALSE           reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    STRING          reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    EXCLAMATION     reduce using rule 123 (primary_expression -> expression_between_parentesis .)
    TILDE           reduce using rule 123 (primary_expression -> expression_between_parentesis .)


state 45

    (124) primary_expression -> array_literal .

    LBRACKET        reduce using rule 124 (primary_expression -> array_literal .)
    DOTDOT          reduce using rule 124 (primary_expression -> array_literal .)
    DOTDOTDOT       reduce using rule 124 (primary_expression -> array_literal .)
    ASSIGN          reduce using rule 124 (primary_expression -> array_literal .)
    PLUS_ASSIGN     reduce using rule 124 (primary_expression -> array_literal .)
    MINUS_ASSIGN    reduce using rule 124 (primary_expression -> array_literal .)
    MULTI_ASSIGN    reduce using rule 124 (primary_expression -> array_literal .)
    DIVIDE_ASSIGN   reduce using rule 124 (primary_expression -> array_literal .)
    POTENCIACAO     reduce using rule 124 (primary_expression -> array_literal .)
    MULTI           reduce using rule 124 (primary_expression -> array_literal .)
    DIVIDE          reduce using rule 124 (primary_expression -> array_literal .)
    MODULO          reduce using rule 124 (primary_expression -> array_literal .)
    PLUS            reduce using rule 124 (primary_expression -> array_literal .)
    MINUS           reduce using rule 124 (primary_expression -> array_literal .)
    GREATER_THAN    reduce using rule 124 (primary_expression -> array_literal .)
    LESS_THAN       reduce using rule 124 (primary_expression -> array_literal .)
    GREATER_EQUAL   reduce using rule 124 (primary_expression -> array_literal .)
    LESS_EQUAL      reduce using rule 124 (primary_expression -> array_literal .)
    EQUAL           reduce using rule 124 (primary_expression -> array_literal .)
    NOT_EQUAL       reduce using rule 124 (primary_expression -> array_literal .)
    TIPO_EQUAL      reduce using rule 124 (primary_expression -> array_literal .)
    AND             reduce using rule 124 (primary_expression -> array_literal .)
    QMARK           reduce using rule 124 (primary_expression -> array_literal .)
    OR              reduce using rule 124 (primary_expression -> array_literal .)
    CONSTANT        reduce using rule 124 (primary_expression -> array_literal .)
    MODULE          reduce using rule 124 (primary_expression -> array_literal .)
    DEF             reduce using rule 124 (primary_expression -> array_literal .)
    $end            reduce using rule 124 (primary_expression -> array_literal .)
    RPAREN          reduce using rule 124 (primary_expression -> array_literal .)
    COMMA           reduce using rule 124 (primary_expression -> array_literal .)
    RBRACKET        reduce using rule 124 (primary_expression -> array_literal .)
    DOT             reduce using rule 124 (primary_expression -> array_literal .)
    NEWLINE         reduce using rule 124 (primary_expression -> array_literal .)
    END             reduce using rule 124 (primary_expression -> array_literal .)
    TCOLON          reduce using rule 124 (primary_expression -> array_literal .)
    INTERP_END      reduce using rule 124 (primary_expression -> array_literal .)
    WHEN            reduce using rule 124 (primary_expression -> array_literal .)
    ELSIF           reduce using rule 124 (primary_expression -> array_literal .)
    ELSE            reduce using rule 124 (primary_expression -> array_literal .)
    ID              reduce using rule 124 (primary_expression -> array_literal .)
    CASE            reduce using rule 124 (primary_expression -> array_literal .)
    RETURN          reduce using rule 124 (primary_expression -> array_literal .)
    BREAK           reduce using rule 124 (primary_expression -> array_literal .)
    NEXT            reduce using rule 124 (primary_expression -> array_literal .)
    UNDERSCORE      reduce using rule 124 (primary_expression -> array_literal .)
    ASTERISK        reduce using rule 124 (primary_expression -> array_literal .)
    IF              reduce using rule 124 (primary_expression -> array_literal .)
    UNLESS          reduce using rule 124 (primary_expression -> array_literal .)
    WHILE           reduce using rule 124 (primary_expression -> array_literal .)
    UNTIL           reduce using rule 124 (primary_expression -> array_literal .)
    LOOP            reduce using rule 124 (primary_expression -> array_literal .)
    LPAREN          reduce using rule 124 (primary_expression -> array_literal .)
    INTNUMBER       reduce using rule 124 (primary_expression -> array_literal .)
    FLOATNUMBER     reduce using rule 124 (primary_expression -> array_literal .)
    CHAR            reduce using rule 124 (primary_expression -> array_literal .)
    TRUE            reduce using rule 124 (primary_expression -> array_literal .)
    FALSE           reduce using rule 124 (primary_expression -> array_literal .)
    STRING          reduce using rule 124 (primary_expression -> array_literal .)
    EXCLAMATION     reduce using rule 124 (primary_expression -> array_literal .)
    TILDE           reduce using rule 124 (primary_expression -> array_literal .)


state 46

    (125) primary_expression -> literal .

    LBRACKET        reduce using rule 125 (primary_expression -> literal .)
    DOTDOT          reduce using rule 125 (primary_expression -> literal .)
    DOTDOTDOT       reduce using rule 125 (primary_expression -> literal .)
    ASSIGN          reduce using rule 125 (primary_expression -> literal .)
    PLUS_ASSIGN     reduce using rule 125 (primary_expression -> literal .)
    MINUS_ASSIGN    reduce using rule 125 (primary_expression -> literal .)
    MULTI_ASSIGN    reduce using rule 125 (primary_expression -> literal .)
    DIVIDE_ASSIGN   reduce using rule 125 (primary_expression -> literal .)
    POTENCIACAO     reduce using rule 125 (primary_expression -> literal .)
    MULTI           reduce using rule 125 (primary_expression -> literal .)
    DIVIDE          reduce using rule 125 (primary_expression -> literal .)
    MODULO          reduce using rule 125 (primary_expression -> literal .)
    PLUS            reduce using rule 125 (primary_expression -> literal .)
    MINUS           reduce using rule 125 (primary_expression -> literal .)
    GREATER_THAN    reduce using rule 125 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 125 (primary_expression -> literal .)
    GREATER_EQUAL   reduce using rule 125 (primary_expression -> literal .)
    LESS_EQUAL      reduce using rule 125 (primary_expression -> literal .)
    EQUAL           reduce using rule 125 (primary_expression -> literal .)
    NOT_EQUAL       reduce using rule 125 (primary_expression -> literal .)
    TIPO_EQUAL      reduce using rule 125 (primary_expression -> literal .)
    AND             reduce using rule 125 (primary_expression -> literal .)
    QMARK           reduce using rule 125 (primary_expression -> literal .)
    OR              reduce using rule 125 (primary_expression -> literal .)
    CONSTANT        reduce using rule 125 (primary_expression -> literal .)
    MODULE          reduce using rule 125 (primary_expression -> literal .)
    DEF             reduce using rule 125 (primary_expression -> literal .)
    $end            reduce using rule 125 (primary_expression -> literal .)
    RPAREN          reduce using rule 125 (primary_expression -> literal .)
    COMMA           reduce using rule 125 (primary_expression -> literal .)
    RBRACKET        reduce using rule 125 (primary_expression -> literal .)
    DOT             reduce using rule 125 (primary_expression -> literal .)
    NEWLINE         reduce using rule 125 (primary_expression -> literal .)
    END             reduce using rule 125 (primary_expression -> literal .)
    TCOLON          reduce using rule 125 (primary_expression -> literal .)
    INTERP_END      reduce using rule 125 (primary_expression -> literal .)
    WHEN            reduce using rule 125 (primary_expression -> literal .)
    ELSIF           reduce using rule 125 (primary_expression -> literal .)
    ELSE            reduce using rule 125 (primary_expression -> literal .)
    ID              reduce using rule 125 (primary_expression -> literal .)
    CASE            reduce using rule 125 (primary_expression -> literal .)
    RETURN          reduce using rule 125 (primary_expression -> literal .)
    BREAK           reduce using rule 125 (primary_expression -> literal .)
    NEXT            reduce using rule 125 (primary_expression -> literal .)
    UNDERSCORE      reduce using rule 125 (primary_expression -> literal .)
    ASTERISK        reduce using rule 125 (primary_expression -> literal .)
    IF              reduce using rule 125 (primary_expression -> literal .)
    UNLESS          reduce using rule 125 (primary_expression -> literal .)
    WHILE           reduce using rule 125 (primary_expression -> literal .)
    UNTIL           reduce using rule 125 (primary_expression -> literal .)
    LOOP            reduce using rule 125 (primary_expression -> literal .)
    LPAREN          reduce using rule 125 (primary_expression -> literal .)
    INTNUMBER       reduce using rule 125 (primary_expression -> literal .)
    FLOATNUMBER     reduce using rule 125 (primary_expression -> literal .)
    CHAR            reduce using rule 125 (primary_expression -> literal .)
    TRUE            reduce using rule 125 (primary_expression -> literal .)
    FALSE           reduce using rule 125 (primary_expression -> literal .)
    STRING          reduce using rule 125 (primary_expression -> literal .)
    EXCLAMATION     reduce using rule 125 (primary_expression -> literal .)
    TILDE           reduce using rule 125 (primary_expression -> literal .)


state 47

    (126) primary_expression -> ID .

    LBRACKET        reduce using rule 126 (primary_expression -> ID .)
    DOTDOT          reduce using rule 126 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 126 (primary_expression -> ID .)
    ASSIGN          reduce using rule 126 (primary_expression -> ID .)
    PLUS_ASSIGN     reduce using rule 126 (primary_expression -> ID .)
    MINUS_ASSIGN    reduce using rule 126 (primary_expression -> ID .)
    MULTI_ASSIGN    reduce using rule 126 (primary_expression -> ID .)
    DIVIDE_ASSIGN   reduce using rule 126 (primary_expression -> ID .)
    POTENCIACAO     reduce using rule 126 (primary_expression -> ID .)
    MULTI           reduce using rule 126 (primary_expression -> ID .)
    DIVIDE          reduce using rule 126 (primary_expression -> ID .)
    MODULO          reduce using rule 126 (primary_expression -> ID .)
    PLUS            reduce using rule 126 (primary_expression -> ID .)
    MINUS           reduce using rule 126 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 126 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 126 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 126 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 126 (primary_expression -> ID .)
    EQUAL           reduce using rule 126 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 126 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 126 (primary_expression -> ID .)
    AND             reduce using rule 126 (primary_expression -> ID .)
    QMARK           reduce using rule 126 (primary_expression -> ID .)
    OR              reduce using rule 126 (primary_expression -> ID .)
    CONSTANT        reduce using rule 126 (primary_expression -> ID .)
    MODULE          reduce using rule 126 (primary_expression -> ID .)
    DEF             reduce using rule 126 (primary_expression -> ID .)
    $end            reduce using rule 126 (primary_expression -> ID .)
    RPAREN          reduce using rule 126 (primary_expression -> ID .)
    COMMA           reduce using rule 126 (primary_expression -> ID .)
    RBRACKET        reduce using rule 126 (primary_expression -> ID .)
    DOT             reduce using rule 126 (primary_expression -> ID .)
    NEWLINE         reduce using rule 126 (primary_expression -> ID .)
    END             reduce using rule 126 (primary_expression -> ID .)
    TCOLON          reduce using rule 126 (primary_expression -> ID .)
    INTERP_END      reduce using rule 126 (primary_expression -> ID .)
    WHEN            reduce using rule 126 (primary_expression -> ID .)
    ELSIF           reduce using rule 126 (primary_expression -> ID .)
    ELSE            reduce using rule 126 (primary_expression -> ID .)
    ID              reduce using rule 126 (primary_expression -> ID .)
    CASE            reduce using rule 126 (primary_expression -> ID .)
    RETURN          reduce using rule 126 (primary_expression -> ID .)
    BREAK           reduce using rule 126 (primary_expression -> ID .)
    NEXT            reduce using rule 126 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 126 (primary_expression -> ID .)
    ASTERISK        reduce using rule 126 (primary_expression -> ID .)
    IF              reduce using rule 126 (primary_expression -> ID .)
    UNLESS          reduce using rule 126 (primary_expression -> ID .)
    WHILE           reduce using rule 126 (primary_expression -> ID .)
    UNTIL           reduce using rule 126 (primary_expression -> ID .)
    LOOP            reduce using rule 126 (primary_expression -> ID .)
    LPAREN          reduce using rule 126 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 126 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 126 (primary_expression -> ID .)
    CHAR            reduce using rule 126 (primary_expression -> ID .)
    TRUE            reduce using rule 126 (primary_expression -> ID .)
    FALSE           reduce using rule 126 (primary_expression -> ID .)
    STRING          reduce using rule 126 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 126 (primary_expression -> ID .)
    TILDE           reduce using rule 126 (primary_expression -> ID .)


state 48

    (98) relational_expression -> additive_expression .
    (104) additive_expression -> additive_expression . PLUS multiplicative_expression
    (105) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GREATER_THAN    reduce using rule 98 (relational_expression -> additive_expression .)
    LESS_THAN       reduce using rule 98 (relational_expression -> additive_expression .)
    GREATER_EQUAL   reduce using rule 98 (relational_expression -> additive_expression .)
    LESS_EQUAL      reduce using rule 98 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 98 (relational_expression -> additive_expression .)
    NOT_EQUAL       reduce using rule 98 (relational_expression -> additive_expression .)
    TIPO_EQUAL      reduce using rule 98 (relational_expression -> additive_expression .)
    AND             reduce using rule 98 (relational_expression -> additive_expression .)
    QMARK           reduce using rule 98 (relational_expression -> additive_expression .)
    OR              reduce using rule 98 (relational_expression -> additive_expression .)
    CONSTANT        reduce using rule 98 (relational_expression -> additive_expression .)
    MODULE          reduce using rule 98 (relational_expression -> additive_expression .)
    DEF             reduce using rule 98 (relational_expression -> additive_expression .)
    $end            reduce using rule 98 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 98 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 98 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 98 (relational_expression -> additive_expression .)
    DOT             reduce using rule 98 (relational_expression -> additive_expression .)
    NEWLINE         reduce using rule 98 (relational_expression -> additive_expression .)
    END             reduce using rule 98 (relational_expression -> additive_expression .)
    TCOLON          reduce using rule 98 (relational_expression -> additive_expression .)
    INTERP_END      reduce using rule 98 (relational_expression -> additive_expression .)
    WHEN            reduce using rule 98 (relational_expression -> additive_expression .)
    ELSIF           reduce using rule 98 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 98 (relational_expression -> additive_expression .)
    ID              reduce using rule 98 (relational_expression -> additive_expression .)
    CASE            reduce using rule 98 (relational_expression -> additive_expression .)
    RETURN          reduce using rule 98 (relational_expression -> additive_expression .)
    BREAK           reduce using rule 98 (relational_expression -> additive_expression .)
    NEXT            reduce using rule 98 (relational_expression -> additive_expression .)
    UNDERSCORE      reduce using rule 98 (relational_expression -> additive_expression .)
    ASTERISK        reduce using rule 98 (relational_expression -> additive_expression .)
    IF              reduce using rule 98 (relational_expression -> additive_expression .)
    UNLESS          reduce using rule 98 (relational_expression -> additive_expression .)
    WHILE           reduce using rule 98 (relational_expression -> additive_expression .)
    UNTIL           reduce using rule 98 (relational_expression -> additive_expression .)
    LOOP            reduce using rule 98 (relational_expression -> additive_expression .)
    LPAREN          reduce using rule 98 (relational_expression -> additive_expression .)
    LBRACKET        reduce using rule 98 (relational_expression -> additive_expression .)
    INTNUMBER       reduce using rule 98 (relational_expression -> additive_expression .)
    FLOATNUMBER     reduce using rule 98 (relational_expression -> additive_expression .)
    CHAR            reduce using rule 98 (relational_expression -> additive_expression .)
    TRUE            reduce using rule 98 (relational_expression -> additive_expression .)
    FALSE           reduce using rule 98 (relational_expression -> additive_expression .)
    STRING          reduce using rule 98 (relational_expression -> additive_expression .)
    EXCLAMATION     reduce using rule 98 (relational_expression -> additive_expression .)
    TILDE           reduce using rule 98 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94

  ! PLUS            [ reduce using rule 98 (relational_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 98 (relational_expression -> additive_expression .) ]


state 49

    (127) expression_between_parentesis -> LPAREN . expression RPAREN
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 95
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 50

    (128) array_literal -> LBRACKET . opt_expression_list RBRACKET
    (67) opt_expression_list -> . expression_list
    (68) opt_expression_list -> . empty
    (69) expression_list -> . expression
    (70) expression_list -> . expression_list COMMA expression
    (169) empty -> .
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    RBRACKET        reduce using rule 169 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    opt_expression_list            shift and go to state 96
    expression_list                shift and go to state 97
    empty                          shift and go to state 98
    expression                     shift and go to state 99
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 51

    (60) literal -> INTNUMBER .

    LBRACKET        reduce using rule 60 (literal -> INTNUMBER .)
    DOTDOT          reduce using rule 60 (literal -> INTNUMBER .)
    DOTDOTDOT       reduce using rule 60 (literal -> INTNUMBER .)
    ASSIGN          reduce using rule 60 (literal -> INTNUMBER .)
    PLUS_ASSIGN     reduce using rule 60 (literal -> INTNUMBER .)
    MINUS_ASSIGN    reduce using rule 60 (literal -> INTNUMBER .)
    MULTI_ASSIGN    reduce using rule 60 (literal -> INTNUMBER .)
    DIVIDE_ASSIGN   reduce using rule 60 (literal -> INTNUMBER .)
    POTENCIACAO     reduce using rule 60 (literal -> INTNUMBER .)
    MULTI           reduce using rule 60 (literal -> INTNUMBER .)
    DIVIDE          reduce using rule 60 (literal -> INTNUMBER .)
    MODULO          reduce using rule 60 (literal -> INTNUMBER .)
    PLUS            reduce using rule 60 (literal -> INTNUMBER .)
    MINUS           reduce using rule 60 (literal -> INTNUMBER .)
    GREATER_THAN    reduce using rule 60 (literal -> INTNUMBER .)
    LESS_THAN       reduce using rule 60 (literal -> INTNUMBER .)
    GREATER_EQUAL   reduce using rule 60 (literal -> INTNUMBER .)
    LESS_EQUAL      reduce using rule 60 (literal -> INTNUMBER .)
    EQUAL           reduce using rule 60 (literal -> INTNUMBER .)
    NOT_EQUAL       reduce using rule 60 (literal -> INTNUMBER .)
    TIPO_EQUAL      reduce using rule 60 (literal -> INTNUMBER .)
    AND             reduce using rule 60 (literal -> INTNUMBER .)
    QMARK           reduce using rule 60 (literal -> INTNUMBER .)
    OR              reduce using rule 60 (literal -> INTNUMBER .)
    CONSTANT        reduce using rule 60 (literal -> INTNUMBER .)
    MODULE          reduce using rule 60 (literal -> INTNUMBER .)
    DEF             reduce using rule 60 (literal -> INTNUMBER .)
    $end            reduce using rule 60 (literal -> INTNUMBER .)
    RPAREN          reduce using rule 60 (literal -> INTNUMBER .)
    COMMA           reduce using rule 60 (literal -> INTNUMBER .)
    RBRACKET        reduce using rule 60 (literal -> INTNUMBER .)
    DOT             reduce using rule 60 (literal -> INTNUMBER .)
    NEWLINE         reduce using rule 60 (literal -> INTNUMBER .)
    END             reduce using rule 60 (literal -> INTNUMBER .)
    TCOLON          reduce using rule 60 (literal -> INTNUMBER .)
    INTERP_END      reduce using rule 60 (literal -> INTNUMBER .)
    WHEN            reduce using rule 60 (literal -> INTNUMBER .)
    ELSIF           reduce using rule 60 (literal -> INTNUMBER .)
    ELSE            reduce using rule 60 (literal -> INTNUMBER .)
    ID              reduce using rule 60 (literal -> INTNUMBER .)
    CASE            reduce using rule 60 (literal -> INTNUMBER .)
    RETURN          reduce using rule 60 (literal -> INTNUMBER .)
    BREAK           reduce using rule 60 (literal -> INTNUMBER .)
    NEXT            reduce using rule 60 (literal -> INTNUMBER .)
    UNDERSCORE      reduce using rule 60 (literal -> INTNUMBER .)
    ASTERISK        reduce using rule 60 (literal -> INTNUMBER .)
    IF              reduce using rule 60 (literal -> INTNUMBER .)
    UNLESS          reduce using rule 60 (literal -> INTNUMBER .)
    WHILE           reduce using rule 60 (literal -> INTNUMBER .)
    UNTIL           reduce using rule 60 (literal -> INTNUMBER .)
    LOOP            reduce using rule 60 (literal -> INTNUMBER .)
    LPAREN          reduce using rule 60 (literal -> INTNUMBER .)
    INTNUMBER       reduce using rule 60 (literal -> INTNUMBER .)
    FLOATNUMBER     reduce using rule 60 (literal -> INTNUMBER .)
    CHAR            reduce using rule 60 (literal -> INTNUMBER .)
    TRUE            reduce using rule 60 (literal -> INTNUMBER .)
    FALSE           reduce using rule 60 (literal -> INTNUMBER .)
    STRING          reduce using rule 60 (literal -> INTNUMBER .)
    EXCLAMATION     reduce using rule 60 (literal -> INTNUMBER .)
    TILDE           reduce using rule 60 (literal -> INTNUMBER .)


state 52

    (61) literal -> FLOATNUMBER .

    LBRACKET        reduce using rule 61 (literal -> FLOATNUMBER .)
    DOTDOT          reduce using rule 61 (literal -> FLOATNUMBER .)
    DOTDOTDOT       reduce using rule 61 (literal -> FLOATNUMBER .)
    ASSIGN          reduce using rule 61 (literal -> FLOATNUMBER .)
    PLUS_ASSIGN     reduce using rule 61 (literal -> FLOATNUMBER .)
    MINUS_ASSIGN    reduce using rule 61 (literal -> FLOATNUMBER .)
    MULTI_ASSIGN    reduce using rule 61 (literal -> FLOATNUMBER .)
    DIVIDE_ASSIGN   reduce using rule 61 (literal -> FLOATNUMBER .)
    POTENCIACAO     reduce using rule 61 (literal -> FLOATNUMBER .)
    MULTI           reduce using rule 61 (literal -> FLOATNUMBER .)
    DIVIDE          reduce using rule 61 (literal -> FLOATNUMBER .)
    MODULO          reduce using rule 61 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 61 (literal -> FLOATNUMBER .)
    MINUS           reduce using rule 61 (literal -> FLOATNUMBER .)
    GREATER_THAN    reduce using rule 61 (literal -> FLOATNUMBER .)
    LESS_THAN       reduce using rule 61 (literal -> FLOATNUMBER .)
    GREATER_EQUAL   reduce using rule 61 (literal -> FLOATNUMBER .)
    LESS_EQUAL      reduce using rule 61 (literal -> FLOATNUMBER .)
    EQUAL           reduce using rule 61 (literal -> FLOATNUMBER .)
    NOT_EQUAL       reduce using rule 61 (literal -> FLOATNUMBER .)
    TIPO_EQUAL      reduce using rule 61 (literal -> FLOATNUMBER .)
    AND             reduce using rule 61 (literal -> FLOATNUMBER .)
    QMARK           reduce using rule 61 (literal -> FLOATNUMBER .)
    OR              reduce using rule 61 (literal -> FLOATNUMBER .)
    CONSTANT        reduce using rule 61 (literal -> FLOATNUMBER .)
    MODULE          reduce using rule 61 (literal -> FLOATNUMBER .)
    DEF             reduce using rule 61 (literal -> FLOATNUMBER .)
    $end            reduce using rule 61 (literal -> FLOATNUMBER .)
    RPAREN          reduce using rule 61 (literal -> FLOATNUMBER .)
    COMMA           reduce using rule 61 (literal -> FLOATNUMBER .)
    RBRACKET        reduce using rule 61 (literal -> FLOATNUMBER .)
    DOT             reduce using rule 61 (literal -> FLOATNUMBER .)
    NEWLINE         reduce using rule 61 (literal -> FLOATNUMBER .)
    END             reduce using rule 61 (literal -> FLOATNUMBER .)
    TCOLON          reduce using rule 61 (literal -> FLOATNUMBER .)
    INTERP_END      reduce using rule 61 (literal -> FLOATNUMBER .)
    WHEN            reduce using rule 61 (literal -> FLOATNUMBER .)
    ELSIF           reduce using rule 61 (literal -> FLOATNUMBER .)
    ELSE            reduce using rule 61 (literal -> FLOATNUMBER .)
    ID              reduce using rule 61 (literal -> FLOATNUMBER .)
    CASE            reduce using rule 61 (literal -> FLOATNUMBER .)
    RETURN          reduce using rule 61 (literal -> FLOATNUMBER .)
    BREAK           reduce using rule 61 (literal -> FLOATNUMBER .)
    NEXT            reduce using rule 61 (literal -> FLOATNUMBER .)
    UNDERSCORE      reduce using rule 61 (literal -> FLOATNUMBER .)
    ASTERISK        reduce using rule 61 (literal -> FLOATNUMBER .)
    IF              reduce using rule 61 (literal -> FLOATNUMBER .)
    UNLESS          reduce using rule 61 (literal -> FLOATNUMBER .)
    WHILE           reduce using rule 61 (literal -> FLOATNUMBER .)
    UNTIL           reduce using rule 61 (literal -> FLOATNUMBER .)
    LOOP            reduce using rule 61 (literal -> FLOATNUMBER .)
    LPAREN          reduce using rule 61 (literal -> FLOATNUMBER .)
    INTNUMBER       reduce using rule 61 (literal -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 61 (literal -> FLOATNUMBER .)
    CHAR            reduce using rule 61 (literal -> FLOATNUMBER .)
    TRUE            reduce using rule 61 (literal -> FLOATNUMBER .)
    FALSE           reduce using rule 61 (literal -> FLOATNUMBER .)
    STRING          reduce using rule 61 (literal -> FLOATNUMBER .)
    EXCLAMATION     reduce using rule 61 (literal -> FLOATNUMBER .)
    TILDE           reduce using rule 61 (literal -> FLOATNUMBER .)


state 53

    (62) literal -> string_literal .

    LBRACKET        reduce using rule 62 (literal -> string_literal .)
    DOTDOT          reduce using rule 62 (literal -> string_literal .)
    DOTDOTDOT       reduce using rule 62 (literal -> string_literal .)
    ASSIGN          reduce using rule 62 (literal -> string_literal .)
    PLUS_ASSIGN     reduce using rule 62 (literal -> string_literal .)
    MINUS_ASSIGN    reduce using rule 62 (literal -> string_literal .)
    MULTI_ASSIGN    reduce using rule 62 (literal -> string_literal .)
    DIVIDE_ASSIGN   reduce using rule 62 (literal -> string_literal .)
    POTENCIACAO     reduce using rule 62 (literal -> string_literal .)
    MULTI           reduce using rule 62 (literal -> string_literal .)
    DIVIDE          reduce using rule 62 (literal -> string_literal .)
    MODULO          reduce using rule 62 (literal -> string_literal .)
    PLUS            reduce using rule 62 (literal -> string_literal .)
    MINUS           reduce using rule 62 (literal -> string_literal .)
    GREATER_THAN    reduce using rule 62 (literal -> string_literal .)
    LESS_THAN       reduce using rule 62 (literal -> string_literal .)
    GREATER_EQUAL   reduce using rule 62 (literal -> string_literal .)
    LESS_EQUAL      reduce using rule 62 (literal -> string_literal .)
    EQUAL           reduce using rule 62 (literal -> string_literal .)
    NOT_EQUAL       reduce using rule 62 (literal -> string_literal .)
    TIPO_EQUAL      reduce using rule 62 (literal -> string_literal .)
    AND             reduce using rule 62 (literal -> string_literal .)
    QMARK           reduce using rule 62 (literal -> string_literal .)
    OR              reduce using rule 62 (literal -> string_literal .)
    CONSTANT        reduce using rule 62 (literal -> string_literal .)
    MODULE          reduce using rule 62 (literal -> string_literal .)
    DEF             reduce using rule 62 (literal -> string_literal .)
    $end            reduce using rule 62 (literal -> string_literal .)
    RPAREN          reduce using rule 62 (literal -> string_literal .)
    COMMA           reduce using rule 62 (literal -> string_literal .)
    RBRACKET        reduce using rule 62 (literal -> string_literal .)
    DOT             reduce using rule 62 (literal -> string_literal .)
    NEWLINE         reduce using rule 62 (literal -> string_literal .)
    END             reduce using rule 62 (literal -> string_literal .)
    TCOLON          reduce using rule 62 (literal -> string_literal .)
    INTERP_END      reduce using rule 62 (literal -> string_literal .)
    WHEN            reduce using rule 62 (literal -> string_literal .)
    ELSIF           reduce using rule 62 (literal -> string_literal .)
    ELSE            reduce using rule 62 (literal -> string_literal .)
    ID              reduce using rule 62 (literal -> string_literal .)
    CASE            reduce using rule 62 (literal -> string_literal .)
    RETURN          reduce using rule 62 (literal -> string_literal .)
    BREAK           reduce using rule 62 (literal -> string_literal .)
    NEXT            reduce using rule 62 (literal -> string_literal .)
    UNDERSCORE      reduce using rule 62 (literal -> string_literal .)
    ASTERISK        reduce using rule 62 (literal -> string_literal .)
    IF              reduce using rule 62 (literal -> string_literal .)
    UNLESS          reduce using rule 62 (literal -> string_literal .)
    WHILE           reduce using rule 62 (literal -> string_literal .)
    UNTIL           reduce using rule 62 (literal -> string_literal .)
    LOOP            reduce using rule 62 (literal -> string_literal .)
    LPAREN          reduce using rule 62 (literal -> string_literal .)
    INTNUMBER       reduce using rule 62 (literal -> string_literal .)
    FLOATNUMBER     reduce using rule 62 (literal -> string_literal .)
    CHAR            reduce using rule 62 (literal -> string_literal .)
    TRUE            reduce using rule 62 (literal -> string_literal .)
    FALSE           reduce using rule 62 (literal -> string_literal .)
    STRING          reduce using rule 62 (literal -> string_literal .)
    EXCLAMATION     reduce using rule 62 (literal -> string_literal .)
    TILDE           reduce using rule 62 (literal -> string_literal .)


state 54

    (63) literal -> CHAR .

    LBRACKET        reduce using rule 63 (literal -> CHAR .)
    DOTDOT          reduce using rule 63 (literal -> CHAR .)
    DOTDOTDOT       reduce using rule 63 (literal -> CHAR .)
    ASSIGN          reduce using rule 63 (literal -> CHAR .)
    PLUS_ASSIGN     reduce using rule 63 (literal -> CHAR .)
    MINUS_ASSIGN    reduce using rule 63 (literal -> CHAR .)
    MULTI_ASSIGN    reduce using rule 63 (literal -> CHAR .)
    DIVIDE_ASSIGN   reduce using rule 63 (literal -> CHAR .)
    POTENCIACAO     reduce using rule 63 (literal -> CHAR .)
    MULTI           reduce using rule 63 (literal -> CHAR .)
    DIVIDE          reduce using rule 63 (literal -> CHAR .)
    MODULO          reduce using rule 63 (literal -> CHAR .)
    PLUS            reduce using rule 63 (literal -> CHAR .)
    MINUS           reduce using rule 63 (literal -> CHAR .)
    GREATER_THAN    reduce using rule 63 (literal -> CHAR .)
    LESS_THAN       reduce using rule 63 (literal -> CHAR .)
    GREATER_EQUAL   reduce using rule 63 (literal -> CHAR .)
    LESS_EQUAL      reduce using rule 63 (literal -> CHAR .)
    EQUAL           reduce using rule 63 (literal -> CHAR .)
    NOT_EQUAL       reduce using rule 63 (literal -> CHAR .)
    TIPO_EQUAL      reduce using rule 63 (literal -> CHAR .)
    AND             reduce using rule 63 (literal -> CHAR .)
    QMARK           reduce using rule 63 (literal -> CHAR .)
    OR              reduce using rule 63 (literal -> CHAR .)
    CONSTANT        reduce using rule 63 (literal -> CHAR .)
    MODULE          reduce using rule 63 (literal -> CHAR .)
    DEF             reduce using rule 63 (literal -> CHAR .)
    $end            reduce using rule 63 (literal -> CHAR .)
    RPAREN          reduce using rule 63 (literal -> CHAR .)
    COMMA           reduce using rule 63 (literal -> CHAR .)
    RBRACKET        reduce using rule 63 (literal -> CHAR .)
    DOT             reduce using rule 63 (literal -> CHAR .)
    NEWLINE         reduce using rule 63 (literal -> CHAR .)
    END             reduce using rule 63 (literal -> CHAR .)
    TCOLON          reduce using rule 63 (literal -> CHAR .)
    INTERP_END      reduce using rule 63 (literal -> CHAR .)
    WHEN            reduce using rule 63 (literal -> CHAR .)
    ELSIF           reduce using rule 63 (literal -> CHAR .)
    ELSE            reduce using rule 63 (literal -> CHAR .)
    ID              reduce using rule 63 (literal -> CHAR .)
    CASE            reduce using rule 63 (literal -> CHAR .)
    RETURN          reduce using rule 63 (literal -> CHAR .)
    BREAK           reduce using rule 63 (literal -> CHAR .)
    NEXT            reduce using rule 63 (literal -> CHAR .)
    UNDERSCORE      reduce using rule 63 (literal -> CHAR .)
    ASTERISK        reduce using rule 63 (literal -> CHAR .)
    IF              reduce using rule 63 (literal -> CHAR .)
    UNLESS          reduce using rule 63 (literal -> CHAR .)
    WHILE           reduce using rule 63 (literal -> CHAR .)
    UNTIL           reduce using rule 63 (literal -> CHAR .)
    LOOP            reduce using rule 63 (literal -> CHAR .)
    LPAREN          reduce using rule 63 (literal -> CHAR .)
    INTNUMBER       reduce using rule 63 (literal -> CHAR .)
    FLOATNUMBER     reduce using rule 63 (literal -> CHAR .)
    CHAR            reduce using rule 63 (literal -> CHAR .)
    TRUE            reduce using rule 63 (literal -> CHAR .)
    FALSE           reduce using rule 63 (literal -> CHAR .)
    STRING          reduce using rule 63 (literal -> CHAR .)
    EXCLAMATION     reduce using rule 63 (literal -> CHAR .)
    TILDE           reduce using rule 63 (literal -> CHAR .)


state 55

    (64) literal -> TRUE .

    LBRACKET        reduce using rule 64 (literal -> TRUE .)
    DOTDOT          reduce using rule 64 (literal -> TRUE .)
    DOTDOTDOT       reduce using rule 64 (literal -> TRUE .)
    ASSIGN          reduce using rule 64 (literal -> TRUE .)
    PLUS_ASSIGN     reduce using rule 64 (literal -> TRUE .)
    MINUS_ASSIGN    reduce using rule 64 (literal -> TRUE .)
    MULTI_ASSIGN    reduce using rule 64 (literal -> TRUE .)
    DIVIDE_ASSIGN   reduce using rule 64 (literal -> TRUE .)
    POTENCIACAO     reduce using rule 64 (literal -> TRUE .)
    MULTI           reduce using rule 64 (literal -> TRUE .)
    DIVIDE          reduce using rule 64 (literal -> TRUE .)
    MODULO          reduce using rule 64 (literal -> TRUE .)
    PLUS            reduce using rule 64 (literal -> TRUE .)
    MINUS           reduce using rule 64 (literal -> TRUE .)
    GREATER_THAN    reduce using rule 64 (literal -> TRUE .)
    LESS_THAN       reduce using rule 64 (literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 64 (literal -> TRUE .)
    LESS_EQUAL      reduce using rule 64 (literal -> TRUE .)
    EQUAL           reduce using rule 64 (literal -> TRUE .)
    NOT_EQUAL       reduce using rule 64 (literal -> TRUE .)
    TIPO_EQUAL      reduce using rule 64 (literal -> TRUE .)
    AND             reduce using rule 64 (literal -> TRUE .)
    QMARK           reduce using rule 64 (literal -> TRUE .)
    OR              reduce using rule 64 (literal -> TRUE .)
    CONSTANT        reduce using rule 64 (literal -> TRUE .)
    MODULE          reduce using rule 64 (literal -> TRUE .)
    DEF             reduce using rule 64 (literal -> TRUE .)
    $end            reduce using rule 64 (literal -> TRUE .)
    RPAREN          reduce using rule 64 (literal -> TRUE .)
    COMMA           reduce using rule 64 (literal -> TRUE .)
    RBRACKET        reduce using rule 64 (literal -> TRUE .)
    DOT             reduce using rule 64 (literal -> TRUE .)
    NEWLINE         reduce using rule 64 (literal -> TRUE .)
    END             reduce using rule 64 (literal -> TRUE .)
    TCOLON          reduce using rule 64 (literal -> TRUE .)
    INTERP_END      reduce using rule 64 (literal -> TRUE .)
    WHEN            reduce using rule 64 (literal -> TRUE .)
    ELSIF           reduce using rule 64 (literal -> TRUE .)
    ELSE            reduce using rule 64 (literal -> TRUE .)
    ID              reduce using rule 64 (literal -> TRUE .)
    CASE            reduce using rule 64 (literal -> TRUE .)
    RETURN          reduce using rule 64 (literal -> TRUE .)
    BREAK           reduce using rule 64 (literal -> TRUE .)
    NEXT            reduce using rule 64 (literal -> TRUE .)
    UNDERSCORE      reduce using rule 64 (literal -> TRUE .)
    ASTERISK        reduce using rule 64 (literal -> TRUE .)
    IF              reduce using rule 64 (literal -> TRUE .)
    UNLESS          reduce using rule 64 (literal -> TRUE .)
    WHILE           reduce using rule 64 (literal -> TRUE .)
    UNTIL           reduce using rule 64 (literal -> TRUE .)
    LOOP            reduce using rule 64 (literal -> TRUE .)
    LPAREN          reduce using rule 64 (literal -> TRUE .)
    INTNUMBER       reduce using rule 64 (literal -> TRUE .)
    FLOATNUMBER     reduce using rule 64 (literal -> TRUE .)
    CHAR            reduce using rule 64 (literal -> TRUE .)
    TRUE            reduce using rule 64 (literal -> TRUE .)
    FALSE           reduce using rule 64 (literal -> TRUE .)
    STRING          reduce using rule 64 (literal -> TRUE .)
    EXCLAMATION     reduce using rule 64 (literal -> TRUE .)
    TILDE           reduce using rule 64 (literal -> TRUE .)


state 56

    (65) literal -> FALSE .

    LBRACKET        reduce using rule 65 (literal -> FALSE .)
    DOTDOT          reduce using rule 65 (literal -> FALSE .)
    DOTDOTDOT       reduce using rule 65 (literal -> FALSE .)
    ASSIGN          reduce using rule 65 (literal -> FALSE .)
    PLUS_ASSIGN     reduce using rule 65 (literal -> FALSE .)
    MINUS_ASSIGN    reduce using rule 65 (literal -> FALSE .)
    MULTI_ASSIGN    reduce using rule 65 (literal -> FALSE .)
    DIVIDE_ASSIGN   reduce using rule 65 (literal -> FALSE .)
    POTENCIACAO     reduce using rule 65 (literal -> FALSE .)
    MULTI           reduce using rule 65 (literal -> FALSE .)
    DIVIDE          reduce using rule 65 (literal -> FALSE .)
    MODULO          reduce using rule 65 (literal -> FALSE .)
    PLUS            reduce using rule 65 (literal -> FALSE .)
    MINUS           reduce using rule 65 (literal -> FALSE .)
    GREATER_THAN    reduce using rule 65 (literal -> FALSE .)
    LESS_THAN       reduce using rule 65 (literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 65 (literal -> FALSE .)
    LESS_EQUAL      reduce using rule 65 (literal -> FALSE .)
    EQUAL           reduce using rule 65 (literal -> FALSE .)
    NOT_EQUAL       reduce using rule 65 (literal -> FALSE .)
    TIPO_EQUAL      reduce using rule 65 (literal -> FALSE .)
    AND             reduce using rule 65 (literal -> FALSE .)
    QMARK           reduce using rule 65 (literal -> FALSE .)
    OR              reduce using rule 65 (literal -> FALSE .)
    CONSTANT        reduce using rule 65 (literal -> FALSE .)
    MODULE          reduce using rule 65 (literal -> FALSE .)
    DEF             reduce using rule 65 (literal -> FALSE .)
    $end            reduce using rule 65 (literal -> FALSE .)
    RPAREN          reduce using rule 65 (literal -> FALSE .)
    COMMA           reduce using rule 65 (literal -> FALSE .)
    RBRACKET        reduce using rule 65 (literal -> FALSE .)
    DOT             reduce using rule 65 (literal -> FALSE .)
    NEWLINE         reduce using rule 65 (literal -> FALSE .)
    END             reduce using rule 65 (literal -> FALSE .)
    TCOLON          reduce using rule 65 (literal -> FALSE .)
    INTERP_END      reduce using rule 65 (literal -> FALSE .)
    WHEN            reduce using rule 65 (literal -> FALSE .)
    ELSIF           reduce using rule 65 (literal -> FALSE .)
    ELSE            reduce using rule 65 (literal -> FALSE .)
    ID              reduce using rule 65 (literal -> FALSE .)
    CASE            reduce using rule 65 (literal -> FALSE .)
    RETURN          reduce using rule 65 (literal -> FALSE .)
    BREAK           reduce using rule 65 (literal -> FALSE .)
    NEXT            reduce using rule 65 (literal -> FALSE .)
    UNDERSCORE      reduce using rule 65 (literal -> FALSE .)
    ASTERISK        reduce using rule 65 (literal -> FALSE .)
    IF              reduce using rule 65 (literal -> FALSE .)
    UNLESS          reduce using rule 65 (literal -> FALSE .)
    WHILE           reduce using rule 65 (literal -> FALSE .)
    UNTIL           reduce using rule 65 (literal -> FALSE .)
    LOOP            reduce using rule 65 (literal -> FALSE .)
    LPAREN          reduce using rule 65 (literal -> FALSE .)
    INTNUMBER       reduce using rule 65 (literal -> FALSE .)
    FLOATNUMBER     reduce using rule 65 (literal -> FALSE .)
    CHAR            reduce using rule 65 (literal -> FALSE .)
    TRUE            reduce using rule 65 (literal -> FALSE .)
    FALSE           reduce using rule 65 (literal -> FALSE .)
    STRING          reduce using rule 65 (literal -> FALSE .)
    EXCLAMATION     reduce using rule 65 (literal -> FALSE .)
    TILDE           reduce using rule 65 (literal -> FALSE .)


state 57

    (103) additive_expression -> multiplicative_expression .
    (107) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (108) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (109) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 103 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 103 (additive_expression -> multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 103 (additive_expression -> multiplicative_expression .)
    LESS_EQUAL      reduce using rule 103 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    NOT_EQUAL       reduce using rule 103 (additive_expression -> multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 103 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 103 (additive_expression -> multiplicative_expression .)
    QMARK           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 103 (additive_expression -> multiplicative_expression .)
    CONSTANT        reduce using rule 103 (additive_expression -> multiplicative_expression .)
    MODULE          reduce using rule 103 (additive_expression -> multiplicative_expression .)
    DEF             reduce using rule 103 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 103 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 103 (additive_expression -> multiplicative_expression .)
    DOT             reduce using rule 103 (additive_expression -> multiplicative_expression .)
    NEWLINE         reduce using rule 103 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 103 (additive_expression -> multiplicative_expression .)
    TCOLON          reduce using rule 103 (additive_expression -> multiplicative_expression .)
    INTERP_END      reduce using rule 103 (additive_expression -> multiplicative_expression .)
    WHEN            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    ELSIF           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    ID              reduce using rule 103 (additive_expression -> multiplicative_expression .)
    CASE            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 103 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    NEXT            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    UNDERSCORE      reduce using rule 103 (additive_expression -> multiplicative_expression .)
    ASTERISK        reduce using rule 103 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 103 (additive_expression -> multiplicative_expression .)
    UNLESS          reduce using rule 103 (additive_expression -> multiplicative_expression .)
    WHILE           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    UNTIL           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    LOOP            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 103 (additive_expression -> multiplicative_expression .)
    LBRACKET        reduce using rule 103 (additive_expression -> multiplicative_expression .)
    INTNUMBER       reduce using rule 103 (additive_expression -> multiplicative_expression .)
    FLOATNUMBER     reduce using rule 103 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    TRUE            reduce using rule 103 (additive_expression -> multiplicative_expression .)
    FALSE           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 103 (additive_expression -> multiplicative_expression .)
    EXCLAMATION     reduce using rule 103 (additive_expression -> multiplicative_expression .)
    TILDE           reduce using rule 103 (additive_expression -> multiplicative_expression .)
    MULTI           shift and go to state 100
    DIVIDE          shift and go to state 101
    MODULO          shift and go to state 102


state 58

    (112) unary_expression -> PLUS . unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 59

    (113) unary_expression -> MINUS . unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 105
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 60

    (129) string_literal -> STRING .
    (130) string_literal -> STRING . INTERP_START expression INTERP_END string_literal

    LBRACKET        reduce using rule 129 (string_literal -> STRING .)
    DOTDOT          reduce using rule 129 (string_literal -> STRING .)
    DOTDOTDOT       reduce using rule 129 (string_literal -> STRING .)
    ASSIGN          reduce using rule 129 (string_literal -> STRING .)
    PLUS_ASSIGN     reduce using rule 129 (string_literal -> STRING .)
    MINUS_ASSIGN    reduce using rule 129 (string_literal -> STRING .)
    MULTI_ASSIGN    reduce using rule 129 (string_literal -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 129 (string_literal -> STRING .)
    POTENCIACAO     reduce using rule 129 (string_literal -> STRING .)
    MULTI           reduce using rule 129 (string_literal -> STRING .)
    DIVIDE          reduce using rule 129 (string_literal -> STRING .)
    MODULO          reduce using rule 129 (string_literal -> STRING .)
    PLUS            reduce using rule 129 (string_literal -> STRING .)
    MINUS           reduce using rule 129 (string_literal -> STRING .)
    GREATER_THAN    reduce using rule 129 (string_literal -> STRING .)
    LESS_THAN       reduce using rule 129 (string_literal -> STRING .)
    GREATER_EQUAL   reduce using rule 129 (string_literal -> STRING .)
    LESS_EQUAL      reduce using rule 129 (string_literal -> STRING .)
    EQUAL           reduce using rule 129 (string_literal -> STRING .)
    NOT_EQUAL       reduce using rule 129 (string_literal -> STRING .)
    TIPO_EQUAL      reduce using rule 129 (string_literal -> STRING .)
    AND             reduce using rule 129 (string_literal -> STRING .)
    QMARK           reduce using rule 129 (string_literal -> STRING .)
    OR              reduce using rule 129 (string_literal -> STRING .)
    CONSTANT        reduce using rule 129 (string_literal -> STRING .)
    MODULE          reduce using rule 129 (string_literal -> STRING .)
    DEF             reduce using rule 129 (string_literal -> STRING .)
    $end            reduce using rule 129 (string_literal -> STRING .)
    RPAREN          reduce using rule 129 (string_literal -> STRING .)
    COMMA           reduce using rule 129 (string_literal -> STRING .)
    RBRACKET        reduce using rule 129 (string_literal -> STRING .)
    DOT             reduce using rule 129 (string_literal -> STRING .)
    NEWLINE         reduce using rule 129 (string_literal -> STRING .)
    END             reduce using rule 129 (string_literal -> STRING .)
    TCOLON          reduce using rule 129 (string_literal -> STRING .)
    INTERP_END      reduce using rule 129 (string_literal -> STRING .)
    WHEN            reduce using rule 129 (string_literal -> STRING .)
    ELSIF           reduce using rule 129 (string_literal -> STRING .)
    ELSE            reduce using rule 129 (string_literal -> STRING .)
    ID              reduce using rule 129 (string_literal -> STRING .)
    CASE            reduce using rule 129 (string_literal -> STRING .)
    RETURN          reduce using rule 129 (string_literal -> STRING .)
    BREAK           reduce using rule 129 (string_literal -> STRING .)
    NEXT            reduce using rule 129 (string_literal -> STRING .)
    UNDERSCORE      reduce using rule 129 (string_literal -> STRING .)
    ASTERISK        reduce using rule 129 (string_literal -> STRING .)
    IF              reduce using rule 129 (string_literal -> STRING .)
    UNLESS          reduce using rule 129 (string_literal -> STRING .)
    WHILE           reduce using rule 129 (string_literal -> STRING .)
    UNTIL           reduce using rule 129 (string_literal -> STRING .)
    LOOP            reduce using rule 129 (string_literal -> STRING .)
    LPAREN          reduce using rule 129 (string_literal -> STRING .)
    INTNUMBER       reduce using rule 129 (string_literal -> STRING .)
    FLOATNUMBER     reduce using rule 129 (string_literal -> STRING .)
    CHAR            reduce using rule 129 (string_literal -> STRING .)
    TRUE            reduce using rule 129 (string_literal -> STRING .)
    FALSE           reduce using rule 129 (string_literal -> STRING .)
    STRING          reduce using rule 129 (string_literal -> STRING .)
    EXCLAMATION     reduce using rule 129 (string_literal -> STRING .)
    TILDE           reduce using rule 129 (string_literal -> STRING .)
    INTERP_START    shift and go to state 106


state 61

    (106) multiplicative_expression -> potenciacao_expression .
    (111) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    DIVIDE          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    MODULO          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    PLUS            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    MINUS           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    GREATER_THAN    reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    LESS_THAN       reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    LESS_EQUAL      reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    EQUAL           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    NOT_EQUAL       reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    AND             reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    QMARK           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    OR              reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    CONSTANT        reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    MODULE          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    DEF             reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    $end            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    RPAREN          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    COMMA           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    RBRACKET        reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    DOT             reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    NEWLINE         reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    END             reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    TCOLON          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    INTERP_END      reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    WHEN            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    ELSIF           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    ELSE            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    ID              reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    CASE            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    RETURN          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    BREAK           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    NEXT            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    UNDERSCORE      reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    ASTERISK        reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    IF              reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    UNLESS          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    WHILE           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    UNTIL           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    LOOP            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    LPAREN          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    LBRACKET        reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    INTNUMBER       reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    FLOATNUMBER     reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    CHAR            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    TRUE            reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    FALSE           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    STRING          reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    EXCLAMATION     reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    TILDE           reduce using rule 106 (multiplicative_expression -> potenciacao_expression .)
    POTENCIACAO     shift and go to state 107


state 62

    (110) potenciacao_expression -> unary_expression .

    POTENCIACAO     reduce using rule 110 (potenciacao_expression -> unary_expression .)
    MULTI           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    DIVIDE          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    MODULO          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    PLUS            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    MINUS           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 110 (potenciacao_expression -> unary_expression .)
    LESS_THAN       reduce using rule 110 (potenciacao_expression -> unary_expression .)
    GREATER_EQUAL   reduce using rule 110 (potenciacao_expression -> unary_expression .)
    LESS_EQUAL      reduce using rule 110 (potenciacao_expression -> unary_expression .)
    EQUAL           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 110 (potenciacao_expression -> unary_expression .)
    TIPO_EQUAL      reduce using rule 110 (potenciacao_expression -> unary_expression .)
    AND             reduce using rule 110 (potenciacao_expression -> unary_expression .)
    QMARK           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    OR              reduce using rule 110 (potenciacao_expression -> unary_expression .)
    CONSTANT        reduce using rule 110 (potenciacao_expression -> unary_expression .)
    MODULE          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    DEF             reduce using rule 110 (potenciacao_expression -> unary_expression .)
    $end            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    RPAREN          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    COMMA           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    RBRACKET        reduce using rule 110 (potenciacao_expression -> unary_expression .)
    DOT             reduce using rule 110 (potenciacao_expression -> unary_expression .)
    NEWLINE         reduce using rule 110 (potenciacao_expression -> unary_expression .)
    END             reduce using rule 110 (potenciacao_expression -> unary_expression .)
    TCOLON          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    INTERP_END      reduce using rule 110 (potenciacao_expression -> unary_expression .)
    WHEN            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    ELSIF           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    ELSE            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    ID              reduce using rule 110 (potenciacao_expression -> unary_expression .)
    CASE            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    RETURN          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    BREAK           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    NEXT            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    UNDERSCORE      reduce using rule 110 (potenciacao_expression -> unary_expression .)
    ASTERISK        reduce using rule 110 (potenciacao_expression -> unary_expression .)
    IF              reduce using rule 110 (potenciacao_expression -> unary_expression .)
    UNLESS          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    WHILE           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    UNTIL           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    LOOP            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    LPAREN          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    LBRACKET        reduce using rule 110 (potenciacao_expression -> unary_expression .)
    INTNUMBER       reduce using rule 110 (potenciacao_expression -> unary_expression .)
    FLOATNUMBER     reduce using rule 110 (potenciacao_expression -> unary_expression .)
    CHAR            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    TRUE            reduce using rule 110 (potenciacao_expression -> unary_expression .)
    FALSE           reduce using rule 110 (potenciacao_expression -> unary_expression .)
    STRING          reduce using rule 110 (potenciacao_expression -> unary_expression .)
    EXCLAMATION     reduce using rule 110 (potenciacao_expression -> unary_expression .)
    TILDE           reduce using rule 110 (potenciacao_expression -> unary_expression .)


state 63

    (114) unary_expression -> EXCLAMATION . unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 108
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 64

    (115) unary_expression -> TILDE . unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 109
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 65

    (24) module -> MODULE ID NEWLINE . statements END
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements                     shift and go to state 111
    statement                      shift and go to state 112
    expression                     shift and go to state 113
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 66

    (27) function -> DEF ID LPAREN . opt_argument_list RPAREN opt_return_type statements_block END
    (29) opt_argument_list -> . argument_list
    (30) opt_argument_list -> . empty
    (31) argument_list -> . argument
    (32) argument_list -> . argument COMMA argument_list
    (169) empty -> .
    (33) argument -> . ID
    (34) argument -> . ID COLON types
    (35) argument -> . ID ASSIGN expression
    (36) argument -> . ID COLON types ASSIGN expression

    RPAREN          reduce using rule 169 (empty -> .)
    ID              shift and go to state 137

    opt_argument_list              shift and go to state 138
    argument_list                  shift and go to state 139
    empty                          shift and go to state 140
    argument                       shift and go to state 141

state 67

    (28) function -> DEF ID opt_return_type . NEWLINE statements_block END

    NEWLINE         shift and go to state 142


state 68

    (37) opt_return_type -> COLON . types
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 144
    CHAR            shift and go to state 145
    NIL             shift and go to state 146
    INT             shift and go to state 150
    INT8            shift and go to state 151
    INT16           shift and go to state 152
    INT32           shift and go to state 153
    INT64           shift and go to state 154
    INT128          shift and go to state 155
    UINT8           shift and go to state 156
    UINT16          shift and go to state 157
    UINT32          shift and go to state 158
    UINT64          shift and go to state 159
    UINT128         shift and go to state 160
    FLOAT           shift and go to state 161
    FLOAT32         shift and go to state 162
    FLOAT64         shift and go to state 163
    BOOL            shift and go to state 164

    types                          shift and go to state 143
    integer                        shift and go to state 147
    float                          shift and go to state 148
    boolean                        shift and go to state 149

state 69

    (38) opt_return_type -> empty .

    NEWLINE         reduce using rule 38 (opt_return_type -> empty .)
    ID              reduce using rule 38 (opt_return_type -> empty .)
    CASE            reduce using rule 38 (opt_return_type -> empty .)
    RETURN          reduce using rule 38 (opt_return_type -> empty .)
    BREAK           reduce using rule 38 (opt_return_type -> empty .)
    NEXT            reduce using rule 38 (opt_return_type -> empty .)
    UNDERSCORE      reduce using rule 38 (opt_return_type -> empty .)
    ASTERISK        reduce using rule 38 (opt_return_type -> empty .)
    IF              reduce using rule 38 (opt_return_type -> empty .)
    UNLESS          reduce using rule 38 (opt_return_type -> empty .)
    WHILE           reduce using rule 38 (opt_return_type -> empty .)
    UNTIL           reduce using rule 38 (opt_return_type -> empty .)
    LOOP            reduce using rule 38 (opt_return_type -> empty .)
    LPAREN          reduce using rule 38 (opt_return_type -> empty .)
    LBRACKET        reduce using rule 38 (opt_return_type -> empty .)
    INTNUMBER       reduce using rule 38 (opt_return_type -> empty .)
    FLOATNUMBER     reduce using rule 38 (opt_return_type -> empty .)
    CHAR            reduce using rule 38 (opt_return_type -> empty .)
    TRUE            reduce using rule 38 (opt_return_type -> empty .)
    FALSE           reduce using rule 38 (opt_return_type -> empty .)
    STRING          reduce using rule 38 (opt_return_type -> empty .)
    PLUS            reduce using rule 38 (opt_return_type -> empty .)
    MINUS           reduce using rule 38 (opt_return_type -> empty .)
    EXCLAMATION     reduce using rule 38 (opt_return_type -> empty .)
    TILDE           reduce using rule 38 (opt_return_type -> empty .)


state 70

    (1) program -> require_list constant_list module_list function_list .

    $end            reduce using rule 1 (program -> require_list constant_list module_list function_list .)


state 71

    (88) ternary_expression -> logical_or_expression QMARK . expression TCOLON expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    logical_or_expression          shift and go to state 35
    expression                     shift and go to state 165
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 72

    (91) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    logical_and_expression         shift and go to state 166
    equality_expression            shift and go to state 41
    relational_expression          shift and go to state 43
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 73

    (80) assignment_expression -> assignment_target ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 167
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 74

    (81) assignment_expression -> assignment_target PLUS_ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 168
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 75

    (82) assignment_expression -> assignment_target MINUS_ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 169
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 76

    (83) assignment_expression -> assignment_target MULTI_ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 170
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 77

    (84) assignment_expression -> assignment_target DIVIDE_ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    assignment_target              shift and go to state 36
    expression                     shift and go to state 171
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 78

    (93) logical_and_expression -> logical_and_expression AND . equality_expression
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    equality_expression            shift and go to state 172
    relational_expression          shift and go to state 43
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 79

    (87) assignment_target -> ASTERISK assignment_target .

    ASSIGN          reduce using rule 87 (assignment_target -> ASTERISK assignment_target .)
    PLUS_ASSIGN     reduce using rule 87 (assignment_target -> ASTERISK assignment_target .)
    MINUS_ASSIGN    reduce using rule 87 (assignment_target -> ASTERISK assignment_target .)
    MULTI_ASSIGN    reduce using rule 87 (assignment_target -> ASTERISK assignment_target .)
    DIVIDE_ASSIGN   reduce using rule 87 (assignment_target -> ASTERISK assignment_target .)


state 80

    (85) assignment_target -> postfix_expression .

    ASSIGN          reduce using rule 85 (assignment_target -> postfix_expression .)
    PLUS_ASSIGN     reduce using rule 85 (assignment_target -> postfix_expression .)
    MINUS_ASSIGN    reduce using rule 85 (assignment_target -> postfix_expression .)
    MULTI_ASSIGN    reduce using rule 85 (assignment_target -> postfix_expression .)
    DIVIDE_ASSIGN   reduce using rule 85 (assignment_target -> postfix_expression .)


state 81

    (95) equality_expression -> equality_expression EQUAL . relational_expression
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    relational_expression          shift and go to state 173
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 82

    (96) equality_expression -> equality_expression NOT_EQUAL . relational_expression
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    relational_expression          shift and go to state 174
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 83

    (97) equality_expression -> equality_expression TIPO_EQUAL . relational_expression
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    relational_expression          shift and go to state 175
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 84

    (117) postfix_expression -> primary_expression postfix_suffixes .

    ASSIGN          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    PLUS_ASSIGN     reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    MINUS_ASSIGN    reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    MULTI_ASSIGN    reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    DIVIDE_ASSIGN   reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    POTENCIACAO     reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    MULTI           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    DIVIDE          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    MODULO          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    PLUS            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    MINUS           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    GREATER_THAN    reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    LESS_THAN       reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    GREATER_EQUAL   reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    LESS_EQUAL      reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    EQUAL           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    NOT_EQUAL       reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    TIPO_EQUAL      reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    AND             reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    QMARK           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    OR              reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    CONSTANT        reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    MODULE          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    DEF             reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    $end            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    RPAREN          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    COMMA           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    RBRACKET        reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    DOT             reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    NEWLINE         reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    END             reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    TCOLON          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    INTERP_END      reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    WHEN            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    ELSIF           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    ELSE            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    ID              reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    CASE            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    RETURN          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    BREAK           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    NEXT            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    UNDERSCORE      reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    ASTERISK        reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    IF              reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    UNLESS          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    WHILE           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    UNTIL           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    LOOP            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    LPAREN          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    LBRACKET        reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    INTNUMBER       reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    FLOATNUMBER     reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    CHAR            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    TRUE            reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    FALSE           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    STRING          reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    EXCLAMATION     reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)
    TILDE           reduce using rule 117 (postfix_expression -> primary_expression postfix_suffixes .)


state 85

    (118) postfix_suffixes -> postfix_suffix . postfix_suffixes
    (119) postfix_suffixes -> postfix_suffix .
    (118) postfix_suffixes -> . postfix_suffix postfix_suffixes
    (119) postfix_suffixes -> . postfix_suffix
    (120) postfix_suffix -> . LBRACKET expression RBRACKET
    (121) postfix_suffix -> . DOTDOT primary_expression
    (122) postfix_suffix -> . DOTDOTDOT primary_expression

  ! shift/reduce conflict for LBRACKET resolved as shift
    ASSIGN          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    PLUS_ASSIGN     reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    MINUS_ASSIGN    reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    MULTI_ASSIGN    reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    DIVIDE_ASSIGN   reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    POTENCIACAO     reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    MULTI           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    DIVIDE          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    MODULO          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    PLUS            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    MINUS           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    GREATER_THAN    reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    LESS_THAN       reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    GREATER_EQUAL   reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    LESS_EQUAL      reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    EQUAL           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    NOT_EQUAL       reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    TIPO_EQUAL      reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    AND             reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    QMARK           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    OR              reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    CONSTANT        reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    MODULE          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    DEF             reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    $end            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    RPAREN          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    COMMA           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    RBRACKET        reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    DOT             reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    NEWLINE         reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    END             reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    TCOLON          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    INTERP_END      reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    WHEN            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    ELSIF           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    ELSE            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    ID              reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    CASE            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    RETURN          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    BREAK           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    NEXT            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    UNDERSCORE      reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    ASTERISK        reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    IF              reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    UNLESS          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    WHILE           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    UNTIL           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    LOOP            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    LPAREN          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    INTNUMBER       reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    FLOATNUMBER     reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    CHAR            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    TRUE            reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    FALSE           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    STRING          reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    EXCLAMATION     reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    TILDE           reduce using rule 119 (postfix_suffixes -> postfix_suffix .)
    LBRACKET        shift and go to state 86
    DOTDOT          shift and go to state 87
    DOTDOTDOT       shift and go to state 88

  ! LBRACKET        [ reduce using rule 119 (postfix_suffixes -> postfix_suffix .) ]

    postfix_suffix                 shift and go to state 85
    postfix_suffixes               shift and go to state 176

state 86

    (120) postfix_suffix -> LBRACKET . expression RBRACKET
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 177
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 87

    (121) postfix_suffix -> DOTDOT . primary_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    primary_expression             shift and go to state 178
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 88

    (122) postfix_suffix -> DOTDOTDOT . primary_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    primary_expression             shift and go to state 179
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 89

    (99) relational_expression -> relational_expression GREATER_THAN . additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    additive_expression            shift and go to state 180
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 90

    (100) relational_expression -> relational_expression LESS_THAN . additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    additive_expression            shift and go to state 181
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 91

    (101) relational_expression -> relational_expression GREATER_EQUAL . additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    additive_expression            shift and go to state 182
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 92

    (102) relational_expression -> relational_expression LESS_EQUAL . additive_expression
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    additive_expression            shift and go to state 183
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 93

    (104) additive_expression -> additive_expression PLUS . multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    multiplicative_expression      shift and go to state 184
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 94

    (105) additive_expression -> additive_expression MINUS . multiplicative_expression
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    multiplicative_expression      shift and go to state 185
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 95

    (127) expression_between_parentesis -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 186


state 96

    (128) array_literal -> LBRACKET opt_expression_list . RBRACKET

    RBRACKET        shift and go to state 187


state 97

    (67) opt_expression_list -> expression_list .
    (70) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 67 (opt_expression_list -> expression_list .)
    COMMA           shift and go to state 188


state 98

    (68) opt_expression_list -> empty .

    RBRACKET        reduce using rule 68 (opt_expression_list -> empty .)


state 99

    (69) expression_list -> expression .

    COMMA           reduce using rule 69 (expression_list -> expression .)
    RBRACKET        reduce using rule 69 (expression_list -> expression .)


state 100

    (107) multiplicative_expression -> multiplicative_expression MULTI . potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    potenciacao_expression         shift and go to state 189
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 101

    (108) multiplicative_expression -> multiplicative_expression DIVIDE . potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    potenciacao_expression         shift and go to state 190
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 102

    (109) multiplicative_expression -> multiplicative_expression MODULO . potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    potenciacao_expression         shift and go to state 191
    unary_expression               shift and go to state 62
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 103

    (112) unary_expression -> PLUS unary_expression .

    POTENCIACAO     reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    MULTI           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    GREATER_THAN    reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    LESS_THAN       reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    GREATER_EQUAL   reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    LESS_EQUAL      reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    NOT_EQUAL       reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    TIPO_EQUAL      reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    QMARK           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    CONSTANT        reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    MODULE          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    DEF             reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    $end            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    DOT             reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    NEWLINE         reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    END             reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    TCOLON          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    INTERP_END      reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    WHEN            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    ELSIF           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    ID              reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    CASE            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    RETURN          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    BREAK           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    NEXT            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    UNDERSCORE      reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    ASTERISK        reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    IF              reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    UNLESS          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    WHILE           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    UNTIL           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    LOOP            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    LPAREN          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    LBRACKET        reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    INTNUMBER       reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    FLOATNUMBER     reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    CHAR            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    TRUE            reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    FALSE           reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    STRING          reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    EXCLAMATION     reduce using rule 112 (unary_expression -> PLUS unary_expression .)
    TILDE           reduce using rule 112 (unary_expression -> PLUS unary_expression .)


state 104

    (116) unary_expression -> postfix_expression .

    POTENCIACAO     reduce using rule 116 (unary_expression -> postfix_expression .)
    MULTI           reduce using rule 116 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 116 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 116 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 116 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 116 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 116 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 116 (unary_expression -> postfix_expression .)
    GREATER_EQUAL   reduce using rule 116 (unary_expression -> postfix_expression .)
    LESS_EQUAL      reduce using rule 116 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 116 (unary_expression -> postfix_expression .)
    NOT_EQUAL       reduce using rule 116 (unary_expression -> postfix_expression .)
    TIPO_EQUAL      reduce using rule 116 (unary_expression -> postfix_expression .)
    AND             reduce using rule 116 (unary_expression -> postfix_expression .)
    QMARK           reduce using rule 116 (unary_expression -> postfix_expression .)
    OR              reduce using rule 116 (unary_expression -> postfix_expression .)
    CONSTANT        reduce using rule 116 (unary_expression -> postfix_expression .)
    MODULE          reduce using rule 116 (unary_expression -> postfix_expression .)
    DEF             reduce using rule 116 (unary_expression -> postfix_expression .)
    $end            reduce using rule 116 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 116 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 116 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 116 (unary_expression -> postfix_expression .)
    DOT             reduce using rule 116 (unary_expression -> postfix_expression .)
    NEWLINE         reduce using rule 116 (unary_expression -> postfix_expression .)
    END             reduce using rule 116 (unary_expression -> postfix_expression .)
    TCOLON          reduce using rule 116 (unary_expression -> postfix_expression .)
    INTERP_END      reduce using rule 116 (unary_expression -> postfix_expression .)
    WHEN            reduce using rule 116 (unary_expression -> postfix_expression .)
    ELSIF           reduce using rule 116 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 116 (unary_expression -> postfix_expression .)
    ID              reduce using rule 116 (unary_expression -> postfix_expression .)
    CASE            reduce using rule 116 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 116 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 116 (unary_expression -> postfix_expression .)
    NEXT            reduce using rule 116 (unary_expression -> postfix_expression .)
    UNDERSCORE      reduce using rule 116 (unary_expression -> postfix_expression .)
    ASTERISK        reduce using rule 116 (unary_expression -> postfix_expression .)
    IF              reduce using rule 116 (unary_expression -> postfix_expression .)
    UNLESS          reduce using rule 116 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 116 (unary_expression -> postfix_expression .)
    UNTIL           reduce using rule 116 (unary_expression -> postfix_expression .)
    LOOP            reduce using rule 116 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 116 (unary_expression -> postfix_expression .)
    LBRACKET        reduce using rule 116 (unary_expression -> postfix_expression .)
    INTNUMBER       reduce using rule 116 (unary_expression -> postfix_expression .)
    FLOATNUMBER     reduce using rule 116 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 116 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 116 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 116 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 116 (unary_expression -> postfix_expression .)
    EXCLAMATION     reduce using rule 116 (unary_expression -> postfix_expression .)
    TILDE           reduce using rule 116 (unary_expression -> postfix_expression .)


state 105

    (113) unary_expression -> MINUS unary_expression .

    POTENCIACAO     reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    MULTI           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    GREATER_THAN    reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    LESS_THAN       reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    GREATER_EQUAL   reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    LESS_EQUAL      reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    NOT_EQUAL       reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    TIPO_EQUAL      reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    QMARK           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    CONSTANT        reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    MODULE          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    DEF             reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    $end            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    DOT             reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    NEWLINE         reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    END             reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    TCOLON          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    INTERP_END      reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    WHEN            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    ELSIF           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    ID              reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    CASE            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    RETURN          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    BREAK           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    NEXT            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    UNDERSCORE      reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    ASTERISK        reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    IF              reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    UNLESS          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    WHILE           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    UNTIL           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    LOOP            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    LPAREN          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    LBRACKET        reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    INTNUMBER       reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    FLOATNUMBER     reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    CHAR            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    TRUE            reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    FALSE           reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    STRING          reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    EXCLAMATION     reduce using rule 113 (unary_expression -> MINUS unary_expression .)
    TILDE           reduce using rule 113 (unary_expression -> MINUS unary_expression .)


state 106

    (130) string_literal -> STRING INTERP_START . expression INTERP_END string_literal
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 192
    string_literal                 shift and go to state 53
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 107

    (111) potenciacao_expression -> potenciacao_expression POTENCIACAO . unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60

    unary_expression               shift and go to state 193
    postfix_expression             shift and go to state 104
    primary_expression             shift and go to state 42
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    string_literal                 shift and go to state 53

state 108

    (114) unary_expression -> EXCLAMATION unary_expression .

    POTENCIACAO     reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    MULTI           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    DIVIDE          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_THAN    reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_THAN       reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQUAL   reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQUAL      reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    EQUAL           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQUAL       reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    TIPO_EQUAL      reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    AND             reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    QMARK           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    OR              reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    CONSTANT        reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    MODULE          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    DEF             reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    $end            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACKET        reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    DOT             reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    NEWLINE         reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    END             reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    TCOLON          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    INTERP_END      reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    WHEN            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    ELSIF           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    ELSE            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    ID              reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    CASE            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    RETURN          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    BREAK           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    NEXT            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    UNDERSCORE      reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    ASTERISK        reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    IF              reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    UNLESS          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    WHILE           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    UNTIL           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    LOOP            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    LPAREN          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACKET        reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    INTNUMBER       reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    FLOATNUMBER     reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    CHAR            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    TRUE            reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    FALSE           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    STRING          reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    EXCLAMATION     reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)
    TILDE           reduce using rule 114 (unary_expression -> EXCLAMATION unary_expression .)


state 109

    (115) unary_expression -> TILDE unary_expression .

    POTENCIACAO     reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    MULTI           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    DIVIDE          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    MODULO          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    PLUS            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    MINUS           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    GREATER_THAN    reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    LESS_THAN       reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    GREATER_EQUAL   reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    LESS_EQUAL      reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    EQUAL           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    NOT_EQUAL       reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    TIPO_EQUAL      reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    AND             reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    QMARK           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    OR              reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    CONSTANT        reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    MODULE          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    DEF             reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    $end            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    RPAREN          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    COMMA           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    RBRACKET        reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    DOT             reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    NEWLINE         reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    END             reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    TCOLON          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    INTERP_END      reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    WHEN            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    ELSIF           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    ELSE            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    ID              reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    CASE            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    RETURN          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    BREAK           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    NEXT            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    UNDERSCORE      reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    ASTERISK        reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    IF              reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    UNLESS          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    WHILE           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    UNTIL           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    LOOP            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    LPAREN          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    LBRACKET        reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    INTNUMBER       reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    FLOATNUMBER     reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    CHAR            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    TRUE            reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    FALSE           reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    STRING          reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    EXCLAMATION     reduce using rule 115 (unary_expression -> TILDE unary_expression .)
    TILDE           reduce using rule 115 (unary_expression -> TILDE unary_expression .)


state 110

    (71) variable_declaration -> ID . types ASSIGN expression
    (72) variable_declaration -> ID . ASSIGN expression
    (73) variable_declaration -> ID . COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (126) primary_expression -> ID .
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    ASSIGN          shift and go to state 195
    COMMA           shift and go to state 196
    LBRACKET        reduce using rule 126 (primary_expression -> ID .)
    DOTDOT          reduce using rule 126 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 126 (primary_expression -> ID .)
    STRING          shift and go to state 144
    CHAR            shift and go to state 145
    NIL             shift and go to state 146
    INT             shift and go to state 150
    INT8            shift and go to state 151
    INT16           shift and go to state 152
    INT32           shift and go to state 153
    INT64           shift and go to state 154
    INT128          shift and go to state 155
    UINT8           shift and go to state 156
    UINT16          shift and go to state 157
    UINT32          shift and go to state 158
    UINT64          shift and go to state 159
    UINT128         shift and go to state 160
    FLOAT           shift and go to state 161
    FLOAT32         shift and go to state 162
    FLOAT64         shift and go to state 163
    BOOL            shift and go to state 164

    types                          shift and go to state 194
    integer                        shift and go to state 147
    float                          shift and go to state 148
    boolean                        shift and go to state 149

state 111

    (24) module -> MODULE ID NEWLINE statements . END

    END             shift and go to state 197


state 112

    (131) statements -> statement .
    (132) statements -> statement . NEWLINE statements

  ! shift/reduce conflict for NEWLINE resolved as shift
    END             reduce using rule 131 (statements -> statement .)
    ELSIF           reduce using rule 131 (statements -> statement .)
    ELSE            reduce using rule 131 (statements -> statement .)
    WHEN            reduce using rule 131 (statements -> statement .)
    NEWLINE         shift and go to state 198

  ! NEWLINE         [ reduce using rule 131 (statements -> statement .) ]


state 113

    (133) statement -> expression .
    (157) iterator -> expression . DOT MULTI statements_block
    (158) iterator -> expression . DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> expression . DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block

    NEWLINE         reduce using rule 133 (statement -> expression .)
    END             reduce using rule 133 (statement -> expression .)
    ELSIF           reduce using rule 133 (statement -> expression .)
    ELSE            reduce using rule 133 (statement -> expression .)
    WHEN            reduce using rule 133 (statement -> expression .)
    DOT             shift and go to state 199


state 114

    (134) statement -> control_structure .

    NEWLINE         reduce using rule 134 (statement -> control_structure .)
    END             reduce using rule 134 (statement -> control_structure .)
    ELSIF           reduce using rule 134 (statement -> control_structure .)
    ELSE            reduce using rule 134 (statement -> control_structure .)
    WHEN            reduce using rule 134 (statement -> control_structure .)


state 115

    (135) statement -> variable_declaration .

    NEWLINE         reduce using rule 135 (statement -> variable_declaration .)
    END             reduce using rule 135 (statement -> variable_declaration .)
    ELSIF           reduce using rule 135 (statement -> variable_declaration .)
    ELSE            reduce using rule 135 (statement -> variable_declaration .)
    WHEN            reduce using rule 135 (statement -> variable_declaration .)


state 116

    (136) control_structure -> conditional .

    NEWLINE         reduce using rule 136 (control_structure -> conditional .)
    END             reduce using rule 136 (control_structure -> conditional .)
    ELSIF           reduce using rule 136 (control_structure -> conditional .)
    ELSE            reduce using rule 136 (control_structure -> conditional .)
    WHEN            reduce using rule 136 (control_structure -> conditional .)


state 117

    (137) control_structure -> loop_structure .

    NEWLINE         reduce using rule 137 (control_structure -> loop_structure .)
    END             reduce using rule 137 (control_structure -> loop_structure .)
    ELSIF           reduce using rule 137 (control_structure -> loop_structure .)
    ELSE            reduce using rule 137 (control_structure -> loop_structure .)
    WHEN            reduce using rule 137 (control_structure -> loop_structure .)


state 118

    (138) control_structure -> case_structure .

    NEWLINE         reduce using rule 138 (control_structure -> case_structure .)
    END             reduce using rule 138 (control_structure -> case_structure .)
    ELSIF           reduce using rule 138 (control_structure -> case_structure .)
    ELSE            reduce using rule 138 (control_structure -> case_structure .)
    WHEN            reduce using rule 138 (control_structure -> case_structure .)


state 119

    (139) control_structure -> return_statement .

    NEWLINE         reduce using rule 139 (control_structure -> return_statement .)
    END             reduce using rule 139 (control_structure -> return_statement .)
    ELSIF           reduce using rule 139 (control_structure -> return_statement .)
    ELSE            reduce using rule 139 (control_structure -> return_statement .)
    WHEN            reduce using rule 139 (control_structure -> return_statement .)


state 120

    (140) control_structure -> break_statement .

    NEWLINE         reduce using rule 140 (control_structure -> break_statement .)
    END             reduce using rule 140 (control_structure -> break_statement .)
    ELSIF           reduce using rule 140 (control_structure -> break_statement .)
    ELSE            reduce using rule 140 (control_structure -> break_statement .)
    WHEN            reduce using rule 140 (control_structure -> break_statement .)


state 121

    (141) control_structure -> next_statement .

    NEWLINE         reduce using rule 141 (control_structure -> next_statement .)
    END             reduce using rule 141 (control_structure -> next_statement .)
    ELSIF           reduce using rule 141 (control_structure -> next_statement .)
    ELSE            reduce using rule 141 (control_structure -> next_statement .)
    WHEN            reduce using rule 141 (control_structure -> next_statement .)


state 122

    (142) conditional -> if_statement .

    NEWLINE         reduce using rule 142 (conditional -> if_statement .)
    END             reduce using rule 142 (conditional -> if_statement .)
    ELSIF           reduce using rule 142 (conditional -> if_statement .)
    ELSE            reduce using rule 142 (conditional -> if_statement .)
    WHEN            reduce using rule 142 (conditional -> if_statement .)


state 123

    (143) conditional -> unless_statement .

    NEWLINE         reduce using rule 143 (conditional -> unless_statement .)
    END             reduce using rule 143 (conditional -> unless_statement .)
    ELSIF           reduce using rule 143 (conditional -> unless_statement .)
    ELSE            reduce using rule 143 (conditional -> unless_statement .)
    WHEN            reduce using rule 143 (conditional -> unless_statement .)


state 124

    (150) loop_structure -> while .

    NEWLINE         reduce using rule 150 (loop_structure -> while .)
    END             reduce using rule 150 (loop_structure -> while .)
    ELSIF           reduce using rule 150 (loop_structure -> while .)
    ELSE            reduce using rule 150 (loop_structure -> while .)
    WHEN            reduce using rule 150 (loop_structure -> while .)


state 125

    (151) loop_structure -> until .

    NEWLINE         reduce using rule 151 (loop_structure -> until .)
    END             reduce using rule 151 (loop_structure -> until .)
    ELSIF           reduce using rule 151 (loop_structure -> until .)
    ELSE            reduce using rule 151 (loop_structure -> until .)
    WHEN            reduce using rule 151 (loop_structure -> until .)


state 126

    (152) loop_structure -> loop .

    NEWLINE         reduce using rule 152 (loop_structure -> loop .)
    END             reduce using rule 152 (loop_structure -> loop .)
    ELSIF           reduce using rule 152 (loop_structure -> loop .)
    ELSE            reduce using rule 152 (loop_structure -> loop .)
    WHEN            reduce using rule 152 (loop_structure -> loop .)


state 127

    (153) loop_structure -> iterator .

    NEWLINE         reduce using rule 153 (loop_structure -> iterator .)
    END             reduce using rule 153 (loop_structure -> iterator .)
    ELSIF           reduce using rule 153 (loop_structure -> iterator .)
    ELSE            reduce using rule 153 (loop_structure -> iterator .)
    WHEN            reduce using rule 153 (loop_structure -> iterator .)


state 128

    (160) case_structure -> CASE . expression when_list opt_else END
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 200
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 129

    (163) return_statement -> RETURN . opt_expression
    (166) opt_expression -> . expression
    (167) opt_expression -> . empty
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (169) empty -> .
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)
    ELSIF           reduce using rule 169 (empty -> .)
    ELSE            reduce using rule 169 (empty -> .)
    WHEN            reduce using rule 169 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    opt_expression                 shift and go to state 201
    expression                     shift and go to state 202
    empty                          shift and go to state 203
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 130

    (164) break_statement -> BREAK . opt_expression
    (166) opt_expression -> . expression
    (167) opt_expression -> . empty
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (169) empty -> .
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)
    ELSIF           reduce using rule 169 (empty -> .)
    ELSE            reduce using rule 169 (empty -> .)
    WHEN            reduce using rule 169 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    opt_expression                 shift and go to state 204
    expression                     shift and go to state 202
    empty                          shift and go to state 203
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 131

    (165) next_statement -> NEXT . opt_expression
    (166) opt_expression -> . expression
    (167) opt_expression -> . empty
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (169) empty -> .
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)
    ELSIF           reduce using rule 169 (empty -> .)
    ELSE            reduce using rule 169 (empty -> .)
    WHEN            reduce using rule 169 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    opt_expression                 shift and go to state 205
    expression                     shift and go to state 202
    empty                          shift and go to state 203
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 132

    (144) if_statement -> IF . expression statements_block opt_elsif opt_else END
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 206
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 133

    (145) unless_statement -> UNLESS . expression statements_block opt_else END
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 207
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 134

    (154) while -> WHILE . expression statements_block
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 208
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 135

    (155) until -> UNTIL . expression statements_block
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 209
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 136

    (156) loop -> LOOP . statements_block
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements_block               shift and go to state 210
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    expression                     shift and go to state 113
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 137

    (33) argument -> ID .
    (34) argument -> ID . COLON types
    (35) argument -> ID . ASSIGN expression
    (36) argument -> ID . COLON types ASSIGN expression

    COMMA           reduce using rule 33 (argument -> ID .)
    RPAREN          reduce using rule 33 (argument -> ID .)
    COLON           shift and go to state 212
    ASSIGN          shift and go to state 213


state 138

    (27) function -> DEF ID LPAREN opt_argument_list . RPAREN opt_return_type statements_block END

    RPAREN          shift and go to state 214


state 139

    (29) opt_argument_list -> argument_list .

    RPAREN          reduce using rule 29 (opt_argument_list -> argument_list .)


state 140

    (30) opt_argument_list -> empty .

    RPAREN          reduce using rule 30 (opt_argument_list -> empty .)


state 141

    (31) argument_list -> argument .
    (32) argument_list -> argument . COMMA argument_list

    RPAREN          reduce using rule 31 (argument_list -> argument .)
    COMMA           shift and go to state 215


state 142

    (28) function -> DEF ID opt_return_type NEWLINE . statements_block END
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements_block               shift and go to state 216
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    expression                     shift and go to state 113
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 143

    (37) opt_return_type -> COLON types .

    NEWLINE         reduce using rule 37 (opt_return_type -> COLON types .)
    ID              reduce using rule 37 (opt_return_type -> COLON types .)
    CASE            reduce using rule 37 (opt_return_type -> COLON types .)
    RETURN          reduce using rule 37 (opt_return_type -> COLON types .)
    BREAK           reduce using rule 37 (opt_return_type -> COLON types .)
    NEXT            reduce using rule 37 (opt_return_type -> COLON types .)
    UNDERSCORE      reduce using rule 37 (opt_return_type -> COLON types .)
    ASTERISK        reduce using rule 37 (opt_return_type -> COLON types .)
    IF              reduce using rule 37 (opt_return_type -> COLON types .)
    UNLESS          reduce using rule 37 (opt_return_type -> COLON types .)
    WHILE           reduce using rule 37 (opt_return_type -> COLON types .)
    UNTIL           reduce using rule 37 (opt_return_type -> COLON types .)
    LOOP            reduce using rule 37 (opt_return_type -> COLON types .)
    LPAREN          reduce using rule 37 (opt_return_type -> COLON types .)
    LBRACKET        reduce using rule 37 (opt_return_type -> COLON types .)
    INTNUMBER       reduce using rule 37 (opt_return_type -> COLON types .)
    FLOATNUMBER     reduce using rule 37 (opt_return_type -> COLON types .)
    CHAR            reduce using rule 37 (opt_return_type -> COLON types .)
    TRUE            reduce using rule 37 (opt_return_type -> COLON types .)
    FALSE           reduce using rule 37 (opt_return_type -> COLON types .)
    STRING          reduce using rule 37 (opt_return_type -> COLON types .)
    PLUS            reduce using rule 37 (opt_return_type -> COLON types .)
    MINUS           reduce using rule 37 (opt_return_type -> COLON types .)
    EXCLAMATION     reduce using rule 37 (opt_return_type -> COLON types .)
    TILDE           reduce using rule 37 (opt_return_type -> COLON types .)


state 144

    (39) types -> STRING .

    NEWLINE         reduce using rule 39 (types -> STRING .)
    ID              reduce using rule 39 (types -> STRING .)
    CASE            reduce using rule 39 (types -> STRING .)
    RETURN          reduce using rule 39 (types -> STRING .)
    BREAK           reduce using rule 39 (types -> STRING .)
    NEXT            reduce using rule 39 (types -> STRING .)
    UNDERSCORE      reduce using rule 39 (types -> STRING .)
    ASTERISK        reduce using rule 39 (types -> STRING .)
    IF              reduce using rule 39 (types -> STRING .)
    UNLESS          reduce using rule 39 (types -> STRING .)
    WHILE           reduce using rule 39 (types -> STRING .)
    UNTIL           reduce using rule 39 (types -> STRING .)
    LOOP            reduce using rule 39 (types -> STRING .)
    LPAREN          reduce using rule 39 (types -> STRING .)
    LBRACKET        reduce using rule 39 (types -> STRING .)
    INTNUMBER       reduce using rule 39 (types -> STRING .)
    FLOATNUMBER     reduce using rule 39 (types -> STRING .)
    CHAR            reduce using rule 39 (types -> STRING .)
    TRUE            reduce using rule 39 (types -> STRING .)
    FALSE           reduce using rule 39 (types -> STRING .)
    STRING          reduce using rule 39 (types -> STRING .)
    PLUS            reduce using rule 39 (types -> STRING .)
    MINUS           reduce using rule 39 (types -> STRING .)
    EXCLAMATION     reduce using rule 39 (types -> STRING .)
    TILDE           reduce using rule 39 (types -> STRING .)
    ASSIGN          reduce using rule 39 (types -> STRING .)
    COMMA           reduce using rule 39 (types -> STRING .)
    RPAREN          reduce using rule 39 (types -> STRING .)


state 145

    (40) types -> CHAR .

    NEWLINE         reduce using rule 40 (types -> CHAR .)
    ID              reduce using rule 40 (types -> CHAR .)
    CASE            reduce using rule 40 (types -> CHAR .)
    RETURN          reduce using rule 40 (types -> CHAR .)
    BREAK           reduce using rule 40 (types -> CHAR .)
    NEXT            reduce using rule 40 (types -> CHAR .)
    UNDERSCORE      reduce using rule 40 (types -> CHAR .)
    ASTERISK        reduce using rule 40 (types -> CHAR .)
    IF              reduce using rule 40 (types -> CHAR .)
    UNLESS          reduce using rule 40 (types -> CHAR .)
    WHILE           reduce using rule 40 (types -> CHAR .)
    UNTIL           reduce using rule 40 (types -> CHAR .)
    LOOP            reduce using rule 40 (types -> CHAR .)
    LPAREN          reduce using rule 40 (types -> CHAR .)
    LBRACKET        reduce using rule 40 (types -> CHAR .)
    INTNUMBER       reduce using rule 40 (types -> CHAR .)
    FLOATNUMBER     reduce using rule 40 (types -> CHAR .)
    CHAR            reduce using rule 40 (types -> CHAR .)
    TRUE            reduce using rule 40 (types -> CHAR .)
    FALSE           reduce using rule 40 (types -> CHAR .)
    STRING          reduce using rule 40 (types -> CHAR .)
    PLUS            reduce using rule 40 (types -> CHAR .)
    MINUS           reduce using rule 40 (types -> CHAR .)
    EXCLAMATION     reduce using rule 40 (types -> CHAR .)
    TILDE           reduce using rule 40 (types -> CHAR .)
    ASSIGN          reduce using rule 40 (types -> CHAR .)
    COMMA           reduce using rule 40 (types -> CHAR .)
    RPAREN          reduce using rule 40 (types -> CHAR .)


state 146

    (41) types -> NIL .

    NEWLINE         reduce using rule 41 (types -> NIL .)
    ID              reduce using rule 41 (types -> NIL .)
    CASE            reduce using rule 41 (types -> NIL .)
    RETURN          reduce using rule 41 (types -> NIL .)
    BREAK           reduce using rule 41 (types -> NIL .)
    NEXT            reduce using rule 41 (types -> NIL .)
    UNDERSCORE      reduce using rule 41 (types -> NIL .)
    ASTERISK        reduce using rule 41 (types -> NIL .)
    IF              reduce using rule 41 (types -> NIL .)
    UNLESS          reduce using rule 41 (types -> NIL .)
    WHILE           reduce using rule 41 (types -> NIL .)
    UNTIL           reduce using rule 41 (types -> NIL .)
    LOOP            reduce using rule 41 (types -> NIL .)
    LPAREN          reduce using rule 41 (types -> NIL .)
    LBRACKET        reduce using rule 41 (types -> NIL .)
    INTNUMBER       reduce using rule 41 (types -> NIL .)
    FLOATNUMBER     reduce using rule 41 (types -> NIL .)
    CHAR            reduce using rule 41 (types -> NIL .)
    TRUE            reduce using rule 41 (types -> NIL .)
    FALSE           reduce using rule 41 (types -> NIL .)
    STRING          reduce using rule 41 (types -> NIL .)
    PLUS            reduce using rule 41 (types -> NIL .)
    MINUS           reduce using rule 41 (types -> NIL .)
    EXCLAMATION     reduce using rule 41 (types -> NIL .)
    TILDE           reduce using rule 41 (types -> NIL .)
    ASSIGN          reduce using rule 41 (types -> NIL .)
    COMMA           reduce using rule 41 (types -> NIL .)
    RPAREN          reduce using rule 41 (types -> NIL .)


state 147

    (42) types -> integer .

    NEWLINE         reduce using rule 42 (types -> integer .)
    ID              reduce using rule 42 (types -> integer .)
    CASE            reduce using rule 42 (types -> integer .)
    RETURN          reduce using rule 42 (types -> integer .)
    BREAK           reduce using rule 42 (types -> integer .)
    NEXT            reduce using rule 42 (types -> integer .)
    UNDERSCORE      reduce using rule 42 (types -> integer .)
    ASTERISK        reduce using rule 42 (types -> integer .)
    IF              reduce using rule 42 (types -> integer .)
    UNLESS          reduce using rule 42 (types -> integer .)
    WHILE           reduce using rule 42 (types -> integer .)
    UNTIL           reduce using rule 42 (types -> integer .)
    LOOP            reduce using rule 42 (types -> integer .)
    LPAREN          reduce using rule 42 (types -> integer .)
    LBRACKET        reduce using rule 42 (types -> integer .)
    INTNUMBER       reduce using rule 42 (types -> integer .)
    FLOATNUMBER     reduce using rule 42 (types -> integer .)
    CHAR            reduce using rule 42 (types -> integer .)
    TRUE            reduce using rule 42 (types -> integer .)
    FALSE           reduce using rule 42 (types -> integer .)
    STRING          reduce using rule 42 (types -> integer .)
    PLUS            reduce using rule 42 (types -> integer .)
    MINUS           reduce using rule 42 (types -> integer .)
    EXCLAMATION     reduce using rule 42 (types -> integer .)
    TILDE           reduce using rule 42 (types -> integer .)
    ASSIGN          reduce using rule 42 (types -> integer .)
    COMMA           reduce using rule 42 (types -> integer .)
    RPAREN          reduce using rule 42 (types -> integer .)


state 148

    (43) types -> float .

    NEWLINE         reduce using rule 43 (types -> float .)
    ID              reduce using rule 43 (types -> float .)
    CASE            reduce using rule 43 (types -> float .)
    RETURN          reduce using rule 43 (types -> float .)
    BREAK           reduce using rule 43 (types -> float .)
    NEXT            reduce using rule 43 (types -> float .)
    UNDERSCORE      reduce using rule 43 (types -> float .)
    ASTERISK        reduce using rule 43 (types -> float .)
    IF              reduce using rule 43 (types -> float .)
    UNLESS          reduce using rule 43 (types -> float .)
    WHILE           reduce using rule 43 (types -> float .)
    UNTIL           reduce using rule 43 (types -> float .)
    LOOP            reduce using rule 43 (types -> float .)
    LPAREN          reduce using rule 43 (types -> float .)
    LBRACKET        reduce using rule 43 (types -> float .)
    INTNUMBER       reduce using rule 43 (types -> float .)
    FLOATNUMBER     reduce using rule 43 (types -> float .)
    CHAR            reduce using rule 43 (types -> float .)
    TRUE            reduce using rule 43 (types -> float .)
    FALSE           reduce using rule 43 (types -> float .)
    STRING          reduce using rule 43 (types -> float .)
    PLUS            reduce using rule 43 (types -> float .)
    MINUS           reduce using rule 43 (types -> float .)
    EXCLAMATION     reduce using rule 43 (types -> float .)
    TILDE           reduce using rule 43 (types -> float .)
    ASSIGN          reduce using rule 43 (types -> float .)
    COMMA           reduce using rule 43 (types -> float .)
    RPAREN          reduce using rule 43 (types -> float .)


state 149

    (44) types -> boolean .

    NEWLINE         reduce using rule 44 (types -> boolean .)
    ID              reduce using rule 44 (types -> boolean .)
    CASE            reduce using rule 44 (types -> boolean .)
    RETURN          reduce using rule 44 (types -> boolean .)
    BREAK           reduce using rule 44 (types -> boolean .)
    NEXT            reduce using rule 44 (types -> boolean .)
    UNDERSCORE      reduce using rule 44 (types -> boolean .)
    ASTERISK        reduce using rule 44 (types -> boolean .)
    IF              reduce using rule 44 (types -> boolean .)
    UNLESS          reduce using rule 44 (types -> boolean .)
    WHILE           reduce using rule 44 (types -> boolean .)
    UNTIL           reduce using rule 44 (types -> boolean .)
    LOOP            reduce using rule 44 (types -> boolean .)
    LPAREN          reduce using rule 44 (types -> boolean .)
    LBRACKET        reduce using rule 44 (types -> boolean .)
    INTNUMBER       reduce using rule 44 (types -> boolean .)
    FLOATNUMBER     reduce using rule 44 (types -> boolean .)
    CHAR            reduce using rule 44 (types -> boolean .)
    TRUE            reduce using rule 44 (types -> boolean .)
    FALSE           reduce using rule 44 (types -> boolean .)
    STRING          reduce using rule 44 (types -> boolean .)
    PLUS            reduce using rule 44 (types -> boolean .)
    MINUS           reduce using rule 44 (types -> boolean .)
    EXCLAMATION     reduce using rule 44 (types -> boolean .)
    TILDE           reduce using rule 44 (types -> boolean .)
    ASSIGN          reduce using rule 44 (types -> boolean .)
    COMMA           reduce using rule 44 (types -> boolean .)
    RPAREN          reduce using rule 44 (types -> boolean .)


state 150

    (45) integer -> INT .

    NEWLINE         reduce using rule 45 (integer -> INT .)
    ID              reduce using rule 45 (integer -> INT .)
    CASE            reduce using rule 45 (integer -> INT .)
    RETURN          reduce using rule 45 (integer -> INT .)
    BREAK           reduce using rule 45 (integer -> INT .)
    NEXT            reduce using rule 45 (integer -> INT .)
    UNDERSCORE      reduce using rule 45 (integer -> INT .)
    ASTERISK        reduce using rule 45 (integer -> INT .)
    IF              reduce using rule 45 (integer -> INT .)
    UNLESS          reduce using rule 45 (integer -> INT .)
    WHILE           reduce using rule 45 (integer -> INT .)
    UNTIL           reduce using rule 45 (integer -> INT .)
    LOOP            reduce using rule 45 (integer -> INT .)
    LPAREN          reduce using rule 45 (integer -> INT .)
    LBRACKET        reduce using rule 45 (integer -> INT .)
    INTNUMBER       reduce using rule 45 (integer -> INT .)
    FLOATNUMBER     reduce using rule 45 (integer -> INT .)
    CHAR            reduce using rule 45 (integer -> INT .)
    TRUE            reduce using rule 45 (integer -> INT .)
    FALSE           reduce using rule 45 (integer -> INT .)
    STRING          reduce using rule 45 (integer -> INT .)
    PLUS            reduce using rule 45 (integer -> INT .)
    MINUS           reduce using rule 45 (integer -> INT .)
    EXCLAMATION     reduce using rule 45 (integer -> INT .)
    TILDE           reduce using rule 45 (integer -> INT .)
    ASSIGN          reduce using rule 45 (integer -> INT .)
    COMMA           reduce using rule 45 (integer -> INT .)
    RPAREN          reduce using rule 45 (integer -> INT .)


state 151

    (46) integer -> INT8 .

    NEWLINE         reduce using rule 46 (integer -> INT8 .)
    ID              reduce using rule 46 (integer -> INT8 .)
    CASE            reduce using rule 46 (integer -> INT8 .)
    RETURN          reduce using rule 46 (integer -> INT8 .)
    BREAK           reduce using rule 46 (integer -> INT8 .)
    NEXT            reduce using rule 46 (integer -> INT8 .)
    UNDERSCORE      reduce using rule 46 (integer -> INT8 .)
    ASTERISK        reduce using rule 46 (integer -> INT8 .)
    IF              reduce using rule 46 (integer -> INT8 .)
    UNLESS          reduce using rule 46 (integer -> INT8 .)
    WHILE           reduce using rule 46 (integer -> INT8 .)
    UNTIL           reduce using rule 46 (integer -> INT8 .)
    LOOP            reduce using rule 46 (integer -> INT8 .)
    LPAREN          reduce using rule 46 (integer -> INT8 .)
    LBRACKET        reduce using rule 46 (integer -> INT8 .)
    INTNUMBER       reduce using rule 46 (integer -> INT8 .)
    FLOATNUMBER     reduce using rule 46 (integer -> INT8 .)
    CHAR            reduce using rule 46 (integer -> INT8 .)
    TRUE            reduce using rule 46 (integer -> INT8 .)
    FALSE           reduce using rule 46 (integer -> INT8 .)
    STRING          reduce using rule 46 (integer -> INT8 .)
    PLUS            reduce using rule 46 (integer -> INT8 .)
    MINUS           reduce using rule 46 (integer -> INT8 .)
    EXCLAMATION     reduce using rule 46 (integer -> INT8 .)
    TILDE           reduce using rule 46 (integer -> INT8 .)
    ASSIGN          reduce using rule 46 (integer -> INT8 .)
    COMMA           reduce using rule 46 (integer -> INT8 .)
    RPAREN          reduce using rule 46 (integer -> INT8 .)


state 152

    (47) integer -> INT16 .

    NEWLINE         reduce using rule 47 (integer -> INT16 .)
    ID              reduce using rule 47 (integer -> INT16 .)
    CASE            reduce using rule 47 (integer -> INT16 .)
    RETURN          reduce using rule 47 (integer -> INT16 .)
    BREAK           reduce using rule 47 (integer -> INT16 .)
    NEXT            reduce using rule 47 (integer -> INT16 .)
    UNDERSCORE      reduce using rule 47 (integer -> INT16 .)
    ASTERISK        reduce using rule 47 (integer -> INT16 .)
    IF              reduce using rule 47 (integer -> INT16 .)
    UNLESS          reduce using rule 47 (integer -> INT16 .)
    WHILE           reduce using rule 47 (integer -> INT16 .)
    UNTIL           reduce using rule 47 (integer -> INT16 .)
    LOOP            reduce using rule 47 (integer -> INT16 .)
    LPAREN          reduce using rule 47 (integer -> INT16 .)
    LBRACKET        reduce using rule 47 (integer -> INT16 .)
    INTNUMBER       reduce using rule 47 (integer -> INT16 .)
    FLOATNUMBER     reduce using rule 47 (integer -> INT16 .)
    CHAR            reduce using rule 47 (integer -> INT16 .)
    TRUE            reduce using rule 47 (integer -> INT16 .)
    FALSE           reduce using rule 47 (integer -> INT16 .)
    STRING          reduce using rule 47 (integer -> INT16 .)
    PLUS            reduce using rule 47 (integer -> INT16 .)
    MINUS           reduce using rule 47 (integer -> INT16 .)
    EXCLAMATION     reduce using rule 47 (integer -> INT16 .)
    TILDE           reduce using rule 47 (integer -> INT16 .)
    ASSIGN          reduce using rule 47 (integer -> INT16 .)
    COMMA           reduce using rule 47 (integer -> INT16 .)
    RPAREN          reduce using rule 47 (integer -> INT16 .)


state 153

    (48) integer -> INT32 .

    NEWLINE         reduce using rule 48 (integer -> INT32 .)
    ID              reduce using rule 48 (integer -> INT32 .)
    CASE            reduce using rule 48 (integer -> INT32 .)
    RETURN          reduce using rule 48 (integer -> INT32 .)
    BREAK           reduce using rule 48 (integer -> INT32 .)
    NEXT            reduce using rule 48 (integer -> INT32 .)
    UNDERSCORE      reduce using rule 48 (integer -> INT32 .)
    ASTERISK        reduce using rule 48 (integer -> INT32 .)
    IF              reduce using rule 48 (integer -> INT32 .)
    UNLESS          reduce using rule 48 (integer -> INT32 .)
    WHILE           reduce using rule 48 (integer -> INT32 .)
    UNTIL           reduce using rule 48 (integer -> INT32 .)
    LOOP            reduce using rule 48 (integer -> INT32 .)
    LPAREN          reduce using rule 48 (integer -> INT32 .)
    LBRACKET        reduce using rule 48 (integer -> INT32 .)
    INTNUMBER       reduce using rule 48 (integer -> INT32 .)
    FLOATNUMBER     reduce using rule 48 (integer -> INT32 .)
    CHAR            reduce using rule 48 (integer -> INT32 .)
    TRUE            reduce using rule 48 (integer -> INT32 .)
    FALSE           reduce using rule 48 (integer -> INT32 .)
    STRING          reduce using rule 48 (integer -> INT32 .)
    PLUS            reduce using rule 48 (integer -> INT32 .)
    MINUS           reduce using rule 48 (integer -> INT32 .)
    EXCLAMATION     reduce using rule 48 (integer -> INT32 .)
    TILDE           reduce using rule 48 (integer -> INT32 .)
    ASSIGN          reduce using rule 48 (integer -> INT32 .)
    COMMA           reduce using rule 48 (integer -> INT32 .)
    RPAREN          reduce using rule 48 (integer -> INT32 .)


state 154

    (49) integer -> INT64 .

    NEWLINE         reduce using rule 49 (integer -> INT64 .)
    ID              reduce using rule 49 (integer -> INT64 .)
    CASE            reduce using rule 49 (integer -> INT64 .)
    RETURN          reduce using rule 49 (integer -> INT64 .)
    BREAK           reduce using rule 49 (integer -> INT64 .)
    NEXT            reduce using rule 49 (integer -> INT64 .)
    UNDERSCORE      reduce using rule 49 (integer -> INT64 .)
    ASTERISK        reduce using rule 49 (integer -> INT64 .)
    IF              reduce using rule 49 (integer -> INT64 .)
    UNLESS          reduce using rule 49 (integer -> INT64 .)
    WHILE           reduce using rule 49 (integer -> INT64 .)
    UNTIL           reduce using rule 49 (integer -> INT64 .)
    LOOP            reduce using rule 49 (integer -> INT64 .)
    LPAREN          reduce using rule 49 (integer -> INT64 .)
    LBRACKET        reduce using rule 49 (integer -> INT64 .)
    INTNUMBER       reduce using rule 49 (integer -> INT64 .)
    FLOATNUMBER     reduce using rule 49 (integer -> INT64 .)
    CHAR            reduce using rule 49 (integer -> INT64 .)
    TRUE            reduce using rule 49 (integer -> INT64 .)
    FALSE           reduce using rule 49 (integer -> INT64 .)
    STRING          reduce using rule 49 (integer -> INT64 .)
    PLUS            reduce using rule 49 (integer -> INT64 .)
    MINUS           reduce using rule 49 (integer -> INT64 .)
    EXCLAMATION     reduce using rule 49 (integer -> INT64 .)
    TILDE           reduce using rule 49 (integer -> INT64 .)
    ASSIGN          reduce using rule 49 (integer -> INT64 .)
    COMMA           reduce using rule 49 (integer -> INT64 .)
    RPAREN          reduce using rule 49 (integer -> INT64 .)


state 155

    (50) integer -> INT128 .

    NEWLINE         reduce using rule 50 (integer -> INT128 .)
    ID              reduce using rule 50 (integer -> INT128 .)
    CASE            reduce using rule 50 (integer -> INT128 .)
    RETURN          reduce using rule 50 (integer -> INT128 .)
    BREAK           reduce using rule 50 (integer -> INT128 .)
    NEXT            reduce using rule 50 (integer -> INT128 .)
    UNDERSCORE      reduce using rule 50 (integer -> INT128 .)
    ASTERISK        reduce using rule 50 (integer -> INT128 .)
    IF              reduce using rule 50 (integer -> INT128 .)
    UNLESS          reduce using rule 50 (integer -> INT128 .)
    WHILE           reduce using rule 50 (integer -> INT128 .)
    UNTIL           reduce using rule 50 (integer -> INT128 .)
    LOOP            reduce using rule 50 (integer -> INT128 .)
    LPAREN          reduce using rule 50 (integer -> INT128 .)
    LBRACKET        reduce using rule 50 (integer -> INT128 .)
    INTNUMBER       reduce using rule 50 (integer -> INT128 .)
    FLOATNUMBER     reduce using rule 50 (integer -> INT128 .)
    CHAR            reduce using rule 50 (integer -> INT128 .)
    TRUE            reduce using rule 50 (integer -> INT128 .)
    FALSE           reduce using rule 50 (integer -> INT128 .)
    STRING          reduce using rule 50 (integer -> INT128 .)
    PLUS            reduce using rule 50 (integer -> INT128 .)
    MINUS           reduce using rule 50 (integer -> INT128 .)
    EXCLAMATION     reduce using rule 50 (integer -> INT128 .)
    TILDE           reduce using rule 50 (integer -> INT128 .)
    ASSIGN          reduce using rule 50 (integer -> INT128 .)
    COMMA           reduce using rule 50 (integer -> INT128 .)
    RPAREN          reduce using rule 50 (integer -> INT128 .)


state 156

    (51) integer -> UINT8 .

    NEWLINE         reduce using rule 51 (integer -> UINT8 .)
    ID              reduce using rule 51 (integer -> UINT8 .)
    CASE            reduce using rule 51 (integer -> UINT8 .)
    RETURN          reduce using rule 51 (integer -> UINT8 .)
    BREAK           reduce using rule 51 (integer -> UINT8 .)
    NEXT            reduce using rule 51 (integer -> UINT8 .)
    UNDERSCORE      reduce using rule 51 (integer -> UINT8 .)
    ASTERISK        reduce using rule 51 (integer -> UINT8 .)
    IF              reduce using rule 51 (integer -> UINT8 .)
    UNLESS          reduce using rule 51 (integer -> UINT8 .)
    WHILE           reduce using rule 51 (integer -> UINT8 .)
    UNTIL           reduce using rule 51 (integer -> UINT8 .)
    LOOP            reduce using rule 51 (integer -> UINT8 .)
    LPAREN          reduce using rule 51 (integer -> UINT8 .)
    LBRACKET        reduce using rule 51 (integer -> UINT8 .)
    INTNUMBER       reduce using rule 51 (integer -> UINT8 .)
    FLOATNUMBER     reduce using rule 51 (integer -> UINT8 .)
    CHAR            reduce using rule 51 (integer -> UINT8 .)
    TRUE            reduce using rule 51 (integer -> UINT8 .)
    FALSE           reduce using rule 51 (integer -> UINT8 .)
    STRING          reduce using rule 51 (integer -> UINT8 .)
    PLUS            reduce using rule 51 (integer -> UINT8 .)
    MINUS           reduce using rule 51 (integer -> UINT8 .)
    EXCLAMATION     reduce using rule 51 (integer -> UINT8 .)
    TILDE           reduce using rule 51 (integer -> UINT8 .)
    ASSIGN          reduce using rule 51 (integer -> UINT8 .)
    COMMA           reduce using rule 51 (integer -> UINT8 .)
    RPAREN          reduce using rule 51 (integer -> UINT8 .)


state 157

    (52) integer -> UINT16 .

    NEWLINE         reduce using rule 52 (integer -> UINT16 .)
    ID              reduce using rule 52 (integer -> UINT16 .)
    CASE            reduce using rule 52 (integer -> UINT16 .)
    RETURN          reduce using rule 52 (integer -> UINT16 .)
    BREAK           reduce using rule 52 (integer -> UINT16 .)
    NEXT            reduce using rule 52 (integer -> UINT16 .)
    UNDERSCORE      reduce using rule 52 (integer -> UINT16 .)
    ASTERISK        reduce using rule 52 (integer -> UINT16 .)
    IF              reduce using rule 52 (integer -> UINT16 .)
    UNLESS          reduce using rule 52 (integer -> UINT16 .)
    WHILE           reduce using rule 52 (integer -> UINT16 .)
    UNTIL           reduce using rule 52 (integer -> UINT16 .)
    LOOP            reduce using rule 52 (integer -> UINT16 .)
    LPAREN          reduce using rule 52 (integer -> UINT16 .)
    LBRACKET        reduce using rule 52 (integer -> UINT16 .)
    INTNUMBER       reduce using rule 52 (integer -> UINT16 .)
    FLOATNUMBER     reduce using rule 52 (integer -> UINT16 .)
    CHAR            reduce using rule 52 (integer -> UINT16 .)
    TRUE            reduce using rule 52 (integer -> UINT16 .)
    FALSE           reduce using rule 52 (integer -> UINT16 .)
    STRING          reduce using rule 52 (integer -> UINT16 .)
    PLUS            reduce using rule 52 (integer -> UINT16 .)
    MINUS           reduce using rule 52 (integer -> UINT16 .)
    EXCLAMATION     reduce using rule 52 (integer -> UINT16 .)
    TILDE           reduce using rule 52 (integer -> UINT16 .)
    ASSIGN          reduce using rule 52 (integer -> UINT16 .)
    COMMA           reduce using rule 52 (integer -> UINT16 .)
    RPAREN          reduce using rule 52 (integer -> UINT16 .)


state 158

    (53) integer -> UINT32 .

    NEWLINE         reduce using rule 53 (integer -> UINT32 .)
    ID              reduce using rule 53 (integer -> UINT32 .)
    CASE            reduce using rule 53 (integer -> UINT32 .)
    RETURN          reduce using rule 53 (integer -> UINT32 .)
    BREAK           reduce using rule 53 (integer -> UINT32 .)
    NEXT            reduce using rule 53 (integer -> UINT32 .)
    UNDERSCORE      reduce using rule 53 (integer -> UINT32 .)
    ASTERISK        reduce using rule 53 (integer -> UINT32 .)
    IF              reduce using rule 53 (integer -> UINT32 .)
    UNLESS          reduce using rule 53 (integer -> UINT32 .)
    WHILE           reduce using rule 53 (integer -> UINT32 .)
    UNTIL           reduce using rule 53 (integer -> UINT32 .)
    LOOP            reduce using rule 53 (integer -> UINT32 .)
    LPAREN          reduce using rule 53 (integer -> UINT32 .)
    LBRACKET        reduce using rule 53 (integer -> UINT32 .)
    INTNUMBER       reduce using rule 53 (integer -> UINT32 .)
    FLOATNUMBER     reduce using rule 53 (integer -> UINT32 .)
    CHAR            reduce using rule 53 (integer -> UINT32 .)
    TRUE            reduce using rule 53 (integer -> UINT32 .)
    FALSE           reduce using rule 53 (integer -> UINT32 .)
    STRING          reduce using rule 53 (integer -> UINT32 .)
    PLUS            reduce using rule 53 (integer -> UINT32 .)
    MINUS           reduce using rule 53 (integer -> UINT32 .)
    EXCLAMATION     reduce using rule 53 (integer -> UINT32 .)
    TILDE           reduce using rule 53 (integer -> UINT32 .)
    ASSIGN          reduce using rule 53 (integer -> UINT32 .)
    COMMA           reduce using rule 53 (integer -> UINT32 .)
    RPAREN          reduce using rule 53 (integer -> UINT32 .)


state 159

    (54) integer -> UINT64 .

    NEWLINE         reduce using rule 54 (integer -> UINT64 .)
    ID              reduce using rule 54 (integer -> UINT64 .)
    CASE            reduce using rule 54 (integer -> UINT64 .)
    RETURN          reduce using rule 54 (integer -> UINT64 .)
    BREAK           reduce using rule 54 (integer -> UINT64 .)
    NEXT            reduce using rule 54 (integer -> UINT64 .)
    UNDERSCORE      reduce using rule 54 (integer -> UINT64 .)
    ASTERISK        reduce using rule 54 (integer -> UINT64 .)
    IF              reduce using rule 54 (integer -> UINT64 .)
    UNLESS          reduce using rule 54 (integer -> UINT64 .)
    WHILE           reduce using rule 54 (integer -> UINT64 .)
    UNTIL           reduce using rule 54 (integer -> UINT64 .)
    LOOP            reduce using rule 54 (integer -> UINT64 .)
    LPAREN          reduce using rule 54 (integer -> UINT64 .)
    LBRACKET        reduce using rule 54 (integer -> UINT64 .)
    INTNUMBER       reduce using rule 54 (integer -> UINT64 .)
    FLOATNUMBER     reduce using rule 54 (integer -> UINT64 .)
    CHAR            reduce using rule 54 (integer -> UINT64 .)
    TRUE            reduce using rule 54 (integer -> UINT64 .)
    FALSE           reduce using rule 54 (integer -> UINT64 .)
    STRING          reduce using rule 54 (integer -> UINT64 .)
    PLUS            reduce using rule 54 (integer -> UINT64 .)
    MINUS           reduce using rule 54 (integer -> UINT64 .)
    EXCLAMATION     reduce using rule 54 (integer -> UINT64 .)
    TILDE           reduce using rule 54 (integer -> UINT64 .)
    ASSIGN          reduce using rule 54 (integer -> UINT64 .)
    COMMA           reduce using rule 54 (integer -> UINT64 .)
    RPAREN          reduce using rule 54 (integer -> UINT64 .)


state 160

    (55) integer -> UINT128 .

    NEWLINE         reduce using rule 55 (integer -> UINT128 .)
    ID              reduce using rule 55 (integer -> UINT128 .)
    CASE            reduce using rule 55 (integer -> UINT128 .)
    RETURN          reduce using rule 55 (integer -> UINT128 .)
    BREAK           reduce using rule 55 (integer -> UINT128 .)
    NEXT            reduce using rule 55 (integer -> UINT128 .)
    UNDERSCORE      reduce using rule 55 (integer -> UINT128 .)
    ASTERISK        reduce using rule 55 (integer -> UINT128 .)
    IF              reduce using rule 55 (integer -> UINT128 .)
    UNLESS          reduce using rule 55 (integer -> UINT128 .)
    WHILE           reduce using rule 55 (integer -> UINT128 .)
    UNTIL           reduce using rule 55 (integer -> UINT128 .)
    LOOP            reduce using rule 55 (integer -> UINT128 .)
    LPAREN          reduce using rule 55 (integer -> UINT128 .)
    LBRACKET        reduce using rule 55 (integer -> UINT128 .)
    INTNUMBER       reduce using rule 55 (integer -> UINT128 .)
    FLOATNUMBER     reduce using rule 55 (integer -> UINT128 .)
    CHAR            reduce using rule 55 (integer -> UINT128 .)
    TRUE            reduce using rule 55 (integer -> UINT128 .)
    FALSE           reduce using rule 55 (integer -> UINT128 .)
    STRING          reduce using rule 55 (integer -> UINT128 .)
    PLUS            reduce using rule 55 (integer -> UINT128 .)
    MINUS           reduce using rule 55 (integer -> UINT128 .)
    EXCLAMATION     reduce using rule 55 (integer -> UINT128 .)
    TILDE           reduce using rule 55 (integer -> UINT128 .)
    ASSIGN          reduce using rule 55 (integer -> UINT128 .)
    COMMA           reduce using rule 55 (integer -> UINT128 .)
    RPAREN          reduce using rule 55 (integer -> UINT128 .)


state 161

    (56) float -> FLOAT .

    NEWLINE         reduce using rule 56 (float -> FLOAT .)
    ID              reduce using rule 56 (float -> FLOAT .)
    CASE            reduce using rule 56 (float -> FLOAT .)
    RETURN          reduce using rule 56 (float -> FLOAT .)
    BREAK           reduce using rule 56 (float -> FLOAT .)
    NEXT            reduce using rule 56 (float -> FLOAT .)
    UNDERSCORE      reduce using rule 56 (float -> FLOAT .)
    ASTERISK        reduce using rule 56 (float -> FLOAT .)
    IF              reduce using rule 56 (float -> FLOAT .)
    UNLESS          reduce using rule 56 (float -> FLOAT .)
    WHILE           reduce using rule 56 (float -> FLOAT .)
    UNTIL           reduce using rule 56 (float -> FLOAT .)
    LOOP            reduce using rule 56 (float -> FLOAT .)
    LPAREN          reduce using rule 56 (float -> FLOAT .)
    LBRACKET        reduce using rule 56 (float -> FLOAT .)
    INTNUMBER       reduce using rule 56 (float -> FLOAT .)
    FLOATNUMBER     reduce using rule 56 (float -> FLOAT .)
    CHAR            reduce using rule 56 (float -> FLOAT .)
    TRUE            reduce using rule 56 (float -> FLOAT .)
    FALSE           reduce using rule 56 (float -> FLOAT .)
    STRING          reduce using rule 56 (float -> FLOAT .)
    PLUS            reduce using rule 56 (float -> FLOAT .)
    MINUS           reduce using rule 56 (float -> FLOAT .)
    EXCLAMATION     reduce using rule 56 (float -> FLOAT .)
    TILDE           reduce using rule 56 (float -> FLOAT .)
    ASSIGN          reduce using rule 56 (float -> FLOAT .)
    COMMA           reduce using rule 56 (float -> FLOAT .)
    RPAREN          reduce using rule 56 (float -> FLOAT .)


state 162

    (57) float -> FLOAT32 .

    NEWLINE         reduce using rule 57 (float -> FLOAT32 .)
    ID              reduce using rule 57 (float -> FLOAT32 .)
    CASE            reduce using rule 57 (float -> FLOAT32 .)
    RETURN          reduce using rule 57 (float -> FLOAT32 .)
    BREAK           reduce using rule 57 (float -> FLOAT32 .)
    NEXT            reduce using rule 57 (float -> FLOAT32 .)
    UNDERSCORE      reduce using rule 57 (float -> FLOAT32 .)
    ASTERISK        reduce using rule 57 (float -> FLOAT32 .)
    IF              reduce using rule 57 (float -> FLOAT32 .)
    UNLESS          reduce using rule 57 (float -> FLOAT32 .)
    WHILE           reduce using rule 57 (float -> FLOAT32 .)
    UNTIL           reduce using rule 57 (float -> FLOAT32 .)
    LOOP            reduce using rule 57 (float -> FLOAT32 .)
    LPAREN          reduce using rule 57 (float -> FLOAT32 .)
    LBRACKET        reduce using rule 57 (float -> FLOAT32 .)
    INTNUMBER       reduce using rule 57 (float -> FLOAT32 .)
    FLOATNUMBER     reduce using rule 57 (float -> FLOAT32 .)
    CHAR            reduce using rule 57 (float -> FLOAT32 .)
    TRUE            reduce using rule 57 (float -> FLOAT32 .)
    FALSE           reduce using rule 57 (float -> FLOAT32 .)
    STRING          reduce using rule 57 (float -> FLOAT32 .)
    PLUS            reduce using rule 57 (float -> FLOAT32 .)
    MINUS           reduce using rule 57 (float -> FLOAT32 .)
    EXCLAMATION     reduce using rule 57 (float -> FLOAT32 .)
    TILDE           reduce using rule 57 (float -> FLOAT32 .)
    ASSIGN          reduce using rule 57 (float -> FLOAT32 .)
    COMMA           reduce using rule 57 (float -> FLOAT32 .)
    RPAREN          reduce using rule 57 (float -> FLOAT32 .)


state 163

    (58) float -> FLOAT64 .

    NEWLINE         reduce using rule 58 (float -> FLOAT64 .)
    ID              reduce using rule 58 (float -> FLOAT64 .)
    CASE            reduce using rule 58 (float -> FLOAT64 .)
    RETURN          reduce using rule 58 (float -> FLOAT64 .)
    BREAK           reduce using rule 58 (float -> FLOAT64 .)
    NEXT            reduce using rule 58 (float -> FLOAT64 .)
    UNDERSCORE      reduce using rule 58 (float -> FLOAT64 .)
    ASTERISK        reduce using rule 58 (float -> FLOAT64 .)
    IF              reduce using rule 58 (float -> FLOAT64 .)
    UNLESS          reduce using rule 58 (float -> FLOAT64 .)
    WHILE           reduce using rule 58 (float -> FLOAT64 .)
    UNTIL           reduce using rule 58 (float -> FLOAT64 .)
    LOOP            reduce using rule 58 (float -> FLOAT64 .)
    LPAREN          reduce using rule 58 (float -> FLOAT64 .)
    LBRACKET        reduce using rule 58 (float -> FLOAT64 .)
    INTNUMBER       reduce using rule 58 (float -> FLOAT64 .)
    FLOATNUMBER     reduce using rule 58 (float -> FLOAT64 .)
    CHAR            reduce using rule 58 (float -> FLOAT64 .)
    TRUE            reduce using rule 58 (float -> FLOAT64 .)
    FALSE           reduce using rule 58 (float -> FLOAT64 .)
    STRING          reduce using rule 58 (float -> FLOAT64 .)
    PLUS            reduce using rule 58 (float -> FLOAT64 .)
    MINUS           reduce using rule 58 (float -> FLOAT64 .)
    EXCLAMATION     reduce using rule 58 (float -> FLOAT64 .)
    TILDE           reduce using rule 58 (float -> FLOAT64 .)
    ASSIGN          reduce using rule 58 (float -> FLOAT64 .)
    COMMA           reduce using rule 58 (float -> FLOAT64 .)
    RPAREN          reduce using rule 58 (float -> FLOAT64 .)


state 164

    (59) boolean -> BOOL .

    NEWLINE         reduce using rule 59 (boolean -> BOOL .)
    ID              reduce using rule 59 (boolean -> BOOL .)
    CASE            reduce using rule 59 (boolean -> BOOL .)
    RETURN          reduce using rule 59 (boolean -> BOOL .)
    BREAK           reduce using rule 59 (boolean -> BOOL .)
    NEXT            reduce using rule 59 (boolean -> BOOL .)
    UNDERSCORE      reduce using rule 59 (boolean -> BOOL .)
    ASTERISK        reduce using rule 59 (boolean -> BOOL .)
    IF              reduce using rule 59 (boolean -> BOOL .)
    UNLESS          reduce using rule 59 (boolean -> BOOL .)
    WHILE           reduce using rule 59 (boolean -> BOOL .)
    UNTIL           reduce using rule 59 (boolean -> BOOL .)
    LOOP            reduce using rule 59 (boolean -> BOOL .)
    LPAREN          reduce using rule 59 (boolean -> BOOL .)
    LBRACKET        reduce using rule 59 (boolean -> BOOL .)
    INTNUMBER       reduce using rule 59 (boolean -> BOOL .)
    FLOATNUMBER     reduce using rule 59 (boolean -> BOOL .)
    CHAR            reduce using rule 59 (boolean -> BOOL .)
    TRUE            reduce using rule 59 (boolean -> BOOL .)
    FALSE           reduce using rule 59 (boolean -> BOOL .)
    STRING          reduce using rule 59 (boolean -> BOOL .)
    PLUS            reduce using rule 59 (boolean -> BOOL .)
    MINUS           reduce using rule 59 (boolean -> BOOL .)
    EXCLAMATION     reduce using rule 59 (boolean -> BOOL .)
    TILDE           reduce using rule 59 (boolean -> BOOL .)
    ASSIGN          reduce using rule 59 (boolean -> BOOL .)
    COMMA           reduce using rule 59 (boolean -> BOOL .)
    RPAREN          reduce using rule 59 (boolean -> BOOL .)


state 165

    (88) ternary_expression -> logical_or_expression QMARK expression . TCOLON expression

    TCOLON          shift and go to state 217


state 166

    (91) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (93) logical_and_expression -> logical_and_expression . AND equality_expression

    QMARK           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONSTANT        reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MODULE          reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DEF             reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    $end            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOT             reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEWLINE         reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    END             reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TCOLON          reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTERP_END      reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHEN            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSIF           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSE            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ID              reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CASE            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RETURN          reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    BREAK           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEXT            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNDERSCORE      reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASTERISK        reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IF              reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNLESS          reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHILE           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNTIL           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LOOP            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LPAREN          reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACKET        reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTNUMBER       reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FLOATNUMBER     reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CHAR            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRUE            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FALSE           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRING          reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    PLUS            reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MINUS           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    EXCLAMATION     reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TILDE           reduce using rule 91 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 78


state 167

    (80) assignment_expression -> assignment_target ASSIGN expression .

    CONSTANT        reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    MODULE          reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    DEF             reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    $end            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    RPAREN          reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    COMMA           reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACKET        reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    DOT             reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    NEWLINE         reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    END             reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    TCOLON          reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    INTERP_END      reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    WHEN            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSIF           reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSE            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    ID              reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    CASE            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    RETURN          reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    BREAK           reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    NEXT            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    UNDERSCORE      reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    ASTERISK        reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    IF              reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    UNLESS          reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    WHILE           reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    UNTIL           reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    LOOP            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    LPAREN          reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACKET        reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    INTNUMBER       reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    FLOATNUMBER     reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    CHAR            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    TRUE            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    FALSE           reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    STRING          reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    PLUS            reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    MINUS           reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    EXCLAMATION     reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)
    TILDE           reduce using rule 80 (assignment_expression -> assignment_target ASSIGN expression .)


state 168

    (81) assignment_expression -> assignment_target PLUS_ASSIGN expression .

    CONSTANT        reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MODULE          reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DEF             reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    $end            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    COMMA           reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DOT             reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEWLINE         reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    END             reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TCOLON          reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTERP_END      reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHEN            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSE            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ID              reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CASE            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RETURN          reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    BREAK           reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEXT            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ASTERISK        reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    IF              reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNLESS          reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHILE           reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNTIL           reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LOOP            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LPAREN          reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CHAR            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TRUE            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FALSE           reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    STRING          reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    PLUS            reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MINUS           reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TILDE           reduce using rule 81 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)


state 169

    (82) assignment_expression -> assignment_target MINUS_ASSIGN expression .

    CONSTANT        reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MODULE          reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DEF             reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    $end            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    COMMA           reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DOT             reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEWLINE         reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    END             reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TCOLON          reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTERP_END      reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHEN            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSE            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ID              reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CASE            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RETURN          reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    BREAK           reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEXT            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ASTERISK        reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    IF              reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNLESS          reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHILE           reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNTIL           reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LOOP            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LPAREN          reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CHAR            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TRUE            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FALSE           reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    STRING          reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    PLUS            reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MINUS           reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TILDE           reduce using rule 82 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)


state 170

    (83) assignment_expression -> assignment_target MULTI_ASSIGN expression .

    CONSTANT        reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MODULE          reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DEF             reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    $end            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RPAREN          reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    COMMA           reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACKET        reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DOT             reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEWLINE         reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    END             reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TCOLON          reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTERP_END      reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHEN            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSIF           reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSE            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ID              reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CASE            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RETURN          reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    BREAK           reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEXT            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNDERSCORE      reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ASTERISK        reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    IF              reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNLESS          reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHILE           reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNTIL           reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LOOP            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LPAREN          reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACKET        reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTNUMBER       reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CHAR            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TRUE            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FALSE           reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    STRING          reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    PLUS            reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MINUS           reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    EXCLAMATION     reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TILDE           reduce using rule 83 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)


state 171

    (84) assignment_expression -> assignment_target DIVIDE_ASSIGN expression .

    CONSTANT        reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MODULE          reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DEF             reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    $end            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACKET        reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DOT             reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEWLINE         reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    END             reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TCOLON          reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTERP_END      reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHEN            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ID              reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    BREAK           reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEXT            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNDERSCORE      reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ASTERISK        reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    IF              reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNLESS          reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHILE           reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNTIL           reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LOOP            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LPAREN          reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTNUMBER       reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CHAR            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TRUE            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FALSE           reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    PLUS            reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MINUS           reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    EXCLAMATION     reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TILDE           reduce using rule 84 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)


state 172

    (93) logical_and_expression -> logical_and_expression AND equality_expression .
    (95) equality_expression -> equality_expression . EQUAL relational_expression
    (96) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (97) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    QMARK           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONSTANT        reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MODULE          reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEF             reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    $end            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOT             reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEWLINE         reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    END             reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TCOLON          reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTERP_END      reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHEN            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSIF           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSE            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ID              reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CASE            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RETURN          reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    BREAK           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEXT            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNDERSCORE      reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASTERISK        reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IF              reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNLESS          reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHILE           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNTIL           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LOOP            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACKET        reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTNUMBER       reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOATNUMBER     reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRUE            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FALSE           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRING          reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    PLUS            reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MINUS           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EXCLAMATION     reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TILDE           reduce using rule 93 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQUAL           shift and go to state 81
    NOT_EQUAL       shift and go to state 82
    TIPO_EQUAL      shift and go to state 83


state 173

    (95) equality_expression -> equality_expression EQUAL relational_expression .
    (99) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (100) relational_expression -> relational_expression . LESS_THAN additive_expression
    (101) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (102) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    QMARK           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONSTANT        reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    MODULE          reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    DEF             reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    $end            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACKET        reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOT             reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEWLINE         reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    END             reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    TCOLON          reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTERP_END      reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHEN            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSIF           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSE            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    ID              reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    CASE            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    RETURN          reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    BREAK           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEXT            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    ASTERISK        reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    IF              reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNLESS          reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHILE           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNTIL           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOOP            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    LPAREN          reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACKET        reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTNUMBER       reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    CHAR            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    TRUE            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    FALSE           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    PLUS            reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    MINUS           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    TILDE           reduce using rule 95 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 89
    LESS_THAN       shift and go to state 90
    GREATER_EQUAL   shift and go to state 91
    LESS_EQUAL      shift and go to state 92


state 174

    (96) equality_expression -> equality_expression NOT_EQUAL relational_expression .
    (99) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (100) relational_expression -> relational_expression . LESS_THAN additive_expression
    (101) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (102) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    AND             reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    QMARK           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    OR              reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CONSTANT        reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MODULE          reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DEF             reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    $end            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RPAREN          reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    COMMA           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACKET        reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOT             reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEWLINE         reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    END             reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TCOLON          reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTERP_END      reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHEN            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSIF           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSE            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ID              reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CASE            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RETURN          reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    BREAK           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEXT            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ASTERISK        reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    IF              reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNLESS          reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHILE           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNTIL           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LOOP            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LPAREN          reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACKET        reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CHAR            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TRUE            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FALSE           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    STRING          reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    PLUS            reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MINUS           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TILDE           reduce using rule 96 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 89
    LESS_THAN       shift and go to state 90
    GREATER_EQUAL   shift and go to state 91
    LESS_EQUAL      shift and go to state 92


state 175

    (97) equality_expression -> equality_expression TIPO_EQUAL relational_expression .
    (99) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (100) relational_expression -> relational_expression . LESS_THAN additive_expression
    (101) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (102) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    AND             reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    QMARK           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    OR              reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CONSTANT        reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MODULE          reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DEF             reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    $end            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RPAREN          reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    COMMA           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACKET        reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOT             reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEWLINE         reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    END             reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TCOLON          reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTERP_END      reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHEN            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSIF           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSE            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ID              reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CASE            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RETURN          reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    BREAK           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEXT            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ASTERISK        reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    IF              reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNLESS          reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHILE           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNTIL           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LOOP            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LPAREN          reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACKET        reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CHAR            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TRUE            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FALSE           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    STRING          reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    PLUS            reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MINUS           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TILDE           reduce using rule 97 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 89
    LESS_THAN       shift and go to state 90
    GREATER_EQUAL   shift and go to state 91
    LESS_EQUAL      shift and go to state 92


state 176

    (118) postfix_suffixes -> postfix_suffix postfix_suffixes .

    ASSIGN          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    PLUS_ASSIGN     reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MINUS_ASSIGN    reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MULTI_ASSIGN    reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DIVIDE_ASSIGN   reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    POTENCIACAO     reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MULTI           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DIVIDE          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MODULO          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    PLUS            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MINUS           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    GREATER_THAN    reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LESS_THAN       reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    GREATER_EQUAL   reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LESS_EQUAL      reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    EQUAL           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NOT_EQUAL       reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TIPO_EQUAL      reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    AND             reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    QMARK           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    OR              reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CONSTANT        reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MODULE          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DEF             reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    $end            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RPAREN          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    COMMA           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RBRACKET        reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DOT             reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NEWLINE         reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    END             reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TCOLON          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    INTERP_END      reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    WHEN            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ELSIF           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ELSE            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ID              reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CASE            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RETURN          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    BREAK           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NEXT            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNDERSCORE      reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ASTERISK        reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    IF              reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNLESS          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    WHILE           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNTIL           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LOOP            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LPAREN          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LBRACKET        reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    INTNUMBER       reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    FLOATNUMBER     reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CHAR            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TRUE            reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    FALSE           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    STRING          reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    EXCLAMATION     reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TILDE           reduce using rule 118 (postfix_suffixes -> postfix_suffix postfix_suffixes .)


state 177

    (120) postfix_suffix -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 218


state 178

    (121) postfix_suffix -> DOTDOT primary_expression .

    LBRACKET        reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    DOTDOT          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    DOTDOTDOT       reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    ASSIGN          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    PLUS_ASSIGN     reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    MINUS_ASSIGN    reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    MULTI_ASSIGN    reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    POTENCIACAO     reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    MULTI           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    DIVIDE          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    MODULO          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    PLUS            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    MINUS           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    GREATER_THAN    reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    LESS_THAN       reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    GREATER_EQUAL   reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    LESS_EQUAL      reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    EQUAL           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    NOT_EQUAL       reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    TIPO_EQUAL      reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    AND             reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    QMARK           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    OR              reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    CONSTANT        reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    MODULE          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    DEF             reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    $end            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    RPAREN          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    COMMA           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    RBRACKET        reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    DOT             reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    NEWLINE         reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    END             reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    TCOLON          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    INTERP_END      reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    WHEN            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    ELSIF           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    ELSE            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    ID              reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    CASE            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    RETURN          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    BREAK           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    NEXT            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    UNDERSCORE      reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    ASTERISK        reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    IF              reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    UNLESS          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    WHILE           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    UNTIL           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    LOOP            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    LPAREN          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    INTNUMBER       reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    FLOATNUMBER     reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    CHAR            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    TRUE            reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    FALSE           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    STRING          reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    EXCLAMATION     reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)
    TILDE           reduce using rule 121 (postfix_suffix -> DOTDOT primary_expression .)


state 179

    (122) postfix_suffix -> DOTDOTDOT primary_expression .

    LBRACKET        reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOTDOT          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOTDOTDOT       reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ASSIGN          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    PLUS_ASSIGN     reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MINUS_ASSIGN    reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MULTI_ASSIGN    reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    POTENCIACAO     reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MULTI           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DIVIDE          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MODULO          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    PLUS            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MINUS           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    GREATER_THAN    reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LESS_THAN       reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    GREATER_EQUAL   reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LESS_EQUAL      reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    EQUAL           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NOT_EQUAL       reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TIPO_EQUAL      reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    AND             reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    QMARK           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    OR              reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CONSTANT        reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MODULE          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DEF             reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    $end            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RPAREN          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    COMMA           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RBRACKET        reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOT             reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NEWLINE         reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    END             reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TCOLON          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    INTERP_END      reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    WHEN            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ELSIF           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ELSE            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ID              reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CASE            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RETURN          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    BREAK           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NEXT            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNDERSCORE      reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ASTERISK        reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    IF              reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNLESS          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    WHILE           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNTIL           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LOOP            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LPAREN          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    INTNUMBER       reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    FLOATNUMBER     reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CHAR            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TRUE            reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    FALSE           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    STRING          reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    EXCLAMATION     reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TILDE           reduce using rule 122 (postfix_suffix -> DOTDOTDOT primary_expression .)


state 180

    (99) relational_expression -> relational_expression GREATER_THAN additive_expression .
    (104) additive_expression -> additive_expression . PLUS multiplicative_expression
    (105) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_THAN       reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EQUAL           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    AND             reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    QMARK           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    OR              reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CONSTANT        reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    MODULE          reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DEF             reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    $end            reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RPAREN          reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    COMMA           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACKET        reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOT             reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEWLINE         reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    END             reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TCOLON          reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTERP_END      reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHEN            reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSIF           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSE            reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ID              reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CASE            reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RETURN          reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    BREAK           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEXT            reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNDERSCORE      reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ASTERISK        reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    IF              reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNLESS          reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHILE           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNTIL           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LOOP            reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LPAREN          reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACKET        reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTNUMBER       reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CHAR            reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TRUE            reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FALSE           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    STRING          reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EXCLAMATION     reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TILDE           reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94

  ! PLUS            [ reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 99 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]


state 181

    (100) relational_expression -> relational_expression LESS_THAN additive_expression .
    (104) additive_expression -> additive_expression . PLUS multiplicative_expression
    (105) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_THAN       reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EQUAL           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    AND             reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    QMARK           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    OR              reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CONSTANT        reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    MODULE          reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DEF             reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    $end            reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RPAREN          reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    COMMA           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACKET        reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOT             reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEWLINE         reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    END             reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TCOLON          reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTERP_END      reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHEN            reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSIF           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSE            reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ID              reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CASE            reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RETURN          reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    BREAK           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEXT            reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNDERSCORE      reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ASTERISK        reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    IF              reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNLESS          reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHILE           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNTIL           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LOOP            reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LPAREN          reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACKET        reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTNUMBER       reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CHAR            reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TRUE            reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FALSE           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    STRING          reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EXCLAMATION     reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TILDE           reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94

  ! PLUS            [ reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 100 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]


state 182

    (101) relational_expression -> relational_expression GREATER_EQUAL additive_expression .
    (104) additive_expression -> additive_expression . PLUS multiplicative_expression
    (105) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EQUAL           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    AND             reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    QMARK           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    OR              reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CONSTANT        reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    MODULE          reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DEF             reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    $end            reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RPAREN          reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    COMMA           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACKET        reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOT             reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEWLINE         reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    END             reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TCOLON          reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTERP_END      reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHEN            reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSIF           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSE            reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ID              reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CASE            reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RETURN          reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    BREAK           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEXT            reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ASTERISK        reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    IF              reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNLESS          reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHILE           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNTIL           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LOOP            reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LPAREN          reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACKET        reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CHAR            reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TRUE            reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FALSE           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    STRING          reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TILDE           reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94

  ! PLUS            [ reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 101 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]


state 183

    (102) relational_expression -> relational_expression LESS_EQUAL additive_expression .
    (104) additive_expression -> additive_expression . PLUS multiplicative_expression
    (105) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EQUAL           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    AND             reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    QMARK           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    OR              reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CONSTANT        reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    MODULE          reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DEF             reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    $end            reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RPAREN          reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    COMMA           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACKET        reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOT             reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEWLINE         reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    END             reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TCOLON          reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTERP_END      reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHEN            reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSIF           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSE            reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ID              reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CASE            reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RETURN          reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    BREAK           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEXT            reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ASTERISK        reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    IF              reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNLESS          reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHILE           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNTIL           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LOOP            reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LPAREN          reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACKET        reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CHAR            reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TRUE            reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FALSE           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    STRING          reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TILDE           reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94

  ! PLUS            [ reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 102 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]


state 184

    (104) additive_expression -> additive_expression PLUS multiplicative_expression .
    (107) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (108) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (109) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QMARK           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONSTANT        reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MODULE          reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DEF             reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    $end            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOT             reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEWLINE         reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    END             reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TCOLON          reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTERP_END      reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHEN            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSIF           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ID              reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CASE            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RETURN          reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BREAK           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEXT            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASTERISK        reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IF              reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNLESS          reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHILE           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNTIL           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOOP            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LPAREN          reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACKET        reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTNUMBER       reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CHAR            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TRUE            reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FALSE           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TILDE           reduce using rule 104 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTI           shift and go to state 100
    DIVIDE          shift and go to state 101
    MODULO          shift and go to state 102


state 185

    (105) additive_expression -> additive_expression MINUS multiplicative_expression .
    (107) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (108) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (109) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QMARK           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONSTANT        reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MODULE          reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DEF             reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    $end            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOT             reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEWLINE         reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    END             reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TCOLON          reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTERP_END      reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHEN            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSIF           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ID              reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CASE            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RETURN          reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BREAK           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEXT            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASTERISK        reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IF              reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNLESS          reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHILE           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNTIL           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOOP            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LPAREN          reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACKET        reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTNUMBER       reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CHAR            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TRUE            reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FALSE           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRING          reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TILDE           reduce using rule 105 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTI           shift and go to state 100
    DIVIDE          shift and go to state 101
    MODULO          shift and go to state 102


state 186

    (127) expression_between_parentesis -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DOTDOTDOT       reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MULTI_ASSIGN    reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    POTENCIACAO     reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MULTI           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    TIPO_EQUAL      reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    AND             reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    OR              reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    CONSTANT        reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DEF             reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    $end            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    DOT             reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    END             reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    TCOLON          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    INTERP_END      reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ID              reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    CASE            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    NEXT            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    UNDERSCORE      reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    IF              reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    INTNUMBER       reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    STRING          reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 127 (expression_between_parentesis -> LPAREN expression RPAREN .)


state 187

    (128) array_literal -> LBRACKET opt_expression_list RBRACKET .

    LBRACKET        reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOT          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOTDOT       reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASSIGN          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS_ASSIGN     reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS_ASSIGN    reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI_ASSIGN    reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    POTENCIACAO     reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULO          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_THAN    reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_THAN       reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_EQUAL   reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_EQUAL      reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EQUAL           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NOT_EQUAL       reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TIPO_EQUAL      reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    AND             reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    QMARK           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    OR              reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CONSTANT        reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULE          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DEF             reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    $end            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RPAREN          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    COMMA           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACKET        reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOT             reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEWLINE         reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    END             reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TCOLON          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTERP_END      reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHEN            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSIF           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSE            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ID              reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CASE            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RETURN          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    BREAK           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEXT            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNDERSCORE      reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASTERISK        reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    IF              reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNLESS          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHILE           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNTIL           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LOOP            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LPAREN          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTNUMBER       reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FLOATNUMBER     reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CHAR            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TRUE            reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FALSE           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    STRING          reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EXCLAMATION     reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TILDE           reduce using rule 128 (array_literal -> LBRACKET opt_expression_list RBRACKET .)


state 188

    (70) expression_list -> expression_list COMMA . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 219
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 189

    (107) multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .
    (111) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DIVIDE          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULO          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    PLUS            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MINUS           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_THAN    reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_THAN       reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_EQUAL      reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EQUAL           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NOT_EQUAL       reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    AND             reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    QMARK           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    OR              reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CONSTANT        reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULE          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DEF             reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    $end            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RPAREN          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    COMMA           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACKET        reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOT             reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEWLINE         reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    END             reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TCOLON          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTERP_END      reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHEN            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSIF           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSE            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ID              reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CASE            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RETURN          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    BREAK           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEXT            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNDERSCORE      reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ASTERISK        reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    IF              reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNLESS          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHILE           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNTIL           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LOOP            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LPAREN          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACKET        reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTNUMBER       reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FLOATNUMBER     reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CHAR            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TRUE            reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FALSE           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    STRING          reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EXCLAMATION     reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TILDE           reduce using rule 107 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    POTENCIACAO     shift and go to state 107


state 190

    (108) multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .
    (111) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DIVIDE          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULO          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    PLUS            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MINUS           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_THAN    reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_THAN       reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_EQUAL      reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EQUAL           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NOT_EQUAL       reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    AND             reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    QMARK           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    OR              reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CONSTANT        reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULE          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DEF             reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    $end            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RPAREN          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    COMMA           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACKET        reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOT             reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEWLINE         reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    END             reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TCOLON          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTERP_END      reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHEN            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSIF           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSE            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ID              reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CASE            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RETURN          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    BREAK           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEXT            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNDERSCORE      reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ASTERISK        reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    IF              reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNLESS          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHILE           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNTIL           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LOOP            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LPAREN          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACKET        reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTNUMBER       reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FLOATNUMBER     reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CHAR            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TRUE            reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FALSE           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    STRING          reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EXCLAMATION     reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TILDE           reduce using rule 108 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    POTENCIACAO     shift and go to state 107


state 191

    (109) multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .
    (111) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DIVIDE          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULO          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    PLUS            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MINUS           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_THAN    reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_THAN       reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_EQUAL      reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EQUAL           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NOT_EQUAL       reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    AND             reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    QMARK           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    OR              reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CONSTANT        reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULE          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DEF             reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    $end            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RPAREN          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    COMMA           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACKET        reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOT             reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEWLINE         reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    END             reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TCOLON          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTERP_END      reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHEN            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSIF           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSE            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ID              reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CASE            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RETURN          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    BREAK           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEXT            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNDERSCORE      reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ASTERISK        reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    IF              reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNLESS          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHILE           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNTIL           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LOOP            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LPAREN          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACKET        reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTNUMBER       reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FLOATNUMBER     reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CHAR            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TRUE            reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FALSE           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    STRING          reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EXCLAMATION     reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TILDE           reduce using rule 109 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    POTENCIACAO     shift and go to state 107


state 192

    (130) string_literal -> STRING INTERP_START expression . INTERP_END string_literal

    INTERP_END      shift and go to state 220


state 193

    (111) potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .

    POTENCIACAO     reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MULTI           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DIVIDE          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULO          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    PLUS            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MINUS           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_THAN    reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_THAN       reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_EQUAL   reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_EQUAL      reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EQUAL           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NOT_EQUAL       reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TIPO_EQUAL      reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    AND             reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    QMARK           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    OR              reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CONSTANT        reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULE          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DEF             reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    $end            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RPAREN          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    COMMA           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACKET        reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOT             reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEWLINE         reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    END             reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TCOLON          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTERP_END      reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHEN            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSIF           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSE            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ID              reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CASE            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RETURN          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    BREAK           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEXT            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNDERSCORE      reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ASTERISK        reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    IF              reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNLESS          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHILE           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNTIL           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LOOP            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LPAREN          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACKET        reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTNUMBER       reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FLOATNUMBER     reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CHAR            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TRUE            reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FALSE           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    STRING          reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EXCLAMATION     reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TILDE           reduce using rule 111 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)


state 194

    (71) variable_declaration -> ID types . ASSIGN expression

    ASSIGN          shift and go to state 221


state 195

    (72) variable_declaration -> ID ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 222
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 196

    (73) variable_declaration -> ID COMMA . list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) list_of_identifiers -> . ID
    (75) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 223

    list_of_identifiers            shift and go to state 224

state 197

    (24) module -> MODULE ID NEWLINE statements END .

    MODULE          reduce using rule 24 (module -> MODULE ID NEWLINE statements END .)
    DEF             reduce using rule 24 (module -> MODULE ID NEWLINE statements END .)
    $end            reduce using rule 24 (module -> MODULE ID NEWLINE statements END .)


state 198

    (132) statements -> statement NEWLINE . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statement                      shift and go to state 112
    statements                     shift and go to state 225
    expression                     shift and go to state 113
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 199

    (157) iterator -> expression DOT . MULTI statements_block
    (158) iterator -> expression DOT . EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> expression DOT . EACH LBRACE PIPE ID PIPE RBRACE statements_block

    MULTI           shift and go to state 226
    EACH            shift and go to state 227


state 200

    (160) case_structure -> CASE expression . when_list opt_else END
    (161) when_list -> . WHEN expression statements_block
    (162) when_list -> . when_list WHEN expression statements_block

    WHEN            shift and go to state 229

    when_list                      shift and go to state 228

state 201

    (163) return_statement -> RETURN opt_expression .

    NEWLINE         reduce using rule 163 (return_statement -> RETURN opt_expression .)
    END             reduce using rule 163 (return_statement -> RETURN opt_expression .)
    ELSIF           reduce using rule 163 (return_statement -> RETURN opt_expression .)
    ELSE            reduce using rule 163 (return_statement -> RETURN opt_expression .)
    WHEN            reduce using rule 163 (return_statement -> RETURN opt_expression .)


state 202

    (166) opt_expression -> expression .

    NEWLINE         reduce using rule 166 (opt_expression -> expression .)
    END             reduce using rule 166 (opt_expression -> expression .)
    ELSIF           reduce using rule 166 (opt_expression -> expression .)
    ELSE            reduce using rule 166 (opt_expression -> expression .)
    WHEN            reduce using rule 166 (opt_expression -> expression .)


state 203

    (167) opt_expression -> empty .

    NEWLINE         reduce using rule 167 (opt_expression -> empty .)
    END             reduce using rule 167 (opt_expression -> empty .)
    ELSIF           reduce using rule 167 (opt_expression -> empty .)
    ELSE            reduce using rule 167 (opt_expression -> empty .)
    WHEN            reduce using rule 167 (opt_expression -> empty .)


state 204

    (164) break_statement -> BREAK opt_expression .

    NEWLINE         reduce using rule 164 (break_statement -> BREAK opt_expression .)
    END             reduce using rule 164 (break_statement -> BREAK opt_expression .)
    ELSIF           reduce using rule 164 (break_statement -> BREAK opt_expression .)
    ELSE            reduce using rule 164 (break_statement -> BREAK opt_expression .)
    WHEN            reduce using rule 164 (break_statement -> BREAK opt_expression .)


state 205

    (165) next_statement -> NEXT opt_expression .

    NEWLINE         reduce using rule 165 (next_statement -> NEXT opt_expression .)
    END             reduce using rule 165 (next_statement -> NEXT opt_expression .)
    ELSIF           reduce using rule 165 (next_statement -> NEXT opt_expression .)
    ELSE            reduce using rule 165 (next_statement -> NEXT opt_expression .)
    WHEN            reduce using rule 165 (next_statement -> NEXT opt_expression .)


state 206

    (144) if_statement -> IF expression . statements_block opt_elsif opt_else END
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 230
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 207

    (145) unless_statement -> UNLESS expression . statements_block opt_else END
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 231
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 208

    (154) while -> WHILE expression . statements_block
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 232
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 209

    (155) until -> UNTIL expression . statements_block
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 233
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 210

    (156) loop -> LOOP statements_block .

    NEWLINE         reduce using rule 156 (loop -> LOOP statements_block .)
    END             reduce using rule 156 (loop -> LOOP statements_block .)
    ELSIF           reduce using rule 156 (loop -> LOOP statements_block .)
    ELSE            reduce using rule 156 (loop -> LOOP statements_block .)
    WHEN            reduce using rule 156 (loop -> LOOP statements_block .)


state 211

    (168) statements_block -> statements .

    NEWLINE         reduce using rule 168 (statements_block -> statements .)
    END             reduce using rule 168 (statements_block -> statements .)
    ELSIF           reduce using rule 168 (statements_block -> statements .)
    ELSE            reduce using rule 168 (statements_block -> statements .)
    WHEN            reduce using rule 168 (statements_block -> statements .)


state 212

    (34) argument -> ID COLON . types
    (36) argument -> ID COLON . types ASSIGN expression
    (39) types -> . STRING
    (40) types -> . CHAR
    (41) types -> . NIL
    (42) types -> . integer
    (43) types -> . float
    (44) types -> . boolean
    (45) integer -> . INT
    (46) integer -> . INT8
    (47) integer -> . INT16
    (48) integer -> . INT32
    (49) integer -> . INT64
    (50) integer -> . INT128
    (51) integer -> . UINT8
    (52) integer -> . UINT16
    (53) integer -> . UINT32
    (54) integer -> . UINT64
    (55) integer -> . UINT128
    (56) float -> . FLOAT
    (57) float -> . FLOAT32
    (58) float -> . FLOAT64
    (59) boolean -> . BOOL

    STRING          shift and go to state 144
    CHAR            shift and go to state 145
    NIL             shift and go to state 146
    INT             shift and go to state 150
    INT8            shift and go to state 151
    INT16           shift and go to state 152
    INT32           shift and go to state 153
    INT64           shift and go to state 154
    INT128          shift and go to state 155
    UINT8           shift and go to state 156
    UINT16          shift and go to state 157
    UINT32          shift and go to state 158
    UINT64          shift and go to state 159
    UINT128         shift and go to state 160
    FLOAT           shift and go to state 161
    FLOAT32         shift and go to state 162
    FLOAT64         shift and go to state 163
    BOOL            shift and go to state 164

    types                          shift and go to state 234
    integer                        shift and go to state 147
    float                          shift and go to state 148
    boolean                        shift and go to state 149

state 213

    (35) argument -> ID ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 235
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 214

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN . opt_return_type statements_block END
    (37) opt_return_type -> . COLON types
    (38) opt_return_type -> . empty
    (169) empty -> .

    COLON           shift and go to state 68
    ID              reduce using rule 169 (empty -> .)
    CASE            reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    NEXT            reduce using rule 169 (empty -> .)
    UNDERSCORE      reduce using rule 169 (empty -> .)
    ASTERISK        reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    UNLESS          reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    UNTIL           reduce using rule 169 (empty -> .)
    LOOP            reduce using rule 169 (empty -> .)
    LPAREN          reduce using rule 169 (empty -> .)
    LBRACKET        reduce using rule 169 (empty -> .)
    INTNUMBER       reduce using rule 169 (empty -> .)
    FLOATNUMBER     reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    PLUS            reduce using rule 169 (empty -> .)
    MINUS           reduce using rule 169 (empty -> .)
    EXCLAMATION     reduce using rule 169 (empty -> .)
    TILDE           reduce using rule 169 (empty -> .)

    opt_return_type                shift and go to state 236
    empty                          shift and go to state 69

state 215

    (32) argument_list -> argument COMMA . argument_list
    (31) argument_list -> . argument
    (32) argument_list -> . argument COMMA argument_list
    (33) argument -> . ID
    (34) argument -> . ID COLON types
    (35) argument -> . ID ASSIGN expression
    (36) argument -> . ID COLON types ASSIGN expression

    ID              shift and go to state 137

    argument                       shift and go to state 141
    argument_list                  shift and go to state 237

state 216

    (28) function -> DEF ID opt_return_type NEWLINE statements_block . END

    END             shift and go to state 238


state 217

    (88) ternary_expression -> logical_or_expression QMARK expression TCOLON . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    logical_or_expression          shift and go to state 35
    expression                     shift and go to state 239
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 218

    (120) postfix_suffix -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOTDOT          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOTDOTDOT       reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MULTI_ASSIGN    reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    POTENCIACAO     reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MULTI           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    GREATER_EQUAL   reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NOT_EQUAL       reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TIPO_EQUAL      reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    AND             reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    QMARK           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    OR              reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CONSTANT        reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MODULE          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DEF             reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    $end            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOT             reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NEWLINE         reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    END             reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TCOLON          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    INTERP_END      reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    WHEN            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ELSIF           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CASE            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NEXT            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNDERSCORE      reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ASTERISK        reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNLESS          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNTIL           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    INTNUMBER       reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    FLOATNUMBER     reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    STRING          reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    EXCLAMATION     reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TILDE           reduce using rule 120 (postfix_suffix -> LBRACKET expression RBRACKET .)


state 219

    (70) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 70 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 70 (expression_list -> expression_list COMMA expression .)


state 220

    (130) string_literal -> STRING INTERP_START expression INTERP_END . string_literal
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal

    STRING          shift and go to state 60

    string_literal                 shift and go to state 240

state 221

    (71) variable_declaration -> ID types ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 241
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 222

    (72) variable_declaration -> ID ASSIGN expression .

    NEWLINE         reduce using rule 72 (variable_declaration -> ID ASSIGN expression .)
    END             reduce using rule 72 (variable_declaration -> ID ASSIGN expression .)
    ELSIF           reduce using rule 72 (variable_declaration -> ID ASSIGN expression .)
    ELSE            reduce using rule 72 (variable_declaration -> ID ASSIGN expression .)
    WHEN            reduce using rule 72 (variable_declaration -> ID ASSIGN expression .)


state 223

    (74) list_of_identifiers -> ID .
    (75) list_of_identifiers -> ID . COMMA list_of_identifiers

    ASSIGN          reduce using rule 74 (list_of_identifiers -> ID .)
    COMMA           shift and go to state 242


state 224

    (73) variable_declaration -> ID COMMA list_of_identifiers . ASSIGN expression COMMA list_of_values

    ASSIGN          shift and go to state 243


state 225

    (132) statements -> statement NEWLINE statements .

    END             reduce using rule 132 (statements -> statement NEWLINE statements .)
    NEWLINE         reduce using rule 132 (statements -> statement NEWLINE statements .)
    ELSIF           reduce using rule 132 (statements -> statement NEWLINE statements .)
    ELSE            reduce using rule 132 (statements -> statement NEWLINE statements .)
    WHEN            reduce using rule 132 (statements -> statement NEWLINE statements .)


state 226

    (157) iterator -> expression DOT MULTI . statements_block
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 244
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 227

    (158) iterator -> expression DOT EACH . DO PIPE ID PIPE statements_block END
    (159) iterator -> expression DOT EACH . LBRACE PIPE ID PIPE RBRACE statements_block

    DO              shift and go to state 245
    LBRACE          shift and go to state 246


state 228

    (160) case_structure -> CASE expression when_list . opt_else END
    (162) when_list -> when_list . WHEN expression statements_block
    (148) opt_else -> . ELSE statements_block
    (149) opt_else -> . empty
    (169) empty -> .

    WHEN            shift and go to state 248
    ELSE            shift and go to state 249
    END             reduce using rule 169 (empty -> .)

    opt_else                       shift and go to state 247
    empty                          shift and go to state 250

state 229

    (161) when_list -> WHEN . expression statements_block
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 251
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 230

    (144) if_statement -> IF expression statements_block . opt_elsif opt_else END
    (146) opt_elsif -> . ELSIF expression statements_block opt_elsif
    (147) opt_elsif -> . empty
    (169) empty -> .

    ELSIF           shift and go to state 253
    ELSE            reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)

    opt_elsif                      shift and go to state 252
    empty                          shift and go to state 254

state 231

    (145) unless_statement -> UNLESS expression statements_block . opt_else END
    (148) opt_else -> . ELSE statements_block
    (149) opt_else -> . empty
    (169) empty -> .

    ELSE            shift and go to state 249
    END             reduce using rule 169 (empty -> .)

    opt_else                       shift and go to state 255
    empty                          shift and go to state 250

state 232

    (154) while -> WHILE expression statements_block .

    NEWLINE         reduce using rule 154 (while -> WHILE expression statements_block .)
    END             reduce using rule 154 (while -> WHILE expression statements_block .)
    ELSIF           reduce using rule 154 (while -> WHILE expression statements_block .)
    ELSE            reduce using rule 154 (while -> WHILE expression statements_block .)
    WHEN            reduce using rule 154 (while -> WHILE expression statements_block .)


state 233

    (155) until -> UNTIL expression statements_block .

    NEWLINE         reduce using rule 155 (until -> UNTIL expression statements_block .)
    END             reduce using rule 155 (until -> UNTIL expression statements_block .)
    ELSIF           reduce using rule 155 (until -> UNTIL expression statements_block .)
    ELSE            reduce using rule 155 (until -> UNTIL expression statements_block .)
    WHEN            reduce using rule 155 (until -> UNTIL expression statements_block .)


state 234

    (34) argument -> ID COLON types .
    (36) argument -> ID COLON types . ASSIGN expression

    COMMA           reduce using rule 34 (argument -> ID COLON types .)
    RPAREN          reduce using rule 34 (argument -> ID COLON types .)
    ASSIGN          shift and go to state 256


state 235

    (35) argument -> ID ASSIGN expression .

    COMMA           reduce using rule 35 (argument -> ID ASSIGN expression .)
    RPAREN          reduce using rule 35 (argument -> ID ASSIGN expression .)


state 236

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type . statements_block END
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements_block               shift and go to state 257
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    expression                     shift and go to state 113
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 237

    (32) argument_list -> argument COMMA argument_list .

    RPAREN          reduce using rule 32 (argument_list -> argument COMMA argument_list .)


state 238

    (28) function -> DEF ID opt_return_type NEWLINE statements_block END .

    DEF             reduce using rule 28 (function -> DEF ID opt_return_type NEWLINE statements_block END .)
    $end            reduce using rule 28 (function -> DEF ID opt_return_type NEWLINE statements_block END .)


state 239

    (88) ternary_expression -> logical_or_expression QMARK expression TCOLON expression .

    CONSTANT        reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    MODULE          reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    DEF             reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    $end            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RPAREN          reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    COMMA           reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RBRACKET        reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    DOT             reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    NEWLINE         reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    END             reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TCOLON          reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    INTERP_END      reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    WHEN            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ELSIF           reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ELSE            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ID              reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    CASE            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RETURN          reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    BREAK           reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    NEXT            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNDERSCORE      reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ASTERISK        reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    IF              reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNLESS          reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    WHILE           reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNTIL           reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LOOP            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LPAREN          reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LBRACKET        reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    INTNUMBER       reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    FLOATNUMBER     reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    CHAR            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TRUE            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    FALSE           reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    STRING          reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    PLUS            reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    MINUS           reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    EXCLAMATION     reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TILDE           reduce using rule 88 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)


state 240

    (130) string_literal -> STRING INTERP_START expression INTERP_END string_literal .

    LBRACKET        reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOTDOT          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOTDOTDOT       reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ASSIGN          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    PLUS_ASSIGN     reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MINUS_ASSIGN    reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MULTI_ASSIGN    reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DIVIDE_ASSIGN   reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    POTENCIACAO     reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MULTI           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DIVIDE          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MODULO          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    PLUS            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MINUS           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    GREATER_THAN    reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LESS_THAN       reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    GREATER_EQUAL   reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LESS_EQUAL      reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    EQUAL           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NOT_EQUAL       reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TIPO_EQUAL      reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    AND             reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    QMARK           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    OR              reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CONSTANT        reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    MODULE          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DEF             reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    $end            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RPAREN          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    COMMA           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RBRACKET        reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    DOT             reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NEWLINE         reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    END             reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TCOLON          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    INTERP_END      reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    WHEN            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ELSIF           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ELSE            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ID              reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CASE            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    RETURN          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    BREAK           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    NEXT            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNDERSCORE      reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    ASTERISK        reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    IF              reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNLESS          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    WHILE           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    UNTIL           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LOOP            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    LPAREN          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    INTNUMBER       reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    FLOATNUMBER     reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    CHAR            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TRUE            reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    FALSE           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    STRING          reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    EXCLAMATION     reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)
    TILDE           reduce using rule 130 (string_literal -> STRING INTERP_START expression INTERP_END string_literal .)


state 241

    (71) variable_declaration -> ID types ASSIGN expression .

    NEWLINE         reduce using rule 71 (variable_declaration -> ID types ASSIGN expression .)
    END             reduce using rule 71 (variable_declaration -> ID types ASSIGN expression .)
    ELSIF           reduce using rule 71 (variable_declaration -> ID types ASSIGN expression .)
    ELSE            reduce using rule 71 (variable_declaration -> ID types ASSIGN expression .)
    WHEN            reduce using rule 71 (variable_declaration -> ID types ASSIGN expression .)


state 242

    (75) list_of_identifiers -> ID COMMA . list_of_identifiers
    (74) list_of_identifiers -> . ID
    (75) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 223

    list_of_identifiers            shift and go to state 258

state 243

    (73) variable_declaration -> ID COMMA list_of_identifiers ASSIGN . expression COMMA list_of_values
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 259
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 244

    (157) iterator -> expression DOT MULTI statements_block .

    NEWLINE         reduce using rule 157 (iterator -> expression DOT MULTI statements_block .)
    END             reduce using rule 157 (iterator -> expression DOT MULTI statements_block .)
    ELSIF           reduce using rule 157 (iterator -> expression DOT MULTI statements_block .)
    ELSE            reduce using rule 157 (iterator -> expression DOT MULTI statements_block .)
    WHEN            reduce using rule 157 (iterator -> expression DOT MULTI statements_block .)


state 245

    (158) iterator -> expression DOT EACH DO . PIPE ID PIPE statements_block END

    PIPE            shift and go to state 260


state 246

    (159) iterator -> expression DOT EACH LBRACE . PIPE ID PIPE RBRACE statements_block

    PIPE            shift and go to state 261


state 247

    (160) case_structure -> CASE expression when_list opt_else . END

    END             shift and go to state 262


state 248

    (162) when_list -> when_list WHEN . expression statements_block
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 263
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 249

    (148) opt_else -> ELSE . statements_block
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    statements_block               shift and go to state 264
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    expression                     shift and go to state 113
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 250

    (149) opt_else -> empty .

    END             reduce using rule 149 (opt_else -> empty .)


state 251

    (161) when_list -> WHEN expression . statements_block
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 265
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 252

    (144) if_statement -> IF expression statements_block opt_elsif . opt_else END
    (148) opt_else -> . ELSE statements_block
    (149) opt_else -> . empty
    (169) empty -> .

    ELSE            shift and go to state 249
    END             reduce using rule 169 (empty -> .)

    opt_else                       shift and go to state 266
    empty                          shift and go to state 250

state 253

    (146) opt_elsif -> ELSIF . expression statements_block opt_elsif
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 267
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 254

    (147) opt_elsif -> empty .

    ELSE            reduce using rule 147 (opt_elsif -> empty .)
    END             reduce using rule 147 (opt_elsif -> empty .)


state 255

    (145) unless_statement -> UNLESS expression statements_block opt_else . END

    END             shift and go to state 268


state 256

    (36) argument -> ID COLON types ASSIGN . expression
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 269
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 257

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block . END

    END             shift and go to state 270


state 258

    (75) list_of_identifiers -> ID COMMA list_of_identifiers .

    ASSIGN          reduce using rule 75 (list_of_identifiers -> ID COMMA list_of_identifiers .)


state 259

    (73) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression . COMMA list_of_values

    COMMA           shift and go to state 271


state 260

    (158) iterator -> expression DOT EACH DO PIPE . ID PIPE statements_block END

    ID              shift and go to state 272


state 261

    (159) iterator -> expression DOT EACH LBRACE PIPE . ID PIPE RBRACE statements_block

    ID              shift and go to state 273


state 262

    (160) case_structure -> CASE expression when_list opt_else END .

    NEWLINE         reduce using rule 160 (case_structure -> CASE expression when_list opt_else END .)
    END             reduce using rule 160 (case_structure -> CASE expression when_list opt_else END .)
    ELSIF           reduce using rule 160 (case_structure -> CASE expression when_list opt_else END .)
    ELSE            reduce using rule 160 (case_structure -> CASE expression when_list opt_else END .)
    WHEN            reduce using rule 160 (case_structure -> CASE expression when_list opt_else END .)


state 263

    (162) when_list -> when_list WHEN expression . statements_block
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 274
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 264

    (148) opt_else -> ELSE statements_block .

    END             reduce using rule 148 (opt_else -> ELSE statements_block .)


state 265

    (161) when_list -> WHEN expression statements_block .

    WHEN            reduce using rule 161 (when_list -> WHEN expression statements_block .)
    ELSE            reduce using rule 161 (when_list -> WHEN expression statements_block .)
    END             reduce using rule 161 (when_list -> WHEN expression statements_block .)


state 266

    (144) if_statement -> IF expression statements_block opt_elsif opt_else . END

    END             shift and go to state 275


state 267

    (146) opt_elsif -> ELSIF expression . statements_block opt_elsif
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 276
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 268

    (145) unless_statement -> UNLESS expression statements_block opt_else END .

    NEWLINE         reduce using rule 145 (unless_statement -> UNLESS expression statements_block opt_else END .)
    END             reduce using rule 145 (unless_statement -> UNLESS expression statements_block opt_else END .)
    ELSIF           reduce using rule 145 (unless_statement -> UNLESS expression statements_block opt_else END .)
    ELSE            reduce using rule 145 (unless_statement -> UNLESS expression statements_block opt_else END .)
    WHEN            reduce using rule 145 (unless_statement -> UNLESS expression statements_block opt_else END .)


state 269

    (36) argument -> ID COLON types ASSIGN expression .

    COMMA           reduce using rule 36 (argument -> ID COLON types ASSIGN expression .)
    RPAREN          reduce using rule 36 (argument -> ID COLON types ASSIGN expression .)


state 270

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END .

    DEF             reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END .)
    $end            reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END .)


state 271

    (73) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA . list_of_values
    (76) list_of_values -> . expression
    (77) list_of_values -> . expression COMMA list_of_values
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 277
    list_of_values                 shift and go to state 278
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 272

    (158) iterator -> expression DOT EACH DO PIPE ID . PIPE statements_block END

    PIPE            shift and go to state 279


state 273

    (159) iterator -> expression DOT EACH LBRACE PIPE ID . PIPE RBRACE statements_block

    PIPE            shift and go to state 280


state 274

    (162) when_list -> when_list WHEN expression statements_block .

    WHEN            reduce using rule 162 (when_list -> when_list WHEN expression statements_block .)
    ELSE            reduce using rule 162 (when_list -> when_list WHEN expression statements_block .)
    END             reduce using rule 162 (when_list -> when_list WHEN expression statements_block .)


state 275

    (144) if_statement -> IF expression statements_block opt_elsif opt_else END .

    NEWLINE         reduce using rule 144 (if_statement -> IF expression statements_block opt_elsif opt_else END .)
    END             reduce using rule 144 (if_statement -> IF expression statements_block opt_elsif opt_else END .)
    ELSIF           reduce using rule 144 (if_statement -> IF expression statements_block opt_elsif opt_else END .)
    ELSE            reduce using rule 144 (if_statement -> IF expression statements_block opt_elsif opt_else END .)
    WHEN            reduce using rule 144 (if_statement -> IF expression statements_block opt_elsif opt_else END .)


state 276

    (146) opt_elsif -> ELSIF expression statements_block . opt_elsif
    (146) opt_elsif -> . ELSIF expression statements_block opt_elsif
    (147) opt_elsif -> . empty
    (169) empty -> .

    ELSIF           shift and go to state 253
    ELSE            reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)

    opt_elsif                      shift and go to state 281
    empty                          shift and go to state 254

state 277

    (76) list_of_values -> expression .
    (77) list_of_values -> expression . COMMA list_of_values

    NEWLINE         reduce using rule 76 (list_of_values -> expression .)
    END             reduce using rule 76 (list_of_values -> expression .)
    ELSIF           reduce using rule 76 (list_of_values -> expression .)
    ELSE            reduce using rule 76 (list_of_values -> expression .)
    WHEN            reduce using rule 76 (list_of_values -> expression .)
    COMMA           shift and go to state 282


state 278

    (73) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .

    NEWLINE         reduce using rule 73 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    END             reduce using rule 73 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSIF           reduce using rule 73 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSE            reduce using rule 73 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    WHEN            reduce using rule 73 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)


state 279

    (158) iterator -> expression DOT EACH DO PIPE ID PIPE . statements_block END
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 283
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 280

    (159) iterator -> expression DOT EACH LBRACE PIPE ID PIPE . RBRACE statements_block

    RBRACE          shift and go to state 284


state 281

    (146) opt_elsif -> ELSIF expression statements_block opt_elsif .

    ELSE            reduce using rule 146 (opt_elsif -> ELSIF expression statements_block opt_elsif .)
    END             reduce using rule 146 (opt_elsif -> ELSIF expression statements_block opt_elsif .)


state 282

    (77) list_of_values -> expression COMMA . list_of_values
    (76) list_of_values -> . expression
    (77) list_of_values -> . expression COMMA list_of_values
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    ID              shift and go to state 47
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 277
    list_of_values                 shift and go to state 285
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 283

    (158) iterator -> expression DOT EACH DO PIPE ID PIPE statements_block . END

    END             shift and go to state 286


state 284

    (159) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE . statements_block
    (168) statements_block -> . statements
    (131) statements -> . statement
    (132) statements -> . statement NEWLINE statements
    (133) statement -> . expression
    (134) statement -> . control_structure
    (135) statement -> . variable_declaration
    (78) expression -> . ternary_expression
    (79) expression -> . assignment_expression
    (136) control_structure -> . conditional
    (137) control_structure -> . loop_structure
    (138) control_structure -> . case_structure
    (139) control_structure -> . return_statement
    (140) control_structure -> . break_statement
    (141) control_structure -> . next_statement
    (71) variable_declaration -> . ID types ASSIGN expression
    (72) variable_declaration -> . ID ASSIGN expression
    (73) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (88) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (89) ternary_expression -> . logical_or_expression
    (80) assignment_expression -> . assignment_target ASSIGN expression
    (81) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (83) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (84) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (142) conditional -> . if_statement
    (143) conditional -> . unless_statement
    (150) loop_structure -> . while
    (151) loop_structure -> . until
    (152) loop_structure -> . loop
    (153) loop_structure -> . iterator
    (160) case_structure -> . CASE expression when_list opt_else END
    (163) return_statement -> . RETURN opt_expression
    (164) break_statement -> . BREAK opt_expression
    (165) next_statement -> . NEXT opt_expression
    (90) logical_or_expression -> . logical_and_expression
    (91) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (85) assignment_target -> . postfix_expression
    (86) assignment_target -> . UNDERSCORE
    (87) assignment_target -> . ASTERISK assignment_target
    (144) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (145) unless_statement -> . UNLESS expression statements_block opt_else END
    (154) while -> . WHILE expression statements_block
    (155) until -> . UNTIL expression statements_block
    (156) loop -> . LOOP statements_block
    (157) iterator -> . expression DOT MULTI statements_block
    (158) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (159) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (92) logical_and_expression -> . equality_expression
    (93) logical_and_expression -> . logical_and_expression AND equality_expression
    (117) postfix_expression -> . primary_expression postfix_suffixes
    (94) equality_expression -> . relational_expression
    (95) equality_expression -> . equality_expression EQUAL relational_expression
    (96) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (97) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (123) primary_expression -> . expression_between_parentesis
    (124) primary_expression -> . array_literal
    (125) primary_expression -> . literal
    (126) primary_expression -> . ID
    (98) relational_expression -> . additive_expression
    (99) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (100) relational_expression -> . relational_expression LESS_THAN additive_expression
    (101) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (102) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) expression_between_parentesis -> . LPAREN expression RPAREN
    (128) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (60) literal -> . INTNUMBER
    (61) literal -> . FLOATNUMBER
    (62) literal -> . string_literal
    (63) literal -> . CHAR
    (64) literal -> . TRUE
    (65) literal -> . FALSE
    (103) additive_expression -> . multiplicative_expression
    (104) additive_expression -> . additive_expression PLUS multiplicative_expression
    (105) additive_expression -> . additive_expression MINUS multiplicative_expression
    (129) string_literal -> . STRING
    (130) string_literal -> . STRING INTERP_START expression INTERP_END string_literal
    (106) multiplicative_expression -> . potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (109) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (110) potenciacao_expression -> . unary_expression
    (111) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (112) unary_expression -> . PLUS unary_expression
    (113) unary_expression -> . MINUS unary_expression
    (114) unary_expression -> . EXCLAMATION unary_expression
    (115) unary_expression -> . TILDE unary_expression
    (116) unary_expression -> . postfix_expression

    ID              shift and go to state 110
    CASE            shift and go to state 128
    RETURN          shift and go to state 129
    BREAK           shift and go to state 130
    NEXT            shift and go to state 131
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 132
    UNLESS          shift and go to state 133
    WHILE           shift and go to state 134
    UNTIL           shift and go to state 135
    LOOP            shift and go to state 136
    LPAREN          shift and go to state 49
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    STRING          shift and go to state 60
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 63
    TILDE           shift and go to state 64

    expression                     shift and go to state 113
    statements_block               shift and go to state 287
    statements                     shift and go to state 211
    statement                      shift and go to state 112
    control_structure              shift and go to state 114
    variable_declaration           shift and go to state 115
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 116
    loop_structure                 shift and go to state 117
    case_structure                 shift and go to state 118
    return_statement               shift and go to state 119
    break_statement                shift and go to state 120
    next_statement                 shift and go to state 121
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 122
    unless_statement               shift and go to state 123
    while                          shift and go to state 124
    until                          shift and go to state 125
    loop                           shift and go to state 126
    iterator                       shift and go to state 127
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    expression_between_parentesis  shift and go to state 44
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    additive_expression            shift and go to state 48
    string_literal                 shift and go to state 53
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 61
    unary_expression               shift and go to state 62

state 285

    (77) list_of_values -> expression COMMA list_of_values .

    NEWLINE         reduce using rule 77 (list_of_values -> expression COMMA list_of_values .)
    END             reduce using rule 77 (list_of_values -> expression COMMA list_of_values .)
    ELSIF           reduce using rule 77 (list_of_values -> expression COMMA list_of_values .)
    ELSE            reduce using rule 77 (list_of_values -> expression COMMA list_of_values .)
    WHEN            reduce using rule 77 (list_of_values -> expression COMMA list_of_values .)


state 286

    (158) iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .

    NEWLINE         reduce using rule 158 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)
    END             reduce using rule 158 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)
    ELSIF           reduce using rule 158 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)
    ELSE            reduce using rule 158 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)
    WHEN            reduce using rule 158 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)


state 287

    (159) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .

    NEWLINE         reduce using rule 159 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)
    END             reduce using rule 159 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)
    ELSIF           reduce using rule 159 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)
    ELSE            reduce using rule 159 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)
    WHEN            reduce using rule 159 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 85 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 112 resolved as shift
