Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    AT
    BEGIN
    BINNUMBER
    CLASS
    CLASSVAR
    CLASS_VAR
    DEFINE_BLOCO
    DOLAR_SIGN
    ENUM
    GLOBALVAR
    HEXNUMBER
    IN
    INCLUDE
    INSTANCEVAR
    INSTANCE_VAR
    INTERP_END
    INTERP_START
    LITERAL
    MACRO
    MODULO_ASSIGN
    NEWLINE
    NOT
    OCTNUMBER
    OF
    OR_ASSIGN
    OUT
    PASSA_ARGUMENTO
    POTENCIACAO_ASSIGN
    PRIVATE
    PROTECTED
    SAFE_CALL
    SCOPE
    SELECT
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SIZEOF
    STRUCT
    SYMBOL
    THEN
    TYPE
    TYPEOF
    UNINITIALIZED
    UNION
    VAR_GLOBAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> require_list constant_list module_list function_list
Rule 2     program -> require_list constant_list module_list
Rule 3     program -> require_list constant_list function_list
Rule 4     program -> require_list module_list function_list
Rule 5     program -> constant_list module_list function_list
Rule 6     program -> require_list constant_list
Rule 7     program -> require_list module_list
Rule 8     program -> constant_list module_list
Rule 9     program -> require_list function_list
Rule 10    program -> constant_list function_list
Rule 11    program -> module_list function_list
Rule 12    program -> require_list
Rule 13    program -> constant_list
Rule 14    program -> module_list
Rule 15    program -> function_list
Rule 16    program -> statements
Rule 17    require_list -> require require_list
Rule 18    require_list -> require
Rule 19    require -> REQUIRE STRING
Rule 20    constant_list -> constant constant_list
Rule 21    constant_list -> constant
Rule 22    constant -> CONSTANT ASSIGN expression
Rule 23    module_list -> module module_list
Rule 24    module_list -> module
Rule 25    module -> MODULE ID statements END
Rule 26    function_list -> function
Rule 27    function_list -> function function_list
Rule 28    function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
Rule 29    function -> DEF ID opt_return_type statements END
Rule 30    opt_argument_list -> argument_list
Rule 31    opt_argument_list -> empty
Rule 32    argument_list -> argument
Rule 33    argument_list -> argument COMMA argument_list
Rule 34    argument -> ID
Rule 35    argument -> ID COLON types
Rule 36    argument -> ID ASSIGN expression
Rule 37    argument -> ID COLON types ASSIGN expression
Rule 38    opt_return_type -> COLON types
Rule 39    opt_return_type -> empty
Rule 40    types -> STRING
Rule 41    types -> CHAR
Rule 42    types -> NIL
Rule 43    types -> integer
Rule 44    types -> float
Rule 45    types -> boolean
Rule 46    integer -> INT
Rule 47    integer -> INT8
Rule 48    integer -> INT16
Rule 49    integer -> INT32
Rule 50    integer -> INT64
Rule 51    integer -> INT128
Rule 52    integer -> UINT8
Rule 53    integer -> UINT16
Rule 54    integer -> UINT32
Rule 55    integer -> UINT64
Rule 56    integer -> UINT128
Rule 57    float -> FLOAT
Rule 58    float -> FLOAT32
Rule 59    float -> FLOAT64
Rule 60    boolean -> BOOL
Rule 61    literal -> INTNUMBER
Rule 62    literal -> FLOATNUMBER
Rule 63    literal -> STRING
Rule 64    literal -> CHAR
Rule 65    literal -> TRUE
Rule 66    literal -> FALSE
Rule 67    variable_declaration -> ID COLON types ASSIGN expression
Rule 68    variable_declaration -> ID ASSIGN expression
Rule 69    variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
Rule 70    list_of_identifiers -> ID
Rule 71    list_of_identifiers -> ID COMMA list_of_identifiers
Rule 72    list_of_values -> expression
Rule 73    list_of_values -> expression COMMA list_of_values
Rule 74    function_call -> ID LPAREN expression_list RPAREN
Rule 75    function_call -> ID LPAREN RPAREN
Rule 76    opt_expression_list -> expression_list
Rule 77    opt_expression_list -> empty
Rule 78    expression_list -> expression
Rule 79    expression_list -> expression_list COMMA expression
Rule 80    statements -> statement
Rule 81    statement -> expression
Rule 82    statement -> control_structure
Rule 83    statement -> variable_declaration
Rule 84    statement -> function_call
Rule 85    control_structure -> conditional
Rule 86    control_structure -> loop_structure
Rule 87    control_structure -> case_structure
Rule 88    control_structure -> return_statement
Rule 89    control_structure -> break_statement
Rule 90    control_structure -> next_statement
Rule 91    conditional -> if_statement
Rule 92    conditional -> unless_statement
Rule 93    if_statement -> IF if_condition statements opt_elsif opt_else END
Rule 94    unless_statement -> UNLESS if_condition statements opt_else END
Rule 95    if_condition -> expression
Rule 96    if_condition -> expression LBRACE statements RBRACE
Rule 97    opt_elsif -> elsif_list
Rule 98    opt_elsif -> empty
Rule 99    elsif_list -> elsif_list elsif
Rule 100   elsif_list -> elsif
Rule 101   elsif -> ELSIF if_condition statements
Rule 102   opt_else -> ELSE statements
Rule 103   opt_else -> empty
Rule 104   loop_structure -> while
Rule 105   loop_structure -> until
Rule 106   loop_structure -> loop
Rule 107   loop_structure -> iterator
Rule 108   while -> WHILE expression statements
Rule 109   until -> UNTIL expression statements
Rule 110   loop -> LOOP statements
Rule 111   iterator -> expression DOT MULTI statements
Rule 112   iterator -> expression DOT EACH DO PIPE ID PIPE statements END
Rule 113   iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
Rule 114   case_structure -> CASE expression when_list opt_else END
Rule 115   when_list -> WHEN expression statements
Rule 116   when_list -> when_list WHEN expression statements
Rule 117   return_statement -> RETURN opt_expression
Rule 118   break_statement -> BREAK opt_expression
Rule 119   next_statement -> NEXT opt_expression
Rule 120   opt_expression -> expression
Rule 121   opt_expression -> empty
Rule 122   expression -> assignment_expression
Rule 123   assignment_expression -> assignment_target ASSIGN expression
Rule 124   assignment_expression -> assignment_target PLUS_ASSIGN expression
Rule 125   assignment_expression -> assignment_target MINUS_ASSIGN expression
Rule 126   assignment_expression -> assignment_target MULTI_ASSIGN expression
Rule 127   assignment_expression -> assignment_target DIVIDE_ASSIGN expression
Rule 128   assignment_expression -> ternary_expression
Rule 129   assignment_target -> ID
Rule 130   assignment_target -> UNDERSCORE
Rule 131   assignment_target -> ASTERISK assignment_target
Rule 132   ternary_expression -> range_expression QMARK expression TCOLON expression
Rule 133   ternary_expression -> range_expression
Rule 134   range_expression -> logical_or_expression DOTDOT logical_or_expression
Rule 135   range_expression -> logical_or_expression DOTDOTDOT logical_or_expression
Rule 136   range_expression -> logical_or_expression
Rule 137   logical_or_expression -> logical_and_expression
Rule 138   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 139   logical_and_expression -> equality_expression
Rule 140   logical_and_expression -> logical_and_expression AND equality_expression
Rule 141   equality_expression -> relational_expression
Rule 142   equality_expression -> equality_expression EQUAL relational_expression
Rule 143   equality_expression -> equality_expression NOT_EQUAL relational_expression
Rule 144   equality_expression -> equality_expression TIPO_EQUAL relational_expression
Rule 145   relational_expression -> additive_expression
Rule 146   relational_expression -> relational_expression GREATER_THAN additive_expression
Rule 147   relational_expression -> relational_expression LESS_THAN additive_expression
Rule 148   relational_expression -> relational_expression GREATER_EQUAL additive_expression
Rule 149   relational_expression -> relational_expression LESS_EQUAL additive_expression
Rule 150   additive_expression -> multiplicative_expression
Rule 151   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 152   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 153   multiplicative_expression -> potenciacao_expression
Rule 154   multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression
Rule 155   multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression
Rule 156   multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression
Rule 157   potenciacao_expression -> unary_expression
Rule 158   potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression
Rule 159   unary_expression -> PLUS unary_expression
Rule 160   unary_expression -> MINUS unary_expression
Rule 161   unary_expression -> EXCLAMATION unary_expression
Rule 162   unary_expression -> TILDE unary_expression
Rule 163   unary_expression -> primary_expression
Rule 164   primary_expression -> LPAREN expression RPAREN
Rule 165   primary_expression -> array_literal
Rule 166   primary_expression -> literal
Rule 167   primary_expression -> ID
Rule 168   array_literal -> LBRACKET opt_expression_list RBRACKET
Rule 169   empty -> <empty>

Terminals, with rules where they appear

AND                  : 140
AS                   : 
ASSIGN               : 22 36 37 67 68 69 123
ASTERISK             : 131
AT                   : 
BEGIN                : 
BINNUMBER            : 
BOOL                 : 60
BREAK                : 118
CASE                 : 114
CHAR                 : 41 64
CLASS                : 
CLASSVAR             : 
CLASS_VAR            : 
COLON                : 35 37 38 67
COMMA                : 33 69 69 71 73 79
CONSTANT             : 22
DEF                  : 28 29
DEFINE_BLOCO         : 
DIVIDE               : 155
DIVIDE_ASSIGN        : 127
DO                   : 112
DOLAR_SIGN           : 
DOT                  : 111 112 113
DOTDOT               : 134
DOTDOTDOT            : 135
EACH                 : 112 113
ELSE                 : 102
ELSIF                : 101
END                  : 25 28 29 93 94 112 114
ENUM                 : 
EQUAL                : 142
EXCLAMATION          : 161
FALSE                : 66
FLOAT                : 57
FLOAT32              : 58
FLOAT64              : 59
FLOATNUMBER          : 62
GLOBALVAR            : 
GREATER_EQUAL        : 148
GREATER_THAN         : 146
HEXNUMBER            : 
ID                   : 25 28 29 34 35 36 37 67 68 69 70 71 74 75 112 113 129 167
IF                   : 93
IN                   : 
INCLUDE              : 
INSTANCEVAR          : 
INSTANCE_VAR         : 
INT                  : 46
INT128               : 51
INT16                : 48
INT32                : 49
INT64                : 50
INT8                 : 47
INTERP_END           : 
INTERP_START         : 
INTNUMBER            : 61
LBRACE               : 96 113
LBRACKET             : 168
LESS_EQUAL           : 149
LESS_THAN            : 147
LITERAL              : 
LOOP                 : 110
LPAREN               : 28 74 75 164
MACRO                : 
MINUS                : 152 160
MINUS_ASSIGN         : 125
MODULE               : 25
MODULO               : 156
MODULO_ASSIGN        : 
MULTI                : 111 154
MULTI_ASSIGN         : 126
NEWLINE              : 
NEXT                 : 119
NIL                  : 42
NOT                  : 
NOT_EQUAL            : 143
OCTNUMBER            : 
OF                   : 
OR                   : 138
OR_ASSIGN            : 
OUT                  : 
PASSA_ARGUMENTO      : 
PIPE                 : 112 112 113 113
PLUS                 : 151 159
PLUS_ASSIGN          : 124
POTENCIACAO          : 158
POTENCIACAO_ASSIGN   : 
PRIVATE              : 
PROTECTED            : 
QMARK                : 132
RBRACE               : 96 113
RBRACKET             : 168
REQUIRE              : 19
RETURN               : 117
RPAREN               : 28 74 75 164
SAFE_CALL            : 
SCOPE                : 
SELECT               : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SIZEOF               : 
STRING               : 19 40 63
STRUCT               : 
SYMBOL               : 
TCOLON               : 132
THEN                 : 
TILDE                : 162
TIPO_EQUAL           : 144
TRUE                 : 65
TYPE                 : 
TYPEOF               : 
UINT128              : 56
UINT16               : 53
UINT32               : 54
UINT64               : 55
UINT8                : 52
UNDERSCORE           : 130
UNINITIALIZED        : 
UNION                : 
UNLESS               : 94
UNTIL                : 109
VAR_GLOBAL           : 
WHEN                 : 115 116
WHILE                : 108
YIELD                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 145 146 147 148 149 151 152
argument             : 32 33
argument_list        : 30 33
array_literal        : 165
assignment_expression : 122
assignment_target    : 123 124 125 126 127 131
boolean              : 45
break_statement      : 89
case_structure       : 87
conditional          : 85
constant             : 20 21
constant_list        : 1 2 3 5 6 8 10 13 20
control_structure    : 82
elsif                : 99 100
elsif_list           : 97 99
empty                : 31 39 77 98 103 121
equality_expression  : 139 140 142 143 144
expression           : 22 36 37 67 68 69 72 73 78 79 81 95 96 108 109 111 112 113 114 115 116 120 123 124 125 126 127 132 132 164
expression_list      : 74 76 79
float                : 44
function             : 26 27
function_call        : 84
function_list        : 1 3 4 5 9 10 11 15 27
if_condition         : 93 94 101
if_statement         : 91
integer              : 43
iterator             : 107
list_of_identifiers  : 69 71
list_of_values       : 69 73
literal              : 166
logical_and_expression : 137 138 140
logical_or_expression : 134 134 135 135 136 138
loop                 : 106
loop_structure       : 86
module               : 23 24
module_list          : 1 2 4 5 7 8 11 14 23
multiplicative_expression : 150 151 152 154 155 156
next_statement       : 90
opt_argument_list    : 28
opt_else             : 93 94 114
opt_elsif            : 93
opt_expression       : 117 118 119
opt_expression_list  : 168
opt_return_type      : 28 29
potenciacao_expression : 153 154 155 156 158
primary_expression   : 163
program              : 0
range_expression     : 132 133
relational_expression : 141 142 143 144 146 147 148 149
require              : 17 18
require_list         : 1 2 3 4 6 7 9 12 17
return_statement     : 88
statement            : 80
statements           : 16 25 28 29 93 94 96 101 102 108 109 110 111 112 113 115 116
ternary_expression   : 128
types                : 35 37 38 67
unary_expression     : 157 158 159 160 161 162
unless_statement     : 92
until                : 105
variable_declaration : 83
when_list            : 114 116
while                : 104

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . require_list constant_list module_list function_list
    (2) program -> . require_list constant_list module_list
    (3) program -> . require_list constant_list function_list
    (4) program -> . require_list module_list function_list
    (5) program -> . constant_list module_list function_list
    (6) program -> . require_list constant_list
    (7) program -> . require_list module_list
    (8) program -> . constant_list module_list
    (9) program -> . require_list function_list
    (10) program -> . constant_list function_list
    (11) program -> . module_list function_list
    (12) program -> . require_list
    (13) program -> . constant_list
    (14) program -> . module_list
    (15) program -> . function_list
    (16) program -> . statements
    (17) require_list -> . require require_list
    (18) require_list -> . require
    (20) constant_list -> . constant constant_list
    (21) constant_list -> . constant
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (80) statements -> . statement
    (19) require -> . REQUIRE STRING
    (22) constant -> . CONSTANT ASSIGN expression
    (25) module -> . MODULE ID statements END
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    REQUIRE         shift and go to state 12
    CONSTANT        shift and go to state 14
    MODULE          shift and go to state 16
    DEF             shift and go to state 18
    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    program                        shift and go to state 1
    require_list                   shift and go to state 2
    constant_list                  shift and go to state 3
    module_list                    shift and go to state 4
    function_list                  shift and go to state 5
    statements                     shift and go to state 6
    require                        shift and go to state 7
    constant                       shift and go to state 8
    module                         shift and go to state 9
    function                       shift and go to state 10
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 1

    (0) S' -> program .



state 2

    (1) program -> require_list . constant_list module_list function_list
    (2) program -> require_list . constant_list module_list
    (3) program -> require_list . constant_list function_list
    (4) program -> require_list . module_list function_list
    (6) program -> require_list . constant_list
    (7) program -> require_list . module_list
    (9) program -> require_list . function_list
    (12) program -> require_list .
    (20) constant_list -> . constant constant_list
    (21) constant_list -> . constant
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (22) constant -> . CONSTANT ASSIGN expression
    (25) module -> . MODULE ID statements END
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END

    $end            reduce using rule 12 (program -> require_list .)
    CONSTANT        shift and go to state 14
    MODULE          shift and go to state 16
    DEF             shift and go to state 18

    constant_list                  shift and go to state 71
    module_list                    shift and go to state 72
    function_list                  shift and go to state 73
    constant                       shift and go to state 8
    module                         shift and go to state 9
    function                       shift and go to state 10

state 3

    (5) program -> constant_list . module_list function_list
    (8) program -> constant_list . module_list
    (10) program -> constant_list . function_list
    (13) program -> constant_list .
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (25) module -> . MODULE ID statements END
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END

    $end            reduce using rule 13 (program -> constant_list .)
    MODULE          shift and go to state 16
    DEF             shift and go to state 18

    module_list                    shift and go to state 74
    function_list                  shift and go to state 75
    module                         shift and go to state 9
    function                       shift and go to state 10

state 4

    (11) program -> module_list . function_list
    (14) program -> module_list .
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END

    $end            reduce using rule 14 (program -> module_list .)
    DEF             shift and go to state 18

    function_list                  shift and go to state 76
    function                       shift and go to state 10

state 5

    (15) program -> function_list .

    $end            reduce using rule 15 (program -> function_list .)


state 6

    (16) program -> statements .

    $end            reduce using rule 16 (program -> statements .)


state 7

    (17) require_list -> require . require_list
    (18) require_list -> require .
    (17) require_list -> . require require_list
    (18) require_list -> . require
    (19) require -> . REQUIRE STRING

    CONSTANT        reduce using rule 18 (require_list -> require .)
    MODULE          reduce using rule 18 (require_list -> require .)
    DEF             reduce using rule 18 (require_list -> require .)
    $end            reduce using rule 18 (require_list -> require .)
    REQUIRE         shift and go to state 12

    require                        shift and go to state 7
    require_list                   shift and go to state 77

state 8

    (20) constant_list -> constant . constant_list
    (21) constant_list -> constant .
    (20) constant_list -> . constant constant_list
    (21) constant_list -> . constant
    (22) constant -> . CONSTANT ASSIGN expression

    MODULE          reduce using rule 21 (constant_list -> constant .)
    DEF             reduce using rule 21 (constant_list -> constant .)
    $end            reduce using rule 21 (constant_list -> constant .)
    CONSTANT        shift and go to state 14

    constant                       shift and go to state 8
    constant_list                  shift and go to state 78

state 9

    (23) module_list -> module . module_list
    (24) module_list -> module .
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (25) module -> . MODULE ID statements END

    DEF             reduce using rule 24 (module_list -> module .)
    $end            reduce using rule 24 (module_list -> module .)
    MODULE          shift and go to state 16

    module                         shift and go to state 9
    module_list                    shift and go to state 79

state 10

    (26) function_list -> function .
    (27) function_list -> function . function_list
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END

    $end            reduce using rule 26 (function_list -> function .)
    DEF             shift and go to state 18

    function                       shift and go to state 10
    function_list                  shift and go to state 80

state 11

    (80) statements -> statement .

    $end            reduce using rule 80 (statements -> statement .)
    END             reduce using rule 80 (statements -> statement .)
    ELSIF           reduce using rule 80 (statements -> statement .)
    ELSE            reduce using rule 80 (statements -> statement .)
    RBRACE          reduce using rule 80 (statements -> statement .)
    WHEN            reduce using rule 80 (statements -> statement .)


state 12

    (19) require -> REQUIRE . STRING

    STRING          shift and go to state 81


state 13

    (63) literal -> STRING .

    POTENCIACAO     reduce using rule 63 (literal -> STRING .)
    MULTI           reduce using rule 63 (literal -> STRING .)
    DIVIDE          reduce using rule 63 (literal -> STRING .)
    MODULO          reduce using rule 63 (literal -> STRING .)
    PLUS            reduce using rule 63 (literal -> STRING .)
    MINUS           reduce using rule 63 (literal -> STRING .)
    GREATER_THAN    reduce using rule 63 (literal -> STRING .)
    LESS_THAN       reduce using rule 63 (literal -> STRING .)
    GREATER_EQUAL   reduce using rule 63 (literal -> STRING .)
    LESS_EQUAL      reduce using rule 63 (literal -> STRING .)
    EQUAL           reduce using rule 63 (literal -> STRING .)
    NOT_EQUAL       reduce using rule 63 (literal -> STRING .)
    TIPO_EQUAL      reduce using rule 63 (literal -> STRING .)
    AND             reduce using rule 63 (literal -> STRING .)
    DOTDOT          reduce using rule 63 (literal -> STRING .)
    DOTDOTDOT       reduce using rule 63 (literal -> STRING .)
    OR              reduce using rule 63 (literal -> STRING .)
    QMARK           reduce using rule 63 (literal -> STRING .)
    DOT             reduce using rule 63 (literal -> STRING .)
    $end            reduce using rule 63 (literal -> STRING .)
    RPAREN          reduce using rule 63 (literal -> STRING .)
    WHEN            reduce using rule 63 (literal -> STRING .)
    END             reduce using rule 63 (literal -> STRING .)
    ELSIF           reduce using rule 63 (literal -> STRING .)
    ELSE            reduce using rule 63 (literal -> STRING .)
    RBRACE          reduce using rule 63 (literal -> STRING .)
    LBRACE          reduce using rule 63 (literal -> STRING .)
    ID              reduce using rule 63 (literal -> STRING .)
    CASE            reduce using rule 63 (literal -> STRING .)
    RETURN          reduce using rule 63 (literal -> STRING .)
    BREAK           reduce using rule 63 (literal -> STRING .)
    NEXT            reduce using rule 63 (literal -> STRING .)
    UNDERSCORE      reduce using rule 63 (literal -> STRING .)
    ASTERISK        reduce using rule 63 (literal -> STRING .)
    IF              reduce using rule 63 (literal -> STRING .)
    UNLESS          reduce using rule 63 (literal -> STRING .)
    WHILE           reduce using rule 63 (literal -> STRING .)
    UNTIL           reduce using rule 63 (literal -> STRING .)
    LOOP            reduce using rule 63 (literal -> STRING .)
    EXCLAMATION     reduce using rule 63 (literal -> STRING .)
    TILDE           reduce using rule 63 (literal -> STRING .)
    LPAREN          reduce using rule 63 (literal -> STRING .)
    LBRACKET        reduce using rule 63 (literal -> STRING .)
    INTNUMBER       reduce using rule 63 (literal -> STRING .)
    FLOATNUMBER     reduce using rule 63 (literal -> STRING .)
    STRING          reduce using rule 63 (literal -> STRING .)
    CHAR            reduce using rule 63 (literal -> STRING .)
    TRUE            reduce using rule 63 (literal -> STRING .)
    FALSE           reduce using rule 63 (literal -> STRING .)
    COMMA           reduce using rule 63 (literal -> STRING .)
    RBRACKET        reduce using rule 63 (literal -> STRING .)
    CONSTANT        reduce using rule 63 (literal -> STRING .)
    MODULE          reduce using rule 63 (literal -> STRING .)
    DEF             reduce using rule 63 (literal -> STRING .)
    TCOLON          reduce using rule 63 (literal -> STRING .)


state 14

    (22) constant -> CONSTANT . ASSIGN expression

    ASSIGN          shift and go to state 82


state 15

    (81) statement -> expression .
    (111) iterator -> expression . DOT MULTI statements
    (112) iterator -> expression . DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> expression . DOT EACH LBRACE PIPE ID PIPE RBRACE statements

    $end            reduce using rule 81 (statement -> expression .)
    END             reduce using rule 81 (statement -> expression .)
    ELSIF           reduce using rule 81 (statement -> expression .)
    ELSE            reduce using rule 81 (statement -> expression .)
    RBRACE          reduce using rule 81 (statement -> expression .)
    WHEN            reduce using rule 81 (statement -> expression .)
    DOT             shift and go to state 83


state 16

    (25) module -> MODULE . ID statements END

    ID              shift and go to state 84


state 17

    (67) variable_declaration -> ID . COLON types ASSIGN expression
    (68) variable_declaration -> ID . ASSIGN expression
    (69) variable_declaration -> ID . COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> ID . LPAREN expression_list RPAREN
    (75) function_call -> ID . LPAREN RPAREN
    (129) assignment_target -> ID .
    (167) primary_expression -> ID .

  ! shift/reduce conflict for ASSIGN resolved as shift
    COLON           shift and go to state 85
    ASSIGN          shift and go to state 86
    COMMA           shift and go to state 87
    LPAREN          shift and go to state 88
    PLUS_ASSIGN     reduce using rule 129 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 129 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 129 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 129 (assignment_target -> ID .)
    POTENCIACAO     reduce using rule 167 (primary_expression -> ID .)
    MULTI           reduce using rule 167 (primary_expression -> ID .)
    DIVIDE          reduce using rule 167 (primary_expression -> ID .)
    MODULO          reduce using rule 167 (primary_expression -> ID .)
    PLUS            reduce using rule 167 (primary_expression -> ID .)
    MINUS           reduce using rule 167 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 167 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 167 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 167 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 167 (primary_expression -> ID .)
    EQUAL           reduce using rule 167 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 167 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 167 (primary_expression -> ID .)
    AND             reduce using rule 167 (primary_expression -> ID .)
    DOTDOT          reduce using rule 167 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 167 (primary_expression -> ID .)
    OR              reduce using rule 167 (primary_expression -> ID .)
    QMARK           reduce using rule 167 (primary_expression -> ID .)
    DOT             reduce using rule 167 (primary_expression -> ID .)
    $end            reduce using rule 167 (primary_expression -> ID .)
    END             reduce using rule 167 (primary_expression -> ID .)
    ELSIF           reduce using rule 167 (primary_expression -> ID .)
    ELSE            reduce using rule 167 (primary_expression -> ID .)
    RBRACE          reduce using rule 167 (primary_expression -> ID .)
    WHEN            reduce using rule 167 (primary_expression -> ID .)

  ! ASSIGN          [ reduce using rule 129 (assignment_target -> ID .) ]


state 18

    (28) function -> DEF . ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> DEF . ID opt_return_type statements END

    ID              shift and go to state 89


state 19

    (164) primary_expression -> LPAREN . expression RPAREN
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 90
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 20

    (82) statement -> control_structure .

    $end            reduce using rule 82 (statement -> control_structure .)
    END             reduce using rule 82 (statement -> control_structure .)
    ELSIF           reduce using rule 82 (statement -> control_structure .)
    ELSE            reduce using rule 82 (statement -> control_structure .)
    RBRACE          reduce using rule 82 (statement -> control_structure .)
    WHEN            reduce using rule 82 (statement -> control_structure .)


state 21

    (83) statement -> variable_declaration .

    $end            reduce using rule 83 (statement -> variable_declaration .)
    END             reduce using rule 83 (statement -> variable_declaration .)
    ELSIF           reduce using rule 83 (statement -> variable_declaration .)
    ELSE            reduce using rule 83 (statement -> variable_declaration .)
    RBRACE          reduce using rule 83 (statement -> variable_declaration .)
    WHEN            reduce using rule 83 (statement -> variable_declaration .)


state 22

    (84) statement -> function_call .

    $end            reduce using rule 84 (statement -> function_call .)
    END             reduce using rule 84 (statement -> function_call .)
    ELSIF           reduce using rule 84 (statement -> function_call .)
    ELSE            reduce using rule 84 (statement -> function_call .)
    RBRACE          reduce using rule 84 (statement -> function_call .)
    WHEN            reduce using rule 84 (statement -> function_call .)


state 23

    (122) expression -> assignment_expression .

    DOT             reduce using rule 122 (expression -> assignment_expression .)
    $end            reduce using rule 122 (expression -> assignment_expression .)
    RPAREN          reduce using rule 122 (expression -> assignment_expression .)
    WHEN            reduce using rule 122 (expression -> assignment_expression .)
    END             reduce using rule 122 (expression -> assignment_expression .)
    ELSIF           reduce using rule 122 (expression -> assignment_expression .)
    ELSE            reduce using rule 122 (expression -> assignment_expression .)
    RBRACE          reduce using rule 122 (expression -> assignment_expression .)
    LBRACE          reduce using rule 122 (expression -> assignment_expression .)
    ID              reduce using rule 122 (expression -> assignment_expression .)
    CASE            reduce using rule 122 (expression -> assignment_expression .)
    RETURN          reduce using rule 122 (expression -> assignment_expression .)
    BREAK           reduce using rule 122 (expression -> assignment_expression .)
    NEXT            reduce using rule 122 (expression -> assignment_expression .)
    UNDERSCORE      reduce using rule 122 (expression -> assignment_expression .)
    ASTERISK        reduce using rule 122 (expression -> assignment_expression .)
    IF              reduce using rule 122 (expression -> assignment_expression .)
    UNLESS          reduce using rule 122 (expression -> assignment_expression .)
    WHILE           reduce using rule 122 (expression -> assignment_expression .)
    UNTIL           reduce using rule 122 (expression -> assignment_expression .)
    LOOP            reduce using rule 122 (expression -> assignment_expression .)
    PLUS            reduce using rule 122 (expression -> assignment_expression .)
    MINUS           reduce using rule 122 (expression -> assignment_expression .)
    EXCLAMATION     reduce using rule 122 (expression -> assignment_expression .)
    TILDE           reduce using rule 122 (expression -> assignment_expression .)
    LPAREN          reduce using rule 122 (expression -> assignment_expression .)
    LBRACKET        reduce using rule 122 (expression -> assignment_expression .)
    INTNUMBER       reduce using rule 122 (expression -> assignment_expression .)
    FLOATNUMBER     reduce using rule 122 (expression -> assignment_expression .)
    STRING          reduce using rule 122 (expression -> assignment_expression .)
    CHAR            reduce using rule 122 (expression -> assignment_expression .)
    TRUE            reduce using rule 122 (expression -> assignment_expression .)
    FALSE           reduce using rule 122 (expression -> assignment_expression .)
    COMMA           reduce using rule 122 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 122 (expression -> assignment_expression .)
    CONSTANT        reduce using rule 122 (expression -> assignment_expression .)
    MODULE          reduce using rule 122 (expression -> assignment_expression .)
    DEF             reduce using rule 122 (expression -> assignment_expression .)
    TCOLON          reduce using rule 122 (expression -> assignment_expression .)


state 24

    (85) control_structure -> conditional .

    $end            reduce using rule 85 (control_structure -> conditional .)
    END             reduce using rule 85 (control_structure -> conditional .)
    ELSIF           reduce using rule 85 (control_structure -> conditional .)
    ELSE            reduce using rule 85 (control_structure -> conditional .)
    RBRACE          reduce using rule 85 (control_structure -> conditional .)
    WHEN            reduce using rule 85 (control_structure -> conditional .)


state 25

    (86) control_structure -> loop_structure .

    $end            reduce using rule 86 (control_structure -> loop_structure .)
    END             reduce using rule 86 (control_structure -> loop_structure .)
    ELSIF           reduce using rule 86 (control_structure -> loop_structure .)
    ELSE            reduce using rule 86 (control_structure -> loop_structure .)
    RBRACE          reduce using rule 86 (control_structure -> loop_structure .)
    WHEN            reduce using rule 86 (control_structure -> loop_structure .)


state 26

    (87) control_structure -> case_structure .

    $end            reduce using rule 87 (control_structure -> case_structure .)
    END             reduce using rule 87 (control_structure -> case_structure .)
    ELSIF           reduce using rule 87 (control_structure -> case_structure .)
    ELSE            reduce using rule 87 (control_structure -> case_structure .)
    RBRACE          reduce using rule 87 (control_structure -> case_structure .)
    WHEN            reduce using rule 87 (control_structure -> case_structure .)


state 27

    (88) control_structure -> return_statement .

    $end            reduce using rule 88 (control_structure -> return_statement .)
    END             reduce using rule 88 (control_structure -> return_statement .)
    ELSIF           reduce using rule 88 (control_structure -> return_statement .)
    ELSE            reduce using rule 88 (control_structure -> return_statement .)
    RBRACE          reduce using rule 88 (control_structure -> return_statement .)
    WHEN            reduce using rule 88 (control_structure -> return_statement .)


state 28

    (89) control_structure -> break_statement .

    $end            reduce using rule 89 (control_structure -> break_statement .)
    END             reduce using rule 89 (control_structure -> break_statement .)
    ELSIF           reduce using rule 89 (control_structure -> break_statement .)
    ELSE            reduce using rule 89 (control_structure -> break_statement .)
    RBRACE          reduce using rule 89 (control_structure -> break_statement .)
    WHEN            reduce using rule 89 (control_structure -> break_statement .)


state 29

    (90) control_structure -> next_statement .

    $end            reduce using rule 90 (control_structure -> next_statement .)
    END             reduce using rule 90 (control_structure -> next_statement .)
    ELSIF           reduce using rule 90 (control_structure -> next_statement .)
    ELSE            reduce using rule 90 (control_structure -> next_statement .)
    RBRACE          reduce using rule 90 (control_structure -> next_statement .)
    WHEN            reduce using rule 90 (control_structure -> next_statement .)


state 30

    (123) assignment_expression -> assignment_target . ASSIGN expression
    (124) assignment_expression -> assignment_target . PLUS_ASSIGN expression
    (125) assignment_expression -> assignment_target . MINUS_ASSIGN expression
    (126) assignment_expression -> assignment_target . MULTI_ASSIGN expression
    (127) assignment_expression -> assignment_target . DIVIDE_ASSIGN expression

    ASSIGN          shift and go to state 92
    PLUS_ASSIGN     shift and go to state 93
    MINUS_ASSIGN    shift and go to state 94
    MULTI_ASSIGN    shift and go to state 95
    DIVIDE_ASSIGN   shift and go to state 96


state 31

    (128) assignment_expression -> ternary_expression .

    DOT             reduce using rule 128 (assignment_expression -> ternary_expression .)
    $end            reduce using rule 128 (assignment_expression -> ternary_expression .)
    RPAREN          reduce using rule 128 (assignment_expression -> ternary_expression .)
    WHEN            reduce using rule 128 (assignment_expression -> ternary_expression .)
    END             reduce using rule 128 (assignment_expression -> ternary_expression .)
    ELSIF           reduce using rule 128 (assignment_expression -> ternary_expression .)
    ELSE            reduce using rule 128 (assignment_expression -> ternary_expression .)
    RBRACE          reduce using rule 128 (assignment_expression -> ternary_expression .)
    LBRACE          reduce using rule 128 (assignment_expression -> ternary_expression .)
    ID              reduce using rule 128 (assignment_expression -> ternary_expression .)
    CASE            reduce using rule 128 (assignment_expression -> ternary_expression .)
    RETURN          reduce using rule 128 (assignment_expression -> ternary_expression .)
    BREAK           reduce using rule 128 (assignment_expression -> ternary_expression .)
    NEXT            reduce using rule 128 (assignment_expression -> ternary_expression .)
    UNDERSCORE      reduce using rule 128 (assignment_expression -> ternary_expression .)
    ASTERISK        reduce using rule 128 (assignment_expression -> ternary_expression .)
    IF              reduce using rule 128 (assignment_expression -> ternary_expression .)
    UNLESS          reduce using rule 128 (assignment_expression -> ternary_expression .)
    WHILE           reduce using rule 128 (assignment_expression -> ternary_expression .)
    UNTIL           reduce using rule 128 (assignment_expression -> ternary_expression .)
    LOOP            reduce using rule 128 (assignment_expression -> ternary_expression .)
    PLUS            reduce using rule 128 (assignment_expression -> ternary_expression .)
    MINUS           reduce using rule 128 (assignment_expression -> ternary_expression .)
    EXCLAMATION     reduce using rule 128 (assignment_expression -> ternary_expression .)
    TILDE           reduce using rule 128 (assignment_expression -> ternary_expression .)
    LPAREN          reduce using rule 128 (assignment_expression -> ternary_expression .)
    LBRACKET        reduce using rule 128 (assignment_expression -> ternary_expression .)
    INTNUMBER       reduce using rule 128 (assignment_expression -> ternary_expression .)
    FLOATNUMBER     reduce using rule 128 (assignment_expression -> ternary_expression .)
    STRING          reduce using rule 128 (assignment_expression -> ternary_expression .)
    CHAR            reduce using rule 128 (assignment_expression -> ternary_expression .)
    TRUE            reduce using rule 128 (assignment_expression -> ternary_expression .)
    FALSE           reduce using rule 128 (assignment_expression -> ternary_expression .)
    COMMA           reduce using rule 128 (assignment_expression -> ternary_expression .)
    RBRACKET        reduce using rule 128 (assignment_expression -> ternary_expression .)
    CONSTANT        reduce using rule 128 (assignment_expression -> ternary_expression .)
    MODULE          reduce using rule 128 (assignment_expression -> ternary_expression .)
    DEF             reduce using rule 128 (assignment_expression -> ternary_expression .)
    TCOLON          reduce using rule 128 (assignment_expression -> ternary_expression .)


state 32

    (91) conditional -> if_statement .

    $end            reduce using rule 91 (conditional -> if_statement .)
    END             reduce using rule 91 (conditional -> if_statement .)
    ELSIF           reduce using rule 91 (conditional -> if_statement .)
    ELSE            reduce using rule 91 (conditional -> if_statement .)
    RBRACE          reduce using rule 91 (conditional -> if_statement .)
    WHEN            reduce using rule 91 (conditional -> if_statement .)


state 33

    (92) conditional -> unless_statement .

    $end            reduce using rule 92 (conditional -> unless_statement .)
    END             reduce using rule 92 (conditional -> unless_statement .)
    ELSIF           reduce using rule 92 (conditional -> unless_statement .)
    ELSE            reduce using rule 92 (conditional -> unless_statement .)
    RBRACE          reduce using rule 92 (conditional -> unless_statement .)
    WHEN            reduce using rule 92 (conditional -> unless_statement .)


state 34

    (104) loop_structure -> while .

    $end            reduce using rule 104 (loop_structure -> while .)
    END             reduce using rule 104 (loop_structure -> while .)
    ELSIF           reduce using rule 104 (loop_structure -> while .)
    ELSE            reduce using rule 104 (loop_structure -> while .)
    RBRACE          reduce using rule 104 (loop_structure -> while .)
    WHEN            reduce using rule 104 (loop_structure -> while .)


state 35

    (105) loop_structure -> until .

    $end            reduce using rule 105 (loop_structure -> until .)
    END             reduce using rule 105 (loop_structure -> until .)
    ELSIF           reduce using rule 105 (loop_structure -> until .)
    ELSE            reduce using rule 105 (loop_structure -> until .)
    RBRACE          reduce using rule 105 (loop_structure -> until .)
    WHEN            reduce using rule 105 (loop_structure -> until .)


state 36

    (106) loop_structure -> loop .

    $end            reduce using rule 106 (loop_structure -> loop .)
    END             reduce using rule 106 (loop_structure -> loop .)
    ELSIF           reduce using rule 106 (loop_structure -> loop .)
    ELSE            reduce using rule 106 (loop_structure -> loop .)
    RBRACE          reduce using rule 106 (loop_structure -> loop .)
    WHEN            reduce using rule 106 (loop_structure -> loop .)


state 37

    (107) loop_structure -> iterator .

    $end            reduce using rule 107 (loop_structure -> iterator .)
    END             reduce using rule 107 (loop_structure -> iterator .)
    ELSIF           reduce using rule 107 (loop_structure -> iterator .)
    ELSE            reduce using rule 107 (loop_structure -> iterator .)
    RBRACE          reduce using rule 107 (loop_structure -> iterator .)
    WHEN            reduce using rule 107 (loop_structure -> iterator .)


state 38

    (114) case_structure -> CASE . expression when_list opt_else END
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 97
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 39

    (117) return_statement -> RETURN . opt_expression
    (120) opt_expression -> . expression
    (121) opt_expression -> . empty
    (122) expression -> . assignment_expression
    (169) empty -> .
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    $end            reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)
    ELSIF           reduce using rule 169 (empty -> .)
    ELSE            reduce using rule 169 (empty -> .)
    RBRACE          reduce using rule 169 (empty -> .)
    WHEN            reduce using rule 169 (empty -> .)
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    opt_expression                 shift and go to state 98
    expression                     shift and go to state 99
    empty                          shift and go to state 100
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 40

    (118) break_statement -> BREAK . opt_expression
    (120) opt_expression -> . expression
    (121) opt_expression -> . empty
    (122) expression -> . assignment_expression
    (169) empty -> .
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    $end            reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)
    ELSIF           reduce using rule 169 (empty -> .)
    ELSE            reduce using rule 169 (empty -> .)
    RBRACE          reduce using rule 169 (empty -> .)
    WHEN            reduce using rule 169 (empty -> .)
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    opt_expression                 shift and go to state 101
    expression                     shift and go to state 99
    empty                          shift and go to state 100
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 41

    (119) next_statement -> NEXT . opt_expression
    (120) opt_expression -> . expression
    (121) opt_expression -> . empty
    (122) expression -> . assignment_expression
    (169) empty -> .
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    $end            reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)
    ELSIF           reduce using rule 169 (empty -> .)
    ELSE            reduce using rule 169 (empty -> .)
    RBRACE          reduce using rule 169 (empty -> .)
    WHEN            reduce using rule 169 (empty -> .)
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    opt_expression                 shift and go to state 102
    expression                     shift and go to state 99
    empty                          shift and go to state 100
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 42

    (130) assignment_target -> UNDERSCORE .

    ASSIGN          reduce using rule 130 (assignment_target -> UNDERSCORE .)
    PLUS_ASSIGN     reduce using rule 130 (assignment_target -> UNDERSCORE .)
    MINUS_ASSIGN    reduce using rule 130 (assignment_target -> UNDERSCORE .)
    MULTI_ASSIGN    reduce using rule 130 (assignment_target -> UNDERSCORE .)
    DIVIDE_ASSIGN   reduce using rule 130 (assignment_target -> UNDERSCORE .)


state 43

    (131) assignment_target -> ASTERISK . assignment_target
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target

    ID              shift and go to state 104
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43

    assignment_target              shift and go to state 103

state 44

    (132) ternary_expression -> range_expression . QMARK expression TCOLON expression
    (133) ternary_expression -> range_expression .

    QMARK           shift and go to state 105
    DOT             reduce using rule 133 (ternary_expression -> range_expression .)
    $end            reduce using rule 133 (ternary_expression -> range_expression .)
    RPAREN          reduce using rule 133 (ternary_expression -> range_expression .)
    WHEN            reduce using rule 133 (ternary_expression -> range_expression .)
    END             reduce using rule 133 (ternary_expression -> range_expression .)
    ELSIF           reduce using rule 133 (ternary_expression -> range_expression .)
    ELSE            reduce using rule 133 (ternary_expression -> range_expression .)
    RBRACE          reduce using rule 133 (ternary_expression -> range_expression .)
    LBRACE          reduce using rule 133 (ternary_expression -> range_expression .)
    ID              reduce using rule 133 (ternary_expression -> range_expression .)
    CASE            reduce using rule 133 (ternary_expression -> range_expression .)
    RETURN          reduce using rule 133 (ternary_expression -> range_expression .)
    BREAK           reduce using rule 133 (ternary_expression -> range_expression .)
    NEXT            reduce using rule 133 (ternary_expression -> range_expression .)
    UNDERSCORE      reduce using rule 133 (ternary_expression -> range_expression .)
    ASTERISK        reduce using rule 133 (ternary_expression -> range_expression .)
    IF              reduce using rule 133 (ternary_expression -> range_expression .)
    UNLESS          reduce using rule 133 (ternary_expression -> range_expression .)
    WHILE           reduce using rule 133 (ternary_expression -> range_expression .)
    UNTIL           reduce using rule 133 (ternary_expression -> range_expression .)
    LOOP            reduce using rule 133 (ternary_expression -> range_expression .)
    PLUS            reduce using rule 133 (ternary_expression -> range_expression .)
    MINUS           reduce using rule 133 (ternary_expression -> range_expression .)
    EXCLAMATION     reduce using rule 133 (ternary_expression -> range_expression .)
    TILDE           reduce using rule 133 (ternary_expression -> range_expression .)
    LPAREN          reduce using rule 133 (ternary_expression -> range_expression .)
    LBRACKET        reduce using rule 133 (ternary_expression -> range_expression .)
    INTNUMBER       reduce using rule 133 (ternary_expression -> range_expression .)
    FLOATNUMBER     reduce using rule 133 (ternary_expression -> range_expression .)
    STRING          reduce using rule 133 (ternary_expression -> range_expression .)
    CHAR            reduce using rule 133 (ternary_expression -> range_expression .)
    TRUE            reduce using rule 133 (ternary_expression -> range_expression .)
    FALSE           reduce using rule 133 (ternary_expression -> range_expression .)
    COMMA           reduce using rule 133 (ternary_expression -> range_expression .)
    RBRACKET        reduce using rule 133 (ternary_expression -> range_expression .)
    CONSTANT        reduce using rule 133 (ternary_expression -> range_expression .)
    MODULE          reduce using rule 133 (ternary_expression -> range_expression .)
    DEF             reduce using rule 133 (ternary_expression -> range_expression .)
    TCOLON          reduce using rule 133 (ternary_expression -> range_expression .)


state 45

    (93) if_statement -> IF . if_condition statements opt_elsif opt_else END
    (95) if_condition -> . expression
    (96) if_condition -> . expression LBRACE statements RBRACE
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    if_condition                   shift and go to state 106
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 46

    (94) unless_statement -> UNLESS . if_condition statements opt_else END
    (95) if_condition -> . expression
    (96) if_condition -> . expression LBRACE statements RBRACE
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    if_condition                   shift and go to state 108
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 47

    (108) while -> WHILE . expression statements
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 109
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 48

    (109) until -> UNTIL . expression statements
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 110
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 49

    (110) loop -> LOOP . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 111
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 50

    (134) range_expression -> logical_or_expression . DOTDOT logical_or_expression
    (135) range_expression -> logical_or_expression . DOTDOTDOT logical_or_expression
    (136) range_expression -> logical_or_expression .
    (138) logical_or_expression -> logical_or_expression . OR logical_and_expression

    DOTDOT          shift and go to state 112
    DOTDOTDOT       shift and go to state 113
    QMARK           reduce using rule 136 (range_expression -> logical_or_expression .)
    DOT             reduce using rule 136 (range_expression -> logical_or_expression .)
    $end            reduce using rule 136 (range_expression -> logical_or_expression .)
    RPAREN          reduce using rule 136 (range_expression -> logical_or_expression .)
    WHEN            reduce using rule 136 (range_expression -> logical_or_expression .)
    END             reduce using rule 136 (range_expression -> logical_or_expression .)
    ELSIF           reduce using rule 136 (range_expression -> logical_or_expression .)
    ELSE            reduce using rule 136 (range_expression -> logical_or_expression .)
    RBRACE          reduce using rule 136 (range_expression -> logical_or_expression .)
    LBRACE          reduce using rule 136 (range_expression -> logical_or_expression .)
    ID              reduce using rule 136 (range_expression -> logical_or_expression .)
    CASE            reduce using rule 136 (range_expression -> logical_or_expression .)
    RETURN          reduce using rule 136 (range_expression -> logical_or_expression .)
    BREAK           reduce using rule 136 (range_expression -> logical_or_expression .)
    NEXT            reduce using rule 136 (range_expression -> logical_or_expression .)
    UNDERSCORE      reduce using rule 136 (range_expression -> logical_or_expression .)
    ASTERISK        reduce using rule 136 (range_expression -> logical_or_expression .)
    IF              reduce using rule 136 (range_expression -> logical_or_expression .)
    UNLESS          reduce using rule 136 (range_expression -> logical_or_expression .)
    WHILE           reduce using rule 136 (range_expression -> logical_or_expression .)
    UNTIL           reduce using rule 136 (range_expression -> logical_or_expression .)
    LOOP            reduce using rule 136 (range_expression -> logical_or_expression .)
    PLUS            reduce using rule 136 (range_expression -> logical_or_expression .)
    MINUS           reduce using rule 136 (range_expression -> logical_or_expression .)
    EXCLAMATION     reduce using rule 136 (range_expression -> logical_or_expression .)
    TILDE           reduce using rule 136 (range_expression -> logical_or_expression .)
    LPAREN          reduce using rule 136 (range_expression -> logical_or_expression .)
    LBRACKET        reduce using rule 136 (range_expression -> logical_or_expression .)
    INTNUMBER       reduce using rule 136 (range_expression -> logical_or_expression .)
    FLOATNUMBER     reduce using rule 136 (range_expression -> logical_or_expression .)
    STRING          reduce using rule 136 (range_expression -> logical_or_expression .)
    CHAR            reduce using rule 136 (range_expression -> logical_or_expression .)
    TRUE            reduce using rule 136 (range_expression -> logical_or_expression .)
    FALSE           reduce using rule 136 (range_expression -> logical_or_expression .)
    COMMA           reduce using rule 136 (range_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 136 (range_expression -> logical_or_expression .)
    CONSTANT        reduce using rule 136 (range_expression -> logical_or_expression .)
    MODULE          reduce using rule 136 (range_expression -> logical_or_expression .)
    DEF             reduce using rule 136 (range_expression -> logical_or_expression .)
    TCOLON          reduce using rule 136 (range_expression -> logical_or_expression .)
    OR              shift and go to state 114


state 51

    (137) logical_or_expression -> logical_and_expression .
    (140) logical_and_expression -> logical_and_expression . AND equality_expression

    DOTDOT          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    DOTDOTDOT       reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    QMARK           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    DOT             reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    WHEN            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    END             reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    ELSIF           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    ELSE            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    LBRACE          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    ID              reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    CASE            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    NEXT            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    UNDERSCORE      reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    ASTERISK        reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    UNLESS          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    WHILE           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    UNTIL           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    LOOP            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    PLUS            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    EXCLAMATION     reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    TILDE           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    LBRACKET        reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    INTNUMBER       reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    FLOATNUMBER     reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    STRING          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    TRUE            reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    FALSE           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    CONSTANT        reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    MODULE          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    DEF             reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    TCOLON          reduce using rule 137 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 115


state 52

    (139) logical_and_expression -> equality_expression .
    (142) equality_expression -> equality_expression . EQUAL relational_expression
    (143) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (144) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 139 (logical_and_expression -> equality_expression .)
    DOTDOT          reduce using rule 139 (logical_and_expression -> equality_expression .)
    DOTDOTDOT       reduce using rule 139 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 139 (logical_and_expression -> equality_expression .)
    QMARK           reduce using rule 139 (logical_and_expression -> equality_expression .)
    DOT             reduce using rule 139 (logical_and_expression -> equality_expression .)
    $end            reduce using rule 139 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 139 (logical_and_expression -> equality_expression .)
    WHEN            reduce using rule 139 (logical_and_expression -> equality_expression .)
    END             reduce using rule 139 (logical_and_expression -> equality_expression .)
    ELSIF           reduce using rule 139 (logical_and_expression -> equality_expression .)
    ELSE            reduce using rule 139 (logical_and_expression -> equality_expression .)
    RBRACE          reduce using rule 139 (logical_and_expression -> equality_expression .)
    LBRACE          reduce using rule 139 (logical_and_expression -> equality_expression .)
    ID              reduce using rule 139 (logical_and_expression -> equality_expression .)
    CASE            reduce using rule 139 (logical_and_expression -> equality_expression .)
    RETURN          reduce using rule 139 (logical_and_expression -> equality_expression .)
    BREAK           reduce using rule 139 (logical_and_expression -> equality_expression .)
    NEXT            reduce using rule 139 (logical_and_expression -> equality_expression .)
    UNDERSCORE      reduce using rule 139 (logical_and_expression -> equality_expression .)
    ASTERISK        reduce using rule 139 (logical_and_expression -> equality_expression .)
    IF              reduce using rule 139 (logical_and_expression -> equality_expression .)
    UNLESS          reduce using rule 139 (logical_and_expression -> equality_expression .)
    WHILE           reduce using rule 139 (logical_and_expression -> equality_expression .)
    UNTIL           reduce using rule 139 (logical_and_expression -> equality_expression .)
    LOOP            reduce using rule 139 (logical_and_expression -> equality_expression .)
    PLUS            reduce using rule 139 (logical_and_expression -> equality_expression .)
    MINUS           reduce using rule 139 (logical_and_expression -> equality_expression .)
    EXCLAMATION     reduce using rule 139 (logical_and_expression -> equality_expression .)
    TILDE           reduce using rule 139 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 139 (logical_and_expression -> equality_expression .)
    LBRACKET        reduce using rule 139 (logical_and_expression -> equality_expression .)
    INTNUMBER       reduce using rule 139 (logical_and_expression -> equality_expression .)
    FLOATNUMBER     reduce using rule 139 (logical_and_expression -> equality_expression .)
    STRING          reduce using rule 139 (logical_and_expression -> equality_expression .)
    CHAR            reduce using rule 139 (logical_and_expression -> equality_expression .)
    TRUE            reduce using rule 139 (logical_and_expression -> equality_expression .)
    FALSE           reduce using rule 139 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 139 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 139 (logical_and_expression -> equality_expression .)
    CONSTANT        reduce using rule 139 (logical_and_expression -> equality_expression .)
    MODULE          reduce using rule 139 (logical_and_expression -> equality_expression .)
    DEF             reduce using rule 139 (logical_and_expression -> equality_expression .)
    TCOLON          reduce using rule 139 (logical_and_expression -> equality_expression .)
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 117
    TIPO_EQUAL      shift and go to state 118


state 53

    (141) equality_expression -> relational_expression .
    (146) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (147) relational_expression -> relational_expression . LESS_THAN additive_expression
    (148) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (149) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 141 (equality_expression -> relational_expression .)
    NOT_EQUAL       reduce using rule 141 (equality_expression -> relational_expression .)
    TIPO_EQUAL      reduce using rule 141 (equality_expression -> relational_expression .)
    AND             reduce using rule 141 (equality_expression -> relational_expression .)
    DOTDOT          reduce using rule 141 (equality_expression -> relational_expression .)
    DOTDOTDOT       reduce using rule 141 (equality_expression -> relational_expression .)
    OR              reduce using rule 141 (equality_expression -> relational_expression .)
    QMARK           reduce using rule 141 (equality_expression -> relational_expression .)
    DOT             reduce using rule 141 (equality_expression -> relational_expression .)
    $end            reduce using rule 141 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 141 (equality_expression -> relational_expression .)
    WHEN            reduce using rule 141 (equality_expression -> relational_expression .)
    END             reduce using rule 141 (equality_expression -> relational_expression .)
    ELSIF           reduce using rule 141 (equality_expression -> relational_expression .)
    ELSE            reduce using rule 141 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 141 (equality_expression -> relational_expression .)
    LBRACE          reduce using rule 141 (equality_expression -> relational_expression .)
    ID              reduce using rule 141 (equality_expression -> relational_expression .)
    CASE            reduce using rule 141 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 141 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 141 (equality_expression -> relational_expression .)
    NEXT            reduce using rule 141 (equality_expression -> relational_expression .)
    UNDERSCORE      reduce using rule 141 (equality_expression -> relational_expression .)
    ASTERISK        reduce using rule 141 (equality_expression -> relational_expression .)
    IF              reduce using rule 141 (equality_expression -> relational_expression .)
    UNLESS          reduce using rule 141 (equality_expression -> relational_expression .)
    WHILE           reduce using rule 141 (equality_expression -> relational_expression .)
    UNTIL           reduce using rule 141 (equality_expression -> relational_expression .)
    LOOP            reduce using rule 141 (equality_expression -> relational_expression .)
    PLUS            reduce using rule 141 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 141 (equality_expression -> relational_expression .)
    EXCLAMATION     reduce using rule 141 (equality_expression -> relational_expression .)
    TILDE           reduce using rule 141 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 141 (equality_expression -> relational_expression .)
    LBRACKET        reduce using rule 141 (equality_expression -> relational_expression .)
    INTNUMBER       reduce using rule 141 (equality_expression -> relational_expression .)
    FLOATNUMBER     reduce using rule 141 (equality_expression -> relational_expression .)
    STRING          reduce using rule 141 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 141 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 141 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 141 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 141 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 141 (equality_expression -> relational_expression .)
    CONSTANT        reduce using rule 141 (equality_expression -> relational_expression .)
    MODULE          reduce using rule 141 (equality_expression -> relational_expression .)
    DEF             reduce using rule 141 (equality_expression -> relational_expression .)
    TCOLON          reduce using rule 141 (equality_expression -> relational_expression .)
    GREATER_THAN    shift and go to state 119
    LESS_THAN       shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    LESS_EQUAL      shift and go to state 122


state 54

    (145) relational_expression -> additive_expression .
    (151) additive_expression -> additive_expression . PLUS multiplicative_expression
    (152) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GREATER_THAN    reduce using rule 145 (relational_expression -> additive_expression .)
    LESS_THAN       reduce using rule 145 (relational_expression -> additive_expression .)
    GREATER_EQUAL   reduce using rule 145 (relational_expression -> additive_expression .)
    LESS_EQUAL      reduce using rule 145 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 145 (relational_expression -> additive_expression .)
    NOT_EQUAL       reduce using rule 145 (relational_expression -> additive_expression .)
    TIPO_EQUAL      reduce using rule 145 (relational_expression -> additive_expression .)
    AND             reduce using rule 145 (relational_expression -> additive_expression .)
    DOTDOT          reduce using rule 145 (relational_expression -> additive_expression .)
    DOTDOTDOT       reduce using rule 145 (relational_expression -> additive_expression .)
    OR              reduce using rule 145 (relational_expression -> additive_expression .)
    QMARK           reduce using rule 145 (relational_expression -> additive_expression .)
    DOT             reduce using rule 145 (relational_expression -> additive_expression .)
    $end            reduce using rule 145 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 145 (relational_expression -> additive_expression .)
    WHEN            reduce using rule 145 (relational_expression -> additive_expression .)
    END             reduce using rule 145 (relational_expression -> additive_expression .)
    ELSIF           reduce using rule 145 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 145 (relational_expression -> additive_expression .)
    RBRACE          reduce using rule 145 (relational_expression -> additive_expression .)
    LBRACE          reduce using rule 145 (relational_expression -> additive_expression .)
    ID              reduce using rule 145 (relational_expression -> additive_expression .)
    CASE            reduce using rule 145 (relational_expression -> additive_expression .)
    RETURN          reduce using rule 145 (relational_expression -> additive_expression .)
    BREAK           reduce using rule 145 (relational_expression -> additive_expression .)
    NEXT            reduce using rule 145 (relational_expression -> additive_expression .)
    UNDERSCORE      reduce using rule 145 (relational_expression -> additive_expression .)
    ASTERISK        reduce using rule 145 (relational_expression -> additive_expression .)
    IF              reduce using rule 145 (relational_expression -> additive_expression .)
    UNLESS          reduce using rule 145 (relational_expression -> additive_expression .)
    WHILE           reduce using rule 145 (relational_expression -> additive_expression .)
    UNTIL           reduce using rule 145 (relational_expression -> additive_expression .)
    LOOP            reduce using rule 145 (relational_expression -> additive_expression .)
    EXCLAMATION     reduce using rule 145 (relational_expression -> additive_expression .)
    TILDE           reduce using rule 145 (relational_expression -> additive_expression .)
    LPAREN          reduce using rule 145 (relational_expression -> additive_expression .)
    LBRACKET        reduce using rule 145 (relational_expression -> additive_expression .)
    INTNUMBER       reduce using rule 145 (relational_expression -> additive_expression .)
    FLOATNUMBER     reduce using rule 145 (relational_expression -> additive_expression .)
    STRING          reduce using rule 145 (relational_expression -> additive_expression .)
    CHAR            reduce using rule 145 (relational_expression -> additive_expression .)
    TRUE            reduce using rule 145 (relational_expression -> additive_expression .)
    FALSE           reduce using rule 145 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 145 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 145 (relational_expression -> additive_expression .)
    CONSTANT        reduce using rule 145 (relational_expression -> additive_expression .)
    MODULE          reduce using rule 145 (relational_expression -> additive_expression .)
    DEF             reduce using rule 145 (relational_expression -> additive_expression .)
    TCOLON          reduce using rule 145 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

  ! PLUS            [ reduce using rule 145 (relational_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 145 (relational_expression -> additive_expression .) ]


state 55

    (150) additive_expression -> multiplicative_expression .
    (154) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (155) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (156) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 150 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 150 (additive_expression -> multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 150 (additive_expression -> multiplicative_expression .)
    LESS_EQUAL      reduce using rule 150 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    NOT_EQUAL       reduce using rule 150 (additive_expression -> multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 150 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 150 (additive_expression -> multiplicative_expression .)
    DOTDOT          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    DOTDOTDOT       reduce using rule 150 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 150 (additive_expression -> multiplicative_expression .)
    QMARK           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    DOT             reduce using rule 150 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    WHEN            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 150 (additive_expression -> multiplicative_expression .)
    ELSIF           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    LBRACE          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    ID              reduce using rule 150 (additive_expression -> multiplicative_expression .)
    CASE            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    NEXT            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    UNDERSCORE      reduce using rule 150 (additive_expression -> multiplicative_expression .)
    ASTERISK        reduce using rule 150 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 150 (additive_expression -> multiplicative_expression .)
    UNLESS          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    WHILE           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    UNTIL           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    LOOP            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    EXCLAMATION     reduce using rule 150 (additive_expression -> multiplicative_expression .)
    TILDE           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    LBRACKET        reduce using rule 150 (additive_expression -> multiplicative_expression .)
    INTNUMBER       reduce using rule 150 (additive_expression -> multiplicative_expression .)
    FLOATNUMBER     reduce using rule 150 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    TRUE            reduce using rule 150 (additive_expression -> multiplicative_expression .)
    FALSE           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 150 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 150 (additive_expression -> multiplicative_expression .)
    CONSTANT        reduce using rule 150 (additive_expression -> multiplicative_expression .)
    MODULE          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    DEF             reduce using rule 150 (additive_expression -> multiplicative_expression .)
    TCOLON          reduce using rule 150 (additive_expression -> multiplicative_expression .)
    MULTI           shift and go to state 125
    DIVIDE          shift and go to state 126
    MODULO          shift and go to state 127


state 56

    (159) unary_expression -> PLUS . unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    unary_expression               shift and go to state 128
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 57

    (160) unary_expression -> MINUS . unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    unary_expression               shift and go to state 130
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 58

    (153) multiplicative_expression -> potenciacao_expression .
    (158) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    DIVIDE          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    MODULO          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    PLUS            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    MINUS           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    GREATER_THAN    reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    LESS_THAN       reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    LESS_EQUAL      reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    EQUAL           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    NOT_EQUAL       reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    AND             reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    DOTDOT          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    DOTDOTDOT       reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    OR              reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    QMARK           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    DOT             reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    $end            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    RPAREN          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    WHEN            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    END             reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    ELSIF           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    ELSE            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    RBRACE          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    LBRACE          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    ID              reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    CASE            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    RETURN          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    BREAK           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    NEXT            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    UNDERSCORE      reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    ASTERISK        reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    IF              reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    UNLESS          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    WHILE           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    UNTIL           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    LOOP            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    EXCLAMATION     reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    TILDE           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    LPAREN          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    LBRACKET        reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    INTNUMBER       reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    FLOATNUMBER     reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    STRING          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    CHAR            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    TRUE            reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    FALSE           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    COMMA           reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    RBRACKET        reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    CONSTANT        reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    MODULE          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    DEF             reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    TCOLON          reduce using rule 153 (multiplicative_expression -> potenciacao_expression .)
    POTENCIACAO     shift and go to state 131


state 59

    (157) potenciacao_expression -> unary_expression .

    POTENCIACAO     reduce using rule 157 (potenciacao_expression -> unary_expression .)
    MULTI           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    DIVIDE          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    MODULO          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    PLUS            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    MINUS           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 157 (potenciacao_expression -> unary_expression .)
    LESS_THAN       reduce using rule 157 (potenciacao_expression -> unary_expression .)
    GREATER_EQUAL   reduce using rule 157 (potenciacao_expression -> unary_expression .)
    LESS_EQUAL      reduce using rule 157 (potenciacao_expression -> unary_expression .)
    EQUAL           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 157 (potenciacao_expression -> unary_expression .)
    TIPO_EQUAL      reduce using rule 157 (potenciacao_expression -> unary_expression .)
    AND             reduce using rule 157 (potenciacao_expression -> unary_expression .)
    DOTDOT          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    DOTDOTDOT       reduce using rule 157 (potenciacao_expression -> unary_expression .)
    OR              reduce using rule 157 (potenciacao_expression -> unary_expression .)
    QMARK           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    DOT             reduce using rule 157 (potenciacao_expression -> unary_expression .)
    $end            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    RPAREN          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    WHEN            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    END             reduce using rule 157 (potenciacao_expression -> unary_expression .)
    ELSIF           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    ELSE            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    RBRACE          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    LBRACE          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    ID              reduce using rule 157 (potenciacao_expression -> unary_expression .)
    CASE            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    RETURN          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    BREAK           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    NEXT            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    UNDERSCORE      reduce using rule 157 (potenciacao_expression -> unary_expression .)
    ASTERISK        reduce using rule 157 (potenciacao_expression -> unary_expression .)
    IF              reduce using rule 157 (potenciacao_expression -> unary_expression .)
    UNLESS          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    WHILE           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    UNTIL           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    LOOP            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    EXCLAMATION     reduce using rule 157 (potenciacao_expression -> unary_expression .)
    TILDE           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    LPAREN          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    LBRACKET        reduce using rule 157 (potenciacao_expression -> unary_expression .)
    INTNUMBER       reduce using rule 157 (potenciacao_expression -> unary_expression .)
    FLOATNUMBER     reduce using rule 157 (potenciacao_expression -> unary_expression .)
    STRING          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    CHAR            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    TRUE            reduce using rule 157 (potenciacao_expression -> unary_expression .)
    FALSE           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    COMMA           reduce using rule 157 (potenciacao_expression -> unary_expression .)
    RBRACKET        reduce using rule 157 (potenciacao_expression -> unary_expression .)
    CONSTANT        reduce using rule 157 (potenciacao_expression -> unary_expression .)
    MODULE          reduce using rule 157 (potenciacao_expression -> unary_expression .)
    DEF             reduce using rule 157 (potenciacao_expression -> unary_expression .)
    TCOLON          reduce using rule 157 (potenciacao_expression -> unary_expression .)


state 60

    (161) unary_expression -> EXCLAMATION . unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    unary_expression               shift and go to state 132
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 61

    (162) unary_expression -> TILDE . unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    unary_expression               shift and go to state 133
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 62

    (163) unary_expression -> primary_expression .

    POTENCIACAO     reduce using rule 163 (unary_expression -> primary_expression .)
    MULTI           reduce using rule 163 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 163 (unary_expression -> primary_expression .)
    MODULO          reduce using rule 163 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 163 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 163 (unary_expression -> primary_expression .)
    GREATER_THAN    reduce using rule 163 (unary_expression -> primary_expression .)
    LESS_THAN       reduce using rule 163 (unary_expression -> primary_expression .)
    GREATER_EQUAL   reduce using rule 163 (unary_expression -> primary_expression .)
    LESS_EQUAL      reduce using rule 163 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 163 (unary_expression -> primary_expression .)
    NOT_EQUAL       reduce using rule 163 (unary_expression -> primary_expression .)
    TIPO_EQUAL      reduce using rule 163 (unary_expression -> primary_expression .)
    AND             reduce using rule 163 (unary_expression -> primary_expression .)
    DOTDOT          reduce using rule 163 (unary_expression -> primary_expression .)
    DOTDOTDOT       reduce using rule 163 (unary_expression -> primary_expression .)
    OR              reduce using rule 163 (unary_expression -> primary_expression .)
    QMARK           reduce using rule 163 (unary_expression -> primary_expression .)
    DOT             reduce using rule 163 (unary_expression -> primary_expression .)
    $end            reduce using rule 163 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 163 (unary_expression -> primary_expression .)
    WHEN            reduce using rule 163 (unary_expression -> primary_expression .)
    END             reduce using rule 163 (unary_expression -> primary_expression .)
    ELSIF           reduce using rule 163 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 163 (unary_expression -> primary_expression .)
    RBRACE          reduce using rule 163 (unary_expression -> primary_expression .)
    LBRACE          reduce using rule 163 (unary_expression -> primary_expression .)
    ID              reduce using rule 163 (unary_expression -> primary_expression .)
    CASE            reduce using rule 163 (unary_expression -> primary_expression .)
    RETURN          reduce using rule 163 (unary_expression -> primary_expression .)
    BREAK           reduce using rule 163 (unary_expression -> primary_expression .)
    NEXT            reduce using rule 163 (unary_expression -> primary_expression .)
    UNDERSCORE      reduce using rule 163 (unary_expression -> primary_expression .)
    ASTERISK        reduce using rule 163 (unary_expression -> primary_expression .)
    IF              reduce using rule 163 (unary_expression -> primary_expression .)
    UNLESS          reduce using rule 163 (unary_expression -> primary_expression .)
    WHILE           reduce using rule 163 (unary_expression -> primary_expression .)
    UNTIL           reduce using rule 163 (unary_expression -> primary_expression .)
    LOOP            reduce using rule 163 (unary_expression -> primary_expression .)
    EXCLAMATION     reduce using rule 163 (unary_expression -> primary_expression .)
    TILDE           reduce using rule 163 (unary_expression -> primary_expression .)
    LPAREN          reduce using rule 163 (unary_expression -> primary_expression .)
    LBRACKET        reduce using rule 163 (unary_expression -> primary_expression .)
    INTNUMBER       reduce using rule 163 (unary_expression -> primary_expression .)
    FLOATNUMBER     reduce using rule 163 (unary_expression -> primary_expression .)
    STRING          reduce using rule 163 (unary_expression -> primary_expression .)
    CHAR            reduce using rule 163 (unary_expression -> primary_expression .)
    TRUE            reduce using rule 163 (unary_expression -> primary_expression .)
    FALSE           reduce using rule 163 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 163 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 163 (unary_expression -> primary_expression .)
    CONSTANT        reduce using rule 163 (unary_expression -> primary_expression .)
    MODULE          reduce using rule 163 (unary_expression -> primary_expression .)
    DEF             reduce using rule 163 (unary_expression -> primary_expression .)
    TCOLON          reduce using rule 163 (unary_expression -> primary_expression .)


state 63

    (165) primary_expression -> array_literal .

    POTENCIACAO     reduce using rule 165 (primary_expression -> array_literal .)
    MULTI           reduce using rule 165 (primary_expression -> array_literal .)
    DIVIDE          reduce using rule 165 (primary_expression -> array_literal .)
    MODULO          reduce using rule 165 (primary_expression -> array_literal .)
    PLUS            reduce using rule 165 (primary_expression -> array_literal .)
    MINUS           reduce using rule 165 (primary_expression -> array_literal .)
    GREATER_THAN    reduce using rule 165 (primary_expression -> array_literal .)
    LESS_THAN       reduce using rule 165 (primary_expression -> array_literal .)
    GREATER_EQUAL   reduce using rule 165 (primary_expression -> array_literal .)
    LESS_EQUAL      reduce using rule 165 (primary_expression -> array_literal .)
    EQUAL           reduce using rule 165 (primary_expression -> array_literal .)
    NOT_EQUAL       reduce using rule 165 (primary_expression -> array_literal .)
    TIPO_EQUAL      reduce using rule 165 (primary_expression -> array_literal .)
    AND             reduce using rule 165 (primary_expression -> array_literal .)
    DOTDOT          reduce using rule 165 (primary_expression -> array_literal .)
    DOTDOTDOT       reduce using rule 165 (primary_expression -> array_literal .)
    OR              reduce using rule 165 (primary_expression -> array_literal .)
    QMARK           reduce using rule 165 (primary_expression -> array_literal .)
    DOT             reduce using rule 165 (primary_expression -> array_literal .)
    $end            reduce using rule 165 (primary_expression -> array_literal .)
    RPAREN          reduce using rule 165 (primary_expression -> array_literal .)
    WHEN            reduce using rule 165 (primary_expression -> array_literal .)
    END             reduce using rule 165 (primary_expression -> array_literal .)
    ELSIF           reduce using rule 165 (primary_expression -> array_literal .)
    ELSE            reduce using rule 165 (primary_expression -> array_literal .)
    RBRACE          reduce using rule 165 (primary_expression -> array_literal .)
    LBRACE          reduce using rule 165 (primary_expression -> array_literal .)
    ID              reduce using rule 165 (primary_expression -> array_literal .)
    CASE            reduce using rule 165 (primary_expression -> array_literal .)
    RETURN          reduce using rule 165 (primary_expression -> array_literal .)
    BREAK           reduce using rule 165 (primary_expression -> array_literal .)
    NEXT            reduce using rule 165 (primary_expression -> array_literal .)
    UNDERSCORE      reduce using rule 165 (primary_expression -> array_literal .)
    ASTERISK        reduce using rule 165 (primary_expression -> array_literal .)
    IF              reduce using rule 165 (primary_expression -> array_literal .)
    UNLESS          reduce using rule 165 (primary_expression -> array_literal .)
    WHILE           reduce using rule 165 (primary_expression -> array_literal .)
    UNTIL           reduce using rule 165 (primary_expression -> array_literal .)
    LOOP            reduce using rule 165 (primary_expression -> array_literal .)
    EXCLAMATION     reduce using rule 165 (primary_expression -> array_literal .)
    TILDE           reduce using rule 165 (primary_expression -> array_literal .)
    LPAREN          reduce using rule 165 (primary_expression -> array_literal .)
    LBRACKET        reduce using rule 165 (primary_expression -> array_literal .)
    INTNUMBER       reduce using rule 165 (primary_expression -> array_literal .)
    FLOATNUMBER     reduce using rule 165 (primary_expression -> array_literal .)
    STRING          reduce using rule 165 (primary_expression -> array_literal .)
    CHAR            reduce using rule 165 (primary_expression -> array_literal .)
    TRUE            reduce using rule 165 (primary_expression -> array_literal .)
    FALSE           reduce using rule 165 (primary_expression -> array_literal .)
    COMMA           reduce using rule 165 (primary_expression -> array_literal .)
    RBRACKET        reduce using rule 165 (primary_expression -> array_literal .)
    CONSTANT        reduce using rule 165 (primary_expression -> array_literal .)
    MODULE          reduce using rule 165 (primary_expression -> array_literal .)
    DEF             reduce using rule 165 (primary_expression -> array_literal .)
    TCOLON          reduce using rule 165 (primary_expression -> array_literal .)


state 64

    (166) primary_expression -> literal .

    POTENCIACAO     reduce using rule 166 (primary_expression -> literal .)
    MULTI           reduce using rule 166 (primary_expression -> literal .)
    DIVIDE          reduce using rule 166 (primary_expression -> literal .)
    MODULO          reduce using rule 166 (primary_expression -> literal .)
    PLUS            reduce using rule 166 (primary_expression -> literal .)
    MINUS           reduce using rule 166 (primary_expression -> literal .)
    GREATER_THAN    reduce using rule 166 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 166 (primary_expression -> literal .)
    GREATER_EQUAL   reduce using rule 166 (primary_expression -> literal .)
    LESS_EQUAL      reduce using rule 166 (primary_expression -> literal .)
    EQUAL           reduce using rule 166 (primary_expression -> literal .)
    NOT_EQUAL       reduce using rule 166 (primary_expression -> literal .)
    TIPO_EQUAL      reduce using rule 166 (primary_expression -> literal .)
    AND             reduce using rule 166 (primary_expression -> literal .)
    DOTDOT          reduce using rule 166 (primary_expression -> literal .)
    DOTDOTDOT       reduce using rule 166 (primary_expression -> literal .)
    OR              reduce using rule 166 (primary_expression -> literal .)
    QMARK           reduce using rule 166 (primary_expression -> literal .)
    DOT             reduce using rule 166 (primary_expression -> literal .)
    $end            reduce using rule 166 (primary_expression -> literal .)
    RPAREN          reduce using rule 166 (primary_expression -> literal .)
    WHEN            reduce using rule 166 (primary_expression -> literal .)
    END             reduce using rule 166 (primary_expression -> literal .)
    ELSIF           reduce using rule 166 (primary_expression -> literal .)
    ELSE            reduce using rule 166 (primary_expression -> literal .)
    RBRACE          reduce using rule 166 (primary_expression -> literal .)
    LBRACE          reduce using rule 166 (primary_expression -> literal .)
    ID              reduce using rule 166 (primary_expression -> literal .)
    CASE            reduce using rule 166 (primary_expression -> literal .)
    RETURN          reduce using rule 166 (primary_expression -> literal .)
    BREAK           reduce using rule 166 (primary_expression -> literal .)
    NEXT            reduce using rule 166 (primary_expression -> literal .)
    UNDERSCORE      reduce using rule 166 (primary_expression -> literal .)
    ASTERISK        reduce using rule 166 (primary_expression -> literal .)
    IF              reduce using rule 166 (primary_expression -> literal .)
    UNLESS          reduce using rule 166 (primary_expression -> literal .)
    WHILE           reduce using rule 166 (primary_expression -> literal .)
    UNTIL           reduce using rule 166 (primary_expression -> literal .)
    LOOP            reduce using rule 166 (primary_expression -> literal .)
    EXCLAMATION     reduce using rule 166 (primary_expression -> literal .)
    TILDE           reduce using rule 166 (primary_expression -> literal .)
    LPAREN          reduce using rule 166 (primary_expression -> literal .)
    LBRACKET        reduce using rule 166 (primary_expression -> literal .)
    INTNUMBER       reduce using rule 166 (primary_expression -> literal .)
    FLOATNUMBER     reduce using rule 166 (primary_expression -> literal .)
    STRING          reduce using rule 166 (primary_expression -> literal .)
    CHAR            reduce using rule 166 (primary_expression -> literal .)
    TRUE            reduce using rule 166 (primary_expression -> literal .)
    FALSE           reduce using rule 166 (primary_expression -> literal .)
    COMMA           reduce using rule 166 (primary_expression -> literal .)
    RBRACKET        reduce using rule 166 (primary_expression -> literal .)
    CONSTANT        reduce using rule 166 (primary_expression -> literal .)
    MODULE          reduce using rule 166 (primary_expression -> literal .)
    DEF             reduce using rule 166 (primary_expression -> literal .)
    TCOLON          reduce using rule 166 (primary_expression -> literal .)


state 65

    (168) array_literal -> LBRACKET . opt_expression_list RBRACKET
    (76) opt_expression_list -> . expression_list
    (77) opt_expression_list -> . empty
    (78) expression_list -> . expression
    (79) expression_list -> . expression_list COMMA expression
    (169) empty -> .
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    RBRACKET        reduce using rule 169 (empty -> .)
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    opt_expression_list            shift and go to state 134
    expression_list                shift and go to state 135
    empty                          shift and go to state 136
    expression                     shift and go to state 137
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 66

    (61) literal -> INTNUMBER .

    POTENCIACAO     reduce using rule 61 (literal -> INTNUMBER .)
    MULTI           reduce using rule 61 (literal -> INTNUMBER .)
    DIVIDE          reduce using rule 61 (literal -> INTNUMBER .)
    MODULO          reduce using rule 61 (literal -> INTNUMBER .)
    PLUS            reduce using rule 61 (literal -> INTNUMBER .)
    MINUS           reduce using rule 61 (literal -> INTNUMBER .)
    GREATER_THAN    reduce using rule 61 (literal -> INTNUMBER .)
    LESS_THAN       reduce using rule 61 (literal -> INTNUMBER .)
    GREATER_EQUAL   reduce using rule 61 (literal -> INTNUMBER .)
    LESS_EQUAL      reduce using rule 61 (literal -> INTNUMBER .)
    EQUAL           reduce using rule 61 (literal -> INTNUMBER .)
    NOT_EQUAL       reduce using rule 61 (literal -> INTNUMBER .)
    TIPO_EQUAL      reduce using rule 61 (literal -> INTNUMBER .)
    AND             reduce using rule 61 (literal -> INTNUMBER .)
    DOTDOT          reduce using rule 61 (literal -> INTNUMBER .)
    DOTDOTDOT       reduce using rule 61 (literal -> INTNUMBER .)
    OR              reduce using rule 61 (literal -> INTNUMBER .)
    QMARK           reduce using rule 61 (literal -> INTNUMBER .)
    DOT             reduce using rule 61 (literal -> INTNUMBER .)
    $end            reduce using rule 61 (literal -> INTNUMBER .)
    RPAREN          reduce using rule 61 (literal -> INTNUMBER .)
    WHEN            reduce using rule 61 (literal -> INTNUMBER .)
    END             reduce using rule 61 (literal -> INTNUMBER .)
    ELSIF           reduce using rule 61 (literal -> INTNUMBER .)
    ELSE            reduce using rule 61 (literal -> INTNUMBER .)
    RBRACE          reduce using rule 61 (literal -> INTNUMBER .)
    LBRACE          reduce using rule 61 (literal -> INTNUMBER .)
    ID              reduce using rule 61 (literal -> INTNUMBER .)
    CASE            reduce using rule 61 (literal -> INTNUMBER .)
    RETURN          reduce using rule 61 (literal -> INTNUMBER .)
    BREAK           reduce using rule 61 (literal -> INTNUMBER .)
    NEXT            reduce using rule 61 (literal -> INTNUMBER .)
    UNDERSCORE      reduce using rule 61 (literal -> INTNUMBER .)
    ASTERISK        reduce using rule 61 (literal -> INTNUMBER .)
    IF              reduce using rule 61 (literal -> INTNUMBER .)
    UNLESS          reduce using rule 61 (literal -> INTNUMBER .)
    WHILE           reduce using rule 61 (literal -> INTNUMBER .)
    UNTIL           reduce using rule 61 (literal -> INTNUMBER .)
    LOOP            reduce using rule 61 (literal -> INTNUMBER .)
    EXCLAMATION     reduce using rule 61 (literal -> INTNUMBER .)
    TILDE           reduce using rule 61 (literal -> INTNUMBER .)
    LPAREN          reduce using rule 61 (literal -> INTNUMBER .)
    LBRACKET        reduce using rule 61 (literal -> INTNUMBER .)
    INTNUMBER       reduce using rule 61 (literal -> INTNUMBER .)
    FLOATNUMBER     reduce using rule 61 (literal -> INTNUMBER .)
    STRING          reduce using rule 61 (literal -> INTNUMBER .)
    CHAR            reduce using rule 61 (literal -> INTNUMBER .)
    TRUE            reduce using rule 61 (literal -> INTNUMBER .)
    FALSE           reduce using rule 61 (literal -> INTNUMBER .)
    COMMA           reduce using rule 61 (literal -> INTNUMBER .)
    RBRACKET        reduce using rule 61 (literal -> INTNUMBER .)
    CONSTANT        reduce using rule 61 (literal -> INTNUMBER .)
    MODULE          reduce using rule 61 (literal -> INTNUMBER .)
    DEF             reduce using rule 61 (literal -> INTNUMBER .)
    TCOLON          reduce using rule 61 (literal -> INTNUMBER .)


state 67

    (62) literal -> FLOATNUMBER .

    POTENCIACAO     reduce using rule 62 (literal -> FLOATNUMBER .)
    MULTI           reduce using rule 62 (literal -> FLOATNUMBER .)
    DIVIDE          reduce using rule 62 (literal -> FLOATNUMBER .)
    MODULO          reduce using rule 62 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 62 (literal -> FLOATNUMBER .)
    MINUS           reduce using rule 62 (literal -> FLOATNUMBER .)
    GREATER_THAN    reduce using rule 62 (literal -> FLOATNUMBER .)
    LESS_THAN       reduce using rule 62 (literal -> FLOATNUMBER .)
    GREATER_EQUAL   reduce using rule 62 (literal -> FLOATNUMBER .)
    LESS_EQUAL      reduce using rule 62 (literal -> FLOATNUMBER .)
    EQUAL           reduce using rule 62 (literal -> FLOATNUMBER .)
    NOT_EQUAL       reduce using rule 62 (literal -> FLOATNUMBER .)
    TIPO_EQUAL      reduce using rule 62 (literal -> FLOATNUMBER .)
    AND             reduce using rule 62 (literal -> FLOATNUMBER .)
    DOTDOT          reduce using rule 62 (literal -> FLOATNUMBER .)
    DOTDOTDOT       reduce using rule 62 (literal -> FLOATNUMBER .)
    OR              reduce using rule 62 (literal -> FLOATNUMBER .)
    QMARK           reduce using rule 62 (literal -> FLOATNUMBER .)
    DOT             reduce using rule 62 (literal -> FLOATNUMBER .)
    $end            reduce using rule 62 (literal -> FLOATNUMBER .)
    RPAREN          reduce using rule 62 (literal -> FLOATNUMBER .)
    WHEN            reduce using rule 62 (literal -> FLOATNUMBER .)
    END             reduce using rule 62 (literal -> FLOATNUMBER .)
    ELSIF           reduce using rule 62 (literal -> FLOATNUMBER .)
    ELSE            reduce using rule 62 (literal -> FLOATNUMBER .)
    RBRACE          reduce using rule 62 (literal -> FLOATNUMBER .)
    LBRACE          reduce using rule 62 (literal -> FLOATNUMBER .)
    ID              reduce using rule 62 (literal -> FLOATNUMBER .)
    CASE            reduce using rule 62 (literal -> FLOATNUMBER .)
    RETURN          reduce using rule 62 (literal -> FLOATNUMBER .)
    BREAK           reduce using rule 62 (literal -> FLOATNUMBER .)
    NEXT            reduce using rule 62 (literal -> FLOATNUMBER .)
    UNDERSCORE      reduce using rule 62 (literal -> FLOATNUMBER .)
    ASTERISK        reduce using rule 62 (literal -> FLOATNUMBER .)
    IF              reduce using rule 62 (literal -> FLOATNUMBER .)
    UNLESS          reduce using rule 62 (literal -> FLOATNUMBER .)
    WHILE           reduce using rule 62 (literal -> FLOATNUMBER .)
    UNTIL           reduce using rule 62 (literal -> FLOATNUMBER .)
    LOOP            reduce using rule 62 (literal -> FLOATNUMBER .)
    EXCLAMATION     reduce using rule 62 (literal -> FLOATNUMBER .)
    TILDE           reduce using rule 62 (literal -> FLOATNUMBER .)
    LPAREN          reduce using rule 62 (literal -> FLOATNUMBER .)
    LBRACKET        reduce using rule 62 (literal -> FLOATNUMBER .)
    INTNUMBER       reduce using rule 62 (literal -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 62 (literal -> FLOATNUMBER .)
    STRING          reduce using rule 62 (literal -> FLOATNUMBER .)
    CHAR            reduce using rule 62 (literal -> FLOATNUMBER .)
    TRUE            reduce using rule 62 (literal -> FLOATNUMBER .)
    FALSE           reduce using rule 62 (literal -> FLOATNUMBER .)
    COMMA           reduce using rule 62 (literal -> FLOATNUMBER .)
    RBRACKET        reduce using rule 62 (literal -> FLOATNUMBER .)
    CONSTANT        reduce using rule 62 (literal -> FLOATNUMBER .)
    MODULE          reduce using rule 62 (literal -> FLOATNUMBER .)
    DEF             reduce using rule 62 (literal -> FLOATNUMBER .)
    TCOLON          reduce using rule 62 (literal -> FLOATNUMBER .)


state 68

    (64) literal -> CHAR .

    POTENCIACAO     reduce using rule 64 (literal -> CHAR .)
    MULTI           reduce using rule 64 (literal -> CHAR .)
    DIVIDE          reduce using rule 64 (literal -> CHAR .)
    MODULO          reduce using rule 64 (literal -> CHAR .)
    PLUS            reduce using rule 64 (literal -> CHAR .)
    MINUS           reduce using rule 64 (literal -> CHAR .)
    GREATER_THAN    reduce using rule 64 (literal -> CHAR .)
    LESS_THAN       reduce using rule 64 (literal -> CHAR .)
    GREATER_EQUAL   reduce using rule 64 (literal -> CHAR .)
    LESS_EQUAL      reduce using rule 64 (literal -> CHAR .)
    EQUAL           reduce using rule 64 (literal -> CHAR .)
    NOT_EQUAL       reduce using rule 64 (literal -> CHAR .)
    TIPO_EQUAL      reduce using rule 64 (literal -> CHAR .)
    AND             reduce using rule 64 (literal -> CHAR .)
    DOTDOT          reduce using rule 64 (literal -> CHAR .)
    DOTDOTDOT       reduce using rule 64 (literal -> CHAR .)
    OR              reduce using rule 64 (literal -> CHAR .)
    QMARK           reduce using rule 64 (literal -> CHAR .)
    DOT             reduce using rule 64 (literal -> CHAR .)
    $end            reduce using rule 64 (literal -> CHAR .)
    RPAREN          reduce using rule 64 (literal -> CHAR .)
    WHEN            reduce using rule 64 (literal -> CHAR .)
    END             reduce using rule 64 (literal -> CHAR .)
    ELSIF           reduce using rule 64 (literal -> CHAR .)
    ELSE            reduce using rule 64 (literal -> CHAR .)
    RBRACE          reduce using rule 64 (literal -> CHAR .)
    LBRACE          reduce using rule 64 (literal -> CHAR .)
    ID              reduce using rule 64 (literal -> CHAR .)
    CASE            reduce using rule 64 (literal -> CHAR .)
    RETURN          reduce using rule 64 (literal -> CHAR .)
    BREAK           reduce using rule 64 (literal -> CHAR .)
    NEXT            reduce using rule 64 (literal -> CHAR .)
    UNDERSCORE      reduce using rule 64 (literal -> CHAR .)
    ASTERISK        reduce using rule 64 (literal -> CHAR .)
    IF              reduce using rule 64 (literal -> CHAR .)
    UNLESS          reduce using rule 64 (literal -> CHAR .)
    WHILE           reduce using rule 64 (literal -> CHAR .)
    UNTIL           reduce using rule 64 (literal -> CHAR .)
    LOOP            reduce using rule 64 (literal -> CHAR .)
    EXCLAMATION     reduce using rule 64 (literal -> CHAR .)
    TILDE           reduce using rule 64 (literal -> CHAR .)
    LPAREN          reduce using rule 64 (literal -> CHAR .)
    LBRACKET        reduce using rule 64 (literal -> CHAR .)
    INTNUMBER       reduce using rule 64 (literal -> CHAR .)
    FLOATNUMBER     reduce using rule 64 (literal -> CHAR .)
    STRING          reduce using rule 64 (literal -> CHAR .)
    CHAR            reduce using rule 64 (literal -> CHAR .)
    TRUE            reduce using rule 64 (literal -> CHAR .)
    FALSE           reduce using rule 64 (literal -> CHAR .)
    COMMA           reduce using rule 64 (literal -> CHAR .)
    RBRACKET        reduce using rule 64 (literal -> CHAR .)
    CONSTANT        reduce using rule 64 (literal -> CHAR .)
    MODULE          reduce using rule 64 (literal -> CHAR .)
    DEF             reduce using rule 64 (literal -> CHAR .)
    TCOLON          reduce using rule 64 (literal -> CHAR .)


state 69

    (65) literal -> TRUE .

    POTENCIACAO     reduce using rule 65 (literal -> TRUE .)
    MULTI           reduce using rule 65 (literal -> TRUE .)
    DIVIDE          reduce using rule 65 (literal -> TRUE .)
    MODULO          reduce using rule 65 (literal -> TRUE .)
    PLUS            reduce using rule 65 (literal -> TRUE .)
    MINUS           reduce using rule 65 (literal -> TRUE .)
    GREATER_THAN    reduce using rule 65 (literal -> TRUE .)
    LESS_THAN       reduce using rule 65 (literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 65 (literal -> TRUE .)
    LESS_EQUAL      reduce using rule 65 (literal -> TRUE .)
    EQUAL           reduce using rule 65 (literal -> TRUE .)
    NOT_EQUAL       reduce using rule 65 (literal -> TRUE .)
    TIPO_EQUAL      reduce using rule 65 (literal -> TRUE .)
    AND             reduce using rule 65 (literal -> TRUE .)
    DOTDOT          reduce using rule 65 (literal -> TRUE .)
    DOTDOTDOT       reduce using rule 65 (literal -> TRUE .)
    OR              reduce using rule 65 (literal -> TRUE .)
    QMARK           reduce using rule 65 (literal -> TRUE .)
    DOT             reduce using rule 65 (literal -> TRUE .)
    $end            reduce using rule 65 (literal -> TRUE .)
    RPAREN          reduce using rule 65 (literal -> TRUE .)
    WHEN            reduce using rule 65 (literal -> TRUE .)
    END             reduce using rule 65 (literal -> TRUE .)
    ELSIF           reduce using rule 65 (literal -> TRUE .)
    ELSE            reduce using rule 65 (literal -> TRUE .)
    RBRACE          reduce using rule 65 (literal -> TRUE .)
    LBRACE          reduce using rule 65 (literal -> TRUE .)
    ID              reduce using rule 65 (literal -> TRUE .)
    CASE            reduce using rule 65 (literal -> TRUE .)
    RETURN          reduce using rule 65 (literal -> TRUE .)
    BREAK           reduce using rule 65 (literal -> TRUE .)
    NEXT            reduce using rule 65 (literal -> TRUE .)
    UNDERSCORE      reduce using rule 65 (literal -> TRUE .)
    ASTERISK        reduce using rule 65 (literal -> TRUE .)
    IF              reduce using rule 65 (literal -> TRUE .)
    UNLESS          reduce using rule 65 (literal -> TRUE .)
    WHILE           reduce using rule 65 (literal -> TRUE .)
    UNTIL           reduce using rule 65 (literal -> TRUE .)
    LOOP            reduce using rule 65 (literal -> TRUE .)
    EXCLAMATION     reduce using rule 65 (literal -> TRUE .)
    TILDE           reduce using rule 65 (literal -> TRUE .)
    LPAREN          reduce using rule 65 (literal -> TRUE .)
    LBRACKET        reduce using rule 65 (literal -> TRUE .)
    INTNUMBER       reduce using rule 65 (literal -> TRUE .)
    FLOATNUMBER     reduce using rule 65 (literal -> TRUE .)
    STRING          reduce using rule 65 (literal -> TRUE .)
    CHAR            reduce using rule 65 (literal -> TRUE .)
    TRUE            reduce using rule 65 (literal -> TRUE .)
    FALSE           reduce using rule 65 (literal -> TRUE .)
    COMMA           reduce using rule 65 (literal -> TRUE .)
    RBRACKET        reduce using rule 65 (literal -> TRUE .)
    CONSTANT        reduce using rule 65 (literal -> TRUE .)
    MODULE          reduce using rule 65 (literal -> TRUE .)
    DEF             reduce using rule 65 (literal -> TRUE .)
    TCOLON          reduce using rule 65 (literal -> TRUE .)


state 70

    (66) literal -> FALSE .

    POTENCIACAO     reduce using rule 66 (literal -> FALSE .)
    MULTI           reduce using rule 66 (literal -> FALSE .)
    DIVIDE          reduce using rule 66 (literal -> FALSE .)
    MODULO          reduce using rule 66 (literal -> FALSE .)
    PLUS            reduce using rule 66 (literal -> FALSE .)
    MINUS           reduce using rule 66 (literal -> FALSE .)
    GREATER_THAN    reduce using rule 66 (literal -> FALSE .)
    LESS_THAN       reduce using rule 66 (literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 66 (literal -> FALSE .)
    LESS_EQUAL      reduce using rule 66 (literal -> FALSE .)
    EQUAL           reduce using rule 66 (literal -> FALSE .)
    NOT_EQUAL       reduce using rule 66 (literal -> FALSE .)
    TIPO_EQUAL      reduce using rule 66 (literal -> FALSE .)
    AND             reduce using rule 66 (literal -> FALSE .)
    DOTDOT          reduce using rule 66 (literal -> FALSE .)
    DOTDOTDOT       reduce using rule 66 (literal -> FALSE .)
    OR              reduce using rule 66 (literal -> FALSE .)
    QMARK           reduce using rule 66 (literal -> FALSE .)
    DOT             reduce using rule 66 (literal -> FALSE .)
    $end            reduce using rule 66 (literal -> FALSE .)
    RPAREN          reduce using rule 66 (literal -> FALSE .)
    WHEN            reduce using rule 66 (literal -> FALSE .)
    END             reduce using rule 66 (literal -> FALSE .)
    ELSIF           reduce using rule 66 (literal -> FALSE .)
    ELSE            reduce using rule 66 (literal -> FALSE .)
    RBRACE          reduce using rule 66 (literal -> FALSE .)
    LBRACE          reduce using rule 66 (literal -> FALSE .)
    ID              reduce using rule 66 (literal -> FALSE .)
    CASE            reduce using rule 66 (literal -> FALSE .)
    RETURN          reduce using rule 66 (literal -> FALSE .)
    BREAK           reduce using rule 66 (literal -> FALSE .)
    NEXT            reduce using rule 66 (literal -> FALSE .)
    UNDERSCORE      reduce using rule 66 (literal -> FALSE .)
    ASTERISK        reduce using rule 66 (literal -> FALSE .)
    IF              reduce using rule 66 (literal -> FALSE .)
    UNLESS          reduce using rule 66 (literal -> FALSE .)
    WHILE           reduce using rule 66 (literal -> FALSE .)
    UNTIL           reduce using rule 66 (literal -> FALSE .)
    LOOP            reduce using rule 66 (literal -> FALSE .)
    EXCLAMATION     reduce using rule 66 (literal -> FALSE .)
    TILDE           reduce using rule 66 (literal -> FALSE .)
    LPAREN          reduce using rule 66 (literal -> FALSE .)
    LBRACKET        reduce using rule 66 (literal -> FALSE .)
    INTNUMBER       reduce using rule 66 (literal -> FALSE .)
    FLOATNUMBER     reduce using rule 66 (literal -> FALSE .)
    STRING          reduce using rule 66 (literal -> FALSE .)
    CHAR            reduce using rule 66 (literal -> FALSE .)
    TRUE            reduce using rule 66 (literal -> FALSE .)
    FALSE           reduce using rule 66 (literal -> FALSE .)
    COMMA           reduce using rule 66 (literal -> FALSE .)
    RBRACKET        reduce using rule 66 (literal -> FALSE .)
    CONSTANT        reduce using rule 66 (literal -> FALSE .)
    MODULE          reduce using rule 66 (literal -> FALSE .)
    DEF             reduce using rule 66 (literal -> FALSE .)
    TCOLON          reduce using rule 66 (literal -> FALSE .)


state 71

    (1) program -> require_list constant_list . module_list function_list
    (2) program -> require_list constant_list . module_list
    (3) program -> require_list constant_list . function_list
    (6) program -> require_list constant_list .
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (25) module -> . MODULE ID statements END
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END

    $end            reduce using rule 6 (program -> require_list constant_list .)
    MODULE          shift and go to state 16
    DEF             shift and go to state 18

    module_list                    shift and go to state 138
    function_list                  shift and go to state 139
    module                         shift and go to state 9
    function                       shift and go to state 10

state 72

    (4) program -> require_list module_list . function_list
    (7) program -> require_list module_list .
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END

    $end            reduce using rule 7 (program -> require_list module_list .)
    DEF             shift and go to state 18

    function_list                  shift and go to state 140
    function                       shift and go to state 10

state 73

    (9) program -> require_list function_list .

    $end            reduce using rule 9 (program -> require_list function_list .)


state 74

    (5) program -> constant_list module_list . function_list
    (8) program -> constant_list module_list .
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END

    $end            reduce using rule 8 (program -> constant_list module_list .)
    DEF             shift and go to state 18

    function_list                  shift and go to state 141
    function                       shift and go to state 10

state 75

    (10) program -> constant_list function_list .

    $end            reduce using rule 10 (program -> constant_list function_list .)


state 76

    (11) program -> module_list function_list .

    $end            reduce using rule 11 (program -> module_list function_list .)


state 77

    (17) require_list -> require require_list .

    CONSTANT        reduce using rule 17 (require_list -> require require_list .)
    MODULE          reduce using rule 17 (require_list -> require require_list .)
    DEF             reduce using rule 17 (require_list -> require require_list .)
    $end            reduce using rule 17 (require_list -> require require_list .)


state 78

    (20) constant_list -> constant constant_list .

    MODULE          reduce using rule 20 (constant_list -> constant constant_list .)
    DEF             reduce using rule 20 (constant_list -> constant constant_list .)
    $end            reduce using rule 20 (constant_list -> constant constant_list .)


state 79

    (23) module_list -> module module_list .

    DEF             reduce using rule 23 (module_list -> module module_list .)
    $end            reduce using rule 23 (module_list -> module module_list .)


state 80

    (27) function_list -> function function_list .

    $end            reduce using rule 27 (function_list -> function function_list .)


state 81

    (19) require -> REQUIRE STRING .

    REQUIRE         reduce using rule 19 (require -> REQUIRE STRING .)
    CONSTANT        reduce using rule 19 (require -> REQUIRE STRING .)
    MODULE          reduce using rule 19 (require -> REQUIRE STRING .)
    DEF             reduce using rule 19 (require -> REQUIRE STRING .)
    $end            reduce using rule 19 (require -> REQUIRE STRING .)


state 82

    (22) constant -> CONSTANT ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 142
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 83

    (111) iterator -> expression DOT . MULTI statements
    (112) iterator -> expression DOT . EACH DO PIPE ID PIPE statements END
    (113) iterator -> expression DOT . EACH LBRACE PIPE ID PIPE RBRACE statements

    MULTI           shift and go to state 143
    EACH            shift and go to state 144


state 84

    (25) module -> MODULE ID . statements END
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 145
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 85

    (67) variable_declaration -> ID COLON . types ASSIGN expression
    (40) types -> . STRING
    (41) types -> . CHAR
    (42) types -> . NIL
    (43) types -> . integer
    (44) types -> . float
    (45) types -> . boolean
    (46) integer -> . INT
    (47) integer -> . INT8
    (48) integer -> . INT16
    (49) integer -> . INT32
    (50) integer -> . INT64
    (51) integer -> . INT128
    (52) integer -> . UINT8
    (53) integer -> . UINT16
    (54) integer -> . UINT32
    (55) integer -> . UINT64
    (56) integer -> . UINT128
    (57) float -> . FLOAT
    (58) float -> . FLOAT32
    (59) float -> . FLOAT64
    (60) boolean -> . BOOL

    STRING          shift and go to state 147
    CHAR            shift and go to state 148
    NIL             shift and go to state 149
    INT             shift and go to state 153
    INT8            shift and go to state 154
    INT16           shift and go to state 155
    INT32           shift and go to state 156
    INT64           shift and go to state 157
    INT128          shift and go to state 158
    UINT8           shift and go to state 159
    UINT16          shift and go to state 160
    UINT32          shift and go to state 161
    UINT64          shift and go to state 162
    UINT128         shift and go to state 163
    FLOAT           shift and go to state 164
    FLOAT32         shift and go to state 165
    FLOAT64         shift and go to state 166
    BOOL            shift and go to state 167

    types                          shift and go to state 146
    integer                        shift and go to state 150
    float                          shift and go to state 151
    boolean                        shift and go to state 152

state 86

    (68) variable_declaration -> ID ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 168
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 87

    (69) variable_declaration -> ID COMMA . list_of_identifiers ASSIGN expression COMMA list_of_values
    (70) list_of_identifiers -> . ID
    (71) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 169

    list_of_identifiers            shift and go to state 170

state 88

    (74) function_call -> ID LPAREN . expression_list RPAREN
    (75) function_call -> ID LPAREN . RPAREN
    (78) expression_list -> . expression
    (79) expression_list -> . expression_list COMMA expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    RPAREN          shift and go to state 172
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression_list                shift and go to state 171
    expression                     shift and go to state 137
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 89

    (28) function -> DEF ID . LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> DEF ID . opt_return_type statements END
    (38) opt_return_type -> . COLON types
    (39) opt_return_type -> . empty
    (169) empty -> .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 173
    COLON           shift and go to state 175
    ID              reduce using rule 169 (empty -> .)
    CASE            reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    NEXT            reduce using rule 169 (empty -> .)
    UNDERSCORE      reduce using rule 169 (empty -> .)
    ASTERISK        reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    UNLESS          reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    UNTIL           reduce using rule 169 (empty -> .)
    LOOP            reduce using rule 169 (empty -> .)
    PLUS            reduce using rule 169 (empty -> .)
    MINUS           reduce using rule 169 (empty -> .)
    EXCLAMATION     reduce using rule 169 (empty -> .)
    TILDE           reduce using rule 169 (empty -> .)
    LBRACKET        reduce using rule 169 (empty -> .)
    INTNUMBER       reduce using rule 169 (empty -> .)
    FLOATNUMBER     reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)

  ! LPAREN          [ reduce using rule 169 (empty -> .) ]

    opt_return_type                shift and go to state 174
    empty                          shift and go to state 176

state 90

    (164) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 177


state 91

    (129) assignment_target -> ID .
    (167) primary_expression -> ID .

    ASSIGN          reduce using rule 129 (assignment_target -> ID .)
    PLUS_ASSIGN     reduce using rule 129 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 129 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 129 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 129 (assignment_target -> ID .)
    POTENCIACAO     reduce using rule 167 (primary_expression -> ID .)
    MULTI           reduce using rule 167 (primary_expression -> ID .)
    DIVIDE          reduce using rule 167 (primary_expression -> ID .)
    MODULO          reduce using rule 167 (primary_expression -> ID .)
    PLUS            reduce using rule 167 (primary_expression -> ID .)
    MINUS           reduce using rule 167 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 167 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 167 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 167 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 167 (primary_expression -> ID .)
    EQUAL           reduce using rule 167 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 167 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 167 (primary_expression -> ID .)
    AND             reduce using rule 167 (primary_expression -> ID .)
    DOTDOT          reduce using rule 167 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 167 (primary_expression -> ID .)
    OR              reduce using rule 167 (primary_expression -> ID .)
    QMARK           reduce using rule 167 (primary_expression -> ID .)
    RPAREN          reduce using rule 167 (primary_expression -> ID .)
    WHEN            reduce using rule 167 (primary_expression -> ID .)
    $end            reduce using rule 167 (primary_expression -> ID .)
    END             reduce using rule 167 (primary_expression -> ID .)
    ELSIF           reduce using rule 167 (primary_expression -> ID .)
    ELSE            reduce using rule 167 (primary_expression -> ID .)
    RBRACE          reduce using rule 167 (primary_expression -> ID .)
    LBRACE          reduce using rule 167 (primary_expression -> ID .)
    ID              reduce using rule 167 (primary_expression -> ID .)
    CASE            reduce using rule 167 (primary_expression -> ID .)
    RETURN          reduce using rule 167 (primary_expression -> ID .)
    BREAK           reduce using rule 167 (primary_expression -> ID .)
    NEXT            reduce using rule 167 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 167 (primary_expression -> ID .)
    ASTERISK        reduce using rule 167 (primary_expression -> ID .)
    IF              reduce using rule 167 (primary_expression -> ID .)
    UNLESS          reduce using rule 167 (primary_expression -> ID .)
    WHILE           reduce using rule 167 (primary_expression -> ID .)
    UNTIL           reduce using rule 167 (primary_expression -> ID .)
    LOOP            reduce using rule 167 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 167 (primary_expression -> ID .)
    TILDE           reduce using rule 167 (primary_expression -> ID .)
    LPAREN          reduce using rule 167 (primary_expression -> ID .)
    LBRACKET        reduce using rule 167 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 167 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 167 (primary_expression -> ID .)
    STRING          reduce using rule 167 (primary_expression -> ID .)
    CHAR            reduce using rule 167 (primary_expression -> ID .)
    TRUE            reduce using rule 167 (primary_expression -> ID .)
    FALSE           reduce using rule 167 (primary_expression -> ID .)
    COMMA           reduce using rule 167 (primary_expression -> ID .)
    RBRACKET        reduce using rule 167 (primary_expression -> ID .)
    CONSTANT        reduce using rule 167 (primary_expression -> ID .)
    MODULE          reduce using rule 167 (primary_expression -> ID .)
    DEF             reduce using rule 167 (primary_expression -> ID .)
    DOT             reduce using rule 167 (primary_expression -> ID .)
    TCOLON          reduce using rule 167 (primary_expression -> ID .)


state 92

    (123) assignment_expression -> assignment_target ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    assignment_target              shift and go to state 30
    expression                     shift and go to state 178
    assignment_expression          shift and go to state 23
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 93

    (124) assignment_expression -> assignment_target PLUS_ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    assignment_target              shift and go to state 30
    expression                     shift and go to state 179
    assignment_expression          shift and go to state 23
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 94

    (125) assignment_expression -> assignment_target MINUS_ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    assignment_target              shift and go to state 30
    expression                     shift and go to state 180
    assignment_expression          shift and go to state 23
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 95

    (126) assignment_expression -> assignment_target MULTI_ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    assignment_target              shift and go to state 30
    expression                     shift and go to state 181
    assignment_expression          shift and go to state 23
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 96

    (127) assignment_expression -> assignment_target DIVIDE_ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    assignment_target              shift and go to state 30
    expression                     shift and go to state 182
    assignment_expression          shift and go to state 23
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 97

    (114) case_structure -> CASE expression . when_list opt_else END
    (115) when_list -> . WHEN expression statements
    (116) when_list -> . when_list WHEN expression statements

    WHEN            shift and go to state 184

    when_list                      shift and go to state 183

state 98

    (117) return_statement -> RETURN opt_expression .

    $end            reduce using rule 117 (return_statement -> RETURN opt_expression .)
    END             reduce using rule 117 (return_statement -> RETURN opt_expression .)
    ELSIF           reduce using rule 117 (return_statement -> RETURN opt_expression .)
    ELSE            reduce using rule 117 (return_statement -> RETURN opt_expression .)
    RBRACE          reduce using rule 117 (return_statement -> RETURN opt_expression .)
    WHEN            reduce using rule 117 (return_statement -> RETURN opt_expression .)


state 99

    (120) opt_expression -> expression .

    $end            reduce using rule 120 (opt_expression -> expression .)
    END             reduce using rule 120 (opt_expression -> expression .)
    ELSIF           reduce using rule 120 (opt_expression -> expression .)
    ELSE            reduce using rule 120 (opt_expression -> expression .)
    RBRACE          reduce using rule 120 (opt_expression -> expression .)
    WHEN            reduce using rule 120 (opt_expression -> expression .)


state 100

    (121) opt_expression -> empty .

    $end            reduce using rule 121 (opt_expression -> empty .)
    END             reduce using rule 121 (opt_expression -> empty .)
    ELSIF           reduce using rule 121 (opt_expression -> empty .)
    ELSE            reduce using rule 121 (opt_expression -> empty .)
    RBRACE          reduce using rule 121 (opt_expression -> empty .)
    WHEN            reduce using rule 121 (opt_expression -> empty .)


state 101

    (118) break_statement -> BREAK opt_expression .

    $end            reduce using rule 118 (break_statement -> BREAK opt_expression .)
    END             reduce using rule 118 (break_statement -> BREAK opt_expression .)
    ELSIF           reduce using rule 118 (break_statement -> BREAK opt_expression .)
    ELSE            reduce using rule 118 (break_statement -> BREAK opt_expression .)
    RBRACE          reduce using rule 118 (break_statement -> BREAK opt_expression .)
    WHEN            reduce using rule 118 (break_statement -> BREAK opt_expression .)


state 102

    (119) next_statement -> NEXT opt_expression .

    $end            reduce using rule 119 (next_statement -> NEXT opt_expression .)
    END             reduce using rule 119 (next_statement -> NEXT opt_expression .)
    ELSIF           reduce using rule 119 (next_statement -> NEXT opt_expression .)
    ELSE            reduce using rule 119 (next_statement -> NEXT opt_expression .)
    RBRACE          reduce using rule 119 (next_statement -> NEXT opt_expression .)
    WHEN            reduce using rule 119 (next_statement -> NEXT opt_expression .)


state 103

    (131) assignment_target -> ASTERISK assignment_target .

    ASSIGN          reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)
    PLUS_ASSIGN     reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)
    MINUS_ASSIGN    reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)
    MULTI_ASSIGN    reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)
    DIVIDE_ASSIGN   reduce using rule 131 (assignment_target -> ASTERISK assignment_target .)


state 104

    (129) assignment_target -> ID .

    ASSIGN          reduce using rule 129 (assignment_target -> ID .)
    PLUS_ASSIGN     reduce using rule 129 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 129 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 129 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 129 (assignment_target -> ID .)


state 105

    (132) ternary_expression -> range_expression QMARK . expression TCOLON expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    range_expression               shift and go to state 44
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 106

    (93) if_statement -> IF if_condition . statements opt_elsif opt_else END
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 186
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 107

    (95) if_condition -> expression .
    (96) if_condition -> expression . LBRACE statements RBRACE

    ID              reduce using rule 95 (if_condition -> expression .)
    CASE            reduce using rule 95 (if_condition -> expression .)
    RETURN          reduce using rule 95 (if_condition -> expression .)
    BREAK           reduce using rule 95 (if_condition -> expression .)
    NEXT            reduce using rule 95 (if_condition -> expression .)
    UNDERSCORE      reduce using rule 95 (if_condition -> expression .)
    ASTERISK        reduce using rule 95 (if_condition -> expression .)
    IF              reduce using rule 95 (if_condition -> expression .)
    UNLESS          reduce using rule 95 (if_condition -> expression .)
    WHILE           reduce using rule 95 (if_condition -> expression .)
    UNTIL           reduce using rule 95 (if_condition -> expression .)
    LOOP            reduce using rule 95 (if_condition -> expression .)
    PLUS            reduce using rule 95 (if_condition -> expression .)
    MINUS           reduce using rule 95 (if_condition -> expression .)
    EXCLAMATION     reduce using rule 95 (if_condition -> expression .)
    TILDE           reduce using rule 95 (if_condition -> expression .)
    LPAREN          reduce using rule 95 (if_condition -> expression .)
    LBRACKET        reduce using rule 95 (if_condition -> expression .)
    INTNUMBER       reduce using rule 95 (if_condition -> expression .)
    FLOATNUMBER     reduce using rule 95 (if_condition -> expression .)
    STRING          reduce using rule 95 (if_condition -> expression .)
    CHAR            reduce using rule 95 (if_condition -> expression .)
    TRUE            reduce using rule 95 (if_condition -> expression .)
    FALSE           reduce using rule 95 (if_condition -> expression .)
    LBRACE          shift and go to state 187


state 108

    (94) unless_statement -> UNLESS if_condition . statements opt_else END
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 188
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 109

    (108) while -> WHILE expression . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 15
    statements                     shift and go to state 189
    statement                      shift and go to state 11
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 110

    (109) until -> UNTIL expression . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 15
    statements                     shift and go to state 190
    statement                      shift and go to state 11
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 111

    (110) loop -> LOOP statements .

    $end            reduce using rule 110 (loop -> LOOP statements .)
    END             reduce using rule 110 (loop -> LOOP statements .)
    ELSIF           reduce using rule 110 (loop -> LOOP statements .)
    ELSE            reduce using rule 110 (loop -> LOOP statements .)
    RBRACE          reduce using rule 110 (loop -> LOOP statements .)
    WHEN            reduce using rule 110 (loop -> LOOP statements .)


state 112

    (134) range_expression -> logical_or_expression DOTDOT . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    logical_or_expression          shift and go to state 191
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 113

    (135) range_expression -> logical_or_expression DOTDOTDOT . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    logical_or_expression          shift and go to state 192
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 114

    (138) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    logical_and_expression         shift and go to state 193
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 115

    (140) logical_and_expression -> logical_and_expression AND . equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 116

    (142) equality_expression -> equality_expression EQUAL . relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    relational_expression          shift and go to state 195
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 117

    (143) equality_expression -> equality_expression NOT_EQUAL . relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    relational_expression          shift and go to state 196
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 118

    (144) equality_expression -> equality_expression TIPO_EQUAL . relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    relational_expression          shift and go to state 197
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 119

    (146) relational_expression -> relational_expression GREATER_THAN . additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    additive_expression            shift and go to state 198
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 120

    (147) relational_expression -> relational_expression LESS_THAN . additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    additive_expression            shift and go to state 199
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 121

    (148) relational_expression -> relational_expression GREATER_EQUAL . additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    additive_expression            shift and go to state 200
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 122

    (149) relational_expression -> relational_expression LESS_EQUAL . additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    additive_expression            shift and go to state 201
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 123

    (151) additive_expression -> additive_expression PLUS . multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    multiplicative_expression      shift and go to state 202
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 124

    (152) additive_expression -> additive_expression MINUS . multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    multiplicative_expression      shift and go to state 203
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 125

    (154) multiplicative_expression -> multiplicative_expression MULTI . potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    potenciacao_expression         shift and go to state 204
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 126

    (155) multiplicative_expression -> multiplicative_expression DIVIDE . potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    potenciacao_expression         shift and go to state 205
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 127

    (156) multiplicative_expression -> multiplicative_expression MODULO . potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    potenciacao_expression         shift and go to state 206
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 128

    (159) unary_expression -> PLUS unary_expression .

    POTENCIACAO     reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    MULTI           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    GREATER_THAN    reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    LESS_THAN       reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    GREATER_EQUAL   reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    LESS_EQUAL      reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    NOT_EQUAL       reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    TIPO_EQUAL      reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    DOTDOT          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    DOTDOTDOT       reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    QMARK           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    DOT             reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    $end            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    WHEN            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    END             reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    ELSIF           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    RBRACE          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    LBRACE          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    ID              reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    CASE            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    RETURN          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    BREAK           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    NEXT            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    UNDERSCORE      reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    ASTERISK        reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    IF              reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    UNLESS          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    WHILE           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    UNTIL           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    LOOP            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    EXCLAMATION     reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    TILDE           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    LPAREN          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    LBRACKET        reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    INTNUMBER       reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    FLOATNUMBER     reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    STRING          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    CHAR            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    TRUE            reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    FALSE           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    CONSTANT        reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    MODULE          reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    DEF             reduce using rule 159 (unary_expression -> PLUS unary_expression .)
    TCOLON          reduce using rule 159 (unary_expression -> PLUS unary_expression .)


state 129

    (167) primary_expression -> ID .

    POTENCIACAO     reduce using rule 167 (primary_expression -> ID .)
    MULTI           reduce using rule 167 (primary_expression -> ID .)
    DIVIDE          reduce using rule 167 (primary_expression -> ID .)
    MODULO          reduce using rule 167 (primary_expression -> ID .)
    PLUS            reduce using rule 167 (primary_expression -> ID .)
    MINUS           reduce using rule 167 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 167 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 167 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 167 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 167 (primary_expression -> ID .)
    EQUAL           reduce using rule 167 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 167 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 167 (primary_expression -> ID .)
    AND             reduce using rule 167 (primary_expression -> ID .)
    DOTDOT          reduce using rule 167 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 167 (primary_expression -> ID .)
    OR              reduce using rule 167 (primary_expression -> ID .)
    QMARK           reduce using rule 167 (primary_expression -> ID .)
    DOT             reduce using rule 167 (primary_expression -> ID .)
    $end            reduce using rule 167 (primary_expression -> ID .)
    RPAREN          reduce using rule 167 (primary_expression -> ID .)
    WHEN            reduce using rule 167 (primary_expression -> ID .)
    END             reduce using rule 167 (primary_expression -> ID .)
    ELSIF           reduce using rule 167 (primary_expression -> ID .)
    ELSE            reduce using rule 167 (primary_expression -> ID .)
    RBRACE          reduce using rule 167 (primary_expression -> ID .)
    LBRACE          reduce using rule 167 (primary_expression -> ID .)
    ID              reduce using rule 167 (primary_expression -> ID .)
    CASE            reduce using rule 167 (primary_expression -> ID .)
    RETURN          reduce using rule 167 (primary_expression -> ID .)
    BREAK           reduce using rule 167 (primary_expression -> ID .)
    NEXT            reduce using rule 167 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 167 (primary_expression -> ID .)
    ASTERISK        reduce using rule 167 (primary_expression -> ID .)
    IF              reduce using rule 167 (primary_expression -> ID .)
    UNLESS          reduce using rule 167 (primary_expression -> ID .)
    WHILE           reduce using rule 167 (primary_expression -> ID .)
    UNTIL           reduce using rule 167 (primary_expression -> ID .)
    LOOP            reduce using rule 167 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 167 (primary_expression -> ID .)
    TILDE           reduce using rule 167 (primary_expression -> ID .)
    LPAREN          reduce using rule 167 (primary_expression -> ID .)
    LBRACKET        reduce using rule 167 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 167 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 167 (primary_expression -> ID .)
    STRING          reduce using rule 167 (primary_expression -> ID .)
    CHAR            reduce using rule 167 (primary_expression -> ID .)
    TRUE            reduce using rule 167 (primary_expression -> ID .)
    FALSE           reduce using rule 167 (primary_expression -> ID .)
    COMMA           reduce using rule 167 (primary_expression -> ID .)
    RBRACKET        reduce using rule 167 (primary_expression -> ID .)
    CONSTANT        reduce using rule 167 (primary_expression -> ID .)
    MODULE          reduce using rule 167 (primary_expression -> ID .)
    DEF             reduce using rule 167 (primary_expression -> ID .)
    TCOLON          reduce using rule 167 (primary_expression -> ID .)


state 130

    (160) unary_expression -> MINUS unary_expression .

    POTENCIACAO     reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    MULTI           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    GREATER_THAN    reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    LESS_THAN       reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    GREATER_EQUAL   reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    LESS_EQUAL      reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    NOT_EQUAL       reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    TIPO_EQUAL      reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    DOTDOT          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    DOTDOTDOT       reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    QMARK           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    DOT             reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    $end            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    WHEN            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    END             reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    ELSIF           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    RBRACE          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    LBRACE          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    ID              reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    CASE            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    RETURN          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    BREAK           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    NEXT            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    UNDERSCORE      reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    ASTERISK        reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    IF              reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    UNLESS          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    WHILE           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    UNTIL           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    LOOP            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    EXCLAMATION     reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    TILDE           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    LPAREN          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    LBRACKET        reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    INTNUMBER       reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    FLOATNUMBER     reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    STRING          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    CHAR            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    TRUE            reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    FALSE           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    CONSTANT        reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    MODULE          reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    DEF             reduce using rule 160 (unary_expression -> MINUS unary_expression .)
    TCOLON          reduce using rule 160 (unary_expression -> MINUS unary_expression .)


state 131

    (158) potenciacao_expression -> potenciacao_expression POTENCIACAO . unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    ID              shift and go to state 129
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    unary_expression               shift and go to state 207
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 132

    (161) unary_expression -> EXCLAMATION unary_expression .

    POTENCIACAO     reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    MULTI           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    DIVIDE          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_THAN    reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_THAN       reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQUAL   reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQUAL      reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    EQUAL           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQUAL       reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    TIPO_EQUAL      reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    AND             reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    DOTDOT          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    DOTDOTDOT       reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    OR              reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    QMARK           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    DOT             reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    $end            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    WHEN            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    END             reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    ELSIF           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    ELSE            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACE          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACE          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    ID              reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    CASE            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    RETURN          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    BREAK           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    NEXT            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    UNDERSCORE      reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    ASTERISK        reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    IF              reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    UNLESS          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    WHILE           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    UNTIL           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    LOOP            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    EXCLAMATION     reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    TILDE           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    LPAREN          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACKET        reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    INTNUMBER       reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    FLOATNUMBER     reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    STRING          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    CHAR            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    TRUE            reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    FALSE           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACKET        reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    CONSTANT        reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    MODULE          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    DEF             reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)
    TCOLON          reduce using rule 161 (unary_expression -> EXCLAMATION unary_expression .)


state 133

    (162) unary_expression -> TILDE unary_expression .

    POTENCIACAO     reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    MULTI           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    DIVIDE          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    MODULO          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    PLUS            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    MINUS           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    GREATER_THAN    reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    LESS_THAN       reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    GREATER_EQUAL   reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    LESS_EQUAL      reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    EQUAL           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    NOT_EQUAL       reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    TIPO_EQUAL      reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    AND             reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    DOTDOT          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    DOTDOTDOT       reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    OR              reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    QMARK           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    DOT             reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    $end            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    RPAREN          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    WHEN            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    END             reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    ELSIF           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    ELSE            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    RBRACE          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    LBRACE          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    ID              reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    CASE            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    RETURN          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    BREAK           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    NEXT            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    UNDERSCORE      reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    ASTERISK        reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    IF              reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    UNLESS          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    WHILE           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    UNTIL           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    LOOP            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    EXCLAMATION     reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    TILDE           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    LPAREN          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    LBRACKET        reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    INTNUMBER       reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    FLOATNUMBER     reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    STRING          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    CHAR            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    TRUE            reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    FALSE           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    COMMA           reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    RBRACKET        reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    CONSTANT        reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    MODULE          reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    DEF             reduce using rule 162 (unary_expression -> TILDE unary_expression .)
    TCOLON          reduce using rule 162 (unary_expression -> TILDE unary_expression .)


state 134

    (168) array_literal -> LBRACKET opt_expression_list . RBRACKET

    RBRACKET        shift and go to state 208


state 135

    (76) opt_expression_list -> expression_list .
    (79) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 76 (opt_expression_list -> expression_list .)
    COMMA           shift and go to state 209


state 136

    (77) opt_expression_list -> empty .

    RBRACKET        reduce using rule 77 (opt_expression_list -> empty .)


state 137

    (78) expression_list -> expression .

    COMMA           reduce using rule 78 (expression_list -> expression .)
    RBRACKET        reduce using rule 78 (expression_list -> expression .)
    RPAREN          reduce using rule 78 (expression_list -> expression .)


state 138

    (1) program -> require_list constant_list module_list . function_list
    (2) program -> require_list constant_list module_list .
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type statements END

    $end            reduce using rule 2 (program -> require_list constant_list module_list .)
    DEF             shift and go to state 18

    function_list                  shift and go to state 210
    function                       shift and go to state 10

state 139

    (3) program -> require_list constant_list function_list .

    $end            reduce using rule 3 (program -> require_list constant_list function_list .)


state 140

    (4) program -> require_list module_list function_list .

    $end            reduce using rule 4 (program -> require_list module_list function_list .)


state 141

    (5) program -> constant_list module_list function_list .

    $end            reduce using rule 5 (program -> constant_list module_list function_list .)


state 142

    (22) constant -> CONSTANT ASSIGN expression .

    CONSTANT        reduce using rule 22 (constant -> CONSTANT ASSIGN expression .)
    MODULE          reduce using rule 22 (constant -> CONSTANT ASSIGN expression .)
    DEF             reduce using rule 22 (constant -> CONSTANT ASSIGN expression .)
    $end            reduce using rule 22 (constant -> CONSTANT ASSIGN expression .)


state 143

    (111) iterator -> expression DOT MULTI . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 15
    statements                     shift and go to state 211
    statement                      shift and go to state 11
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 144

    (112) iterator -> expression DOT EACH . DO PIPE ID PIPE statements END
    (113) iterator -> expression DOT EACH . LBRACE PIPE ID PIPE RBRACE statements

    DO              shift and go to state 212
    LBRACE          shift and go to state 213


state 145

    (25) module -> MODULE ID statements . END

    END             shift and go to state 214


state 146

    (67) variable_declaration -> ID COLON types . ASSIGN expression

    ASSIGN          shift and go to state 215


state 147

    (40) types -> STRING .

    ASSIGN          reduce using rule 40 (types -> STRING .)
    ID              reduce using rule 40 (types -> STRING .)
    CASE            reduce using rule 40 (types -> STRING .)
    RETURN          reduce using rule 40 (types -> STRING .)
    BREAK           reduce using rule 40 (types -> STRING .)
    NEXT            reduce using rule 40 (types -> STRING .)
    UNDERSCORE      reduce using rule 40 (types -> STRING .)
    ASTERISK        reduce using rule 40 (types -> STRING .)
    IF              reduce using rule 40 (types -> STRING .)
    UNLESS          reduce using rule 40 (types -> STRING .)
    WHILE           reduce using rule 40 (types -> STRING .)
    UNTIL           reduce using rule 40 (types -> STRING .)
    LOOP            reduce using rule 40 (types -> STRING .)
    PLUS            reduce using rule 40 (types -> STRING .)
    MINUS           reduce using rule 40 (types -> STRING .)
    EXCLAMATION     reduce using rule 40 (types -> STRING .)
    TILDE           reduce using rule 40 (types -> STRING .)
    LPAREN          reduce using rule 40 (types -> STRING .)
    LBRACKET        reduce using rule 40 (types -> STRING .)
    INTNUMBER       reduce using rule 40 (types -> STRING .)
    FLOATNUMBER     reduce using rule 40 (types -> STRING .)
    STRING          reduce using rule 40 (types -> STRING .)
    CHAR            reduce using rule 40 (types -> STRING .)
    TRUE            reduce using rule 40 (types -> STRING .)
    FALSE           reduce using rule 40 (types -> STRING .)
    COMMA           reduce using rule 40 (types -> STRING .)
    RPAREN          reduce using rule 40 (types -> STRING .)


state 148

    (41) types -> CHAR .

    ASSIGN          reduce using rule 41 (types -> CHAR .)
    ID              reduce using rule 41 (types -> CHAR .)
    CASE            reduce using rule 41 (types -> CHAR .)
    RETURN          reduce using rule 41 (types -> CHAR .)
    BREAK           reduce using rule 41 (types -> CHAR .)
    NEXT            reduce using rule 41 (types -> CHAR .)
    UNDERSCORE      reduce using rule 41 (types -> CHAR .)
    ASTERISK        reduce using rule 41 (types -> CHAR .)
    IF              reduce using rule 41 (types -> CHAR .)
    UNLESS          reduce using rule 41 (types -> CHAR .)
    WHILE           reduce using rule 41 (types -> CHAR .)
    UNTIL           reduce using rule 41 (types -> CHAR .)
    LOOP            reduce using rule 41 (types -> CHAR .)
    PLUS            reduce using rule 41 (types -> CHAR .)
    MINUS           reduce using rule 41 (types -> CHAR .)
    EXCLAMATION     reduce using rule 41 (types -> CHAR .)
    TILDE           reduce using rule 41 (types -> CHAR .)
    LPAREN          reduce using rule 41 (types -> CHAR .)
    LBRACKET        reduce using rule 41 (types -> CHAR .)
    INTNUMBER       reduce using rule 41 (types -> CHAR .)
    FLOATNUMBER     reduce using rule 41 (types -> CHAR .)
    STRING          reduce using rule 41 (types -> CHAR .)
    CHAR            reduce using rule 41 (types -> CHAR .)
    TRUE            reduce using rule 41 (types -> CHAR .)
    FALSE           reduce using rule 41 (types -> CHAR .)
    COMMA           reduce using rule 41 (types -> CHAR .)
    RPAREN          reduce using rule 41 (types -> CHAR .)


state 149

    (42) types -> NIL .

    ASSIGN          reduce using rule 42 (types -> NIL .)
    ID              reduce using rule 42 (types -> NIL .)
    CASE            reduce using rule 42 (types -> NIL .)
    RETURN          reduce using rule 42 (types -> NIL .)
    BREAK           reduce using rule 42 (types -> NIL .)
    NEXT            reduce using rule 42 (types -> NIL .)
    UNDERSCORE      reduce using rule 42 (types -> NIL .)
    ASTERISK        reduce using rule 42 (types -> NIL .)
    IF              reduce using rule 42 (types -> NIL .)
    UNLESS          reduce using rule 42 (types -> NIL .)
    WHILE           reduce using rule 42 (types -> NIL .)
    UNTIL           reduce using rule 42 (types -> NIL .)
    LOOP            reduce using rule 42 (types -> NIL .)
    PLUS            reduce using rule 42 (types -> NIL .)
    MINUS           reduce using rule 42 (types -> NIL .)
    EXCLAMATION     reduce using rule 42 (types -> NIL .)
    TILDE           reduce using rule 42 (types -> NIL .)
    LPAREN          reduce using rule 42 (types -> NIL .)
    LBRACKET        reduce using rule 42 (types -> NIL .)
    INTNUMBER       reduce using rule 42 (types -> NIL .)
    FLOATNUMBER     reduce using rule 42 (types -> NIL .)
    STRING          reduce using rule 42 (types -> NIL .)
    CHAR            reduce using rule 42 (types -> NIL .)
    TRUE            reduce using rule 42 (types -> NIL .)
    FALSE           reduce using rule 42 (types -> NIL .)
    COMMA           reduce using rule 42 (types -> NIL .)
    RPAREN          reduce using rule 42 (types -> NIL .)


state 150

    (43) types -> integer .

    ASSIGN          reduce using rule 43 (types -> integer .)
    ID              reduce using rule 43 (types -> integer .)
    CASE            reduce using rule 43 (types -> integer .)
    RETURN          reduce using rule 43 (types -> integer .)
    BREAK           reduce using rule 43 (types -> integer .)
    NEXT            reduce using rule 43 (types -> integer .)
    UNDERSCORE      reduce using rule 43 (types -> integer .)
    ASTERISK        reduce using rule 43 (types -> integer .)
    IF              reduce using rule 43 (types -> integer .)
    UNLESS          reduce using rule 43 (types -> integer .)
    WHILE           reduce using rule 43 (types -> integer .)
    UNTIL           reduce using rule 43 (types -> integer .)
    LOOP            reduce using rule 43 (types -> integer .)
    PLUS            reduce using rule 43 (types -> integer .)
    MINUS           reduce using rule 43 (types -> integer .)
    EXCLAMATION     reduce using rule 43 (types -> integer .)
    TILDE           reduce using rule 43 (types -> integer .)
    LPAREN          reduce using rule 43 (types -> integer .)
    LBRACKET        reduce using rule 43 (types -> integer .)
    INTNUMBER       reduce using rule 43 (types -> integer .)
    FLOATNUMBER     reduce using rule 43 (types -> integer .)
    STRING          reduce using rule 43 (types -> integer .)
    CHAR            reduce using rule 43 (types -> integer .)
    TRUE            reduce using rule 43 (types -> integer .)
    FALSE           reduce using rule 43 (types -> integer .)
    COMMA           reduce using rule 43 (types -> integer .)
    RPAREN          reduce using rule 43 (types -> integer .)


state 151

    (44) types -> float .

    ASSIGN          reduce using rule 44 (types -> float .)
    ID              reduce using rule 44 (types -> float .)
    CASE            reduce using rule 44 (types -> float .)
    RETURN          reduce using rule 44 (types -> float .)
    BREAK           reduce using rule 44 (types -> float .)
    NEXT            reduce using rule 44 (types -> float .)
    UNDERSCORE      reduce using rule 44 (types -> float .)
    ASTERISK        reduce using rule 44 (types -> float .)
    IF              reduce using rule 44 (types -> float .)
    UNLESS          reduce using rule 44 (types -> float .)
    WHILE           reduce using rule 44 (types -> float .)
    UNTIL           reduce using rule 44 (types -> float .)
    LOOP            reduce using rule 44 (types -> float .)
    PLUS            reduce using rule 44 (types -> float .)
    MINUS           reduce using rule 44 (types -> float .)
    EXCLAMATION     reduce using rule 44 (types -> float .)
    TILDE           reduce using rule 44 (types -> float .)
    LPAREN          reduce using rule 44 (types -> float .)
    LBRACKET        reduce using rule 44 (types -> float .)
    INTNUMBER       reduce using rule 44 (types -> float .)
    FLOATNUMBER     reduce using rule 44 (types -> float .)
    STRING          reduce using rule 44 (types -> float .)
    CHAR            reduce using rule 44 (types -> float .)
    TRUE            reduce using rule 44 (types -> float .)
    FALSE           reduce using rule 44 (types -> float .)
    COMMA           reduce using rule 44 (types -> float .)
    RPAREN          reduce using rule 44 (types -> float .)


state 152

    (45) types -> boolean .

    ASSIGN          reduce using rule 45 (types -> boolean .)
    ID              reduce using rule 45 (types -> boolean .)
    CASE            reduce using rule 45 (types -> boolean .)
    RETURN          reduce using rule 45 (types -> boolean .)
    BREAK           reduce using rule 45 (types -> boolean .)
    NEXT            reduce using rule 45 (types -> boolean .)
    UNDERSCORE      reduce using rule 45 (types -> boolean .)
    ASTERISK        reduce using rule 45 (types -> boolean .)
    IF              reduce using rule 45 (types -> boolean .)
    UNLESS          reduce using rule 45 (types -> boolean .)
    WHILE           reduce using rule 45 (types -> boolean .)
    UNTIL           reduce using rule 45 (types -> boolean .)
    LOOP            reduce using rule 45 (types -> boolean .)
    PLUS            reduce using rule 45 (types -> boolean .)
    MINUS           reduce using rule 45 (types -> boolean .)
    EXCLAMATION     reduce using rule 45 (types -> boolean .)
    TILDE           reduce using rule 45 (types -> boolean .)
    LPAREN          reduce using rule 45 (types -> boolean .)
    LBRACKET        reduce using rule 45 (types -> boolean .)
    INTNUMBER       reduce using rule 45 (types -> boolean .)
    FLOATNUMBER     reduce using rule 45 (types -> boolean .)
    STRING          reduce using rule 45 (types -> boolean .)
    CHAR            reduce using rule 45 (types -> boolean .)
    TRUE            reduce using rule 45 (types -> boolean .)
    FALSE           reduce using rule 45 (types -> boolean .)
    COMMA           reduce using rule 45 (types -> boolean .)
    RPAREN          reduce using rule 45 (types -> boolean .)


state 153

    (46) integer -> INT .

    ASSIGN          reduce using rule 46 (integer -> INT .)
    ID              reduce using rule 46 (integer -> INT .)
    CASE            reduce using rule 46 (integer -> INT .)
    RETURN          reduce using rule 46 (integer -> INT .)
    BREAK           reduce using rule 46 (integer -> INT .)
    NEXT            reduce using rule 46 (integer -> INT .)
    UNDERSCORE      reduce using rule 46 (integer -> INT .)
    ASTERISK        reduce using rule 46 (integer -> INT .)
    IF              reduce using rule 46 (integer -> INT .)
    UNLESS          reduce using rule 46 (integer -> INT .)
    WHILE           reduce using rule 46 (integer -> INT .)
    UNTIL           reduce using rule 46 (integer -> INT .)
    LOOP            reduce using rule 46 (integer -> INT .)
    PLUS            reduce using rule 46 (integer -> INT .)
    MINUS           reduce using rule 46 (integer -> INT .)
    EXCLAMATION     reduce using rule 46 (integer -> INT .)
    TILDE           reduce using rule 46 (integer -> INT .)
    LPAREN          reduce using rule 46 (integer -> INT .)
    LBRACKET        reduce using rule 46 (integer -> INT .)
    INTNUMBER       reduce using rule 46 (integer -> INT .)
    FLOATNUMBER     reduce using rule 46 (integer -> INT .)
    STRING          reduce using rule 46 (integer -> INT .)
    CHAR            reduce using rule 46 (integer -> INT .)
    TRUE            reduce using rule 46 (integer -> INT .)
    FALSE           reduce using rule 46 (integer -> INT .)
    COMMA           reduce using rule 46 (integer -> INT .)
    RPAREN          reduce using rule 46 (integer -> INT .)


state 154

    (47) integer -> INT8 .

    ASSIGN          reduce using rule 47 (integer -> INT8 .)
    ID              reduce using rule 47 (integer -> INT8 .)
    CASE            reduce using rule 47 (integer -> INT8 .)
    RETURN          reduce using rule 47 (integer -> INT8 .)
    BREAK           reduce using rule 47 (integer -> INT8 .)
    NEXT            reduce using rule 47 (integer -> INT8 .)
    UNDERSCORE      reduce using rule 47 (integer -> INT8 .)
    ASTERISK        reduce using rule 47 (integer -> INT8 .)
    IF              reduce using rule 47 (integer -> INT8 .)
    UNLESS          reduce using rule 47 (integer -> INT8 .)
    WHILE           reduce using rule 47 (integer -> INT8 .)
    UNTIL           reduce using rule 47 (integer -> INT8 .)
    LOOP            reduce using rule 47 (integer -> INT8 .)
    PLUS            reduce using rule 47 (integer -> INT8 .)
    MINUS           reduce using rule 47 (integer -> INT8 .)
    EXCLAMATION     reduce using rule 47 (integer -> INT8 .)
    TILDE           reduce using rule 47 (integer -> INT8 .)
    LPAREN          reduce using rule 47 (integer -> INT8 .)
    LBRACKET        reduce using rule 47 (integer -> INT8 .)
    INTNUMBER       reduce using rule 47 (integer -> INT8 .)
    FLOATNUMBER     reduce using rule 47 (integer -> INT8 .)
    STRING          reduce using rule 47 (integer -> INT8 .)
    CHAR            reduce using rule 47 (integer -> INT8 .)
    TRUE            reduce using rule 47 (integer -> INT8 .)
    FALSE           reduce using rule 47 (integer -> INT8 .)
    COMMA           reduce using rule 47 (integer -> INT8 .)
    RPAREN          reduce using rule 47 (integer -> INT8 .)


state 155

    (48) integer -> INT16 .

    ASSIGN          reduce using rule 48 (integer -> INT16 .)
    ID              reduce using rule 48 (integer -> INT16 .)
    CASE            reduce using rule 48 (integer -> INT16 .)
    RETURN          reduce using rule 48 (integer -> INT16 .)
    BREAK           reduce using rule 48 (integer -> INT16 .)
    NEXT            reduce using rule 48 (integer -> INT16 .)
    UNDERSCORE      reduce using rule 48 (integer -> INT16 .)
    ASTERISK        reduce using rule 48 (integer -> INT16 .)
    IF              reduce using rule 48 (integer -> INT16 .)
    UNLESS          reduce using rule 48 (integer -> INT16 .)
    WHILE           reduce using rule 48 (integer -> INT16 .)
    UNTIL           reduce using rule 48 (integer -> INT16 .)
    LOOP            reduce using rule 48 (integer -> INT16 .)
    PLUS            reduce using rule 48 (integer -> INT16 .)
    MINUS           reduce using rule 48 (integer -> INT16 .)
    EXCLAMATION     reduce using rule 48 (integer -> INT16 .)
    TILDE           reduce using rule 48 (integer -> INT16 .)
    LPAREN          reduce using rule 48 (integer -> INT16 .)
    LBRACKET        reduce using rule 48 (integer -> INT16 .)
    INTNUMBER       reduce using rule 48 (integer -> INT16 .)
    FLOATNUMBER     reduce using rule 48 (integer -> INT16 .)
    STRING          reduce using rule 48 (integer -> INT16 .)
    CHAR            reduce using rule 48 (integer -> INT16 .)
    TRUE            reduce using rule 48 (integer -> INT16 .)
    FALSE           reduce using rule 48 (integer -> INT16 .)
    COMMA           reduce using rule 48 (integer -> INT16 .)
    RPAREN          reduce using rule 48 (integer -> INT16 .)


state 156

    (49) integer -> INT32 .

    ASSIGN          reduce using rule 49 (integer -> INT32 .)
    ID              reduce using rule 49 (integer -> INT32 .)
    CASE            reduce using rule 49 (integer -> INT32 .)
    RETURN          reduce using rule 49 (integer -> INT32 .)
    BREAK           reduce using rule 49 (integer -> INT32 .)
    NEXT            reduce using rule 49 (integer -> INT32 .)
    UNDERSCORE      reduce using rule 49 (integer -> INT32 .)
    ASTERISK        reduce using rule 49 (integer -> INT32 .)
    IF              reduce using rule 49 (integer -> INT32 .)
    UNLESS          reduce using rule 49 (integer -> INT32 .)
    WHILE           reduce using rule 49 (integer -> INT32 .)
    UNTIL           reduce using rule 49 (integer -> INT32 .)
    LOOP            reduce using rule 49 (integer -> INT32 .)
    PLUS            reduce using rule 49 (integer -> INT32 .)
    MINUS           reduce using rule 49 (integer -> INT32 .)
    EXCLAMATION     reduce using rule 49 (integer -> INT32 .)
    TILDE           reduce using rule 49 (integer -> INT32 .)
    LPAREN          reduce using rule 49 (integer -> INT32 .)
    LBRACKET        reduce using rule 49 (integer -> INT32 .)
    INTNUMBER       reduce using rule 49 (integer -> INT32 .)
    FLOATNUMBER     reduce using rule 49 (integer -> INT32 .)
    STRING          reduce using rule 49 (integer -> INT32 .)
    CHAR            reduce using rule 49 (integer -> INT32 .)
    TRUE            reduce using rule 49 (integer -> INT32 .)
    FALSE           reduce using rule 49 (integer -> INT32 .)
    COMMA           reduce using rule 49 (integer -> INT32 .)
    RPAREN          reduce using rule 49 (integer -> INT32 .)


state 157

    (50) integer -> INT64 .

    ASSIGN          reduce using rule 50 (integer -> INT64 .)
    ID              reduce using rule 50 (integer -> INT64 .)
    CASE            reduce using rule 50 (integer -> INT64 .)
    RETURN          reduce using rule 50 (integer -> INT64 .)
    BREAK           reduce using rule 50 (integer -> INT64 .)
    NEXT            reduce using rule 50 (integer -> INT64 .)
    UNDERSCORE      reduce using rule 50 (integer -> INT64 .)
    ASTERISK        reduce using rule 50 (integer -> INT64 .)
    IF              reduce using rule 50 (integer -> INT64 .)
    UNLESS          reduce using rule 50 (integer -> INT64 .)
    WHILE           reduce using rule 50 (integer -> INT64 .)
    UNTIL           reduce using rule 50 (integer -> INT64 .)
    LOOP            reduce using rule 50 (integer -> INT64 .)
    PLUS            reduce using rule 50 (integer -> INT64 .)
    MINUS           reduce using rule 50 (integer -> INT64 .)
    EXCLAMATION     reduce using rule 50 (integer -> INT64 .)
    TILDE           reduce using rule 50 (integer -> INT64 .)
    LPAREN          reduce using rule 50 (integer -> INT64 .)
    LBRACKET        reduce using rule 50 (integer -> INT64 .)
    INTNUMBER       reduce using rule 50 (integer -> INT64 .)
    FLOATNUMBER     reduce using rule 50 (integer -> INT64 .)
    STRING          reduce using rule 50 (integer -> INT64 .)
    CHAR            reduce using rule 50 (integer -> INT64 .)
    TRUE            reduce using rule 50 (integer -> INT64 .)
    FALSE           reduce using rule 50 (integer -> INT64 .)
    COMMA           reduce using rule 50 (integer -> INT64 .)
    RPAREN          reduce using rule 50 (integer -> INT64 .)


state 158

    (51) integer -> INT128 .

    ASSIGN          reduce using rule 51 (integer -> INT128 .)
    ID              reduce using rule 51 (integer -> INT128 .)
    CASE            reduce using rule 51 (integer -> INT128 .)
    RETURN          reduce using rule 51 (integer -> INT128 .)
    BREAK           reduce using rule 51 (integer -> INT128 .)
    NEXT            reduce using rule 51 (integer -> INT128 .)
    UNDERSCORE      reduce using rule 51 (integer -> INT128 .)
    ASTERISK        reduce using rule 51 (integer -> INT128 .)
    IF              reduce using rule 51 (integer -> INT128 .)
    UNLESS          reduce using rule 51 (integer -> INT128 .)
    WHILE           reduce using rule 51 (integer -> INT128 .)
    UNTIL           reduce using rule 51 (integer -> INT128 .)
    LOOP            reduce using rule 51 (integer -> INT128 .)
    PLUS            reduce using rule 51 (integer -> INT128 .)
    MINUS           reduce using rule 51 (integer -> INT128 .)
    EXCLAMATION     reduce using rule 51 (integer -> INT128 .)
    TILDE           reduce using rule 51 (integer -> INT128 .)
    LPAREN          reduce using rule 51 (integer -> INT128 .)
    LBRACKET        reduce using rule 51 (integer -> INT128 .)
    INTNUMBER       reduce using rule 51 (integer -> INT128 .)
    FLOATNUMBER     reduce using rule 51 (integer -> INT128 .)
    STRING          reduce using rule 51 (integer -> INT128 .)
    CHAR            reduce using rule 51 (integer -> INT128 .)
    TRUE            reduce using rule 51 (integer -> INT128 .)
    FALSE           reduce using rule 51 (integer -> INT128 .)
    COMMA           reduce using rule 51 (integer -> INT128 .)
    RPAREN          reduce using rule 51 (integer -> INT128 .)


state 159

    (52) integer -> UINT8 .

    ASSIGN          reduce using rule 52 (integer -> UINT8 .)
    ID              reduce using rule 52 (integer -> UINT8 .)
    CASE            reduce using rule 52 (integer -> UINT8 .)
    RETURN          reduce using rule 52 (integer -> UINT8 .)
    BREAK           reduce using rule 52 (integer -> UINT8 .)
    NEXT            reduce using rule 52 (integer -> UINT8 .)
    UNDERSCORE      reduce using rule 52 (integer -> UINT8 .)
    ASTERISK        reduce using rule 52 (integer -> UINT8 .)
    IF              reduce using rule 52 (integer -> UINT8 .)
    UNLESS          reduce using rule 52 (integer -> UINT8 .)
    WHILE           reduce using rule 52 (integer -> UINT8 .)
    UNTIL           reduce using rule 52 (integer -> UINT8 .)
    LOOP            reduce using rule 52 (integer -> UINT8 .)
    PLUS            reduce using rule 52 (integer -> UINT8 .)
    MINUS           reduce using rule 52 (integer -> UINT8 .)
    EXCLAMATION     reduce using rule 52 (integer -> UINT8 .)
    TILDE           reduce using rule 52 (integer -> UINT8 .)
    LPAREN          reduce using rule 52 (integer -> UINT8 .)
    LBRACKET        reduce using rule 52 (integer -> UINT8 .)
    INTNUMBER       reduce using rule 52 (integer -> UINT8 .)
    FLOATNUMBER     reduce using rule 52 (integer -> UINT8 .)
    STRING          reduce using rule 52 (integer -> UINT8 .)
    CHAR            reduce using rule 52 (integer -> UINT8 .)
    TRUE            reduce using rule 52 (integer -> UINT8 .)
    FALSE           reduce using rule 52 (integer -> UINT8 .)
    COMMA           reduce using rule 52 (integer -> UINT8 .)
    RPAREN          reduce using rule 52 (integer -> UINT8 .)


state 160

    (53) integer -> UINT16 .

    ASSIGN          reduce using rule 53 (integer -> UINT16 .)
    ID              reduce using rule 53 (integer -> UINT16 .)
    CASE            reduce using rule 53 (integer -> UINT16 .)
    RETURN          reduce using rule 53 (integer -> UINT16 .)
    BREAK           reduce using rule 53 (integer -> UINT16 .)
    NEXT            reduce using rule 53 (integer -> UINT16 .)
    UNDERSCORE      reduce using rule 53 (integer -> UINT16 .)
    ASTERISK        reduce using rule 53 (integer -> UINT16 .)
    IF              reduce using rule 53 (integer -> UINT16 .)
    UNLESS          reduce using rule 53 (integer -> UINT16 .)
    WHILE           reduce using rule 53 (integer -> UINT16 .)
    UNTIL           reduce using rule 53 (integer -> UINT16 .)
    LOOP            reduce using rule 53 (integer -> UINT16 .)
    PLUS            reduce using rule 53 (integer -> UINT16 .)
    MINUS           reduce using rule 53 (integer -> UINT16 .)
    EXCLAMATION     reduce using rule 53 (integer -> UINT16 .)
    TILDE           reduce using rule 53 (integer -> UINT16 .)
    LPAREN          reduce using rule 53 (integer -> UINT16 .)
    LBRACKET        reduce using rule 53 (integer -> UINT16 .)
    INTNUMBER       reduce using rule 53 (integer -> UINT16 .)
    FLOATNUMBER     reduce using rule 53 (integer -> UINT16 .)
    STRING          reduce using rule 53 (integer -> UINT16 .)
    CHAR            reduce using rule 53 (integer -> UINT16 .)
    TRUE            reduce using rule 53 (integer -> UINT16 .)
    FALSE           reduce using rule 53 (integer -> UINT16 .)
    COMMA           reduce using rule 53 (integer -> UINT16 .)
    RPAREN          reduce using rule 53 (integer -> UINT16 .)


state 161

    (54) integer -> UINT32 .

    ASSIGN          reduce using rule 54 (integer -> UINT32 .)
    ID              reduce using rule 54 (integer -> UINT32 .)
    CASE            reduce using rule 54 (integer -> UINT32 .)
    RETURN          reduce using rule 54 (integer -> UINT32 .)
    BREAK           reduce using rule 54 (integer -> UINT32 .)
    NEXT            reduce using rule 54 (integer -> UINT32 .)
    UNDERSCORE      reduce using rule 54 (integer -> UINT32 .)
    ASTERISK        reduce using rule 54 (integer -> UINT32 .)
    IF              reduce using rule 54 (integer -> UINT32 .)
    UNLESS          reduce using rule 54 (integer -> UINT32 .)
    WHILE           reduce using rule 54 (integer -> UINT32 .)
    UNTIL           reduce using rule 54 (integer -> UINT32 .)
    LOOP            reduce using rule 54 (integer -> UINT32 .)
    PLUS            reduce using rule 54 (integer -> UINT32 .)
    MINUS           reduce using rule 54 (integer -> UINT32 .)
    EXCLAMATION     reduce using rule 54 (integer -> UINT32 .)
    TILDE           reduce using rule 54 (integer -> UINT32 .)
    LPAREN          reduce using rule 54 (integer -> UINT32 .)
    LBRACKET        reduce using rule 54 (integer -> UINT32 .)
    INTNUMBER       reduce using rule 54 (integer -> UINT32 .)
    FLOATNUMBER     reduce using rule 54 (integer -> UINT32 .)
    STRING          reduce using rule 54 (integer -> UINT32 .)
    CHAR            reduce using rule 54 (integer -> UINT32 .)
    TRUE            reduce using rule 54 (integer -> UINT32 .)
    FALSE           reduce using rule 54 (integer -> UINT32 .)
    COMMA           reduce using rule 54 (integer -> UINT32 .)
    RPAREN          reduce using rule 54 (integer -> UINT32 .)


state 162

    (55) integer -> UINT64 .

    ASSIGN          reduce using rule 55 (integer -> UINT64 .)
    ID              reduce using rule 55 (integer -> UINT64 .)
    CASE            reduce using rule 55 (integer -> UINT64 .)
    RETURN          reduce using rule 55 (integer -> UINT64 .)
    BREAK           reduce using rule 55 (integer -> UINT64 .)
    NEXT            reduce using rule 55 (integer -> UINT64 .)
    UNDERSCORE      reduce using rule 55 (integer -> UINT64 .)
    ASTERISK        reduce using rule 55 (integer -> UINT64 .)
    IF              reduce using rule 55 (integer -> UINT64 .)
    UNLESS          reduce using rule 55 (integer -> UINT64 .)
    WHILE           reduce using rule 55 (integer -> UINT64 .)
    UNTIL           reduce using rule 55 (integer -> UINT64 .)
    LOOP            reduce using rule 55 (integer -> UINT64 .)
    PLUS            reduce using rule 55 (integer -> UINT64 .)
    MINUS           reduce using rule 55 (integer -> UINT64 .)
    EXCLAMATION     reduce using rule 55 (integer -> UINT64 .)
    TILDE           reduce using rule 55 (integer -> UINT64 .)
    LPAREN          reduce using rule 55 (integer -> UINT64 .)
    LBRACKET        reduce using rule 55 (integer -> UINT64 .)
    INTNUMBER       reduce using rule 55 (integer -> UINT64 .)
    FLOATNUMBER     reduce using rule 55 (integer -> UINT64 .)
    STRING          reduce using rule 55 (integer -> UINT64 .)
    CHAR            reduce using rule 55 (integer -> UINT64 .)
    TRUE            reduce using rule 55 (integer -> UINT64 .)
    FALSE           reduce using rule 55 (integer -> UINT64 .)
    COMMA           reduce using rule 55 (integer -> UINT64 .)
    RPAREN          reduce using rule 55 (integer -> UINT64 .)


state 163

    (56) integer -> UINT128 .

    ASSIGN          reduce using rule 56 (integer -> UINT128 .)
    ID              reduce using rule 56 (integer -> UINT128 .)
    CASE            reduce using rule 56 (integer -> UINT128 .)
    RETURN          reduce using rule 56 (integer -> UINT128 .)
    BREAK           reduce using rule 56 (integer -> UINT128 .)
    NEXT            reduce using rule 56 (integer -> UINT128 .)
    UNDERSCORE      reduce using rule 56 (integer -> UINT128 .)
    ASTERISK        reduce using rule 56 (integer -> UINT128 .)
    IF              reduce using rule 56 (integer -> UINT128 .)
    UNLESS          reduce using rule 56 (integer -> UINT128 .)
    WHILE           reduce using rule 56 (integer -> UINT128 .)
    UNTIL           reduce using rule 56 (integer -> UINT128 .)
    LOOP            reduce using rule 56 (integer -> UINT128 .)
    PLUS            reduce using rule 56 (integer -> UINT128 .)
    MINUS           reduce using rule 56 (integer -> UINT128 .)
    EXCLAMATION     reduce using rule 56 (integer -> UINT128 .)
    TILDE           reduce using rule 56 (integer -> UINT128 .)
    LPAREN          reduce using rule 56 (integer -> UINT128 .)
    LBRACKET        reduce using rule 56 (integer -> UINT128 .)
    INTNUMBER       reduce using rule 56 (integer -> UINT128 .)
    FLOATNUMBER     reduce using rule 56 (integer -> UINT128 .)
    STRING          reduce using rule 56 (integer -> UINT128 .)
    CHAR            reduce using rule 56 (integer -> UINT128 .)
    TRUE            reduce using rule 56 (integer -> UINT128 .)
    FALSE           reduce using rule 56 (integer -> UINT128 .)
    COMMA           reduce using rule 56 (integer -> UINT128 .)
    RPAREN          reduce using rule 56 (integer -> UINT128 .)


state 164

    (57) float -> FLOAT .

    ASSIGN          reduce using rule 57 (float -> FLOAT .)
    ID              reduce using rule 57 (float -> FLOAT .)
    CASE            reduce using rule 57 (float -> FLOAT .)
    RETURN          reduce using rule 57 (float -> FLOAT .)
    BREAK           reduce using rule 57 (float -> FLOAT .)
    NEXT            reduce using rule 57 (float -> FLOAT .)
    UNDERSCORE      reduce using rule 57 (float -> FLOAT .)
    ASTERISK        reduce using rule 57 (float -> FLOAT .)
    IF              reduce using rule 57 (float -> FLOAT .)
    UNLESS          reduce using rule 57 (float -> FLOAT .)
    WHILE           reduce using rule 57 (float -> FLOAT .)
    UNTIL           reduce using rule 57 (float -> FLOAT .)
    LOOP            reduce using rule 57 (float -> FLOAT .)
    PLUS            reduce using rule 57 (float -> FLOAT .)
    MINUS           reduce using rule 57 (float -> FLOAT .)
    EXCLAMATION     reduce using rule 57 (float -> FLOAT .)
    TILDE           reduce using rule 57 (float -> FLOAT .)
    LPAREN          reduce using rule 57 (float -> FLOAT .)
    LBRACKET        reduce using rule 57 (float -> FLOAT .)
    INTNUMBER       reduce using rule 57 (float -> FLOAT .)
    FLOATNUMBER     reduce using rule 57 (float -> FLOAT .)
    STRING          reduce using rule 57 (float -> FLOAT .)
    CHAR            reduce using rule 57 (float -> FLOAT .)
    TRUE            reduce using rule 57 (float -> FLOAT .)
    FALSE           reduce using rule 57 (float -> FLOAT .)
    COMMA           reduce using rule 57 (float -> FLOAT .)
    RPAREN          reduce using rule 57 (float -> FLOAT .)


state 165

    (58) float -> FLOAT32 .

    ASSIGN          reduce using rule 58 (float -> FLOAT32 .)
    ID              reduce using rule 58 (float -> FLOAT32 .)
    CASE            reduce using rule 58 (float -> FLOAT32 .)
    RETURN          reduce using rule 58 (float -> FLOAT32 .)
    BREAK           reduce using rule 58 (float -> FLOAT32 .)
    NEXT            reduce using rule 58 (float -> FLOAT32 .)
    UNDERSCORE      reduce using rule 58 (float -> FLOAT32 .)
    ASTERISK        reduce using rule 58 (float -> FLOAT32 .)
    IF              reduce using rule 58 (float -> FLOAT32 .)
    UNLESS          reduce using rule 58 (float -> FLOAT32 .)
    WHILE           reduce using rule 58 (float -> FLOAT32 .)
    UNTIL           reduce using rule 58 (float -> FLOAT32 .)
    LOOP            reduce using rule 58 (float -> FLOAT32 .)
    PLUS            reduce using rule 58 (float -> FLOAT32 .)
    MINUS           reduce using rule 58 (float -> FLOAT32 .)
    EXCLAMATION     reduce using rule 58 (float -> FLOAT32 .)
    TILDE           reduce using rule 58 (float -> FLOAT32 .)
    LPAREN          reduce using rule 58 (float -> FLOAT32 .)
    LBRACKET        reduce using rule 58 (float -> FLOAT32 .)
    INTNUMBER       reduce using rule 58 (float -> FLOAT32 .)
    FLOATNUMBER     reduce using rule 58 (float -> FLOAT32 .)
    STRING          reduce using rule 58 (float -> FLOAT32 .)
    CHAR            reduce using rule 58 (float -> FLOAT32 .)
    TRUE            reduce using rule 58 (float -> FLOAT32 .)
    FALSE           reduce using rule 58 (float -> FLOAT32 .)
    COMMA           reduce using rule 58 (float -> FLOAT32 .)
    RPAREN          reduce using rule 58 (float -> FLOAT32 .)


state 166

    (59) float -> FLOAT64 .

    ASSIGN          reduce using rule 59 (float -> FLOAT64 .)
    ID              reduce using rule 59 (float -> FLOAT64 .)
    CASE            reduce using rule 59 (float -> FLOAT64 .)
    RETURN          reduce using rule 59 (float -> FLOAT64 .)
    BREAK           reduce using rule 59 (float -> FLOAT64 .)
    NEXT            reduce using rule 59 (float -> FLOAT64 .)
    UNDERSCORE      reduce using rule 59 (float -> FLOAT64 .)
    ASTERISK        reduce using rule 59 (float -> FLOAT64 .)
    IF              reduce using rule 59 (float -> FLOAT64 .)
    UNLESS          reduce using rule 59 (float -> FLOAT64 .)
    WHILE           reduce using rule 59 (float -> FLOAT64 .)
    UNTIL           reduce using rule 59 (float -> FLOAT64 .)
    LOOP            reduce using rule 59 (float -> FLOAT64 .)
    PLUS            reduce using rule 59 (float -> FLOAT64 .)
    MINUS           reduce using rule 59 (float -> FLOAT64 .)
    EXCLAMATION     reduce using rule 59 (float -> FLOAT64 .)
    TILDE           reduce using rule 59 (float -> FLOAT64 .)
    LPAREN          reduce using rule 59 (float -> FLOAT64 .)
    LBRACKET        reduce using rule 59 (float -> FLOAT64 .)
    INTNUMBER       reduce using rule 59 (float -> FLOAT64 .)
    FLOATNUMBER     reduce using rule 59 (float -> FLOAT64 .)
    STRING          reduce using rule 59 (float -> FLOAT64 .)
    CHAR            reduce using rule 59 (float -> FLOAT64 .)
    TRUE            reduce using rule 59 (float -> FLOAT64 .)
    FALSE           reduce using rule 59 (float -> FLOAT64 .)
    COMMA           reduce using rule 59 (float -> FLOAT64 .)
    RPAREN          reduce using rule 59 (float -> FLOAT64 .)


state 167

    (60) boolean -> BOOL .

    ASSIGN          reduce using rule 60 (boolean -> BOOL .)
    ID              reduce using rule 60 (boolean -> BOOL .)
    CASE            reduce using rule 60 (boolean -> BOOL .)
    RETURN          reduce using rule 60 (boolean -> BOOL .)
    BREAK           reduce using rule 60 (boolean -> BOOL .)
    NEXT            reduce using rule 60 (boolean -> BOOL .)
    UNDERSCORE      reduce using rule 60 (boolean -> BOOL .)
    ASTERISK        reduce using rule 60 (boolean -> BOOL .)
    IF              reduce using rule 60 (boolean -> BOOL .)
    UNLESS          reduce using rule 60 (boolean -> BOOL .)
    WHILE           reduce using rule 60 (boolean -> BOOL .)
    UNTIL           reduce using rule 60 (boolean -> BOOL .)
    LOOP            reduce using rule 60 (boolean -> BOOL .)
    PLUS            reduce using rule 60 (boolean -> BOOL .)
    MINUS           reduce using rule 60 (boolean -> BOOL .)
    EXCLAMATION     reduce using rule 60 (boolean -> BOOL .)
    TILDE           reduce using rule 60 (boolean -> BOOL .)
    LPAREN          reduce using rule 60 (boolean -> BOOL .)
    LBRACKET        reduce using rule 60 (boolean -> BOOL .)
    INTNUMBER       reduce using rule 60 (boolean -> BOOL .)
    FLOATNUMBER     reduce using rule 60 (boolean -> BOOL .)
    STRING          reduce using rule 60 (boolean -> BOOL .)
    CHAR            reduce using rule 60 (boolean -> BOOL .)
    TRUE            reduce using rule 60 (boolean -> BOOL .)
    FALSE           reduce using rule 60 (boolean -> BOOL .)
    COMMA           reduce using rule 60 (boolean -> BOOL .)
    RPAREN          reduce using rule 60 (boolean -> BOOL .)


state 168

    (68) variable_declaration -> ID ASSIGN expression .

    $end            reduce using rule 68 (variable_declaration -> ID ASSIGN expression .)
    END             reduce using rule 68 (variable_declaration -> ID ASSIGN expression .)
    ELSIF           reduce using rule 68 (variable_declaration -> ID ASSIGN expression .)
    ELSE            reduce using rule 68 (variable_declaration -> ID ASSIGN expression .)
    RBRACE          reduce using rule 68 (variable_declaration -> ID ASSIGN expression .)
    WHEN            reduce using rule 68 (variable_declaration -> ID ASSIGN expression .)


state 169

    (70) list_of_identifiers -> ID .
    (71) list_of_identifiers -> ID . COMMA list_of_identifiers

    ASSIGN          reduce using rule 70 (list_of_identifiers -> ID .)
    COMMA           shift and go to state 216


state 170

    (69) variable_declaration -> ID COMMA list_of_identifiers . ASSIGN expression COMMA list_of_values

    ASSIGN          shift and go to state 217


state 171

    (74) function_call -> ID LPAREN expression_list . RPAREN
    (79) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 218
    COMMA           shift and go to state 209


state 172

    (75) function_call -> ID LPAREN RPAREN .

    $end            reduce using rule 75 (function_call -> ID LPAREN RPAREN .)
    END             reduce using rule 75 (function_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 75 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 75 (function_call -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 75 (function_call -> ID LPAREN RPAREN .)
    WHEN            reduce using rule 75 (function_call -> ID LPAREN RPAREN .)


state 173

    (28) function -> DEF ID LPAREN . opt_argument_list RPAREN opt_return_type statements END
    (30) opt_argument_list -> . argument_list
    (31) opt_argument_list -> . empty
    (32) argument_list -> . argument
    (33) argument_list -> . argument COMMA argument_list
    (169) empty -> .
    (34) argument -> . ID
    (35) argument -> . ID COLON types
    (36) argument -> . ID ASSIGN expression
    (37) argument -> . ID COLON types ASSIGN expression

    RPAREN          reduce using rule 169 (empty -> .)
    ID              shift and go to state 219

    opt_argument_list              shift and go to state 220
    argument_list                  shift and go to state 221
    empty                          shift and go to state 222
    argument                       shift and go to state 223

state 174

    (29) function -> DEF ID opt_return_type . statements END
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 224
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 175

    (38) opt_return_type -> COLON . types
    (40) types -> . STRING
    (41) types -> . CHAR
    (42) types -> . NIL
    (43) types -> . integer
    (44) types -> . float
    (45) types -> . boolean
    (46) integer -> . INT
    (47) integer -> . INT8
    (48) integer -> . INT16
    (49) integer -> . INT32
    (50) integer -> . INT64
    (51) integer -> . INT128
    (52) integer -> . UINT8
    (53) integer -> . UINT16
    (54) integer -> . UINT32
    (55) integer -> . UINT64
    (56) integer -> . UINT128
    (57) float -> . FLOAT
    (58) float -> . FLOAT32
    (59) float -> . FLOAT64
    (60) boolean -> . BOOL

    STRING          shift and go to state 147
    CHAR            shift and go to state 148
    NIL             shift and go to state 149
    INT             shift and go to state 153
    INT8            shift and go to state 154
    INT16           shift and go to state 155
    INT32           shift and go to state 156
    INT64           shift and go to state 157
    INT128          shift and go to state 158
    UINT8           shift and go to state 159
    UINT16          shift and go to state 160
    UINT32          shift and go to state 161
    UINT64          shift and go to state 162
    UINT128         shift and go to state 163
    FLOAT           shift and go to state 164
    FLOAT32         shift and go to state 165
    FLOAT64         shift and go to state 166
    BOOL            shift and go to state 167

    types                          shift and go to state 225
    integer                        shift and go to state 150
    float                          shift and go to state 151
    boolean                        shift and go to state 152

state 176

    (39) opt_return_type -> empty .

    ID              reduce using rule 39 (opt_return_type -> empty .)
    CASE            reduce using rule 39 (opt_return_type -> empty .)
    RETURN          reduce using rule 39 (opt_return_type -> empty .)
    BREAK           reduce using rule 39 (opt_return_type -> empty .)
    NEXT            reduce using rule 39 (opt_return_type -> empty .)
    UNDERSCORE      reduce using rule 39 (opt_return_type -> empty .)
    ASTERISK        reduce using rule 39 (opt_return_type -> empty .)
    IF              reduce using rule 39 (opt_return_type -> empty .)
    UNLESS          reduce using rule 39 (opt_return_type -> empty .)
    WHILE           reduce using rule 39 (opt_return_type -> empty .)
    UNTIL           reduce using rule 39 (opt_return_type -> empty .)
    LOOP            reduce using rule 39 (opt_return_type -> empty .)
    PLUS            reduce using rule 39 (opt_return_type -> empty .)
    MINUS           reduce using rule 39 (opt_return_type -> empty .)
    EXCLAMATION     reduce using rule 39 (opt_return_type -> empty .)
    TILDE           reduce using rule 39 (opt_return_type -> empty .)
    LPAREN          reduce using rule 39 (opt_return_type -> empty .)
    LBRACKET        reduce using rule 39 (opt_return_type -> empty .)
    INTNUMBER       reduce using rule 39 (opt_return_type -> empty .)
    FLOATNUMBER     reduce using rule 39 (opt_return_type -> empty .)
    STRING          reduce using rule 39 (opt_return_type -> empty .)
    CHAR            reduce using rule 39 (opt_return_type -> empty .)
    TRUE            reduce using rule 39 (opt_return_type -> empty .)
    FALSE           reduce using rule 39 (opt_return_type -> empty .)


state 177

    (164) primary_expression -> LPAREN expression RPAREN .

    POTENCIACAO     reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    MULTI           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    TIPO_EQUAL      reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOTDOT       reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    NEXT            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    UNDERSCORE      reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    INTNUMBER       reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    CONSTANT        reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)
    TCOLON          reduce using rule 164 (primary_expression -> LPAREN expression RPAREN .)


state 178

    (123) assignment_expression -> assignment_target ASSIGN expression .

    DOT             reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    $end            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    RPAREN          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    WHEN            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    END             reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSIF           reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSE            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACE          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACE          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    ID              reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    CASE            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    RETURN          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    BREAK           reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    NEXT            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    UNDERSCORE      reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    ASTERISK        reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    IF              reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    UNLESS          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    WHILE           reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    UNTIL           reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    LOOP            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    PLUS            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    MINUS           reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    EXCLAMATION     reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    TILDE           reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    LPAREN          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACKET        reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    INTNUMBER       reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    FLOATNUMBER     reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    STRING          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    CHAR            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    TRUE            reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    FALSE           reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    COMMA           reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACKET        reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    CONSTANT        reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    MODULE          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    DEF             reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)
    TCOLON          reduce using rule 123 (assignment_expression -> assignment_target ASSIGN expression .)


state 179

    (124) assignment_expression -> assignment_target PLUS_ASSIGN expression .

    DOT             reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    $end            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHEN            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    END             reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSE            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACE          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACE          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ID              reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CASE            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RETURN          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    BREAK           reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEXT            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ASTERISK        reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    IF              reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNLESS          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHILE           reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNTIL           reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LOOP            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    PLUS            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MINUS           reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TILDE           reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LPAREN          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    STRING          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CHAR            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TRUE            reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FALSE           reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    COMMA           reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CONSTANT        reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MODULE          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DEF             reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TCOLON          reduce using rule 124 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)


state 180

    (125) assignment_expression -> assignment_target MINUS_ASSIGN expression .

    DOT             reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    $end            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHEN            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    END             reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSE            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACE          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACE          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ID              reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CASE            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RETURN          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    BREAK           reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEXT            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ASTERISK        reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    IF              reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNLESS          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHILE           reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNTIL           reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LOOP            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    PLUS            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MINUS           reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TILDE           reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LPAREN          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    STRING          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CHAR            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TRUE            reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FALSE           reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    COMMA           reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CONSTANT        reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MODULE          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DEF             reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TCOLON          reduce using rule 125 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)


state 181

    (126) assignment_expression -> assignment_target MULTI_ASSIGN expression .

    DOT             reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    $end            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RPAREN          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHEN            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    END             reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSIF           reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSE            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACE          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACE          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ID              reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CASE            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RETURN          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    BREAK           reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEXT            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNDERSCORE      reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ASTERISK        reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    IF              reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNLESS          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHILE           reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNTIL           reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LOOP            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    PLUS            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MINUS           reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    EXCLAMATION     reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TILDE           reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LPAREN          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACKET        reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTNUMBER       reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    STRING          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CHAR            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TRUE            reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FALSE           reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    COMMA           reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACKET        reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CONSTANT        reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MODULE          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DEF             reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TCOLON          reduce using rule 126 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)


state 182

    (127) assignment_expression -> assignment_target DIVIDE_ASSIGN expression .

    DOT             reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    $end            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHEN            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    END             reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACE          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACE          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ID              reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    BREAK           reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEXT            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNDERSCORE      reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ASTERISK        reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    IF              reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNLESS          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHILE           reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNTIL           reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LOOP            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    PLUS            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MINUS           reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    EXCLAMATION     reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TILDE           reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LPAREN          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTNUMBER       reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CHAR            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TRUE            reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FALSE           reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACKET        reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CONSTANT        reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MODULE          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DEF             reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TCOLON          reduce using rule 127 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)


state 183

    (114) case_structure -> CASE expression when_list . opt_else END
    (116) when_list -> when_list . WHEN expression statements
    (102) opt_else -> . ELSE statements
    (103) opt_else -> . empty
    (169) empty -> .

    WHEN            shift and go to state 227
    ELSE            shift and go to state 228
    END             reduce using rule 169 (empty -> .)

    opt_else                       shift and go to state 226
    empty                          shift and go to state 229

state 184

    (115) when_list -> WHEN . expression statements
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 230
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 185

    (132) ternary_expression -> range_expression QMARK expression . TCOLON expression

    TCOLON          shift and go to state 231


state 186

    (93) if_statement -> IF if_condition statements . opt_elsif opt_else END
    (97) opt_elsif -> . elsif_list
    (98) opt_elsif -> . empty
    (99) elsif_list -> . elsif_list elsif
    (100) elsif_list -> . elsif
    (169) empty -> .
    (101) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 169 (empty -> .)
    END             reduce using rule 169 (empty -> .)
    ELSIF           shift and go to state 236

    opt_elsif                      shift and go to state 232
    elsif_list                     shift and go to state 233
    empty                          shift and go to state 234
    elsif                          shift and go to state 235

state 187

    (96) if_condition -> expression LBRACE . statements RBRACE
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 15
    statements                     shift and go to state 237
    statement                      shift and go to state 11
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 188

    (94) unless_statement -> UNLESS if_condition statements . opt_else END
    (102) opt_else -> . ELSE statements
    (103) opt_else -> . empty
    (169) empty -> .

    ELSE            shift and go to state 228
    END             reduce using rule 169 (empty -> .)

    opt_else                       shift and go to state 238
    empty                          shift and go to state 229

state 189

    (108) while -> WHILE expression statements .

    $end            reduce using rule 108 (while -> WHILE expression statements .)
    END             reduce using rule 108 (while -> WHILE expression statements .)
    ELSIF           reduce using rule 108 (while -> WHILE expression statements .)
    ELSE            reduce using rule 108 (while -> WHILE expression statements .)
    RBRACE          reduce using rule 108 (while -> WHILE expression statements .)
    WHEN            reduce using rule 108 (while -> WHILE expression statements .)


state 190

    (109) until -> UNTIL expression statements .

    $end            reduce using rule 109 (until -> UNTIL expression statements .)
    END             reduce using rule 109 (until -> UNTIL expression statements .)
    ELSIF           reduce using rule 109 (until -> UNTIL expression statements .)
    ELSE            reduce using rule 109 (until -> UNTIL expression statements .)
    RBRACE          reduce using rule 109 (until -> UNTIL expression statements .)
    WHEN            reduce using rule 109 (until -> UNTIL expression statements .)


state 191

    (134) range_expression -> logical_or_expression DOTDOT logical_or_expression .
    (138) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    DOT             reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    $end            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RPAREN          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    WHEN            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    END             reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ELSIF           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ELSE            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RBRACE          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LBRACE          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ID              reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CASE            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RETURN          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    BREAK           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    NEXT            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNDERSCORE      reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ASTERISK        reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    IF              reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNLESS          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    WHILE           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNTIL           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LOOP            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    PLUS            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    MINUS           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    EXCLAMATION     reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TILDE           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LPAREN          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LBRACKET        reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    INTNUMBER       reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    FLOATNUMBER     reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    STRING          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CHAR            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TRUE            reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    FALSE           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    COMMA           reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RBRACKET        reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CONSTANT        reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    MODULE          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    DEF             reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TCOLON          reduce using rule 134 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    OR              shift and go to state 114


state 192

    (135) range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .
    (138) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    DOT             reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    $end            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RPAREN          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    WHEN            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    END             reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ELSIF           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ELSE            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RBRACE          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LBRACE          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ID              reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CASE            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RETURN          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    BREAK           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    NEXT            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNDERSCORE      reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ASTERISK        reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    IF              reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNLESS          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    WHILE           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNTIL           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LOOP            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    PLUS            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    MINUS           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    EXCLAMATION     reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TILDE           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LPAREN          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LBRACKET        reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    INTNUMBER       reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    FLOATNUMBER     reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    STRING          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CHAR            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TRUE            reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    FALSE           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    COMMA           reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RBRACKET        reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CONSTANT        reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    MODULE          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    DEF             reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TCOLON          reduce using rule 135 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    OR              shift and go to state 114


state 193

    (138) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (140) logical_and_expression -> logical_and_expression . AND equality_expression

    DOTDOT          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOTDOTDOT       reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    QMARK           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOT             reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    $end            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHEN            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    END             reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSIF           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSE            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACE          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACE          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ID              reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CASE            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RETURN          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    BREAK           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEXT            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNDERSCORE      reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASTERISK        reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IF              reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNLESS          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHILE           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNTIL           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LOOP            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    PLUS            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MINUS           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    EXCLAMATION     reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TILDE           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LPAREN          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACKET        reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTNUMBER       reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FLOATNUMBER     reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRING          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CHAR            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRUE            reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FALSE           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONSTANT        reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MODULE          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DEF             reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TCOLON          reduce using rule 138 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 115


state 194

    (140) logical_and_expression -> logical_and_expression AND equality_expression .
    (142) equality_expression -> equality_expression . EQUAL relational_expression
    (143) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (144) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOTDOT          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOTDOTDOT       reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    QMARK           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOT             reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    $end            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHEN            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    END             reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSIF           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSE            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACE          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACE          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ID              reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CASE            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RETURN          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    BREAK           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEXT            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNDERSCORE      reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASTERISK        reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IF              reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNLESS          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHILE           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNTIL           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LOOP            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    PLUS            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MINUS           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EXCLAMATION     reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TILDE           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACKET        reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTNUMBER       reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOATNUMBER     reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRING          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRUE            reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FALSE           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONSTANT        reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MODULE          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEF             reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TCOLON          reduce using rule 140 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQUAL           shift and go to state 116
    NOT_EQUAL       shift and go to state 117
    TIPO_EQUAL      shift and go to state 118


state 195

    (142) equality_expression -> equality_expression EQUAL relational_expression .
    (146) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (147) relational_expression -> relational_expression . LESS_THAN additive_expression
    (148) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (149) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOTDOT          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    QMARK           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOT             reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    $end            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHEN            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    END             reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSIF           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSE            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACE          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACE          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    ID              reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    CASE            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    RETURN          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    BREAK           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEXT            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    ASTERISK        reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    IF              reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNLESS          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHILE           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNTIL           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOOP            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    PLUS            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    MINUS           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    TILDE           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    LPAREN          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACKET        reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTNUMBER       reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    CHAR            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    TRUE            reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    FALSE           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACKET        reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONSTANT        reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    MODULE          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    DEF             reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    TCOLON          reduce using rule 142 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 119
    LESS_THAN       shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    LESS_EQUAL      shift and go to state 122


state 196

    (143) equality_expression -> equality_expression NOT_EQUAL relational_expression .
    (146) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (147) relational_expression -> relational_expression . LESS_THAN additive_expression
    (148) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (149) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    AND             reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOTDOT          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    OR              reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    QMARK           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOT             reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    $end            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RPAREN          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHEN            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    END             reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSIF           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSE            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACE          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACE          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ID              reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CASE            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RETURN          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    BREAK           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEXT            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ASTERISK        reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    IF              reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNLESS          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHILE           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNTIL           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LOOP            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    PLUS            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MINUS           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TILDE           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LPAREN          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACKET        reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    STRING          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CHAR            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TRUE            reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FALSE           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    COMMA           reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACKET        reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CONSTANT        reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MODULE          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DEF             reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TCOLON          reduce using rule 143 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 119
    LESS_THAN       shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    LESS_EQUAL      shift and go to state 122


state 197

    (144) equality_expression -> equality_expression TIPO_EQUAL relational_expression .
    (146) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (147) relational_expression -> relational_expression . LESS_THAN additive_expression
    (148) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (149) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    AND             reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOTDOT          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    OR              reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    QMARK           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOT             reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    $end            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RPAREN          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHEN            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    END             reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSIF           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSE            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACE          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACE          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ID              reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CASE            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RETURN          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    BREAK           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEXT            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ASTERISK        reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    IF              reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNLESS          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHILE           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNTIL           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LOOP            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    PLUS            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MINUS           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TILDE           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LPAREN          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACKET        reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    STRING          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CHAR            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TRUE            reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FALSE           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    COMMA           reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACKET        reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CONSTANT        reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MODULE          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DEF             reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TCOLON          reduce using rule 144 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 119
    LESS_THAN       shift and go to state 120
    GREATER_EQUAL   shift and go to state 121
    LESS_EQUAL      shift and go to state 122


state 198

    (146) relational_expression -> relational_expression GREATER_THAN additive_expression .
    (151) additive_expression -> additive_expression . PLUS multiplicative_expression
    (152) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_THAN       reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EQUAL           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    AND             reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOTDOT          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOTDOTDOT       reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    OR              reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    QMARK           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOT             reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    $end            reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RPAREN          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHEN            reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    END             reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSIF           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSE            reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACE          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACE          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ID              reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CASE            reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RETURN          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    BREAK           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEXT            reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNDERSCORE      reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ASTERISK        reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    IF              reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNLESS          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHILE           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNTIL           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LOOP            reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EXCLAMATION     reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TILDE           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LPAREN          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACKET        reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTNUMBER       reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    STRING          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CHAR            reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TRUE            reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FALSE           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    COMMA           reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACKET        reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CONSTANT        reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    MODULE          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DEF             reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TCOLON          reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

  ! PLUS            [ reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 146 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]


state 199

    (147) relational_expression -> relational_expression LESS_THAN additive_expression .
    (151) additive_expression -> additive_expression . PLUS multiplicative_expression
    (152) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_THAN       reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EQUAL           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    AND             reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOTDOT          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOTDOTDOT       reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    OR              reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    QMARK           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOT             reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    $end            reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RPAREN          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHEN            reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    END             reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSIF           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSE            reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACE          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACE          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ID              reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CASE            reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RETURN          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    BREAK           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEXT            reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNDERSCORE      reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ASTERISK        reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    IF              reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNLESS          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHILE           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNTIL           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LOOP            reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EXCLAMATION     reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TILDE           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LPAREN          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACKET        reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTNUMBER       reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    STRING          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CHAR            reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TRUE            reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FALSE           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    COMMA           reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACKET        reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CONSTANT        reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    MODULE          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DEF             reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TCOLON          reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

  ! PLUS            [ reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 147 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]


state 200

    (148) relational_expression -> relational_expression GREATER_EQUAL additive_expression .
    (151) additive_expression -> additive_expression . PLUS multiplicative_expression
    (152) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EQUAL           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    AND             reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOTDOT          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOTDOTDOT       reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    OR              reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    QMARK           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOT             reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    $end            reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RPAREN          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHEN            reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    END             reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSIF           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSE            reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACE          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACE          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ID              reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CASE            reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RETURN          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    BREAK           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEXT            reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ASTERISK        reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    IF              reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNLESS          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHILE           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNTIL           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LOOP            reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TILDE           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LPAREN          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACKET        reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    STRING          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CHAR            reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TRUE            reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FALSE           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    COMMA           reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACKET        reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CONSTANT        reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    MODULE          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DEF             reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TCOLON          reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

  ! PLUS            [ reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 148 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]


state 201

    (149) relational_expression -> relational_expression LESS_EQUAL additive_expression .
    (151) additive_expression -> additive_expression . PLUS multiplicative_expression
    (152) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EQUAL           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    AND             reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOTDOT          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOTDOTDOT       reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    OR              reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    QMARK           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOT             reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    $end            reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RPAREN          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHEN            reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    END             reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSIF           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSE            reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACE          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACE          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ID              reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CASE            reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RETURN          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    BREAK           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEXT            reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ASTERISK        reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    IF              reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNLESS          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHILE           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNTIL           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LOOP            reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TILDE           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LPAREN          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACKET        reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    STRING          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CHAR            reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TRUE            reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FALSE           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    COMMA           reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACKET        reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CONSTANT        reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    MODULE          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DEF             reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TCOLON          reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124

  ! PLUS            [ reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 149 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]


state 202

    (151) additive_expression -> additive_expression PLUS multiplicative_expression .
    (154) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (155) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (156) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOTDOT          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOTDOTDOT       reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QMARK           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOT             reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    $end            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHEN            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    END             reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSIF           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACE          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ID              reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CASE            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RETURN          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BREAK           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEXT            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASTERISK        reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IF              reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNLESS          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHILE           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNTIL           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOOP            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TILDE           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LPAREN          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACKET        reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTNUMBER       reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CHAR            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TRUE            reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FALSE           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONSTANT        reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MODULE          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DEF             reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TCOLON          reduce using rule 151 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTI           shift and go to state 125
    DIVIDE          shift and go to state 126
    MODULO          shift and go to state 127


state 203

    (152) additive_expression -> additive_expression MINUS multiplicative_expression .
    (154) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (155) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (156) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOTDOT          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOTDOTDOT       reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QMARK           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOT             reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    $end            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHEN            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    END             reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSIF           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACE          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ID              reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CASE            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RETURN          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BREAK           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEXT            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASTERISK        reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IF              reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNLESS          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHILE           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNTIL           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOOP            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TILDE           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LPAREN          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACKET        reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTNUMBER       reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRING          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CHAR            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TRUE            reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FALSE           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONSTANT        reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MODULE          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DEF             reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TCOLON          reduce using rule 152 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTI           shift and go to state 125
    DIVIDE          shift and go to state 126
    MODULO          shift and go to state 127


state 204

    (154) multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .
    (158) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DIVIDE          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULO          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    PLUS            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MINUS           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_THAN    reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_THAN       reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_EQUAL      reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EQUAL           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NOT_EQUAL       reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    AND             reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOTDOT          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOTDOTDOT       reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    OR              reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    QMARK           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOT             reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    $end            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RPAREN          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHEN            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    END             reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSIF           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSE            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACE          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACE          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ID              reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CASE            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RETURN          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    BREAK           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEXT            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNDERSCORE      reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ASTERISK        reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    IF              reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNLESS          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHILE           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNTIL           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LOOP            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EXCLAMATION     reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TILDE           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LPAREN          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACKET        reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTNUMBER       reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FLOATNUMBER     reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    STRING          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CHAR            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TRUE            reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FALSE           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    COMMA           reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACKET        reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CONSTANT        reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULE          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DEF             reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TCOLON          reduce using rule 154 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    POTENCIACAO     shift and go to state 131


state 205

    (155) multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .
    (158) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DIVIDE          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULO          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    PLUS            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MINUS           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_THAN    reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_THAN       reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_EQUAL      reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EQUAL           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NOT_EQUAL       reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    AND             reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOTDOT          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOTDOTDOT       reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    OR              reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    QMARK           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOT             reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    $end            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RPAREN          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHEN            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    END             reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSIF           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSE            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACE          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACE          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ID              reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CASE            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RETURN          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    BREAK           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEXT            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNDERSCORE      reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ASTERISK        reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    IF              reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNLESS          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHILE           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNTIL           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LOOP            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EXCLAMATION     reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TILDE           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LPAREN          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACKET        reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTNUMBER       reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FLOATNUMBER     reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    STRING          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CHAR            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TRUE            reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FALSE           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    COMMA           reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACKET        reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CONSTANT        reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULE          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DEF             reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TCOLON          reduce using rule 155 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    POTENCIACAO     shift and go to state 131


state 206

    (156) multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .
    (158) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DIVIDE          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULO          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    PLUS            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MINUS           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_THAN    reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_THAN       reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_EQUAL      reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EQUAL           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NOT_EQUAL       reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    AND             reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOTDOT          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOTDOTDOT       reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    OR              reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    QMARK           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOT             reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    $end            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RPAREN          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHEN            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    END             reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSIF           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSE            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACE          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACE          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ID              reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CASE            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RETURN          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    BREAK           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEXT            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNDERSCORE      reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ASTERISK        reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    IF              reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNLESS          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHILE           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNTIL           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LOOP            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EXCLAMATION     reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TILDE           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LPAREN          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACKET        reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTNUMBER       reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FLOATNUMBER     reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    STRING          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CHAR            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TRUE            reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FALSE           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    COMMA           reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACKET        reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CONSTANT        reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULE          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DEF             reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TCOLON          reduce using rule 156 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    POTENCIACAO     shift and go to state 131


state 207

    (158) potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .

    POTENCIACAO     reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MULTI           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DIVIDE          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULO          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    PLUS            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MINUS           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_THAN    reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_THAN       reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_EQUAL   reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_EQUAL      reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EQUAL           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NOT_EQUAL       reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TIPO_EQUAL      reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    AND             reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOTDOT          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOTDOTDOT       reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    OR              reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    QMARK           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOT             reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    $end            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RPAREN          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHEN            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    END             reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSIF           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSE            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACE          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACE          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ID              reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CASE            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RETURN          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    BREAK           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEXT            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNDERSCORE      reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ASTERISK        reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    IF              reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNLESS          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHILE           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNTIL           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LOOP            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EXCLAMATION     reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TILDE           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LPAREN          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACKET        reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTNUMBER       reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FLOATNUMBER     reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    STRING          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CHAR            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TRUE            reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FALSE           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    COMMA           reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACKET        reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CONSTANT        reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULE          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DEF             reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TCOLON          reduce using rule 158 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)


state 208

    (168) array_literal -> LBRACKET opt_expression_list RBRACKET .

    POTENCIACAO     reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULO          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_THAN    reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_THAN       reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_EQUAL   reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_EQUAL      reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EQUAL           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NOT_EQUAL       reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TIPO_EQUAL      reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    AND             reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOT          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOTDOT       reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    OR              reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    QMARK           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOT             reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    $end            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RPAREN          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHEN            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    END             reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSIF           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSE            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACE          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACE          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ID              reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CASE            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RETURN          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    BREAK           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEXT            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNDERSCORE      reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASTERISK        reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    IF              reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNLESS          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHILE           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNTIL           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LOOP            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EXCLAMATION     reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TILDE           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LPAREN          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACKET        reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTNUMBER       reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FLOATNUMBER     reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    STRING          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CHAR            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TRUE            reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FALSE           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    COMMA           reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACKET        reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CONSTANT        reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULE          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DEF             reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TCOLON          reduce using rule 168 (array_literal -> LBRACKET opt_expression_list RBRACKET .)


state 209

    (79) expression_list -> expression_list COMMA . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 239
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 210

    (1) program -> require_list constant_list module_list function_list .

    $end            reduce using rule 1 (program -> require_list constant_list module_list function_list .)


state 211

    (111) iterator -> expression DOT MULTI statements .

    $end            reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    END             reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    ELSIF           reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    ELSE            reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    RBRACE          reduce using rule 111 (iterator -> expression DOT MULTI statements .)
    WHEN            reduce using rule 111 (iterator -> expression DOT MULTI statements .)


state 212

    (112) iterator -> expression DOT EACH DO . PIPE ID PIPE statements END

    PIPE            shift and go to state 240


state 213

    (113) iterator -> expression DOT EACH LBRACE . PIPE ID PIPE RBRACE statements

    PIPE            shift and go to state 241


state 214

    (25) module -> MODULE ID statements END .

    MODULE          reduce using rule 25 (module -> MODULE ID statements END .)
    DEF             reduce using rule 25 (module -> MODULE ID statements END .)
    $end            reduce using rule 25 (module -> MODULE ID statements END .)


state 215

    (67) variable_declaration -> ID COLON types ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 242
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 216

    (71) list_of_identifiers -> ID COMMA . list_of_identifiers
    (70) list_of_identifiers -> . ID
    (71) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 169

    list_of_identifiers            shift and go to state 243

state 217

    (69) variable_declaration -> ID COMMA list_of_identifiers ASSIGN . expression COMMA list_of_values
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 244
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 218

    (74) function_call -> ID LPAREN expression_list RPAREN .

    $end            reduce using rule 74 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 74 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSIF           reduce using rule 74 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 74 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACE          reduce using rule 74 (function_call -> ID LPAREN expression_list RPAREN .)
    WHEN            reduce using rule 74 (function_call -> ID LPAREN expression_list RPAREN .)


state 219

    (34) argument -> ID .
    (35) argument -> ID . COLON types
    (36) argument -> ID . ASSIGN expression
    (37) argument -> ID . COLON types ASSIGN expression

    COMMA           reduce using rule 34 (argument -> ID .)
    RPAREN          reduce using rule 34 (argument -> ID .)
    COLON           shift and go to state 245
    ASSIGN          shift and go to state 246


state 220

    (28) function -> DEF ID LPAREN opt_argument_list . RPAREN opt_return_type statements END

    RPAREN          shift and go to state 247


state 221

    (30) opt_argument_list -> argument_list .

    RPAREN          reduce using rule 30 (opt_argument_list -> argument_list .)


state 222

    (31) opt_argument_list -> empty .

    RPAREN          reduce using rule 31 (opt_argument_list -> empty .)


state 223

    (32) argument_list -> argument .
    (33) argument_list -> argument . COMMA argument_list

    RPAREN          reduce using rule 32 (argument_list -> argument .)
    COMMA           shift and go to state 248


state 224

    (29) function -> DEF ID opt_return_type statements . END

    END             shift and go to state 249


state 225

    (38) opt_return_type -> COLON types .

    ID              reduce using rule 38 (opt_return_type -> COLON types .)
    CASE            reduce using rule 38 (opt_return_type -> COLON types .)
    RETURN          reduce using rule 38 (opt_return_type -> COLON types .)
    BREAK           reduce using rule 38 (opt_return_type -> COLON types .)
    NEXT            reduce using rule 38 (opt_return_type -> COLON types .)
    UNDERSCORE      reduce using rule 38 (opt_return_type -> COLON types .)
    ASTERISK        reduce using rule 38 (opt_return_type -> COLON types .)
    IF              reduce using rule 38 (opt_return_type -> COLON types .)
    UNLESS          reduce using rule 38 (opt_return_type -> COLON types .)
    WHILE           reduce using rule 38 (opt_return_type -> COLON types .)
    UNTIL           reduce using rule 38 (opt_return_type -> COLON types .)
    LOOP            reduce using rule 38 (opt_return_type -> COLON types .)
    PLUS            reduce using rule 38 (opt_return_type -> COLON types .)
    MINUS           reduce using rule 38 (opt_return_type -> COLON types .)
    EXCLAMATION     reduce using rule 38 (opt_return_type -> COLON types .)
    TILDE           reduce using rule 38 (opt_return_type -> COLON types .)
    LPAREN          reduce using rule 38 (opt_return_type -> COLON types .)
    LBRACKET        reduce using rule 38 (opt_return_type -> COLON types .)
    INTNUMBER       reduce using rule 38 (opt_return_type -> COLON types .)
    FLOATNUMBER     reduce using rule 38 (opt_return_type -> COLON types .)
    STRING          reduce using rule 38 (opt_return_type -> COLON types .)
    CHAR            reduce using rule 38 (opt_return_type -> COLON types .)
    TRUE            reduce using rule 38 (opt_return_type -> COLON types .)
    FALSE           reduce using rule 38 (opt_return_type -> COLON types .)


state 226

    (114) case_structure -> CASE expression when_list opt_else . END

    END             shift and go to state 250


state 227

    (116) when_list -> when_list WHEN . expression statements
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 251
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 228

    (102) opt_else -> ELSE . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 252
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 229

    (103) opt_else -> empty .

    END             reduce using rule 103 (opt_else -> empty .)


state 230

    (115) when_list -> WHEN expression . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 15
    statements                     shift and go to state 253
    statement                      shift and go to state 11
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 231

    (132) ternary_expression -> range_expression QMARK expression TCOLON . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    range_expression               shift and go to state 44
    expression                     shift and go to state 254
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 232

    (93) if_statement -> IF if_condition statements opt_elsif . opt_else END
    (102) opt_else -> . ELSE statements
    (103) opt_else -> . empty
    (169) empty -> .

    ELSE            shift and go to state 228
    END             reduce using rule 169 (empty -> .)

    opt_else                       shift and go to state 255
    empty                          shift and go to state 229

state 233

    (97) opt_elsif -> elsif_list .
    (99) elsif_list -> elsif_list . elsif
    (101) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 97 (opt_elsif -> elsif_list .)
    END             reduce using rule 97 (opt_elsif -> elsif_list .)
    ELSIF           shift and go to state 236

    elsif                          shift and go to state 256

state 234

    (98) opt_elsif -> empty .

    ELSE            reduce using rule 98 (opt_elsif -> empty .)
    END             reduce using rule 98 (opt_elsif -> empty .)


state 235

    (100) elsif_list -> elsif .

    ELSIF           reduce using rule 100 (elsif_list -> elsif .)
    ELSE            reduce using rule 100 (elsif_list -> elsif .)
    END             reduce using rule 100 (elsif_list -> elsif .)


state 236

    (101) elsif -> ELSIF . if_condition statements
    (95) if_condition -> . expression
    (96) if_condition -> . expression LBRACE statements RBRACE
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    if_condition                   shift and go to state 257
    expression                     shift and go to state 107
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 237

    (96) if_condition -> expression LBRACE statements . RBRACE

    RBRACE          shift and go to state 258


state 238

    (94) unless_statement -> UNLESS if_condition statements opt_else . END

    END             shift and go to state 259


state 239

    (79) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 79 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 79 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 79 (expression_list -> expression_list COMMA expression .)


state 240

    (112) iterator -> expression DOT EACH DO PIPE . ID PIPE statements END

    ID              shift and go to state 260


state 241

    (113) iterator -> expression DOT EACH LBRACE PIPE . ID PIPE RBRACE statements

    ID              shift and go to state 261


state 242

    (67) variable_declaration -> ID COLON types ASSIGN expression .

    $end            reduce using rule 67 (variable_declaration -> ID COLON types ASSIGN expression .)
    END             reduce using rule 67 (variable_declaration -> ID COLON types ASSIGN expression .)
    ELSIF           reduce using rule 67 (variable_declaration -> ID COLON types ASSIGN expression .)
    ELSE            reduce using rule 67 (variable_declaration -> ID COLON types ASSIGN expression .)
    RBRACE          reduce using rule 67 (variable_declaration -> ID COLON types ASSIGN expression .)
    WHEN            reduce using rule 67 (variable_declaration -> ID COLON types ASSIGN expression .)


state 243

    (71) list_of_identifiers -> ID COMMA list_of_identifiers .

    ASSIGN          reduce using rule 71 (list_of_identifiers -> ID COMMA list_of_identifiers .)


state 244

    (69) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression . COMMA list_of_values

    COMMA           shift and go to state 262


state 245

    (35) argument -> ID COLON . types
    (37) argument -> ID COLON . types ASSIGN expression
    (40) types -> . STRING
    (41) types -> . CHAR
    (42) types -> . NIL
    (43) types -> . integer
    (44) types -> . float
    (45) types -> . boolean
    (46) integer -> . INT
    (47) integer -> . INT8
    (48) integer -> . INT16
    (49) integer -> . INT32
    (50) integer -> . INT64
    (51) integer -> . INT128
    (52) integer -> . UINT8
    (53) integer -> . UINT16
    (54) integer -> . UINT32
    (55) integer -> . UINT64
    (56) integer -> . UINT128
    (57) float -> . FLOAT
    (58) float -> . FLOAT32
    (59) float -> . FLOAT64
    (60) boolean -> . BOOL

    STRING          shift and go to state 147
    CHAR            shift and go to state 148
    NIL             shift and go to state 149
    INT             shift and go to state 153
    INT8            shift and go to state 154
    INT16           shift and go to state 155
    INT32           shift and go to state 156
    INT64           shift and go to state 157
    INT128          shift and go to state 158
    UINT8           shift and go to state 159
    UINT16          shift and go to state 160
    UINT32          shift and go to state 161
    UINT64          shift and go to state 162
    UINT128         shift and go to state 163
    FLOAT           shift and go to state 164
    FLOAT32         shift and go to state 165
    FLOAT64         shift and go to state 166
    BOOL            shift and go to state 167

    types                          shift and go to state 263
    integer                        shift and go to state 150
    float                          shift and go to state 151
    boolean                        shift and go to state 152

state 246

    (36) argument -> ID ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 264
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 247

    (28) function -> DEF ID LPAREN opt_argument_list RPAREN . opt_return_type statements END
    (38) opt_return_type -> . COLON types
    (39) opt_return_type -> . empty
    (169) empty -> .

    COLON           shift and go to state 175
    ID              reduce using rule 169 (empty -> .)
    CASE            reduce using rule 169 (empty -> .)
    RETURN          reduce using rule 169 (empty -> .)
    BREAK           reduce using rule 169 (empty -> .)
    NEXT            reduce using rule 169 (empty -> .)
    UNDERSCORE      reduce using rule 169 (empty -> .)
    ASTERISK        reduce using rule 169 (empty -> .)
    IF              reduce using rule 169 (empty -> .)
    UNLESS          reduce using rule 169 (empty -> .)
    WHILE           reduce using rule 169 (empty -> .)
    UNTIL           reduce using rule 169 (empty -> .)
    LOOP            reduce using rule 169 (empty -> .)
    PLUS            reduce using rule 169 (empty -> .)
    MINUS           reduce using rule 169 (empty -> .)
    EXCLAMATION     reduce using rule 169 (empty -> .)
    TILDE           reduce using rule 169 (empty -> .)
    LPAREN          reduce using rule 169 (empty -> .)
    LBRACKET        reduce using rule 169 (empty -> .)
    INTNUMBER       reduce using rule 169 (empty -> .)
    FLOATNUMBER     reduce using rule 169 (empty -> .)
    STRING          reduce using rule 169 (empty -> .)
    CHAR            reduce using rule 169 (empty -> .)
    TRUE            reduce using rule 169 (empty -> .)
    FALSE           reduce using rule 169 (empty -> .)

    opt_return_type                shift and go to state 265
    empty                          shift and go to state 176

state 248

    (33) argument_list -> argument COMMA . argument_list
    (32) argument_list -> . argument
    (33) argument_list -> . argument COMMA argument_list
    (34) argument -> . ID
    (35) argument -> . ID COLON types
    (36) argument -> . ID ASSIGN expression
    (37) argument -> . ID COLON types ASSIGN expression

    ID              shift and go to state 219

    argument                       shift and go to state 223
    argument_list                  shift and go to state 266

state 249

    (29) function -> DEF ID opt_return_type statements END .

    DEF             reduce using rule 29 (function -> DEF ID opt_return_type statements END .)
    $end            reduce using rule 29 (function -> DEF ID opt_return_type statements END .)


state 250

    (114) case_structure -> CASE expression when_list opt_else END .

    $end            reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    END             reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    ELSIF           reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    ELSE            reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    RBRACE          reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)
    WHEN            reduce using rule 114 (case_structure -> CASE expression when_list opt_else END .)


state 251

    (116) when_list -> when_list WHEN expression . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 15
    statements                     shift and go to state 267
    statement                      shift and go to state 11
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 252

    (102) opt_else -> ELSE statements .

    END             reduce using rule 102 (opt_else -> ELSE statements .)


state 253

    (115) when_list -> WHEN expression statements .

    WHEN            reduce using rule 115 (when_list -> WHEN expression statements .)
    ELSE            reduce using rule 115 (when_list -> WHEN expression statements .)
    END             reduce using rule 115 (when_list -> WHEN expression statements .)


state 254

    (132) ternary_expression -> range_expression QMARK expression TCOLON expression .

    DOT             reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    $end            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RPAREN          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    WHEN            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    END             reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ELSIF           reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ELSE            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RBRACE          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LBRACE          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ID              reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CASE            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RETURN          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    BREAK           reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    NEXT            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNDERSCORE      reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ASTERISK        reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    IF              reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNLESS          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    WHILE           reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNTIL           reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LOOP            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    PLUS            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    MINUS           reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    EXCLAMATION     reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TILDE           reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LPAREN          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LBRACKET        reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    INTNUMBER       reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    FLOATNUMBER     reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    STRING          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CHAR            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TRUE            reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    FALSE           reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    COMMA           reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RBRACKET        reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CONSTANT        reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    MODULE          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    DEF             reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TCOLON          reduce using rule 132 (ternary_expression -> range_expression QMARK expression TCOLON expression .)


state 255

    (93) if_statement -> IF if_condition statements opt_elsif opt_else . END

    END             shift and go to state 268


state 256

    (99) elsif_list -> elsif_list elsif .

    ELSIF           reduce using rule 99 (elsif_list -> elsif_list elsif .)
    ELSE            reduce using rule 99 (elsif_list -> elsif_list elsif .)
    END             reduce using rule 99 (elsif_list -> elsif_list elsif .)


state 257

    (101) elsif -> ELSIF if_condition . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 269
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 258

    (96) if_condition -> expression LBRACE statements RBRACE .

    ID              reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    CASE            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    RETURN          reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    BREAK           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    NEXT            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    UNDERSCORE      reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    ASTERISK        reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    IF              reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    UNLESS          reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    WHILE           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    UNTIL           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    LOOP            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    PLUS            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    MINUS           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    EXCLAMATION     reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    TILDE           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    LPAREN          reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    INTNUMBER       reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    FLOATNUMBER     reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    STRING          reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    CHAR            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    TRUE            reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)
    FALSE           reduce using rule 96 (if_condition -> expression LBRACE statements RBRACE .)


state 259

    (94) unless_statement -> UNLESS if_condition statements opt_else END .

    $end            reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    END             reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    ELSIF           reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    ELSE            reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    RBRACE          reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)
    WHEN            reduce using rule 94 (unless_statement -> UNLESS if_condition statements opt_else END .)


state 260

    (112) iterator -> expression DOT EACH DO PIPE ID . PIPE statements END

    PIPE            shift and go to state 270


state 261

    (113) iterator -> expression DOT EACH LBRACE PIPE ID . PIPE RBRACE statements

    PIPE            shift and go to state 271


state 262

    (69) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA . list_of_values
    (72) list_of_values -> . expression
    (73) list_of_values -> . expression COMMA list_of_values
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 272
    list_of_values                 shift and go to state 273
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 263

    (35) argument -> ID COLON types .
    (37) argument -> ID COLON types . ASSIGN expression

    COMMA           reduce using rule 35 (argument -> ID COLON types .)
    RPAREN          reduce using rule 35 (argument -> ID COLON types .)
    ASSIGN          shift and go to state 274


state 264

    (36) argument -> ID ASSIGN expression .

    COMMA           reduce using rule 36 (argument -> ID ASSIGN expression .)
    RPAREN          reduce using rule 36 (argument -> ID ASSIGN expression .)


state 265

    (28) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type . statements END
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    statements                     shift and go to state 275
    statement                      shift and go to state 11
    expression                     shift and go to state 15
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 266

    (33) argument_list -> argument COMMA argument_list .

    RPAREN          reduce using rule 33 (argument_list -> argument COMMA argument_list .)


state 267

    (116) when_list -> when_list WHEN expression statements .

    WHEN            reduce using rule 116 (when_list -> when_list WHEN expression statements .)
    ELSE            reduce using rule 116 (when_list -> when_list WHEN expression statements .)
    END             reduce using rule 116 (when_list -> when_list WHEN expression statements .)


state 268

    (93) if_statement -> IF if_condition statements opt_elsif opt_else END .

    $end            reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    END             reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    ELSIF           reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    ELSE            reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    RBRACE          reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    WHEN            reduce using rule 93 (if_statement -> IF if_condition statements opt_elsif opt_else END .)


state 269

    (101) elsif -> ELSIF if_condition statements .

    ELSIF           reduce using rule 101 (elsif -> ELSIF if_condition statements .)
    ELSE            reduce using rule 101 (elsif -> ELSIF if_condition statements .)
    END             reduce using rule 101 (elsif -> ELSIF if_condition statements .)


state 270

    (112) iterator -> expression DOT EACH DO PIPE ID PIPE . statements END
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 15
    statements                     shift and go to state 276
    statement                      shift and go to state 11
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 271

    (113) iterator -> expression DOT EACH LBRACE PIPE ID PIPE . RBRACE statements

    RBRACE          shift and go to state 277


state 272

    (72) list_of_values -> expression .
    (73) list_of_values -> expression . COMMA list_of_values

    $end            reduce using rule 72 (list_of_values -> expression .)
    END             reduce using rule 72 (list_of_values -> expression .)
    ELSIF           reduce using rule 72 (list_of_values -> expression .)
    ELSE            reduce using rule 72 (list_of_values -> expression .)
    RBRACE          reduce using rule 72 (list_of_values -> expression .)
    WHEN            reduce using rule 72 (list_of_values -> expression .)
    COMMA           shift and go to state 278


state 273

    (69) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .

    $end            reduce using rule 69 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    END             reduce using rule 69 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSIF           reduce using rule 69 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSE            reduce using rule 69 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    RBRACE          reduce using rule 69 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    WHEN            reduce using rule 69 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)


state 274

    (37) argument -> ID COLON types ASSIGN . expression
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 279
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 275

    (28) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements . END

    END             shift and go to state 280


state 276

    (112) iterator -> expression DOT EACH DO PIPE ID PIPE statements . END

    END             shift and go to state 281


state 277

    (113) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE . statements
    (80) statements -> . statement
    (81) statement -> . expression
    (82) statement -> . control_structure
    (83) statement -> . variable_declaration
    (84) statement -> . function_call
    (122) expression -> . assignment_expression
    (85) control_structure -> . conditional
    (86) control_structure -> . loop_structure
    (87) control_structure -> . case_structure
    (88) control_structure -> . return_statement
    (89) control_structure -> . break_statement
    (90) control_structure -> . next_statement
    (67) variable_declaration -> . ID COLON types ASSIGN expression
    (68) variable_declaration -> . ID ASSIGN expression
    (69) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (74) function_call -> . ID LPAREN expression_list RPAREN
    (75) function_call -> . ID LPAREN RPAREN
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (91) conditional -> . if_statement
    (92) conditional -> . unless_statement
    (104) loop_structure -> . while
    (105) loop_structure -> . until
    (106) loop_structure -> . loop
    (107) loop_structure -> . iterator
    (114) case_structure -> . CASE expression when_list opt_else END
    (117) return_statement -> . RETURN opt_expression
    (118) break_statement -> . BREAK opt_expression
    (119) next_statement -> . NEXT opt_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (93) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (94) unless_statement -> . UNLESS if_condition statements opt_else END
    (108) while -> . WHILE expression statements
    (109) until -> . UNTIL expression statements
    (110) loop -> . LOOP statements
    (111) iterator -> . expression DOT MULTI statements
    (112) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (113) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 38
    RETURN          shift and go to state 39
    BREAK           shift and go to state 40
    NEXT            shift and go to state 41
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    IF              shift and go to state 45
    UNLESS          shift and go to state 46
    WHILE           shift and go to state 47
    UNTIL           shift and go to state 48
    LOOP            shift and go to state 49
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 15
    statements                     shift and go to state 282
    statement                      shift and go to state 11
    control_structure              shift and go to state 20
    variable_declaration           shift and go to state 21
    function_call                  shift and go to state 22
    assignment_expression          shift and go to state 23
    conditional                    shift and go to state 24
    loop_structure                 shift and go to state 25
    case_structure                 shift and go to state 26
    return_statement               shift and go to state 27
    break_statement                shift and go to state 28
    next_statement                 shift and go to state 29
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    if_statement                   shift and go to state 32
    unless_statement               shift and go to state 33
    while                          shift and go to state 34
    until                          shift and go to state 35
    loop                           shift and go to state 36
    iterator                       shift and go to state 37
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 278

    (73) list_of_values -> expression COMMA . list_of_values
    (72) list_of_values -> . expression
    (73) list_of_values -> . expression COMMA list_of_values
    (122) expression -> . assignment_expression
    (123) assignment_expression -> . assignment_target ASSIGN expression
    (124) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (125) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (126) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (127) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (128) assignment_expression -> . ternary_expression
    (129) assignment_target -> . ID
    (130) assignment_target -> . UNDERSCORE
    (131) assignment_target -> . ASTERISK assignment_target
    (132) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (133) ternary_expression -> . range_expression
    (134) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (135) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (136) range_expression -> . logical_or_expression
    (137) logical_or_expression -> . logical_and_expression
    (138) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (139) logical_and_expression -> . equality_expression
    (140) logical_and_expression -> . logical_and_expression AND equality_expression
    (141) equality_expression -> . relational_expression
    (142) equality_expression -> . equality_expression EQUAL relational_expression
    (143) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (144) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (145) relational_expression -> . additive_expression
    (146) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (147) relational_expression -> . relational_expression LESS_THAN additive_expression
    (148) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (149) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (150) additive_expression -> . multiplicative_expression
    (151) additive_expression -> . additive_expression PLUS multiplicative_expression
    (152) additive_expression -> . additive_expression MINUS multiplicative_expression
    (153) multiplicative_expression -> . potenciacao_expression
    (154) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (155) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (156) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (157) potenciacao_expression -> . unary_expression
    (158) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (159) unary_expression -> . PLUS unary_expression
    (160) unary_expression -> . MINUS unary_expression
    (161) unary_expression -> . EXCLAMATION unary_expression
    (162) unary_expression -> . TILDE unary_expression
    (163) unary_expression -> . primary_expression
    (164) primary_expression -> . LPAREN expression RPAREN
    (165) primary_expression -> . array_literal
    (166) primary_expression -> . literal
    (167) primary_expression -> . ID
    (168) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 42
    ASTERISK        shift and go to state 43
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    EXCLAMATION     shift and go to state 60
    TILDE           shift and go to state 61
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 65
    INTNUMBER       shift and go to state 66
    FLOATNUMBER     shift and go to state 67
    STRING          shift and go to state 13
    CHAR            shift and go to state 68
    TRUE            shift and go to state 69
    FALSE           shift and go to state 70

    expression                     shift and go to state 272
    list_of_values                 shift and go to state 283
    assignment_expression          shift and go to state 23
    assignment_target              shift and go to state 30
    ternary_expression             shift and go to state 31
    range_expression               shift and go to state 44
    logical_or_expression          shift and go to state 50
    logical_and_expression         shift and go to state 51
    equality_expression            shift and go to state 52
    relational_expression          shift and go to state 53
    additive_expression            shift and go to state 54
    multiplicative_expression      shift and go to state 55
    potenciacao_expression         shift and go to state 58
    unary_expression               shift and go to state 59
    primary_expression             shift and go to state 62
    array_literal                  shift and go to state 63
    literal                        shift and go to state 64

state 279

    (37) argument -> ID COLON types ASSIGN expression .

    COMMA           reduce using rule 37 (argument -> ID COLON types ASSIGN expression .)
    RPAREN          reduce using rule 37 (argument -> ID COLON types ASSIGN expression .)


state 280

    (28) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .

    DEF             reduce using rule 28 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)
    $end            reduce using rule 28 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)


state 281

    (112) iterator -> expression DOT EACH DO PIPE ID PIPE statements END .

    $end            reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    END             reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    ELSIF           reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    ELSE            reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    RBRACE          reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    WHEN            reduce using rule 112 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)


state 282

    (113) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .

    $end            reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    END             reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    ELSIF           reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    ELSE            reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    RBRACE          reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    WHEN            reduce using rule 113 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)


state 283

    (73) list_of_values -> expression COMMA list_of_values .

    $end            reduce using rule 73 (list_of_values -> expression COMMA list_of_values .)
    END             reduce using rule 73 (list_of_values -> expression COMMA list_of_values .)
    ELSIF           reduce using rule 73 (list_of_values -> expression COMMA list_of_values .)
    ELSE            reduce using rule 73 (list_of_values -> expression COMMA list_of_values .)
    RBRACE          reduce using rule 73 (list_of_values -> expression COMMA list_of_values .)
    WHEN            reduce using rule 73 (list_of_values -> expression COMMA list_of_values .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGN in state 17 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 89 resolved as shift
