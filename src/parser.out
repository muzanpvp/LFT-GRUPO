Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASSOCIACAO
    AT
    BEGIN
    BINNUMBER
    CLASS
    CLASSVAR
    CLASS_VAR
    DEFINE_BLOCO
    DOLAR_SIGN
    ENUM
    GLOBALVAR
    HEXNUMBER
    IN
    INCLUDE
    INSTANCEVAR
    INSTANCE_VAR
    LITERAL
    MACRO
    MODULO_ASSIGN
    NOT
    OCTNUMBER
    OF
    OR_ASSIGN
    OUT
    PASSA_ARGUMENTO
    POTENCIACAO_ASSIGN
    PRIVATE
    PROTECTED
    SAFE_CALL
    SCOPE
    SELECT
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SIZEOF
    STRUCT
    SYMBOL
    THEN
    TYPE
    TYPEOF
    UNINITIALIZED
    UNION
    VAR_GLOBAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> require_list constant_list module_list function_list
Rule 2     program -> require_list constant_list module_list
Rule 3     program -> require_list constant_list function_list
Rule 4     program -> require_list module_list function_list
Rule 5     program -> constant_list module_list function_list
Rule 6     program -> require_list constant_list
Rule 7     program -> require_list module_list
Rule 8     program -> constant_list module_list
Rule 9     program -> require_list function_list
Rule 10    program -> constant_list function_list
Rule 11    program -> module_list function_list
Rule 12    program -> require_list
Rule 13    program -> constant_list
Rule 14    program -> module_list
Rule 15    program -> function_list
Rule 16    require_list -> require require_list
Rule 17    require_list -> require
Rule 18    require -> REQUIRE STRING
Rule 19    constant_list -> constant constant_list
Rule 20    constant_list -> constant
Rule 21    constant -> CONSTANT ASSIGN expression
Rule 22    module_list -> module module_list
Rule 23    module_list -> module
Rule 24    module -> MODULE ID NEWLINE statements END
Rule 25    function_list -> function function_list
Rule 26    function_list -> function
Rule 27    function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END
Rule 28    opt_argument_list -> argument_list
Rule 29    opt_argument_list -> empty
Rule 30    argument_list -> argument
Rule 31    argument_list -> argument COMMA argument_list
Rule 32    argument -> ID
Rule 33    argument -> ID COLON types
Rule 34    argument -> ID ASSIGN expression
Rule 35    argument -> ID COLON types ASSIGN expression
Rule 36    opt_return_type -> COLON types
Rule 37    opt_return_type -> empty
Rule 38    types -> STRING
Rule 39    types -> CHAR
Rule 40    types -> NIL
Rule 41    types -> integer
Rule 42    types -> float
Rule 43    types -> boolean
Rule 44    integer -> INT
Rule 45    integer -> INT8
Rule 46    integer -> INT16
Rule 47    integer -> INT32
Rule 48    integer -> INT64
Rule 49    integer -> INT128
Rule 50    integer -> UINT8
Rule 51    integer -> UINT16
Rule 52    integer -> UINT32
Rule 53    integer -> UINT64
Rule 54    integer -> UINT128
Rule 55    float -> FLOAT
Rule 56    float -> FLOAT32
Rule 57    float -> FLOAT64
Rule 58    boolean -> BOOL
Rule 59    literal -> INTNUMBER
Rule 60    literal -> FLOATNUMBER
Rule 61    literal -> STRING
Rule 62    literal -> CHAR
Rule 63    literal -> TRUE
Rule 64    literal -> FALSE
Rule 65    function_call -> ID LPAREN opt_expression_list RPAREN
Rule 66    opt_expression_list -> expression_list
Rule 67    opt_expression_list -> empty
Rule 68    expression_list -> expression
Rule 69    expression_list -> expression COMMA expression_list
Rule 70    variable_declaration -> ID types ASSIGN expression
Rule 71    variable_declaration -> ID ASSIGN expression
Rule 72    variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
Rule 73    list_of_identifiers -> ID
Rule 74    list_of_identifiers -> ID COMMA list_of_identifiers
Rule 75    list_of_values -> expression
Rule 76    list_of_values -> expression COMMA list_of_values
Rule 77    expression -> ternary_expression
Rule 78    expression -> assignment_expression
Rule 79    assignment_expression -> assignment_target ASSIGN expression
Rule 80    assignment_expression -> assignment_target PLUS_ASSIGN expression
Rule 81    assignment_expression -> assignment_target MINUS_ASSIGN expression
Rule 82    assignment_expression -> assignment_target MULTI_ASSIGN expression
Rule 83    assignment_expression -> assignment_target DIVIDE_ASSIGN expression
Rule 84    assignment_target -> postfix_expression
Rule 85    assignment_target -> UNDERSCORE
Rule 86    assignment_target -> ASTERISK assignment_target
Rule 87    ternary_expression -> logical_or_expression QMARK expression TCOLON expression
Rule 88    ternary_expression -> logical_or_expression
Rule 89    logical_or_expression -> logical_and_expression
Rule 90    logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 91    logical_and_expression -> equality_expression
Rule 92    logical_and_expression -> logical_and_expression AND equality_expression
Rule 93    equality_expression -> relational_expression
Rule 94    equality_expression -> equality_expression EQUAL relational_expression
Rule 95    equality_expression -> equality_expression NOT_EQUAL relational_expression
Rule 96    equality_expression -> equality_expression TIPO_EQUAL relational_expression
Rule 97    relational_expression -> additive_expression
Rule 98    relational_expression -> relational_expression GREATER_THAN additive_expression
Rule 99    relational_expression -> relational_expression LESS_THAN additive_expression
Rule 100   relational_expression -> relational_expression GREATER_EQUAL additive_expression
Rule 101   relational_expression -> relational_expression LESS_EQUAL additive_expression
Rule 102   additive_expression -> multiplicative_expression
Rule 103   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 104   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 105   multiplicative_expression -> potenciacao_expression
Rule 106   multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression
Rule 107   multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression
Rule 108   multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression
Rule 109   potenciacao_expression -> unary_expression
Rule 110   potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression
Rule 111   unary_expression -> PLUS unary_expression
Rule 112   unary_expression -> MINUS unary_expression
Rule 113   unary_expression -> EXCLAMATION unary_expression
Rule 114   unary_expression -> TILDE unary_expression
Rule 115   unary_expression -> postfix_expression
Rule 116   postfix_expression -> primary_expression postfix_suffixes
Rule 117   postfix_suffixes -> postfix_suffix postfix_suffixes
Rule 118   postfix_suffixes -> empty
Rule 119   postfix_suffix -> LBRACKET expression RBRACKET
Rule 120   postfix_suffix -> DOTDOT primary_expression
Rule 121   postfix_suffix -> DOTDOTDOT primary_expression
Rule 122   primary_expression -> LPAREN expression RPAREN
Rule 123   primary_expression -> array_literal
Rule 124   primary_expression -> literal
Rule 125   primary_expression -> function_call
Rule 126   primary_expression -> ID
Rule 127   array_literal -> LBRACKET opt_expression_list RBRACKET
Rule 128   statements -> statement
Rule 129   statements -> statement NEWLINE statements
Rule 130   statement -> expression
Rule 131   statement -> control_structure
Rule 132   statement -> variable_declaration
Rule 133   control_structure -> conditional
Rule 134   control_structure -> loop_structure
Rule 135   control_structure -> case_structure
Rule 136   control_structure -> return_statement
Rule 137   control_structure -> break_statement
Rule 138   control_structure -> next_statement
Rule 139   conditional -> if_statement
Rule 140   conditional -> unless_statement
Rule 141   if_statement -> IF expression statements_block opt_elsif opt_else END
Rule 142   unless_statement -> UNLESS expression statements_block opt_else END
Rule 143   opt_elsif -> ELSIF expression statements_block opt_elsif
Rule 144   opt_elsif -> empty
Rule 145   opt_else -> ELSE statements_block
Rule 146   opt_else -> empty
Rule 147   loop_structure -> while
Rule 148   loop_structure -> until
Rule 149   loop_structure -> loop
Rule 150   loop_structure -> iterator
Rule 151   while -> WHILE expression statements_block
Rule 152   until -> UNTIL expression statements_block
Rule 153   loop -> LOOP statements_block
Rule 154   iterator -> expression DOT MULTI statements_block
Rule 155   iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END
Rule 156   iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
Rule 157   case_structure -> CASE expression when_list opt_else END
Rule 158   when_list -> WHEN expression statements_block
Rule 159   when_list -> when_list WHEN expression statements_block
Rule 160   return_statement -> RETURN opt_expression
Rule 161   break_statement -> BREAK opt_expression
Rule 162   next_statement -> NEXT opt_expression
Rule 163   opt_expression -> expression
Rule 164   opt_expression -> empty
Rule 165   statements_block -> statements
Rule 166   empty -> <empty>

Terminals, with rules where they appear

AND                  : 92
AS                   : 
ASSIGN               : 21 34 35 70 71 72 79
ASSOCIACAO           : 
ASTERISK             : 86
AT                   : 
BEGIN                : 
BINNUMBER            : 
BOOL                 : 58
BREAK                : 161
CASE                 : 157
CHAR                 : 39 62
CLASS                : 
CLASSVAR             : 
CLASS_VAR            : 
COLON                : 33 35 36
COMMA                : 31 69 72 72 74 76
CONSTANT             : 21
DEF                  : 27
DEFINE_BLOCO         : 
DIVIDE               : 107
DIVIDE_ASSIGN        : 83
DO                   : 155
DOLAR_SIGN           : 
DOT                  : 154 155 156
DOTDOT               : 120
DOTDOTDOT            : 121
EACH                 : 155 156
ELSE                 : 145
ELSIF                : 143
END                  : 24 27 141 142 155 157
ENUM                 : 
EQUAL                : 94
EXCLAMATION          : 113
FALSE                : 64
FLOAT                : 55
FLOAT32              : 56
FLOAT64              : 57
FLOATNUMBER          : 60
GLOBALVAR            : 
GREATER_EQUAL        : 100
GREATER_THAN         : 98
HEXNUMBER            : 
ID                   : 24 27 32 33 34 35 65 70 71 72 73 74 126 155 156
IF                   : 141
IN                   : 
INCLUDE              : 
INSTANCEVAR          : 
INSTANCE_VAR         : 
INT                  : 44
INT128               : 49
INT16                : 46
INT32                : 47
INT64                : 48
INT8                 : 45
INTNUMBER            : 59
LBRACE               : 156
LBRACKET             : 119 127
LESS_EQUAL           : 101
LESS_THAN            : 99
LITERAL              : 
LOOP                 : 153
LPAREN               : 27 65 122
MACRO                : 
MINUS                : 104 112
MINUS_ASSIGN         : 81
MODULE               : 24
MODULO               : 108
MODULO_ASSIGN        : 
MULTI                : 106 154
MULTI_ASSIGN         : 82
NEWLINE              : 24 129
NEXT                 : 162
NIL                  : 40
NOT                  : 
NOT_EQUAL            : 95
OCTNUMBER            : 
OF                   : 
OR                   : 90
OR_ASSIGN            : 
OUT                  : 
PASSA_ARGUMENTO      : 
PIPE                 : 155 155 156 156
PLUS                 : 103 111
PLUS_ASSIGN          : 80
POTENCIACAO          : 110
POTENCIACAO_ASSIGN   : 
PRIVATE              : 
PROTECTED            : 
QMARK                : 87
RBRACE               : 156
RBRACKET             : 119 127
REQUIRE              : 18
RETURN               : 160
RPAREN               : 27 65 122
SAFE_CALL            : 
SCOPE                : 
SELECT               : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SIZEOF               : 
STRING               : 18 38 61
STRUCT               : 
SYMBOL               : 
TCOLON               : 87
THEN                 : 
TILDE                : 114
TIPO_EQUAL           : 96
TRUE                 : 63
TYPE                 : 
TYPEOF               : 
UINT128              : 54
UINT16               : 51
UINT32               : 52
UINT64               : 53
UINT8                : 50
UNDERSCORE           : 85
UNINITIALIZED        : 
UNION                : 
UNLESS               : 142
UNTIL                : 152
VAR_GLOBAL           : 
WHEN                 : 158 159
WHILE                : 151
YIELD                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 97 98 99 100 101 103 104
argument             : 30 31
argument_list        : 28 31
array_literal        : 123
assignment_expression : 78
assignment_target    : 79 80 81 82 83 86
boolean              : 43
break_statement      : 137
case_structure       : 135
conditional          : 133
constant             : 19 20
constant_list        : 1 2 3 5 6 8 10 13 19
control_structure    : 131
empty                : 29 37 67 118 144 146 164
equality_expression  : 91 92 94 95 96
expression           : 21 34 35 68 69 70 71 72 75 76 79 80 81 82 83 87 87 119 122 130 141 142 143 151 152 154 155 156 157 158 159 163
expression_list      : 66 69
float                : 42
function             : 25 26
function_call        : 125
function_list        : 1 3 4 5 9 10 11 15 25
if_statement         : 139
integer              : 41
iterator             : 150
list_of_identifiers  : 72 74
list_of_values       : 72 76
literal              : 124
logical_and_expression : 89 90 92
logical_or_expression : 87 88 90
loop                 : 149
loop_structure       : 134
module               : 22 23
module_list          : 1 2 4 5 7 8 11 14 22
multiplicative_expression : 102 103 104 106 107 108
next_statement       : 138
opt_argument_list    : 27
opt_else             : 141 142 157
opt_elsif            : 141 143
opt_expression       : 160 161 162
opt_expression_list  : 65 127
opt_return_type      : 27
postfix_expression   : 84 115
postfix_suffix       : 117
postfix_suffixes     : 116 117
potenciacao_expression : 105 106 107 108 110
primary_expression   : 116 120 121
program              : 0
relational_expression : 93 94 95 96 98 99 100 101
require              : 16 17
require_list         : 1 2 3 4 6 7 9 12 16
return_statement     : 136
statement            : 128 129
statements           : 24 129 165
statements_block     : 27 141 142 143 145 151 152 153 154 155 156 158 159
ternary_expression   : 77
types                : 33 35 36 70
unary_expression     : 109 110 111 112 113 114
unless_statement     : 140
until                : 148
variable_declaration : 132
when_list            : 157 159
while                : 147

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . require_list constant_list module_list function_list
    (2) program -> . require_list constant_list module_list
    (3) program -> . require_list constant_list function_list
    (4) program -> . require_list module_list function_list
    (5) program -> . constant_list module_list function_list
    (6) program -> . require_list constant_list
    (7) program -> . require_list module_list
    (8) program -> . constant_list module_list
    (9) program -> . require_list function_list
    (10) program -> . constant_list function_list
    (11) program -> . module_list function_list
    (12) program -> . require_list
    (13) program -> . constant_list
    (14) program -> . module_list
    (15) program -> . function_list
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (18) require -> . REQUIRE STRING
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID NEWLINE statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    REQUIRE         shift and go to state 10
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    program                        shift and go to state 1
    require_list                   shift and go to state 2
    constant_list                  shift and go to state 3
    module_list                    shift and go to state 4
    function_list                  shift and go to state 5
    require                        shift and go to state 6
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 1

    (0) S' -> program .



state 2

    (1) program -> require_list . constant_list module_list function_list
    (2) program -> require_list . constant_list module_list
    (3) program -> require_list . constant_list function_list
    (4) program -> require_list . module_list function_list
    (6) program -> require_list . constant_list
    (7) program -> require_list . module_list
    (9) program -> require_list . function_list
    (12) program -> require_list .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (21) constant -> . CONSTANT ASSIGN expression
    (24) module -> . MODULE ID NEWLINE statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    $end            reduce using rule 12 (program -> require_list .)
    CONSTANT        shift and go to state 11
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    constant_list                  shift and go to state 14
    module_list                    shift and go to state 15
    function_list                  shift and go to state 16
    constant                       shift and go to state 7
    module                         shift and go to state 8
    function                       shift and go to state 9

state 3

    (5) program -> constant_list . module_list function_list
    (8) program -> constant_list . module_list
    (10) program -> constant_list . function_list
    (13) program -> constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (24) module -> . MODULE ID NEWLINE statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    $end            reduce using rule 13 (program -> constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 17
    function_list                  shift and go to state 18
    module                         shift and go to state 8
    function                       shift and go to state 9

state 4

    (11) program -> module_list . function_list
    (14) program -> module_list .
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    $end            reduce using rule 14 (program -> module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 19
    function                       shift and go to state 9

state 5

    (15) program -> function_list .

    $end            reduce using rule 15 (program -> function_list .)


state 6

    (16) require_list -> require . require_list
    (17) require_list -> require .
    (16) require_list -> . require require_list
    (17) require_list -> . require
    (18) require -> . REQUIRE STRING

    CONSTANT        reduce using rule 17 (require_list -> require .)
    MODULE          reduce using rule 17 (require_list -> require .)
    DEF             reduce using rule 17 (require_list -> require .)
    $end            reduce using rule 17 (require_list -> require .)
    REQUIRE         shift and go to state 10

    require                        shift and go to state 6
    require_list                   shift and go to state 20

state 7

    (19) constant_list -> constant . constant_list
    (20) constant_list -> constant .
    (19) constant_list -> . constant constant_list
    (20) constant_list -> . constant
    (21) constant -> . CONSTANT ASSIGN expression

    MODULE          reduce using rule 20 (constant_list -> constant .)
    DEF             reduce using rule 20 (constant_list -> constant .)
    $end            reduce using rule 20 (constant_list -> constant .)
    CONSTANT        shift and go to state 11

    constant                       shift and go to state 7
    constant_list                  shift and go to state 21

state 8

    (22) module_list -> module . module_list
    (23) module_list -> module .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (24) module -> . MODULE ID NEWLINE statements END

    DEF             reduce using rule 23 (module_list -> module .)
    $end            reduce using rule 23 (module_list -> module .)
    MODULE          shift and go to state 12

    module                         shift and go to state 8
    module_list                    shift and go to state 22

state 9

    (25) function_list -> function . function_list
    (26) function_list -> function .
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    $end            reduce using rule 26 (function_list -> function .)
    DEF             shift and go to state 13

    function                       shift and go to state 9
    function_list                  shift and go to state 23

state 10

    (18) require -> REQUIRE . STRING

    STRING          shift and go to state 24


state 11

    (21) constant -> CONSTANT . ASSIGN expression

    ASSIGN          shift and go to state 25


state 12

    (24) module -> MODULE . ID NEWLINE statements END

    ID              shift and go to state 26


state 13

    (27) function -> DEF . ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    ID              shift and go to state 27


state 14

    (1) program -> require_list constant_list . module_list function_list
    (2) program -> require_list constant_list . module_list
    (3) program -> require_list constant_list . function_list
    (6) program -> require_list constant_list .
    (22) module_list -> . module module_list
    (23) module_list -> . module
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (24) module -> . MODULE ID NEWLINE statements END
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    $end            reduce using rule 6 (program -> require_list constant_list .)
    MODULE          shift and go to state 12
    DEF             shift and go to state 13

    module_list                    shift and go to state 28
    function_list                  shift and go to state 29
    module                         shift and go to state 8
    function                       shift and go to state 9

state 15

    (4) program -> require_list module_list . function_list
    (7) program -> require_list module_list .
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    $end            reduce using rule 7 (program -> require_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 30
    function                       shift and go to state 9

state 16

    (9) program -> require_list function_list .

    $end            reduce using rule 9 (program -> require_list function_list .)


state 17

    (5) program -> constant_list module_list . function_list
    (8) program -> constant_list module_list .
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    $end            reduce using rule 8 (program -> constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 31
    function                       shift and go to state 9

state 18

    (10) program -> constant_list function_list .

    $end            reduce using rule 10 (program -> constant_list function_list .)


state 19

    (11) program -> module_list function_list .

    $end            reduce using rule 11 (program -> module_list function_list .)


state 20

    (16) require_list -> require require_list .

    CONSTANT        reduce using rule 16 (require_list -> require require_list .)
    MODULE          reduce using rule 16 (require_list -> require require_list .)
    DEF             reduce using rule 16 (require_list -> require require_list .)
    $end            reduce using rule 16 (require_list -> require require_list .)


state 21

    (19) constant_list -> constant constant_list .

    MODULE          reduce using rule 19 (constant_list -> constant constant_list .)
    DEF             reduce using rule 19 (constant_list -> constant constant_list .)
    $end            reduce using rule 19 (constant_list -> constant constant_list .)


state 22

    (22) module_list -> module module_list .

    DEF             reduce using rule 22 (module_list -> module module_list .)
    $end            reduce using rule 22 (module_list -> module module_list .)


state 23

    (25) function_list -> function function_list .

    $end            reduce using rule 25 (function_list -> function function_list .)


state 24

    (18) require -> REQUIRE STRING .

    REQUIRE         reduce using rule 18 (require -> REQUIRE STRING .)
    CONSTANT        reduce using rule 18 (require -> REQUIRE STRING .)
    MODULE          reduce using rule 18 (require -> REQUIRE STRING .)
    DEF             reduce using rule 18 (require -> REQUIRE STRING .)
    $end            reduce using rule 18 (require -> REQUIRE STRING .)


state 25

    (21) constant -> CONSTANT ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 32
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 26

    (24) module -> MODULE ID . NEWLINE statements END

    NEWLINE         shift and go to state 64


state 27

    (27) function -> DEF ID . LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    LPAREN          shift and go to state 65


state 28

    (1) program -> require_list constant_list module_list . function_list
    (2) program -> require_list constant_list module_list .
    (25) function_list -> . function function_list
    (26) function_list -> . function
    (27) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END

    $end            reduce using rule 2 (program -> require_list constant_list module_list .)
    DEF             shift and go to state 13

    function_list                  shift and go to state 66
    function                       shift and go to state 9

state 29

    (3) program -> require_list constant_list function_list .

    $end            reduce using rule 3 (program -> require_list constant_list function_list .)


state 30

    (4) program -> require_list module_list function_list .

    $end            reduce using rule 4 (program -> require_list module_list function_list .)


state 31

    (5) program -> constant_list module_list function_list .

    $end            reduce using rule 5 (program -> constant_list module_list function_list .)


state 32

    (21) constant -> CONSTANT ASSIGN expression .

    CONSTANT        reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    MODULE          reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    DEF             reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)
    $end            reduce using rule 21 (constant -> CONSTANT ASSIGN expression .)


state 33

    (77) expression -> ternary_expression .

    CONSTANT        reduce using rule 77 (expression -> ternary_expression .)
    MODULE          reduce using rule 77 (expression -> ternary_expression .)
    DEF             reduce using rule 77 (expression -> ternary_expression .)
    $end            reduce using rule 77 (expression -> ternary_expression .)
    RPAREN          reduce using rule 77 (expression -> ternary_expression .)
    COMMA           reduce using rule 77 (expression -> ternary_expression .)
    RBRACKET        reduce using rule 77 (expression -> ternary_expression .)
    DOT             reduce using rule 77 (expression -> ternary_expression .)
    NEWLINE         reduce using rule 77 (expression -> ternary_expression .)
    END             reduce using rule 77 (expression -> ternary_expression .)
    TCOLON          reduce using rule 77 (expression -> ternary_expression .)
    WHEN            reduce using rule 77 (expression -> ternary_expression .)
    ELSIF           reduce using rule 77 (expression -> ternary_expression .)
    ELSE            reduce using rule 77 (expression -> ternary_expression .)
    ID              reduce using rule 77 (expression -> ternary_expression .)
    CASE            reduce using rule 77 (expression -> ternary_expression .)
    RETURN          reduce using rule 77 (expression -> ternary_expression .)
    BREAK           reduce using rule 77 (expression -> ternary_expression .)
    NEXT            reduce using rule 77 (expression -> ternary_expression .)
    UNDERSCORE      reduce using rule 77 (expression -> ternary_expression .)
    ASTERISK        reduce using rule 77 (expression -> ternary_expression .)
    IF              reduce using rule 77 (expression -> ternary_expression .)
    UNLESS          reduce using rule 77 (expression -> ternary_expression .)
    WHILE           reduce using rule 77 (expression -> ternary_expression .)
    UNTIL           reduce using rule 77 (expression -> ternary_expression .)
    LOOP            reduce using rule 77 (expression -> ternary_expression .)
    LPAREN          reduce using rule 77 (expression -> ternary_expression .)
    LBRACKET        reduce using rule 77 (expression -> ternary_expression .)
    INTNUMBER       reduce using rule 77 (expression -> ternary_expression .)
    FLOATNUMBER     reduce using rule 77 (expression -> ternary_expression .)
    STRING          reduce using rule 77 (expression -> ternary_expression .)
    CHAR            reduce using rule 77 (expression -> ternary_expression .)
    TRUE            reduce using rule 77 (expression -> ternary_expression .)
    FALSE           reduce using rule 77 (expression -> ternary_expression .)
    PLUS            reduce using rule 77 (expression -> ternary_expression .)
    MINUS           reduce using rule 77 (expression -> ternary_expression .)
    EXCLAMATION     reduce using rule 77 (expression -> ternary_expression .)
    TILDE           reduce using rule 77 (expression -> ternary_expression .)


state 34

    (78) expression -> assignment_expression .

    CONSTANT        reduce using rule 78 (expression -> assignment_expression .)
    MODULE          reduce using rule 78 (expression -> assignment_expression .)
    DEF             reduce using rule 78 (expression -> assignment_expression .)
    $end            reduce using rule 78 (expression -> assignment_expression .)
    RPAREN          reduce using rule 78 (expression -> assignment_expression .)
    COMMA           reduce using rule 78 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 78 (expression -> assignment_expression .)
    DOT             reduce using rule 78 (expression -> assignment_expression .)
    NEWLINE         reduce using rule 78 (expression -> assignment_expression .)
    END             reduce using rule 78 (expression -> assignment_expression .)
    TCOLON          reduce using rule 78 (expression -> assignment_expression .)
    WHEN            reduce using rule 78 (expression -> assignment_expression .)
    ELSIF           reduce using rule 78 (expression -> assignment_expression .)
    ELSE            reduce using rule 78 (expression -> assignment_expression .)
    ID              reduce using rule 78 (expression -> assignment_expression .)
    CASE            reduce using rule 78 (expression -> assignment_expression .)
    RETURN          reduce using rule 78 (expression -> assignment_expression .)
    BREAK           reduce using rule 78 (expression -> assignment_expression .)
    NEXT            reduce using rule 78 (expression -> assignment_expression .)
    UNDERSCORE      reduce using rule 78 (expression -> assignment_expression .)
    ASTERISK        reduce using rule 78 (expression -> assignment_expression .)
    IF              reduce using rule 78 (expression -> assignment_expression .)
    UNLESS          reduce using rule 78 (expression -> assignment_expression .)
    WHILE           reduce using rule 78 (expression -> assignment_expression .)
    UNTIL           reduce using rule 78 (expression -> assignment_expression .)
    LOOP            reduce using rule 78 (expression -> assignment_expression .)
    LPAREN          reduce using rule 78 (expression -> assignment_expression .)
    LBRACKET        reduce using rule 78 (expression -> assignment_expression .)
    INTNUMBER       reduce using rule 78 (expression -> assignment_expression .)
    FLOATNUMBER     reduce using rule 78 (expression -> assignment_expression .)
    STRING          reduce using rule 78 (expression -> assignment_expression .)
    CHAR            reduce using rule 78 (expression -> assignment_expression .)
    TRUE            reduce using rule 78 (expression -> assignment_expression .)
    FALSE           reduce using rule 78 (expression -> assignment_expression .)
    PLUS            reduce using rule 78 (expression -> assignment_expression .)
    MINUS           reduce using rule 78 (expression -> assignment_expression .)
    EXCLAMATION     reduce using rule 78 (expression -> assignment_expression .)
    TILDE           reduce using rule 78 (expression -> assignment_expression .)


state 35

    (87) ternary_expression -> logical_or_expression . QMARK expression TCOLON expression
    (88) ternary_expression -> logical_or_expression .
    (90) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           shift and go to state 67
    CONSTANT        reduce using rule 88 (ternary_expression -> logical_or_expression .)
    MODULE          reduce using rule 88 (ternary_expression -> logical_or_expression .)
    DEF             reduce using rule 88 (ternary_expression -> logical_or_expression .)
    $end            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    RPAREN          reduce using rule 88 (ternary_expression -> logical_or_expression .)
    COMMA           reduce using rule 88 (ternary_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 88 (ternary_expression -> logical_or_expression .)
    DOT             reduce using rule 88 (ternary_expression -> logical_or_expression .)
    NEWLINE         reduce using rule 88 (ternary_expression -> logical_or_expression .)
    END             reduce using rule 88 (ternary_expression -> logical_or_expression .)
    TCOLON          reduce using rule 88 (ternary_expression -> logical_or_expression .)
    WHEN            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    ELSIF           reduce using rule 88 (ternary_expression -> logical_or_expression .)
    ELSE            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    ID              reduce using rule 88 (ternary_expression -> logical_or_expression .)
    CASE            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    RETURN          reduce using rule 88 (ternary_expression -> logical_or_expression .)
    BREAK           reduce using rule 88 (ternary_expression -> logical_or_expression .)
    NEXT            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    UNDERSCORE      reduce using rule 88 (ternary_expression -> logical_or_expression .)
    ASTERISK        reduce using rule 88 (ternary_expression -> logical_or_expression .)
    IF              reduce using rule 88 (ternary_expression -> logical_or_expression .)
    UNLESS          reduce using rule 88 (ternary_expression -> logical_or_expression .)
    WHILE           reduce using rule 88 (ternary_expression -> logical_or_expression .)
    UNTIL           reduce using rule 88 (ternary_expression -> logical_or_expression .)
    LOOP            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    LPAREN          reduce using rule 88 (ternary_expression -> logical_or_expression .)
    LBRACKET        reduce using rule 88 (ternary_expression -> logical_or_expression .)
    INTNUMBER       reduce using rule 88 (ternary_expression -> logical_or_expression .)
    FLOATNUMBER     reduce using rule 88 (ternary_expression -> logical_or_expression .)
    STRING          reduce using rule 88 (ternary_expression -> logical_or_expression .)
    CHAR            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    TRUE            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    FALSE           reduce using rule 88 (ternary_expression -> logical_or_expression .)
    PLUS            reduce using rule 88 (ternary_expression -> logical_or_expression .)
    MINUS           reduce using rule 88 (ternary_expression -> logical_or_expression .)
    EXCLAMATION     reduce using rule 88 (ternary_expression -> logical_or_expression .)
    TILDE           reduce using rule 88 (ternary_expression -> logical_or_expression .)
    OR              shift and go to state 68


state 36

    (79) assignment_expression -> assignment_target . ASSIGN expression
    (80) assignment_expression -> assignment_target . PLUS_ASSIGN expression
    (81) assignment_expression -> assignment_target . MINUS_ASSIGN expression
    (82) assignment_expression -> assignment_target . MULTI_ASSIGN expression
    (83) assignment_expression -> assignment_target . DIVIDE_ASSIGN expression

    ASSIGN          shift and go to state 69
    PLUS_ASSIGN     shift and go to state 70
    MINUS_ASSIGN    shift and go to state 71
    MULTI_ASSIGN    shift and go to state 72
    DIVIDE_ASSIGN   shift and go to state 73


state 37

    (89) logical_or_expression -> logical_and_expression .
    (92) logical_and_expression -> logical_and_expression . AND equality_expression

    QMARK           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    CONSTANT        reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    MODULE          reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    DEF             reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    DOT             reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    NEWLINE         reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    END             reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    TCOLON          reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    WHEN            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    ELSIF           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    ELSE            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    ID              reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    CASE            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    NEXT            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    UNDERSCORE      reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    ASTERISK        reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    UNLESS          reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    WHILE           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    UNTIL           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    LOOP            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    LBRACKET        reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    INTNUMBER       reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    FLOATNUMBER     reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    STRING          reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    TRUE            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    FALSE           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    PLUS            reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    EXCLAMATION     reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    TILDE           reduce using rule 89 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 74


state 38

    (84) assignment_target -> postfix_expression .
    (115) unary_expression -> postfix_expression .

    ASSIGN          reduce using rule 84 (assignment_target -> postfix_expression .)
    PLUS_ASSIGN     reduce using rule 84 (assignment_target -> postfix_expression .)
    MINUS_ASSIGN    reduce using rule 84 (assignment_target -> postfix_expression .)
    MULTI_ASSIGN    reduce using rule 84 (assignment_target -> postfix_expression .)
    DIVIDE_ASSIGN   reduce using rule 84 (assignment_target -> postfix_expression .)
    POTENCIACAO     reduce using rule 115 (unary_expression -> postfix_expression .)
    MULTI           reduce using rule 115 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 115 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 115 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 115 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 115 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 115 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 115 (unary_expression -> postfix_expression .)
    GREATER_EQUAL   reduce using rule 115 (unary_expression -> postfix_expression .)
    LESS_EQUAL      reduce using rule 115 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 115 (unary_expression -> postfix_expression .)
    NOT_EQUAL       reduce using rule 115 (unary_expression -> postfix_expression .)
    TIPO_EQUAL      reduce using rule 115 (unary_expression -> postfix_expression .)
    AND             reduce using rule 115 (unary_expression -> postfix_expression .)
    QMARK           reduce using rule 115 (unary_expression -> postfix_expression .)
    OR              reduce using rule 115 (unary_expression -> postfix_expression .)
    CONSTANT        reduce using rule 115 (unary_expression -> postfix_expression .)
    MODULE          reduce using rule 115 (unary_expression -> postfix_expression .)
    DEF             reduce using rule 115 (unary_expression -> postfix_expression .)
    $end            reduce using rule 115 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 115 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 115 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 115 (unary_expression -> postfix_expression .)
    DOT             reduce using rule 115 (unary_expression -> postfix_expression .)
    NEWLINE         reduce using rule 115 (unary_expression -> postfix_expression .)
    END             reduce using rule 115 (unary_expression -> postfix_expression .)
    TCOLON          reduce using rule 115 (unary_expression -> postfix_expression .)
    WHEN            reduce using rule 115 (unary_expression -> postfix_expression .)
    ELSIF           reduce using rule 115 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 115 (unary_expression -> postfix_expression .)
    ID              reduce using rule 115 (unary_expression -> postfix_expression .)
    CASE            reduce using rule 115 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 115 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 115 (unary_expression -> postfix_expression .)
    NEXT            reduce using rule 115 (unary_expression -> postfix_expression .)
    UNDERSCORE      reduce using rule 115 (unary_expression -> postfix_expression .)
    ASTERISK        reduce using rule 115 (unary_expression -> postfix_expression .)
    IF              reduce using rule 115 (unary_expression -> postfix_expression .)
    UNLESS          reduce using rule 115 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 115 (unary_expression -> postfix_expression .)
    UNTIL           reduce using rule 115 (unary_expression -> postfix_expression .)
    LOOP            reduce using rule 115 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 115 (unary_expression -> postfix_expression .)
    LBRACKET        reduce using rule 115 (unary_expression -> postfix_expression .)
    INTNUMBER       reduce using rule 115 (unary_expression -> postfix_expression .)
    FLOATNUMBER     reduce using rule 115 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 115 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 115 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 115 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 115 (unary_expression -> postfix_expression .)
    EXCLAMATION     reduce using rule 115 (unary_expression -> postfix_expression .)
    TILDE           reduce using rule 115 (unary_expression -> postfix_expression .)


state 39

    (85) assignment_target -> UNDERSCORE .

    ASSIGN          reduce using rule 85 (assignment_target -> UNDERSCORE .)
    PLUS_ASSIGN     reduce using rule 85 (assignment_target -> UNDERSCORE .)
    MINUS_ASSIGN    reduce using rule 85 (assignment_target -> UNDERSCORE .)
    MULTI_ASSIGN    reduce using rule 85 (assignment_target -> UNDERSCORE .)
    DIVIDE_ASSIGN   reduce using rule 85 (assignment_target -> UNDERSCORE .)


state 40

    (86) assignment_target -> ASTERISK . assignment_target
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    assignment_target              shift and go to state 75
    postfix_expression             shift and go to state 76
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 41

    (91) logical_and_expression -> equality_expression .
    (94) equality_expression -> equality_expression . EQUAL relational_expression
    (95) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (96) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 91 (logical_and_expression -> equality_expression .)
    QMARK           reduce using rule 91 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 91 (logical_and_expression -> equality_expression .)
    CONSTANT        reduce using rule 91 (logical_and_expression -> equality_expression .)
    MODULE          reduce using rule 91 (logical_and_expression -> equality_expression .)
    DEF             reduce using rule 91 (logical_and_expression -> equality_expression .)
    $end            reduce using rule 91 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 91 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 91 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 91 (logical_and_expression -> equality_expression .)
    DOT             reduce using rule 91 (logical_and_expression -> equality_expression .)
    NEWLINE         reduce using rule 91 (logical_and_expression -> equality_expression .)
    END             reduce using rule 91 (logical_and_expression -> equality_expression .)
    TCOLON          reduce using rule 91 (logical_and_expression -> equality_expression .)
    WHEN            reduce using rule 91 (logical_and_expression -> equality_expression .)
    ELSIF           reduce using rule 91 (logical_and_expression -> equality_expression .)
    ELSE            reduce using rule 91 (logical_and_expression -> equality_expression .)
    ID              reduce using rule 91 (logical_and_expression -> equality_expression .)
    CASE            reduce using rule 91 (logical_and_expression -> equality_expression .)
    RETURN          reduce using rule 91 (logical_and_expression -> equality_expression .)
    BREAK           reduce using rule 91 (logical_and_expression -> equality_expression .)
    NEXT            reduce using rule 91 (logical_and_expression -> equality_expression .)
    UNDERSCORE      reduce using rule 91 (logical_and_expression -> equality_expression .)
    ASTERISK        reduce using rule 91 (logical_and_expression -> equality_expression .)
    IF              reduce using rule 91 (logical_and_expression -> equality_expression .)
    UNLESS          reduce using rule 91 (logical_and_expression -> equality_expression .)
    WHILE           reduce using rule 91 (logical_and_expression -> equality_expression .)
    UNTIL           reduce using rule 91 (logical_and_expression -> equality_expression .)
    LOOP            reduce using rule 91 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 91 (logical_and_expression -> equality_expression .)
    LBRACKET        reduce using rule 91 (logical_and_expression -> equality_expression .)
    INTNUMBER       reduce using rule 91 (logical_and_expression -> equality_expression .)
    FLOATNUMBER     reduce using rule 91 (logical_and_expression -> equality_expression .)
    STRING          reduce using rule 91 (logical_and_expression -> equality_expression .)
    CHAR            reduce using rule 91 (logical_and_expression -> equality_expression .)
    TRUE            reduce using rule 91 (logical_and_expression -> equality_expression .)
    FALSE           reduce using rule 91 (logical_and_expression -> equality_expression .)
    PLUS            reduce using rule 91 (logical_and_expression -> equality_expression .)
    MINUS           reduce using rule 91 (logical_and_expression -> equality_expression .)
    EXCLAMATION     reduce using rule 91 (logical_and_expression -> equality_expression .)
    TILDE           reduce using rule 91 (logical_and_expression -> equality_expression .)
    EQUAL           shift and go to state 77
    NOT_EQUAL       shift and go to state 78
    TIPO_EQUAL      shift and go to state 79


state 42

    (116) postfix_expression -> primary_expression . postfix_suffixes
    (117) postfix_suffixes -> . postfix_suffix postfix_suffixes
    (118) postfix_suffixes -> . empty
    (119) postfix_suffix -> . LBRACKET expression RBRACKET
    (120) postfix_suffix -> . DOTDOT primary_expression
    (121) postfix_suffix -> . DOTDOTDOT primary_expression
    (166) empty -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 83
    DOTDOT          shift and go to state 84
    DOTDOTDOT       shift and go to state 85
    ASSIGN          reduce using rule 166 (empty -> .)
    PLUS_ASSIGN     reduce using rule 166 (empty -> .)
    MINUS_ASSIGN    reduce using rule 166 (empty -> .)
    MULTI_ASSIGN    reduce using rule 166 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 166 (empty -> .)
    POTENCIACAO     reduce using rule 166 (empty -> .)
    MULTI           reduce using rule 166 (empty -> .)
    DIVIDE          reduce using rule 166 (empty -> .)
    MODULO          reduce using rule 166 (empty -> .)
    PLUS            reduce using rule 166 (empty -> .)
    MINUS           reduce using rule 166 (empty -> .)
    GREATER_THAN    reduce using rule 166 (empty -> .)
    LESS_THAN       reduce using rule 166 (empty -> .)
    GREATER_EQUAL   reduce using rule 166 (empty -> .)
    LESS_EQUAL      reduce using rule 166 (empty -> .)
    EQUAL           reduce using rule 166 (empty -> .)
    NOT_EQUAL       reduce using rule 166 (empty -> .)
    TIPO_EQUAL      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    QMARK           reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    CONSTANT        reduce using rule 166 (empty -> .)
    MODULE          reduce using rule 166 (empty -> .)
    DEF             reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    COMMA           reduce using rule 166 (empty -> .)
    RBRACKET        reduce using rule 166 (empty -> .)
    DOT             reduce using rule 166 (empty -> .)
    NEWLINE         reduce using rule 166 (empty -> .)
    END             reduce using rule 166 (empty -> .)
    TCOLON          reduce using rule 166 (empty -> .)
    WHEN            reduce using rule 166 (empty -> .)
    ELSIF           reduce using rule 166 (empty -> .)
    ELSE            reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CASE            reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    BREAK           reduce using rule 166 (empty -> .)
    NEXT            reduce using rule 166 (empty -> .)
    UNDERSCORE      reduce using rule 166 (empty -> .)
    ASTERISK        reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    UNLESS          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    UNTIL           reduce using rule 166 (empty -> .)
    LOOP            reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    INTNUMBER       reduce using rule 166 (empty -> .)
    FLOATNUMBER     reduce using rule 166 (empty -> .)
    STRING          reduce using rule 166 (empty -> .)
    CHAR            reduce using rule 166 (empty -> .)
    TRUE            reduce using rule 166 (empty -> .)
    FALSE           reduce using rule 166 (empty -> .)
    EXCLAMATION     reduce using rule 166 (empty -> .)
    TILDE           reduce using rule 166 (empty -> .)

  ! LBRACKET        [ reduce using rule 166 (empty -> .) ]

    postfix_suffixes               shift and go to state 80
    postfix_suffix                 shift and go to state 81
    empty                          shift and go to state 82

state 43

    (93) equality_expression -> relational_expression .
    (98) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (99) relational_expression -> relational_expression . LESS_THAN additive_expression
    (100) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (101) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 93 (equality_expression -> relational_expression .)
    NOT_EQUAL       reduce using rule 93 (equality_expression -> relational_expression .)
    TIPO_EQUAL      reduce using rule 93 (equality_expression -> relational_expression .)
    AND             reduce using rule 93 (equality_expression -> relational_expression .)
    QMARK           reduce using rule 93 (equality_expression -> relational_expression .)
    OR              reduce using rule 93 (equality_expression -> relational_expression .)
    CONSTANT        reduce using rule 93 (equality_expression -> relational_expression .)
    MODULE          reduce using rule 93 (equality_expression -> relational_expression .)
    DEF             reduce using rule 93 (equality_expression -> relational_expression .)
    $end            reduce using rule 93 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 93 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 93 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 93 (equality_expression -> relational_expression .)
    DOT             reduce using rule 93 (equality_expression -> relational_expression .)
    NEWLINE         reduce using rule 93 (equality_expression -> relational_expression .)
    END             reduce using rule 93 (equality_expression -> relational_expression .)
    TCOLON          reduce using rule 93 (equality_expression -> relational_expression .)
    WHEN            reduce using rule 93 (equality_expression -> relational_expression .)
    ELSIF           reduce using rule 93 (equality_expression -> relational_expression .)
    ELSE            reduce using rule 93 (equality_expression -> relational_expression .)
    ID              reduce using rule 93 (equality_expression -> relational_expression .)
    CASE            reduce using rule 93 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 93 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 93 (equality_expression -> relational_expression .)
    NEXT            reduce using rule 93 (equality_expression -> relational_expression .)
    UNDERSCORE      reduce using rule 93 (equality_expression -> relational_expression .)
    ASTERISK        reduce using rule 93 (equality_expression -> relational_expression .)
    IF              reduce using rule 93 (equality_expression -> relational_expression .)
    UNLESS          reduce using rule 93 (equality_expression -> relational_expression .)
    WHILE           reduce using rule 93 (equality_expression -> relational_expression .)
    UNTIL           reduce using rule 93 (equality_expression -> relational_expression .)
    LOOP            reduce using rule 93 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 93 (equality_expression -> relational_expression .)
    LBRACKET        reduce using rule 93 (equality_expression -> relational_expression .)
    INTNUMBER       reduce using rule 93 (equality_expression -> relational_expression .)
    FLOATNUMBER     reduce using rule 93 (equality_expression -> relational_expression .)
    STRING          reduce using rule 93 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 93 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 93 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 93 (equality_expression -> relational_expression .)
    PLUS            reduce using rule 93 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 93 (equality_expression -> relational_expression .)
    EXCLAMATION     reduce using rule 93 (equality_expression -> relational_expression .)
    TILDE           reduce using rule 93 (equality_expression -> relational_expression .)
    GREATER_THAN    shift and go to state 86
    LESS_THAN       shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89


state 44

    (122) primary_expression -> LPAREN . expression RPAREN
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 90
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 45

    (123) primary_expression -> array_literal .

    LBRACKET        reduce using rule 123 (primary_expression -> array_literal .)
    DOTDOT          reduce using rule 123 (primary_expression -> array_literal .)
    DOTDOTDOT       reduce using rule 123 (primary_expression -> array_literal .)
    ASSIGN          reduce using rule 123 (primary_expression -> array_literal .)
    PLUS_ASSIGN     reduce using rule 123 (primary_expression -> array_literal .)
    MINUS_ASSIGN    reduce using rule 123 (primary_expression -> array_literal .)
    MULTI_ASSIGN    reduce using rule 123 (primary_expression -> array_literal .)
    DIVIDE_ASSIGN   reduce using rule 123 (primary_expression -> array_literal .)
    POTENCIACAO     reduce using rule 123 (primary_expression -> array_literal .)
    MULTI           reduce using rule 123 (primary_expression -> array_literal .)
    DIVIDE          reduce using rule 123 (primary_expression -> array_literal .)
    MODULO          reduce using rule 123 (primary_expression -> array_literal .)
    PLUS            reduce using rule 123 (primary_expression -> array_literal .)
    MINUS           reduce using rule 123 (primary_expression -> array_literal .)
    GREATER_THAN    reduce using rule 123 (primary_expression -> array_literal .)
    LESS_THAN       reduce using rule 123 (primary_expression -> array_literal .)
    GREATER_EQUAL   reduce using rule 123 (primary_expression -> array_literal .)
    LESS_EQUAL      reduce using rule 123 (primary_expression -> array_literal .)
    EQUAL           reduce using rule 123 (primary_expression -> array_literal .)
    NOT_EQUAL       reduce using rule 123 (primary_expression -> array_literal .)
    TIPO_EQUAL      reduce using rule 123 (primary_expression -> array_literal .)
    AND             reduce using rule 123 (primary_expression -> array_literal .)
    QMARK           reduce using rule 123 (primary_expression -> array_literal .)
    OR              reduce using rule 123 (primary_expression -> array_literal .)
    CONSTANT        reduce using rule 123 (primary_expression -> array_literal .)
    MODULE          reduce using rule 123 (primary_expression -> array_literal .)
    DEF             reduce using rule 123 (primary_expression -> array_literal .)
    $end            reduce using rule 123 (primary_expression -> array_literal .)
    RPAREN          reduce using rule 123 (primary_expression -> array_literal .)
    COMMA           reduce using rule 123 (primary_expression -> array_literal .)
    RBRACKET        reduce using rule 123 (primary_expression -> array_literal .)
    DOT             reduce using rule 123 (primary_expression -> array_literal .)
    NEWLINE         reduce using rule 123 (primary_expression -> array_literal .)
    END             reduce using rule 123 (primary_expression -> array_literal .)
    TCOLON          reduce using rule 123 (primary_expression -> array_literal .)
    WHEN            reduce using rule 123 (primary_expression -> array_literal .)
    ELSIF           reduce using rule 123 (primary_expression -> array_literal .)
    ELSE            reduce using rule 123 (primary_expression -> array_literal .)
    ID              reduce using rule 123 (primary_expression -> array_literal .)
    CASE            reduce using rule 123 (primary_expression -> array_literal .)
    RETURN          reduce using rule 123 (primary_expression -> array_literal .)
    BREAK           reduce using rule 123 (primary_expression -> array_literal .)
    NEXT            reduce using rule 123 (primary_expression -> array_literal .)
    UNDERSCORE      reduce using rule 123 (primary_expression -> array_literal .)
    ASTERISK        reduce using rule 123 (primary_expression -> array_literal .)
    IF              reduce using rule 123 (primary_expression -> array_literal .)
    UNLESS          reduce using rule 123 (primary_expression -> array_literal .)
    WHILE           reduce using rule 123 (primary_expression -> array_literal .)
    UNTIL           reduce using rule 123 (primary_expression -> array_literal .)
    LOOP            reduce using rule 123 (primary_expression -> array_literal .)
    LPAREN          reduce using rule 123 (primary_expression -> array_literal .)
    INTNUMBER       reduce using rule 123 (primary_expression -> array_literal .)
    FLOATNUMBER     reduce using rule 123 (primary_expression -> array_literal .)
    STRING          reduce using rule 123 (primary_expression -> array_literal .)
    CHAR            reduce using rule 123 (primary_expression -> array_literal .)
    TRUE            reduce using rule 123 (primary_expression -> array_literal .)
    FALSE           reduce using rule 123 (primary_expression -> array_literal .)
    EXCLAMATION     reduce using rule 123 (primary_expression -> array_literal .)
    TILDE           reduce using rule 123 (primary_expression -> array_literal .)


state 46

    (124) primary_expression -> literal .

    LBRACKET        reduce using rule 124 (primary_expression -> literal .)
    DOTDOT          reduce using rule 124 (primary_expression -> literal .)
    DOTDOTDOT       reduce using rule 124 (primary_expression -> literal .)
    ASSIGN          reduce using rule 124 (primary_expression -> literal .)
    PLUS_ASSIGN     reduce using rule 124 (primary_expression -> literal .)
    MINUS_ASSIGN    reduce using rule 124 (primary_expression -> literal .)
    MULTI_ASSIGN    reduce using rule 124 (primary_expression -> literal .)
    DIVIDE_ASSIGN   reduce using rule 124 (primary_expression -> literal .)
    POTENCIACAO     reduce using rule 124 (primary_expression -> literal .)
    MULTI           reduce using rule 124 (primary_expression -> literal .)
    DIVIDE          reduce using rule 124 (primary_expression -> literal .)
    MODULO          reduce using rule 124 (primary_expression -> literal .)
    PLUS            reduce using rule 124 (primary_expression -> literal .)
    MINUS           reduce using rule 124 (primary_expression -> literal .)
    GREATER_THAN    reduce using rule 124 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 124 (primary_expression -> literal .)
    GREATER_EQUAL   reduce using rule 124 (primary_expression -> literal .)
    LESS_EQUAL      reduce using rule 124 (primary_expression -> literal .)
    EQUAL           reduce using rule 124 (primary_expression -> literal .)
    NOT_EQUAL       reduce using rule 124 (primary_expression -> literal .)
    TIPO_EQUAL      reduce using rule 124 (primary_expression -> literal .)
    AND             reduce using rule 124 (primary_expression -> literal .)
    QMARK           reduce using rule 124 (primary_expression -> literal .)
    OR              reduce using rule 124 (primary_expression -> literal .)
    CONSTANT        reduce using rule 124 (primary_expression -> literal .)
    MODULE          reduce using rule 124 (primary_expression -> literal .)
    DEF             reduce using rule 124 (primary_expression -> literal .)
    $end            reduce using rule 124 (primary_expression -> literal .)
    RPAREN          reduce using rule 124 (primary_expression -> literal .)
    COMMA           reduce using rule 124 (primary_expression -> literal .)
    RBRACKET        reduce using rule 124 (primary_expression -> literal .)
    DOT             reduce using rule 124 (primary_expression -> literal .)
    NEWLINE         reduce using rule 124 (primary_expression -> literal .)
    END             reduce using rule 124 (primary_expression -> literal .)
    TCOLON          reduce using rule 124 (primary_expression -> literal .)
    WHEN            reduce using rule 124 (primary_expression -> literal .)
    ELSIF           reduce using rule 124 (primary_expression -> literal .)
    ELSE            reduce using rule 124 (primary_expression -> literal .)
    ID              reduce using rule 124 (primary_expression -> literal .)
    CASE            reduce using rule 124 (primary_expression -> literal .)
    RETURN          reduce using rule 124 (primary_expression -> literal .)
    BREAK           reduce using rule 124 (primary_expression -> literal .)
    NEXT            reduce using rule 124 (primary_expression -> literal .)
    UNDERSCORE      reduce using rule 124 (primary_expression -> literal .)
    ASTERISK        reduce using rule 124 (primary_expression -> literal .)
    IF              reduce using rule 124 (primary_expression -> literal .)
    UNLESS          reduce using rule 124 (primary_expression -> literal .)
    WHILE           reduce using rule 124 (primary_expression -> literal .)
    UNTIL           reduce using rule 124 (primary_expression -> literal .)
    LOOP            reduce using rule 124 (primary_expression -> literal .)
    LPAREN          reduce using rule 124 (primary_expression -> literal .)
    INTNUMBER       reduce using rule 124 (primary_expression -> literal .)
    FLOATNUMBER     reduce using rule 124 (primary_expression -> literal .)
    STRING          reduce using rule 124 (primary_expression -> literal .)
    CHAR            reduce using rule 124 (primary_expression -> literal .)
    TRUE            reduce using rule 124 (primary_expression -> literal .)
    FALSE           reduce using rule 124 (primary_expression -> literal .)
    EXCLAMATION     reduce using rule 124 (primary_expression -> literal .)
    TILDE           reduce using rule 124 (primary_expression -> literal .)


state 47

    (125) primary_expression -> function_call .

    LBRACKET        reduce using rule 125 (primary_expression -> function_call .)
    DOTDOT          reduce using rule 125 (primary_expression -> function_call .)
    DOTDOTDOT       reduce using rule 125 (primary_expression -> function_call .)
    ASSIGN          reduce using rule 125 (primary_expression -> function_call .)
    PLUS_ASSIGN     reduce using rule 125 (primary_expression -> function_call .)
    MINUS_ASSIGN    reduce using rule 125 (primary_expression -> function_call .)
    MULTI_ASSIGN    reduce using rule 125 (primary_expression -> function_call .)
    DIVIDE_ASSIGN   reduce using rule 125 (primary_expression -> function_call .)
    POTENCIACAO     reduce using rule 125 (primary_expression -> function_call .)
    MULTI           reduce using rule 125 (primary_expression -> function_call .)
    DIVIDE          reduce using rule 125 (primary_expression -> function_call .)
    MODULO          reduce using rule 125 (primary_expression -> function_call .)
    PLUS            reduce using rule 125 (primary_expression -> function_call .)
    MINUS           reduce using rule 125 (primary_expression -> function_call .)
    GREATER_THAN    reduce using rule 125 (primary_expression -> function_call .)
    LESS_THAN       reduce using rule 125 (primary_expression -> function_call .)
    GREATER_EQUAL   reduce using rule 125 (primary_expression -> function_call .)
    LESS_EQUAL      reduce using rule 125 (primary_expression -> function_call .)
    EQUAL           reduce using rule 125 (primary_expression -> function_call .)
    NOT_EQUAL       reduce using rule 125 (primary_expression -> function_call .)
    TIPO_EQUAL      reduce using rule 125 (primary_expression -> function_call .)
    AND             reduce using rule 125 (primary_expression -> function_call .)
    QMARK           reduce using rule 125 (primary_expression -> function_call .)
    OR              reduce using rule 125 (primary_expression -> function_call .)
    CONSTANT        reduce using rule 125 (primary_expression -> function_call .)
    MODULE          reduce using rule 125 (primary_expression -> function_call .)
    DEF             reduce using rule 125 (primary_expression -> function_call .)
    $end            reduce using rule 125 (primary_expression -> function_call .)
    RPAREN          reduce using rule 125 (primary_expression -> function_call .)
    COMMA           reduce using rule 125 (primary_expression -> function_call .)
    RBRACKET        reduce using rule 125 (primary_expression -> function_call .)
    DOT             reduce using rule 125 (primary_expression -> function_call .)
    NEWLINE         reduce using rule 125 (primary_expression -> function_call .)
    END             reduce using rule 125 (primary_expression -> function_call .)
    TCOLON          reduce using rule 125 (primary_expression -> function_call .)
    WHEN            reduce using rule 125 (primary_expression -> function_call .)
    ELSIF           reduce using rule 125 (primary_expression -> function_call .)
    ELSE            reduce using rule 125 (primary_expression -> function_call .)
    ID              reduce using rule 125 (primary_expression -> function_call .)
    CASE            reduce using rule 125 (primary_expression -> function_call .)
    RETURN          reduce using rule 125 (primary_expression -> function_call .)
    BREAK           reduce using rule 125 (primary_expression -> function_call .)
    NEXT            reduce using rule 125 (primary_expression -> function_call .)
    UNDERSCORE      reduce using rule 125 (primary_expression -> function_call .)
    ASTERISK        reduce using rule 125 (primary_expression -> function_call .)
    IF              reduce using rule 125 (primary_expression -> function_call .)
    UNLESS          reduce using rule 125 (primary_expression -> function_call .)
    WHILE           reduce using rule 125 (primary_expression -> function_call .)
    UNTIL           reduce using rule 125 (primary_expression -> function_call .)
    LOOP            reduce using rule 125 (primary_expression -> function_call .)
    LPAREN          reduce using rule 125 (primary_expression -> function_call .)
    INTNUMBER       reduce using rule 125 (primary_expression -> function_call .)
    FLOATNUMBER     reduce using rule 125 (primary_expression -> function_call .)
    STRING          reduce using rule 125 (primary_expression -> function_call .)
    CHAR            reduce using rule 125 (primary_expression -> function_call .)
    TRUE            reduce using rule 125 (primary_expression -> function_call .)
    FALSE           reduce using rule 125 (primary_expression -> function_call .)
    EXCLAMATION     reduce using rule 125 (primary_expression -> function_call .)
    TILDE           reduce using rule 125 (primary_expression -> function_call .)


state 48

    (126) primary_expression -> ID .
    (65) function_call -> ID . LPAREN opt_expression_list RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    LBRACKET        reduce using rule 126 (primary_expression -> ID .)
    DOTDOT          reduce using rule 126 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 126 (primary_expression -> ID .)
    ASSIGN          reduce using rule 126 (primary_expression -> ID .)
    PLUS_ASSIGN     reduce using rule 126 (primary_expression -> ID .)
    MINUS_ASSIGN    reduce using rule 126 (primary_expression -> ID .)
    MULTI_ASSIGN    reduce using rule 126 (primary_expression -> ID .)
    DIVIDE_ASSIGN   reduce using rule 126 (primary_expression -> ID .)
    POTENCIACAO     reduce using rule 126 (primary_expression -> ID .)
    MULTI           reduce using rule 126 (primary_expression -> ID .)
    DIVIDE          reduce using rule 126 (primary_expression -> ID .)
    MODULO          reduce using rule 126 (primary_expression -> ID .)
    PLUS            reduce using rule 126 (primary_expression -> ID .)
    MINUS           reduce using rule 126 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 126 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 126 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 126 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 126 (primary_expression -> ID .)
    EQUAL           reduce using rule 126 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 126 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 126 (primary_expression -> ID .)
    AND             reduce using rule 126 (primary_expression -> ID .)
    QMARK           reduce using rule 126 (primary_expression -> ID .)
    OR              reduce using rule 126 (primary_expression -> ID .)
    CONSTANT        reduce using rule 126 (primary_expression -> ID .)
    MODULE          reduce using rule 126 (primary_expression -> ID .)
    DEF             reduce using rule 126 (primary_expression -> ID .)
    $end            reduce using rule 126 (primary_expression -> ID .)
    RPAREN          reduce using rule 126 (primary_expression -> ID .)
    COMMA           reduce using rule 126 (primary_expression -> ID .)
    RBRACKET        reduce using rule 126 (primary_expression -> ID .)
    DOT             reduce using rule 126 (primary_expression -> ID .)
    NEWLINE         reduce using rule 126 (primary_expression -> ID .)
    END             reduce using rule 126 (primary_expression -> ID .)
    TCOLON          reduce using rule 126 (primary_expression -> ID .)
    WHEN            reduce using rule 126 (primary_expression -> ID .)
    ELSIF           reduce using rule 126 (primary_expression -> ID .)
    ELSE            reduce using rule 126 (primary_expression -> ID .)
    ID              reduce using rule 126 (primary_expression -> ID .)
    CASE            reduce using rule 126 (primary_expression -> ID .)
    RETURN          reduce using rule 126 (primary_expression -> ID .)
    BREAK           reduce using rule 126 (primary_expression -> ID .)
    NEXT            reduce using rule 126 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 126 (primary_expression -> ID .)
    ASTERISK        reduce using rule 126 (primary_expression -> ID .)
    IF              reduce using rule 126 (primary_expression -> ID .)
    UNLESS          reduce using rule 126 (primary_expression -> ID .)
    WHILE           reduce using rule 126 (primary_expression -> ID .)
    UNTIL           reduce using rule 126 (primary_expression -> ID .)
    LOOP            reduce using rule 126 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 126 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 126 (primary_expression -> ID .)
    STRING          reduce using rule 126 (primary_expression -> ID .)
    CHAR            reduce using rule 126 (primary_expression -> ID .)
    TRUE            reduce using rule 126 (primary_expression -> ID .)
    FALSE           reduce using rule 126 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 126 (primary_expression -> ID .)
    TILDE           reduce using rule 126 (primary_expression -> ID .)
    LPAREN          shift and go to state 91

  ! LPAREN          [ reduce using rule 126 (primary_expression -> ID .) ]


state 49

    (97) relational_expression -> additive_expression .
    (103) additive_expression -> additive_expression . PLUS multiplicative_expression
    (104) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GREATER_THAN    reduce using rule 97 (relational_expression -> additive_expression .)
    LESS_THAN       reduce using rule 97 (relational_expression -> additive_expression .)
    GREATER_EQUAL   reduce using rule 97 (relational_expression -> additive_expression .)
    LESS_EQUAL      reduce using rule 97 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 97 (relational_expression -> additive_expression .)
    NOT_EQUAL       reduce using rule 97 (relational_expression -> additive_expression .)
    TIPO_EQUAL      reduce using rule 97 (relational_expression -> additive_expression .)
    AND             reduce using rule 97 (relational_expression -> additive_expression .)
    QMARK           reduce using rule 97 (relational_expression -> additive_expression .)
    OR              reduce using rule 97 (relational_expression -> additive_expression .)
    CONSTANT        reduce using rule 97 (relational_expression -> additive_expression .)
    MODULE          reduce using rule 97 (relational_expression -> additive_expression .)
    DEF             reduce using rule 97 (relational_expression -> additive_expression .)
    $end            reduce using rule 97 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 97 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 97 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 97 (relational_expression -> additive_expression .)
    DOT             reduce using rule 97 (relational_expression -> additive_expression .)
    NEWLINE         reduce using rule 97 (relational_expression -> additive_expression .)
    END             reduce using rule 97 (relational_expression -> additive_expression .)
    TCOLON          reduce using rule 97 (relational_expression -> additive_expression .)
    WHEN            reduce using rule 97 (relational_expression -> additive_expression .)
    ELSIF           reduce using rule 97 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 97 (relational_expression -> additive_expression .)
    ID              reduce using rule 97 (relational_expression -> additive_expression .)
    CASE            reduce using rule 97 (relational_expression -> additive_expression .)
    RETURN          reduce using rule 97 (relational_expression -> additive_expression .)
    BREAK           reduce using rule 97 (relational_expression -> additive_expression .)
    NEXT            reduce using rule 97 (relational_expression -> additive_expression .)
    UNDERSCORE      reduce using rule 97 (relational_expression -> additive_expression .)
    ASTERISK        reduce using rule 97 (relational_expression -> additive_expression .)
    IF              reduce using rule 97 (relational_expression -> additive_expression .)
    UNLESS          reduce using rule 97 (relational_expression -> additive_expression .)
    WHILE           reduce using rule 97 (relational_expression -> additive_expression .)
    UNTIL           reduce using rule 97 (relational_expression -> additive_expression .)
    LOOP            reduce using rule 97 (relational_expression -> additive_expression .)
    LPAREN          reduce using rule 97 (relational_expression -> additive_expression .)
    LBRACKET        reduce using rule 97 (relational_expression -> additive_expression .)
    INTNUMBER       reduce using rule 97 (relational_expression -> additive_expression .)
    FLOATNUMBER     reduce using rule 97 (relational_expression -> additive_expression .)
    STRING          reduce using rule 97 (relational_expression -> additive_expression .)
    CHAR            reduce using rule 97 (relational_expression -> additive_expression .)
    TRUE            reduce using rule 97 (relational_expression -> additive_expression .)
    FALSE           reduce using rule 97 (relational_expression -> additive_expression .)
    EXCLAMATION     reduce using rule 97 (relational_expression -> additive_expression .)
    TILDE           reduce using rule 97 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93

  ! PLUS            [ reduce using rule 97 (relational_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 97 (relational_expression -> additive_expression .) ]


state 50

    (127) array_literal -> LBRACKET . opt_expression_list RBRACKET
    (66) opt_expression_list -> . expression_list
    (67) opt_expression_list -> . empty
    (68) expression_list -> . expression
    (69) expression_list -> . expression COMMA expression_list
    (166) empty -> .
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    RBRACKET        reduce using rule 166 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    opt_expression_list            shift and go to state 94
    expression_list                shift and go to state 95
    empty                          shift and go to state 96
    expression                     shift and go to state 97
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 51

    (59) literal -> INTNUMBER .

    LBRACKET        reduce using rule 59 (literal -> INTNUMBER .)
    DOTDOT          reduce using rule 59 (literal -> INTNUMBER .)
    DOTDOTDOT       reduce using rule 59 (literal -> INTNUMBER .)
    ASSIGN          reduce using rule 59 (literal -> INTNUMBER .)
    PLUS_ASSIGN     reduce using rule 59 (literal -> INTNUMBER .)
    MINUS_ASSIGN    reduce using rule 59 (literal -> INTNUMBER .)
    MULTI_ASSIGN    reduce using rule 59 (literal -> INTNUMBER .)
    DIVIDE_ASSIGN   reduce using rule 59 (literal -> INTNUMBER .)
    POTENCIACAO     reduce using rule 59 (literal -> INTNUMBER .)
    MULTI           reduce using rule 59 (literal -> INTNUMBER .)
    DIVIDE          reduce using rule 59 (literal -> INTNUMBER .)
    MODULO          reduce using rule 59 (literal -> INTNUMBER .)
    PLUS            reduce using rule 59 (literal -> INTNUMBER .)
    MINUS           reduce using rule 59 (literal -> INTNUMBER .)
    GREATER_THAN    reduce using rule 59 (literal -> INTNUMBER .)
    LESS_THAN       reduce using rule 59 (literal -> INTNUMBER .)
    GREATER_EQUAL   reduce using rule 59 (literal -> INTNUMBER .)
    LESS_EQUAL      reduce using rule 59 (literal -> INTNUMBER .)
    EQUAL           reduce using rule 59 (literal -> INTNUMBER .)
    NOT_EQUAL       reduce using rule 59 (literal -> INTNUMBER .)
    TIPO_EQUAL      reduce using rule 59 (literal -> INTNUMBER .)
    AND             reduce using rule 59 (literal -> INTNUMBER .)
    QMARK           reduce using rule 59 (literal -> INTNUMBER .)
    OR              reduce using rule 59 (literal -> INTNUMBER .)
    CONSTANT        reduce using rule 59 (literal -> INTNUMBER .)
    MODULE          reduce using rule 59 (literal -> INTNUMBER .)
    DEF             reduce using rule 59 (literal -> INTNUMBER .)
    $end            reduce using rule 59 (literal -> INTNUMBER .)
    RPAREN          reduce using rule 59 (literal -> INTNUMBER .)
    COMMA           reduce using rule 59 (literal -> INTNUMBER .)
    RBRACKET        reduce using rule 59 (literal -> INTNUMBER .)
    DOT             reduce using rule 59 (literal -> INTNUMBER .)
    NEWLINE         reduce using rule 59 (literal -> INTNUMBER .)
    END             reduce using rule 59 (literal -> INTNUMBER .)
    TCOLON          reduce using rule 59 (literal -> INTNUMBER .)
    WHEN            reduce using rule 59 (literal -> INTNUMBER .)
    ELSIF           reduce using rule 59 (literal -> INTNUMBER .)
    ELSE            reduce using rule 59 (literal -> INTNUMBER .)
    ID              reduce using rule 59 (literal -> INTNUMBER .)
    CASE            reduce using rule 59 (literal -> INTNUMBER .)
    RETURN          reduce using rule 59 (literal -> INTNUMBER .)
    BREAK           reduce using rule 59 (literal -> INTNUMBER .)
    NEXT            reduce using rule 59 (literal -> INTNUMBER .)
    UNDERSCORE      reduce using rule 59 (literal -> INTNUMBER .)
    ASTERISK        reduce using rule 59 (literal -> INTNUMBER .)
    IF              reduce using rule 59 (literal -> INTNUMBER .)
    UNLESS          reduce using rule 59 (literal -> INTNUMBER .)
    WHILE           reduce using rule 59 (literal -> INTNUMBER .)
    UNTIL           reduce using rule 59 (literal -> INTNUMBER .)
    LOOP            reduce using rule 59 (literal -> INTNUMBER .)
    LPAREN          reduce using rule 59 (literal -> INTNUMBER .)
    INTNUMBER       reduce using rule 59 (literal -> INTNUMBER .)
    FLOATNUMBER     reduce using rule 59 (literal -> INTNUMBER .)
    STRING          reduce using rule 59 (literal -> INTNUMBER .)
    CHAR            reduce using rule 59 (literal -> INTNUMBER .)
    TRUE            reduce using rule 59 (literal -> INTNUMBER .)
    FALSE           reduce using rule 59 (literal -> INTNUMBER .)
    EXCLAMATION     reduce using rule 59 (literal -> INTNUMBER .)
    TILDE           reduce using rule 59 (literal -> INTNUMBER .)


state 52

    (60) literal -> FLOATNUMBER .

    LBRACKET        reduce using rule 60 (literal -> FLOATNUMBER .)
    DOTDOT          reduce using rule 60 (literal -> FLOATNUMBER .)
    DOTDOTDOT       reduce using rule 60 (literal -> FLOATNUMBER .)
    ASSIGN          reduce using rule 60 (literal -> FLOATNUMBER .)
    PLUS_ASSIGN     reduce using rule 60 (literal -> FLOATNUMBER .)
    MINUS_ASSIGN    reduce using rule 60 (literal -> FLOATNUMBER .)
    MULTI_ASSIGN    reduce using rule 60 (literal -> FLOATNUMBER .)
    DIVIDE_ASSIGN   reduce using rule 60 (literal -> FLOATNUMBER .)
    POTENCIACAO     reduce using rule 60 (literal -> FLOATNUMBER .)
    MULTI           reduce using rule 60 (literal -> FLOATNUMBER .)
    DIVIDE          reduce using rule 60 (literal -> FLOATNUMBER .)
    MODULO          reduce using rule 60 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 60 (literal -> FLOATNUMBER .)
    MINUS           reduce using rule 60 (literal -> FLOATNUMBER .)
    GREATER_THAN    reduce using rule 60 (literal -> FLOATNUMBER .)
    LESS_THAN       reduce using rule 60 (literal -> FLOATNUMBER .)
    GREATER_EQUAL   reduce using rule 60 (literal -> FLOATNUMBER .)
    LESS_EQUAL      reduce using rule 60 (literal -> FLOATNUMBER .)
    EQUAL           reduce using rule 60 (literal -> FLOATNUMBER .)
    NOT_EQUAL       reduce using rule 60 (literal -> FLOATNUMBER .)
    TIPO_EQUAL      reduce using rule 60 (literal -> FLOATNUMBER .)
    AND             reduce using rule 60 (literal -> FLOATNUMBER .)
    QMARK           reduce using rule 60 (literal -> FLOATNUMBER .)
    OR              reduce using rule 60 (literal -> FLOATNUMBER .)
    CONSTANT        reduce using rule 60 (literal -> FLOATNUMBER .)
    MODULE          reduce using rule 60 (literal -> FLOATNUMBER .)
    DEF             reduce using rule 60 (literal -> FLOATNUMBER .)
    $end            reduce using rule 60 (literal -> FLOATNUMBER .)
    RPAREN          reduce using rule 60 (literal -> FLOATNUMBER .)
    COMMA           reduce using rule 60 (literal -> FLOATNUMBER .)
    RBRACKET        reduce using rule 60 (literal -> FLOATNUMBER .)
    DOT             reduce using rule 60 (literal -> FLOATNUMBER .)
    NEWLINE         reduce using rule 60 (literal -> FLOATNUMBER .)
    END             reduce using rule 60 (literal -> FLOATNUMBER .)
    TCOLON          reduce using rule 60 (literal -> FLOATNUMBER .)
    WHEN            reduce using rule 60 (literal -> FLOATNUMBER .)
    ELSIF           reduce using rule 60 (literal -> FLOATNUMBER .)
    ELSE            reduce using rule 60 (literal -> FLOATNUMBER .)
    ID              reduce using rule 60 (literal -> FLOATNUMBER .)
    CASE            reduce using rule 60 (literal -> FLOATNUMBER .)
    RETURN          reduce using rule 60 (literal -> FLOATNUMBER .)
    BREAK           reduce using rule 60 (literal -> FLOATNUMBER .)
    NEXT            reduce using rule 60 (literal -> FLOATNUMBER .)
    UNDERSCORE      reduce using rule 60 (literal -> FLOATNUMBER .)
    ASTERISK        reduce using rule 60 (literal -> FLOATNUMBER .)
    IF              reduce using rule 60 (literal -> FLOATNUMBER .)
    UNLESS          reduce using rule 60 (literal -> FLOATNUMBER .)
    WHILE           reduce using rule 60 (literal -> FLOATNUMBER .)
    UNTIL           reduce using rule 60 (literal -> FLOATNUMBER .)
    LOOP            reduce using rule 60 (literal -> FLOATNUMBER .)
    LPAREN          reduce using rule 60 (literal -> FLOATNUMBER .)
    INTNUMBER       reduce using rule 60 (literal -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 60 (literal -> FLOATNUMBER .)
    STRING          reduce using rule 60 (literal -> FLOATNUMBER .)
    CHAR            reduce using rule 60 (literal -> FLOATNUMBER .)
    TRUE            reduce using rule 60 (literal -> FLOATNUMBER .)
    FALSE           reduce using rule 60 (literal -> FLOATNUMBER .)
    EXCLAMATION     reduce using rule 60 (literal -> FLOATNUMBER .)
    TILDE           reduce using rule 60 (literal -> FLOATNUMBER .)


state 53

    (61) literal -> STRING .

    LBRACKET        reduce using rule 61 (literal -> STRING .)
    DOTDOT          reduce using rule 61 (literal -> STRING .)
    DOTDOTDOT       reduce using rule 61 (literal -> STRING .)
    ASSIGN          reduce using rule 61 (literal -> STRING .)
    PLUS_ASSIGN     reduce using rule 61 (literal -> STRING .)
    MINUS_ASSIGN    reduce using rule 61 (literal -> STRING .)
    MULTI_ASSIGN    reduce using rule 61 (literal -> STRING .)
    DIVIDE_ASSIGN   reduce using rule 61 (literal -> STRING .)
    POTENCIACAO     reduce using rule 61 (literal -> STRING .)
    MULTI           reduce using rule 61 (literal -> STRING .)
    DIVIDE          reduce using rule 61 (literal -> STRING .)
    MODULO          reduce using rule 61 (literal -> STRING .)
    PLUS            reduce using rule 61 (literal -> STRING .)
    MINUS           reduce using rule 61 (literal -> STRING .)
    GREATER_THAN    reduce using rule 61 (literal -> STRING .)
    LESS_THAN       reduce using rule 61 (literal -> STRING .)
    GREATER_EQUAL   reduce using rule 61 (literal -> STRING .)
    LESS_EQUAL      reduce using rule 61 (literal -> STRING .)
    EQUAL           reduce using rule 61 (literal -> STRING .)
    NOT_EQUAL       reduce using rule 61 (literal -> STRING .)
    TIPO_EQUAL      reduce using rule 61 (literal -> STRING .)
    AND             reduce using rule 61 (literal -> STRING .)
    QMARK           reduce using rule 61 (literal -> STRING .)
    OR              reduce using rule 61 (literal -> STRING .)
    CONSTANT        reduce using rule 61 (literal -> STRING .)
    MODULE          reduce using rule 61 (literal -> STRING .)
    DEF             reduce using rule 61 (literal -> STRING .)
    $end            reduce using rule 61 (literal -> STRING .)
    RPAREN          reduce using rule 61 (literal -> STRING .)
    COMMA           reduce using rule 61 (literal -> STRING .)
    RBRACKET        reduce using rule 61 (literal -> STRING .)
    DOT             reduce using rule 61 (literal -> STRING .)
    NEWLINE         reduce using rule 61 (literal -> STRING .)
    END             reduce using rule 61 (literal -> STRING .)
    TCOLON          reduce using rule 61 (literal -> STRING .)
    WHEN            reduce using rule 61 (literal -> STRING .)
    ELSIF           reduce using rule 61 (literal -> STRING .)
    ELSE            reduce using rule 61 (literal -> STRING .)
    ID              reduce using rule 61 (literal -> STRING .)
    CASE            reduce using rule 61 (literal -> STRING .)
    RETURN          reduce using rule 61 (literal -> STRING .)
    BREAK           reduce using rule 61 (literal -> STRING .)
    NEXT            reduce using rule 61 (literal -> STRING .)
    UNDERSCORE      reduce using rule 61 (literal -> STRING .)
    ASTERISK        reduce using rule 61 (literal -> STRING .)
    IF              reduce using rule 61 (literal -> STRING .)
    UNLESS          reduce using rule 61 (literal -> STRING .)
    WHILE           reduce using rule 61 (literal -> STRING .)
    UNTIL           reduce using rule 61 (literal -> STRING .)
    LOOP            reduce using rule 61 (literal -> STRING .)
    LPAREN          reduce using rule 61 (literal -> STRING .)
    INTNUMBER       reduce using rule 61 (literal -> STRING .)
    FLOATNUMBER     reduce using rule 61 (literal -> STRING .)
    STRING          reduce using rule 61 (literal -> STRING .)
    CHAR            reduce using rule 61 (literal -> STRING .)
    TRUE            reduce using rule 61 (literal -> STRING .)
    FALSE           reduce using rule 61 (literal -> STRING .)
    EXCLAMATION     reduce using rule 61 (literal -> STRING .)
    TILDE           reduce using rule 61 (literal -> STRING .)


state 54

    (62) literal -> CHAR .

    LBRACKET        reduce using rule 62 (literal -> CHAR .)
    DOTDOT          reduce using rule 62 (literal -> CHAR .)
    DOTDOTDOT       reduce using rule 62 (literal -> CHAR .)
    ASSIGN          reduce using rule 62 (literal -> CHAR .)
    PLUS_ASSIGN     reduce using rule 62 (literal -> CHAR .)
    MINUS_ASSIGN    reduce using rule 62 (literal -> CHAR .)
    MULTI_ASSIGN    reduce using rule 62 (literal -> CHAR .)
    DIVIDE_ASSIGN   reduce using rule 62 (literal -> CHAR .)
    POTENCIACAO     reduce using rule 62 (literal -> CHAR .)
    MULTI           reduce using rule 62 (literal -> CHAR .)
    DIVIDE          reduce using rule 62 (literal -> CHAR .)
    MODULO          reduce using rule 62 (literal -> CHAR .)
    PLUS            reduce using rule 62 (literal -> CHAR .)
    MINUS           reduce using rule 62 (literal -> CHAR .)
    GREATER_THAN    reduce using rule 62 (literal -> CHAR .)
    LESS_THAN       reduce using rule 62 (literal -> CHAR .)
    GREATER_EQUAL   reduce using rule 62 (literal -> CHAR .)
    LESS_EQUAL      reduce using rule 62 (literal -> CHAR .)
    EQUAL           reduce using rule 62 (literal -> CHAR .)
    NOT_EQUAL       reduce using rule 62 (literal -> CHAR .)
    TIPO_EQUAL      reduce using rule 62 (literal -> CHAR .)
    AND             reduce using rule 62 (literal -> CHAR .)
    QMARK           reduce using rule 62 (literal -> CHAR .)
    OR              reduce using rule 62 (literal -> CHAR .)
    CONSTANT        reduce using rule 62 (literal -> CHAR .)
    MODULE          reduce using rule 62 (literal -> CHAR .)
    DEF             reduce using rule 62 (literal -> CHAR .)
    $end            reduce using rule 62 (literal -> CHAR .)
    RPAREN          reduce using rule 62 (literal -> CHAR .)
    COMMA           reduce using rule 62 (literal -> CHAR .)
    RBRACKET        reduce using rule 62 (literal -> CHAR .)
    DOT             reduce using rule 62 (literal -> CHAR .)
    NEWLINE         reduce using rule 62 (literal -> CHAR .)
    END             reduce using rule 62 (literal -> CHAR .)
    TCOLON          reduce using rule 62 (literal -> CHAR .)
    WHEN            reduce using rule 62 (literal -> CHAR .)
    ELSIF           reduce using rule 62 (literal -> CHAR .)
    ELSE            reduce using rule 62 (literal -> CHAR .)
    ID              reduce using rule 62 (literal -> CHAR .)
    CASE            reduce using rule 62 (literal -> CHAR .)
    RETURN          reduce using rule 62 (literal -> CHAR .)
    BREAK           reduce using rule 62 (literal -> CHAR .)
    NEXT            reduce using rule 62 (literal -> CHAR .)
    UNDERSCORE      reduce using rule 62 (literal -> CHAR .)
    ASTERISK        reduce using rule 62 (literal -> CHAR .)
    IF              reduce using rule 62 (literal -> CHAR .)
    UNLESS          reduce using rule 62 (literal -> CHAR .)
    WHILE           reduce using rule 62 (literal -> CHAR .)
    UNTIL           reduce using rule 62 (literal -> CHAR .)
    LOOP            reduce using rule 62 (literal -> CHAR .)
    LPAREN          reduce using rule 62 (literal -> CHAR .)
    INTNUMBER       reduce using rule 62 (literal -> CHAR .)
    FLOATNUMBER     reduce using rule 62 (literal -> CHAR .)
    STRING          reduce using rule 62 (literal -> CHAR .)
    CHAR            reduce using rule 62 (literal -> CHAR .)
    TRUE            reduce using rule 62 (literal -> CHAR .)
    FALSE           reduce using rule 62 (literal -> CHAR .)
    EXCLAMATION     reduce using rule 62 (literal -> CHAR .)
    TILDE           reduce using rule 62 (literal -> CHAR .)


state 55

    (63) literal -> TRUE .

    LBRACKET        reduce using rule 63 (literal -> TRUE .)
    DOTDOT          reduce using rule 63 (literal -> TRUE .)
    DOTDOTDOT       reduce using rule 63 (literal -> TRUE .)
    ASSIGN          reduce using rule 63 (literal -> TRUE .)
    PLUS_ASSIGN     reduce using rule 63 (literal -> TRUE .)
    MINUS_ASSIGN    reduce using rule 63 (literal -> TRUE .)
    MULTI_ASSIGN    reduce using rule 63 (literal -> TRUE .)
    DIVIDE_ASSIGN   reduce using rule 63 (literal -> TRUE .)
    POTENCIACAO     reduce using rule 63 (literal -> TRUE .)
    MULTI           reduce using rule 63 (literal -> TRUE .)
    DIVIDE          reduce using rule 63 (literal -> TRUE .)
    MODULO          reduce using rule 63 (literal -> TRUE .)
    PLUS            reduce using rule 63 (literal -> TRUE .)
    MINUS           reduce using rule 63 (literal -> TRUE .)
    GREATER_THAN    reduce using rule 63 (literal -> TRUE .)
    LESS_THAN       reduce using rule 63 (literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 63 (literal -> TRUE .)
    LESS_EQUAL      reduce using rule 63 (literal -> TRUE .)
    EQUAL           reduce using rule 63 (literal -> TRUE .)
    NOT_EQUAL       reduce using rule 63 (literal -> TRUE .)
    TIPO_EQUAL      reduce using rule 63 (literal -> TRUE .)
    AND             reduce using rule 63 (literal -> TRUE .)
    QMARK           reduce using rule 63 (literal -> TRUE .)
    OR              reduce using rule 63 (literal -> TRUE .)
    CONSTANT        reduce using rule 63 (literal -> TRUE .)
    MODULE          reduce using rule 63 (literal -> TRUE .)
    DEF             reduce using rule 63 (literal -> TRUE .)
    $end            reduce using rule 63 (literal -> TRUE .)
    RPAREN          reduce using rule 63 (literal -> TRUE .)
    COMMA           reduce using rule 63 (literal -> TRUE .)
    RBRACKET        reduce using rule 63 (literal -> TRUE .)
    DOT             reduce using rule 63 (literal -> TRUE .)
    NEWLINE         reduce using rule 63 (literal -> TRUE .)
    END             reduce using rule 63 (literal -> TRUE .)
    TCOLON          reduce using rule 63 (literal -> TRUE .)
    WHEN            reduce using rule 63 (literal -> TRUE .)
    ELSIF           reduce using rule 63 (literal -> TRUE .)
    ELSE            reduce using rule 63 (literal -> TRUE .)
    ID              reduce using rule 63 (literal -> TRUE .)
    CASE            reduce using rule 63 (literal -> TRUE .)
    RETURN          reduce using rule 63 (literal -> TRUE .)
    BREAK           reduce using rule 63 (literal -> TRUE .)
    NEXT            reduce using rule 63 (literal -> TRUE .)
    UNDERSCORE      reduce using rule 63 (literal -> TRUE .)
    ASTERISK        reduce using rule 63 (literal -> TRUE .)
    IF              reduce using rule 63 (literal -> TRUE .)
    UNLESS          reduce using rule 63 (literal -> TRUE .)
    WHILE           reduce using rule 63 (literal -> TRUE .)
    UNTIL           reduce using rule 63 (literal -> TRUE .)
    LOOP            reduce using rule 63 (literal -> TRUE .)
    LPAREN          reduce using rule 63 (literal -> TRUE .)
    INTNUMBER       reduce using rule 63 (literal -> TRUE .)
    FLOATNUMBER     reduce using rule 63 (literal -> TRUE .)
    STRING          reduce using rule 63 (literal -> TRUE .)
    CHAR            reduce using rule 63 (literal -> TRUE .)
    TRUE            reduce using rule 63 (literal -> TRUE .)
    FALSE           reduce using rule 63 (literal -> TRUE .)
    EXCLAMATION     reduce using rule 63 (literal -> TRUE .)
    TILDE           reduce using rule 63 (literal -> TRUE .)


state 56

    (64) literal -> FALSE .

    LBRACKET        reduce using rule 64 (literal -> FALSE .)
    DOTDOT          reduce using rule 64 (literal -> FALSE .)
    DOTDOTDOT       reduce using rule 64 (literal -> FALSE .)
    ASSIGN          reduce using rule 64 (literal -> FALSE .)
    PLUS_ASSIGN     reduce using rule 64 (literal -> FALSE .)
    MINUS_ASSIGN    reduce using rule 64 (literal -> FALSE .)
    MULTI_ASSIGN    reduce using rule 64 (literal -> FALSE .)
    DIVIDE_ASSIGN   reduce using rule 64 (literal -> FALSE .)
    POTENCIACAO     reduce using rule 64 (literal -> FALSE .)
    MULTI           reduce using rule 64 (literal -> FALSE .)
    DIVIDE          reduce using rule 64 (literal -> FALSE .)
    MODULO          reduce using rule 64 (literal -> FALSE .)
    PLUS            reduce using rule 64 (literal -> FALSE .)
    MINUS           reduce using rule 64 (literal -> FALSE .)
    GREATER_THAN    reduce using rule 64 (literal -> FALSE .)
    LESS_THAN       reduce using rule 64 (literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 64 (literal -> FALSE .)
    LESS_EQUAL      reduce using rule 64 (literal -> FALSE .)
    EQUAL           reduce using rule 64 (literal -> FALSE .)
    NOT_EQUAL       reduce using rule 64 (literal -> FALSE .)
    TIPO_EQUAL      reduce using rule 64 (literal -> FALSE .)
    AND             reduce using rule 64 (literal -> FALSE .)
    QMARK           reduce using rule 64 (literal -> FALSE .)
    OR              reduce using rule 64 (literal -> FALSE .)
    CONSTANT        reduce using rule 64 (literal -> FALSE .)
    MODULE          reduce using rule 64 (literal -> FALSE .)
    DEF             reduce using rule 64 (literal -> FALSE .)
    $end            reduce using rule 64 (literal -> FALSE .)
    RPAREN          reduce using rule 64 (literal -> FALSE .)
    COMMA           reduce using rule 64 (literal -> FALSE .)
    RBRACKET        reduce using rule 64 (literal -> FALSE .)
    DOT             reduce using rule 64 (literal -> FALSE .)
    NEWLINE         reduce using rule 64 (literal -> FALSE .)
    END             reduce using rule 64 (literal -> FALSE .)
    TCOLON          reduce using rule 64 (literal -> FALSE .)
    WHEN            reduce using rule 64 (literal -> FALSE .)
    ELSIF           reduce using rule 64 (literal -> FALSE .)
    ELSE            reduce using rule 64 (literal -> FALSE .)
    ID              reduce using rule 64 (literal -> FALSE .)
    CASE            reduce using rule 64 (literal -> FALSE .)
    RETURN          reduce using rule 64 (literal -> FALSE .)
    BREAK           reduce using rule 64 (literal -> FALSE .)
    NEXT            reduce using rule 64 (literal -> FALSE .)
    UNDERSCORE      reduce using rule 64 (literal -> FALSE .)
    ASTERISK        reduce using rule 64 (literal -> FALSE .)
    IF              reduce using rule 64 (literal -> FALSE .)
    UNLESS          reduce using rule 64 (literal -> FALSE .)
    WHILE           reduce using rule 64 (literal -> FALSE .)
    UNTIL           reduce using rule 64 (literal -> FALSE .)
    LOOP            reduce using rule 64 (literal -> FALSE .)
    LPAREN          reduce using rule 64 (literal -> FALSE .)
    INTNUMBER       reduce using rule 64 (literal -> FALSE .)
    FLOATNUMBER     reduce using rule 64 (literal -> FALSE .)
    STRING          reduce using rule 64 (literal -> FALSE .)
    CHAR            reduce using rule 64 (literal -> FALSE .)
    TRUE            reduce using rule 64 (literal -> FALSE .)
    FALSE           reduce using rule 64 (literal -> FALSE .)
    EXCLAMATION     reduce using rule 64 (literal -> FALSE .)
    TILDE           reduce using rule 64 (literal -> FALSE .)


state 57

    (102) additive_expression -> multiplicative_expression .
    (106) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (107) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (108) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 102 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 102 (additive_expression -> multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 102 (additive_expression -> multiplicative_expression .)
    LESS_EQUAL      reduce using rule 102 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    NOT_EQUAL       reduce using rule 102 (additive_expression -> multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 102 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 102 (additive_expression -> multiplicative_expression .)
    QMARK           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    CONSTANT        reduce using rule 102 (additive_expression -> multiplicative_expression .)
    MODULE          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    DEF             reduce using rule 102 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 102 (additive_expression -> multiplicative_expression .)
    DOT             reduce using rule 102 (additive_expression -> multiplicative_expression .)
    NEWLINE         reduce using rule 102 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 102 (additive_expression -> multiplicative_expression .)
    TCOLON          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    WHEN            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    ELSIF           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    ID              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    CASE            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    NEXT            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    UNDERSCORE      reduce using rule 102 (additive_expression -> multiplicative_expression .)
    ASTERISK        reduce using rule 102 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 102 (additive_expression -> multiplicative_expression .)
    UNLESS          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    WHILE           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    UNTIL           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    LOOP            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    LBRACKET        reduce using rule 102 (additive_expression -> multiplicative_expression .)
    INTNUMBER       reduce using rule 102 (additive_expression -> multiplicative_expression .)
    FLOATNUMBER     reduce using rule 102 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 102 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    TRUE            reduce using rule 102 (additive_expression -> multiplicative_expression .)
    FALSE           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    EXCLAMATION     reduce using rule 102 (additive_expression -> multiplicative_expression .)
    TILDE           reduce using rule 102 (additive_expression -> multiplicative_expression .)
    MULTI           shift and go to state 98
    DIVIDE          shift and go to state 99
    MODULO          shift and go to state 100


state 58

    (111) unary_expression -> PLUS . unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    unary_expression               shift and go to state 101
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 59

    (112) unary_expression -> MINUS . unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    unary_expression               shift and go to state 103
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 60

    (105) multiplicative_expression -> potenciacao_expression .
    (110) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    DIVIDE          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    MODULO          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    PLUS            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    MINUS           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    GREATER_THAN    reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    LESS_THAN       reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    LESS_EQUAL      reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    EQUAL           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    NOT_EQUAL       reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    AND             reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    QMARK           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    OR              reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    CONSTANT        reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    MODULE          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    DEF             reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    $end            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    RPAREN          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    COMMA           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    RBRACKET        reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    DOT             reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    NEWLINE         reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    END             reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    TCOLON          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    WHEN            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    ELSIF           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    ELSE            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    ID              reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    CASE            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    RETURN          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    BREAK           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    NEXT            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    UNDERSCORE      reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    ASTERISK        reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    IF              reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    UNLESS          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    WHILE           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    UNTIL           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    LOOP            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    LPAREN          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    LBRACKET        reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    INTNUMBER       reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    FLOATNUMBER     reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    STRING          reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    CHAR            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    TRUE            reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    FALSE           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    EXCLAMATION     reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    TILDE           reduce using rule 105 (multiplicative_expression -> potenciacao_expression .)
    POTENCIACAO     shift and go to state 104


state 61

    (109) potenciacao_expression -> unary_expression .

    POTENCIACAO     reduce using rule 109 (potenciacao_expression -> unary_expression .)
    MULTI           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    DIVIDE          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    MODULO          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    PLUS            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    MINUS           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 109 (potenciacao_expression -> unary_expression .)
    LESS_THAN       reduce using rule 109 (potenciacao_expression -> unary_expression .)
    GREATER_EQUAL   reduce using rule 109 (potenciacao_expression -> unary_expression .)
    LESS_EQUAL      reduce using rule 109 (potenciacao_expression -> unary_expression .)
    EQUAL           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 109 (potenciacao_expression -> unary_expression .)
    TIPO_EQUAL      reduce using rule 109 (potenciacao_expression -> unary_expression .)
    AND             reduce using rule 109 (potenciacao_expression -> unary_expression .)
    QMARK           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    OR              reduce using rule 109 (potenciacao_expression -> unary_expression .)
    CONSTANT        reduce using rule 109 (potenciacao_expression -> unary_expression .)
    MODULE          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    DEF             reduce using rule 109 (potenciacao_expression -> unary_expression .)
    $end            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    RPAREN          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    COMMA           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    RBRACKET        reduce using rule 109 (potenciacao_expression -> unary_expression .)
    DOT             reduce using rule 109 (potenciacao_expression -> unary_expression .)
    NEWLINE         reduce using rule 109 (potenciacao_expression -> unary_expression .)
    END             reduce using rule 109 (potenciacao_expression -> unary_expression .)
    TCOLON          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    WHEN            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    ELSIF           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    ELSE            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    ID              reduce using rule 109 (potenciacao_expression -> unary_expression .)
    CASE            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    RETURN          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    BREAK           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    NEXT            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    UNDERSCORE      reduce using rule 109 (potenciacao_expression -> unary_expression .)
    ASTERISK        reduce using rule 109 (potenciacao_expression -> unary_expression .)
    IF              reduce using rule 109 (potenciacao_expression -> unary_expression .)
    UNLESS          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    WHILE           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    UNTIL           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    LOOP            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    LPAREN          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    LBRACKET        reduce using rule 109 (potenciacao_expression -> unary_expression .)
    INTNUMBER       reduce using rule 109 (potenciacao_expression -> unary_expression .)
    FLOATNUMBER     reduce using rule 109 (potenciacao_expression -> unary_expression .)
    STRING          reduce using rule 109 (potenciacao_expression -> unary_expression .)
    CHAR            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    TRUE            reduce using rule 109 (potenciacao_expression -> unary_expression .)
    FALSE           reduce using rule 109 (potenciacao_expression -> unary_expression .)
    EXCLAMATION     reduce using rule 109 (potenciacao_expression -> unary_expression .)
    TILDE           reduce using rule 109 (potenciacao_expression -> unary_expression .)


state 62

    (113) unary_expression -> EXCLAMATION . unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    unary_expression               shift and go to state 105
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 63

    (114) unary_expression -> TILDE . unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    unary_expression               shift and go to state 106
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 64

    (24) module -> MODULE ID NEWLINE . statements END
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    statements                     shift and go to state 108
    statement                      shift and go to state 109
    expression                     shift and go to state 110
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 65

    (27) function -> DEF ID LPAREN . opt_argument_list RPAREN opt_return_type statements_block END
    (28) opt_argument_list -> . argument_list
    (29) opt_argument_list -> . empty
    (30) argument_list -> . argument
    (31) argument_list -> . argument COMMA argument_list
    (166) empty -> .
    (32) argument -> . ID
    (33) argument -> . ID COLON types
    (34) argument -> . ID ASSIGN expression
    (35) argument -> . ID COLON types ASSIGN expression

    RPAREN          reduce using rule 166 (empty -> .)
    ID              shift and go to state 134

    opt_argument_list              shift and go to state 135
    argument_list                  shift and go to state 136
    empty                          shift and go to state 137
    argument                       shift and go to state 138

state 66

    (1) program -> require_list constant_list module_list function_list .

    $end            reduce using rule 1 (program -> require_list constant_list module_list function_list .)


state 67

    (87) ternary_expression -> logical_or_expression QMARK . expression TCOLON expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    logical_or_expression          shift and go to state 35
    expression                     shift and go to state 139
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 68

    (90) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    logical_and_expression         shift and go to state 140
    equality_expression            shift and go to state 41
    relational_expression          shift and go to state 43
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 69

    (79) assignment_expression -> assignment_target ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    assignment_target              shift and go to state 36
    expression                     shift and go to state 141
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 70

    (80) assignment_expression -> assignment_target PLUS_ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    assignment_target              shift and go to state 36
    expression                     shift and go to state 142
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 71

    (81) assignment_expression -> assignment_target MINUS_ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    assignment_target              shift and go to state 36
    expression                     shift and go to state 143
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 72

    (82) assignment_expression -> assignment_target MULTI_ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    assignment_target              shift and go to state 36
    expression                     shift and go to state 144
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 73

    (83) assignment_expression -> assignment_target DIVIDE_ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    assignment_target              shift and go to state 36
    expression                     shift and go to state 145
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 74

    (92) logical_and_expression -> logical_and_expression AND . equality_expression
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    equality_expression            shift and go to state 146
    relational_expression          shift and go to state 43
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 75

    (86) assignment_target -> ASTERISK assignment_target .

    ASSIGN          reduce using rule 86 (assignment_target -> ASTERISK assignment_target .)
    PLUS_ASSIGN     reduce using rule 86 (assignment_target -> ASTERISK assignment_target .)
    MINUS_ASSIGN    reduce using rule 86 (assignment_target -> ASTERISK assignment_target .)
    MULTI_ASSIGN    reduce using rule 86 (assignment_target -> ASTERISK assignment_target .)
    DIVIDE_ASSIGN   reduce using rule 86 (assignment_target -> ASTERISK assignment_target .)


state 76

    (84) assignment_target -> postfix_expression .

    ASSIGN          reduce using rule 84 (assignment_target -> postfix_expression .)
    PLUS_ASSIGN     reduce using rule 84 (assignment_target -> postfix_expression .)
    MINUS_ASSIGN    reduce using rule 84 (assignment_target -> postfix_expression .)
    MULTI_ASSIGN    reduce using rule 84 (assignment_target -> postfix_expression .)
    DIVIDE_ASSIGN   reduce using rule 84 (assignment_target -> postfix_expression .)


state 77

    (94) equality_expression -> equality_expression EQUAL . relational_expression
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    relational_expression          shift and go to state 147
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 78

    (95) equality_expression -> equality_expression NOT_EQUAL . relational_expression
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    relational_expression          shift and go to state 148
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 79

    (96) equality_expression -> equality_expression TIPO_EQUAL . relational_expression
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    relational_expression          shift and go to state 149
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 80

    (116) postfix_expression -> primary_expression postfix_suffixes .

    ASSIGN          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    PLUS_ASSIGN     reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    MINUS_ASSIGN    reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    MULTI_ASSIGN    reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    DIVIDE_ASSIGN   reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    POTENCIACAO     reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    MULTI           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    DIVIDE          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    MODULO          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    PLUS            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    MINUS           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    GREATER_THAN    reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    LESS_THAN       reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    GREATER_EQUAL   reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    LESS_EQUAL      reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    EQUAL           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    NOT_EQUAL       reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    TIPO_EQUAL      reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    AND             reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    QMARK           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    OR              reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    CONSTANT        reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    MODULE          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    DEF             reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    $end            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    RPAREN          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    COMMA           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    RBRACKET        reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    DOT             reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    NEWLINE         reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    END             reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    TCOLON          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    WHEN            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    ELSIF           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    ELSE            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    ID              reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    CASE            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    RETURN          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    BREAK           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    NEXT            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    UNDERSCORE      reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    ASTERISK        reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    IF              reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    UNLESS          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    WHILE           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    UNTIL           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    LOOP            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    LPAREN          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    LBRACKET        reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    INTNUMBER       reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    FLOATNUMBER     reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    STRING          reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    CHAR            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    TRUE            reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    FALSE           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    EXCLAMATION     reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)
    TILDE           reduce using rule 116 (postfix_expression -> primary_expression postfix_suffixes .)


state 81

    (117) postfix_suffixes -> postfix_suffix . postfix_suffixes
    (117) postfix_suffixes -> . postfix_suffix postfix_suffixes
    (118) postfix_suffixes -> . empty
    (119) postfix_suffix -> . LBRACKET expression RBRACKET
    (120) postfix_suffix -> . DOTDOT primary_expression
    (121) postfix_suffix -> . DOTDOTDOT primary_expression
    (166) empty -> .

  ! shift/reduce conflict for LBRACKET resolved as shift
    LBRACKET        shift and go to state 83
    DOTDOT          shift and go to state 84
    DOTDOTDOT       shift and go to state 85
    ASSIGN          reduce using rule 166 (empty -> .)
    PLUS_ASSIGN     reduce using rule 166 (empty -> .)
    MINUS_ASSIGN    reduce using rule 166 (empty -> .)
    MULTI_ASSIGN    reduce using rule 166 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 166 (empty -> .)
    POTENCIACAO     reduce using rule 166 (empty -> .)
    MULTI           reduce using rule 166 (empty -> .)
    DIVIDE          reduce using rule 166 (empty -> .)
    MODULO          reduce using rule 166 (empty -> .)
    PLUS            reduce using rule 166 (empty -> .)
    MINUS           reduce using rule 166 (empty -> .)
    GREATER_THAN    reduce using rule 166 (empty -> .)
    LESS_THAN       reduce using rule 166 (empty -> .)
    GREATER_EQUAL   reduce using rule 166 (empty -> .)
    LESS_EQUAL      reduce using rule 166 (empty -> .)
    EQUAL           reduce using rule 166 (empty -> .)
    NOT_EQUAL       reduce using rule 166 (empty -> .)
    TIPO_EQUAL      reduce using rule 166 (empty -> .)
    AND             reduce using rule 166 (empty -> .)
    QMARK           reduce using rule 166 (empty -> .)
    OR              reduce using rule 166 (empty -> .)
    CONSTANT        reduce using rule 166 (empty -> .)
    MODULE          reduce using rule 166 (empty -> .)
    DEF             reduce using rule 166 (empty -> .)
    $end            reduce using rule 166 (empty -> .)
    RPAREN          reduce using rule 166 (empty -> .)
    COMMA           reduce using rule 166 (empty -> .)
    RBRACKET        reduce using rule 166 (empty -> .)
    DOT             reduce using rule 166 (empty -> .)
    NEWLINE         reduce using rule 166 (empty -> .)
    END             reduce using rule 166 (empty -> .)
    TCOLON          reduce using rule 166 (empty -> .)
    WHEN            reduce using rule 166 (empty -> .)
    ELSIF           reduce using rule 166 (empty -> .)
    ELSE            reduce using rule 166 (empty -> .)
    ID              reduce using rule 166 (empty -> .)
    CASE            reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    BREAK           reduce using rule 166 (empty -> .)
    NEXT            reduce using rule 166 (empty -> .)
    UNDERSCORE      reduce using rule 166 (empty -> .)
    ASTERISK        reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    UNLESS          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    UNTIL           reduce using rule 166 (empty -> .)
    LOOP            reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    INTNUMBER       reduce using rule 166 (empty -> .)
    FLOATNUMBER     reduce using rule 166 (empty -> .)
    STRING          reduce using rule 166 (empty -> .)
    CHAR            reduce using rule 166 (empty -> .)
    TRUE            reduce using rule 166 (empty -> .)
    FALSE           reduce using rule 166 (empty -> .)
    EXCLAMATION     reduce using rule 166 (empty -> .)
    TILDE           reduce using rule 166 (empty -> .)

  ! LBRACKET        [ reduce using rule 166 (empty -> .) ]

    postfix_suffix                 shift and go to state 81
    postfix_suffixes               shift and go to state 150
    empty                          shift and go to state 82

state 82

    (118) postfix_suffixes -> empty .

    ASSIGN          reduce using rule 118 (postfix_suffixes -> empty .)
    PLUS_ASSIGN     reduce using rule 118 (postfix_suffixes -> empty .)
    MINUS_ASSIGN    reduce using rule 118 (postfix_suffixes -> empty .)
    MULTI_ASSIGN    reduce using rule 118 (postfix_suffixes -> empty .)
    DIVIDE_ASSIGN   reduce using rule 118 (postfix_suffixes -> empty .)
    POTENCIACAO     reduce using rule 118 (postfix_suffixes -> empty .)
    MULTI           reduce using rule 118 (postfix_suffixes -> empty .)
    DIVIDE          reduce using rule 118 (postfix_suffixes -> empty .)
    MODULO          reduce using rule 118 (postfix_suffixes -> empty .)
    PLUS            reduce using rule 118 (postfix_suffixes -> empty .)
    MINUS           reduce using rule 118 (postfix_suffixes -> empty .)
    GREATER_THAN    reduce using rule 118 (postfix_suffixes -> empty .)
    LESS_THAN       reduce using rule 118 (postfix_suffixes -> empty .)
    GREATER_EQUAL   reduce using rule 118 (postfix_suffixes -> empty .)
    LESS_EQUAL      reduce using rule 118 (postfix_suffixes -> empty .)
    EQUAL           reduce using rule 118 (postfix_suffixes -> empty .)
    NOT_EQUAL       reduce using rule 118 (postfix_suffixes -> empty .)
    TIPO_EQUAL      reduce using rule 118 (postfix_suffixes -> empty .)
    AND             reduce using rule 118 (postfix_suffixes -> empty .)
    QMARK           reduce using rule 118 (postfix_suffixes -> empty .)
    OR              reduce using rule 118 (postfix_suffixes -> empty .)
    CONSTANT        reduce using rule 118 (postfix_suffixes -> empty .)
    MODULE          reduce using rule 118 (postfix_suffixes -> empty .)
    DEF             reduce using rule 118 (postfix_suffixes -> empty .)
    $end            reduce using rule 118 (postfix_suffixes -> empty .)
    RPAREN          reduce using rule 118 (postfix_suffixes -> empty .)
    COMMA           reduce using rule 118 (postfix_suffixes -> empty .)
    RBRACKET        reduce using rule 118 (postfix_suffixes -> empty .)
    DOT             reduce using rule 118 (postfix_suffixes -> empty .)
    NEWLINE         reduce using rule 118 (postfix_suffixes -> empty .)
    END             reduce using rule 118 (postfix_suffixes -> empty .)
    TCOLON          reduce using rule 118 (postfix_suffixes -> empty .)
    WHEN            reduce using rule 118 (postfix_suffixes -> empty .)
    ELSIF           reduce using rule 118 (postfix_suffixes -> empty .)
    ELSE            reduce using rule 118 (postfix_suffixes -> empty .)
    ID              reduce using rule 118 (postfix_suffixes -> empty .)
    CASE            reduce using rule 118 (postfix_suffixes -> empty .)
    RETURN          reduce using rule 118 (postfix_suffixes -> empty .)
    BREAK           reduce using rule 118 (postfix_suffixes -> empty .)
    NEXT            reduce using rule 118 (postfix_suffixes -> empty .)
    UNDERSCORE      reduce using rule 118 (postfix_suffixes -> empty .)
    ASTERISK        reduce using rule 118 (postfix_suffixes -> empty .)
    IF              reduce using rule 118 (postfix_suffixes -> empty .)
    UNLESS          reduce using rule 118 (postfix_suffixes -> empty .)
    WHILE           reduce using rule 118 (postfix_suffixes -> empty .)
    UNTIL           reduce using rule 118 (postfix_suffixes -> empty .)
    LOOP            reduce using rule 118 (postfix_suffixes -> empty .)
    LPAREN          reduce using rule 118 (postfix_suffixes -> empty .)
    LBRACKET        reduce using rule 118 (postfix_suffixes -> empty .)
    INTNUMBER       reduce using rule 118 (postfix_suffixes -> empty .)
    FLOATNUMBER     reduce using rule 118 (postfix_suffixes -> empty .)
    STRING          reduce using rule 118 (postfix_suffixes -> empty .)
    CHAR            reduce using rule 118 (postfix_suffixes -> empty .)
    TRUE            reduce using rule 118 (postfix_suffixes -> empty .)
    FALSE           reduce using rule 118 (postfix_suffixes -> empty .)
    EXCLAMATION     reduce using rule 118 (postfix_suffixes -> empty .)
    TILDE           reduce using rule 118 (postfix_suffixes -> empty .)


state 83

    (119) postfix_suffix -> LBRACKET . expression RBRACKET
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 151
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 84

    (120) postfix_suffix -> DOTDOT . primary_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    primary_expression             shift and go to state 152
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 85

    (121) postfix_suffix -> DOTDOTDOT . primary_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    primary_expression             shift and go to state 153
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 86

    (98) relational_expression -> relational_expression GREATER_THAN . additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    additive_expression            shift and go to state 154
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 87

    (99) relational_expression -> relational_expression LESS_THAN . additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    additive_expression            shift and go to state 155
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 88

    (100) relational_expression -> relational_expression GREATER_EQUAL . additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    additive_expression            shift and go to state 156
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 89

    (101) relational_expression -> relational_expression LESS_EQUAL . additive_expression
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    additive_expression            shift and go to state 157
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 90

    (122) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 158


state 91

    (65) function_call -> ID LPAREN . opt_expression_list RPAREN
    (66) opt_expression_list -> . expression_list
    (67) opt_expression_list -> . empty
    (68) expression_list -> . expression
    (69) expression_list -> . expression COMMA expression_list
    (166) empty -> .
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    RPAREN          reduce using rule 166 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    opt_expression_list            shift and go to state 159
    expression_list                shift and go to state 95
    empty                          shift and go to state 96
    expression                     shift and go to state 97
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 92

    (103) additive_expression -> additive_expression PLUS . multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    multiplicative_expression      shift and go to state 160
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 93

    (104) additive_expression -> additive_expression MINUS . multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    multiplicative_expression      shift and go to state 161
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 94

    (127) array_literal -> LBRACKET opt_expression_list . RBRACKET

    RBRACKET        shift and go to state 162


state 95

    (66) opt_expression_list -> expression_list .

    RBRACKET        reduce using rule 66 (opt_expression_list -> expression_list .)
    RPAREN          reduce using rule 66 (opt_expression_list -> expression_list .)


state 96

    (67) opt_expression_list -> empty .

    RBRACKET        reduce using rule 67 (opt_expression_list -> empty .)
    RPAREN          reduce using rule 67 (opt_expression_list -> empty .)


state 97

    (68) expression_list -> expression .
    (69) expression_list -> expression . COMMA expression_list

    RBRACKET        reduce using rule 68 (expression_list -> expression .)
    RPAREN          reduce using rule 68 (expression_list -> expression .)
    COMMA           shift and go to state 163


state 98

    (106) multiplicative_expression -> multiplicative_expression MULTI . potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    potenciacao_expression         shift and go to state 164
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 99

    (107) multiplicative_expression -> multiplicative_expression DIVIDE . potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    potenciacao_expression         shift and go to state 165
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 100

    (108) multiplicative_expression -> multiplicative_expression MODULO . potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    potenciacao_expression         shift and go to state 166
    unary_expression               shift and go to state 61
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 101

    (111) unary_expression -> PLUS unary_expression .

    POTENCIACAO     reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    MULTI           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    GREATER_THAN    reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    LESS_THAN       reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    GREATER_EQUAL   reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    LESS_EQUAL      reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    NOT_EQUAL       reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    TIPO_EQUAL      reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    QMARK           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    CONSTANT        reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    MODULE          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    DEF             reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    $end            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    DOT             reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    NEWLINE         reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    END             reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    TCOLON          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    WHEN            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    ELSIF           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    ID              reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    CASE            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    RETURN          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    BREAK           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    NEXT            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    UNDERSCORE      reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    ASTERISK        reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    IF              reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    UNLESS          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    WHILE           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    UNTIL           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    LOOP            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    LPAREN          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    LBRACKET        reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    INTNUMBER       reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    FLOATNUMBER     reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    STRING          reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    CHAR            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    TRUE            reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    FALSE           reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    EXCLAMATION     reduce using rule 111 (unary_expression -> PLUS unary_expression .)
    TILDE           reduce using rule 111 (unary_expression -> PLUS unary_expression .)


state 102

    (115) unary_expression -> postfix_expression .

    POTENCIACAO     reduce using rule 115 (unary_expression -> postfix_expression .)
    MULTI           reduce using rule 115 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 115 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 115 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 115 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 115 (unary_expression -> postfix_expression .)
    GREATER_THAN    reduce using rule 115 (unary_expression -> postfix_expression .)
    LESS_THAN       reduce using rule 115 (unary_expression -> postfix_expression .)
    GREATER_EQUAL   reduce using rule 115 (unary_expression -> postfix_expression .)
    LESS_EQUAL      reduce using rule 115 (unary_expression -> postfix_expression .)
    EQUAL           reduce using rule 115 (unary_expression -> postfix_expression .)
    NOT_EQUAL       reduce using rule 115 (unary_expression -> postfix_expression .)
    TIPO_EQUAL      reduce using rule 115 (unary_expression -> postfix_expression .)
    AND             reduce using rule 115 (unary_expression -> postfix_expression .)
    QMARK           reduce using rule 115 (unary_expression -> postfix_expression .)
    OR              reduce using rule 115 (unary_expression -> postfix_expression .)
    CONSTANT        reduce using rule 115 (unary_expression -> postfix_expression .)
    MODULE          reduce using rule 115 (unary_expression -> postfix_expression .)
    DEF             reduce using rule 115 (unary_expression -> postfix_expression .)
    $end            reduce using rule 115 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 115 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 115 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 115 (unary_expression -> postfix_expression .)
    DOT             reduce using rule 115 (unary_expression -> postfix_expression .)
    NEWLINE         reduce using rule 115 (unary_expression -> postfix_expression .)
    END             reduce using rule 115 (unary_expression -> postfix_expression .)
    TCOLON          reduce using rule 115 (unary_expression -> postfix_expression .)
    WHEN            reduce using rule 115 (unary_expression -> postfix_expression .)
    ELSIF           reduce using rule 115 (unary_expression -> postfix_expression .)
    ELSE            reduce using rule 115 (unary_expression -> postfix_expression .)
    ID              reduce using rule 115 (unary_expression -> postfix_expression .)
    CASE            reduce using rule 115 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 115 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 115 (unary_expression -> postfix_expression .)
    NEXT            reduce using rule 115 (unary_expression -> postfix_expression .)
    UNDERSCORE      reduce using rule 115 (unary_expression -> postfix_expression .)
    ASTERISK        reduce using rule 115 (unary_expression -> postfix_expression .)
    IF              reduce using rule 115 (unary_expression -> postfix_expression .)
    UNLESS          reduce using rule 115 (unary_expression -> postfix_expression .)
    WHILE           reduce using rule 115 (unary_expression -> postfix_expression .)
    UNTIL           reduce using rule 115 (unary_expression -> postfix_expression .)
    LOOP            reduce using rule 115 (unary_expression -> postfix_expression .)
    LPAREN          reduce using rule 115 (unary_expression -> postfix_expression .)
    LBRACKET        reduce using rule 115 (unary_expression -> postfix_expression .)
    INTNUMBER       reduce using rule 115 (unary_expression -> postfix_expression .)
    FLOATNUMBER     reduce using rule 115 (unary_expression -> postfix_expression .)
    STRING          reduce using rule 115 (unary_expression -> postfix_expression .)
    CHAR            reduce using rule 115 (unary_expression -> postfix_expression .)
    TRUE            reduce using rule 115 (unary_expression -> postfix_expression .)
    FALSE           reduce using rule 115 (unary_expression -> postfix_expression .)
    EXCLAMATION     reduce using rule 115 (unary_expression -> postfix_expression .)
    TILDE           reduce using rule 115 (unary_expression -> postfix_expression .)


state 103

    (112) unary_expression -> MINUS unary_expression .

    POTENCIACAO     reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    MULTI           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    GREATER_THAN    reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    LESS_THAN       reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    GREATER_EQUAL   reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    LESS_EQUAL      reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    NOT_EQUAL       reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    TIPO_EQUAL      reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    QMARK           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    CONSTANT        reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    MODULE          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    DEF             reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    $end            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    DOT             reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    NEWLINE         reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    END             reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    TCOLON          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    WHEN            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    ELSIF           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    ID              reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    CASE            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    RETURN          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    BREAK           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    NEXT            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    UNDERSCORE      reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    ASTERISK        reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    IF              reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    UNLESS          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    WHILE           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    UNTIL           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    LOOP            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    LPAREN          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    LBRACKET        reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    INTNUMBER       reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    FLOATNUMBER     reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    STRING          reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    CHAR            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    TRUE            reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    FALSE           reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    EXCLAMATION     reduce using rule 112 (unary_expression -> MINUS unary_expression .)
    TILDE           reduce using rule 112 (unary_expression -> MINUS unary_expression .)


state 104

    (110) potenciacao_expression -> potenciacao_expression POTENCIACAO . unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56

    unary_expression               shift and go to state 167
    postfix_expression             shift and go to state 102
    primary_expression             shift and go to state 42
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47

state 105

    (113) unary_expression -> EXCLAMATION unary_expression .

    POTENCIACAO     reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    MULTI           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    DIVIDE          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_THAN    reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_THAN       reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQUAL   reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQUAL      reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    EQUAL           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQUAL       reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    TIPO_EQUAL      reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    AND             reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    QMARK           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    OR              reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    CONSTANT        reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    MODULE          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    DEF             reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    $end            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACKET        reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    DOT             reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    NEWLINE         reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    END             reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    TCOLON          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    WHEN            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    ELSIF           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    ELSE            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    ID              reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    CASE            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    RETURN          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    BREAK           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    NEXT            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    UNDERSCORE      reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    ASTERISK        reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    IF              reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    UNLESS          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    WHILE           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    UNTIL           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    LOOP            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    LPAREN          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACKET        reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    INTNUMBER       reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    FLOATNUMBER     reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    STRING          reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    CHAR            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    TRUE            reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    FALSE           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    EXCLAMATION     reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)
    TILDE           reduce using rule 113 (unary_expression -> EXCLAMATION unary_expression .)


state 106

    (114) unary_expression -> TILDE unary_expression .

    POTENCIACAO     reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    MULTI           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    DIVIDE          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    MODULO          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    PLUS            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    MINUS           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    GREATER_THAN    reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    LESS_THAN       reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    GREATER_EQUAL   reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    LESS_EQUAL      reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    EQUAL           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    NOT_EQUAL       reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    TIPO_EQUAL      reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    AND             reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    QMARK           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    OR              reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    CONSTANT        reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    MODULE          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    DEF             reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    $end            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    RPAREN          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    COMMA           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    RBRACKET        reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    DOT             reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    NEWLINE         reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    END             reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    TCOLON          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    WHEN            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    ELSIF           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    ELSE            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    ID              reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    CASE            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    RETURN          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    BREAK           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    NEXT            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    UNDERSCORE      reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    ASTERISK        reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    IF              reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    UNLESS          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    WHILE           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    UNTIL           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    LOOP            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    LPAREN          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    LBRACKET        reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    INTNUMBER       reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    FLOATNUMBER     reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    STRING          reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    CHAR            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    TRUE            reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    FALSE           reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    EXCLAMATION     reduce using rule 114 (unary_expression -> TILDE unary_expression .)
    TILDE           reduce using rule 114 (unary_expression -> TILDE unary_expression .)


state 107

    (70) variable_declaration -> ID . types ASSIGN expression
    (71) variable_declaration -> ID . ASSIGN expression
    (72) variable_declaration -> ID . COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (126) primary_expression -> ID .
    (65) function_call -> ID . LPAREN opt_expression_list RPAREN
    (38) types -> . STRING
    (39) types -> . CHAR
    (40) types -> . NIL
    (41) types -> . integer
    (42) types -> . float
    (43) types -> . boolean
    (44) integer -> . INT
    (45) integer -> . INT8
    (46) integer -> . INT16
    (47) integer -> . INT32
    (48) integer -> . INT64
    (49) integer -> . INT128
    (50) integer -> . UINT8
    (51) integer -> . UINT16
    (52) integer -> . UINT32
    (53) integer -> . UINT64
    (54) integer -> . UINT128
    (55) float -> . FLOAT
    (56) float -> . FLOAT32
    (57) float -> . FLOAT64
    (58) boolean -> . BOOL

  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 169
    COMMA           shift and go to state 170
    LBRACKET        reduce using rule 126 (primary_expression -> ID .)
    DOTDOT          reduce using rule 126 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 126 (primary_expression -> ID .)
    PLUS_ASSIGN     reduce using rule 126 (primary_expression -> ID .)
    MINUS_ASSIGN    reduce using rule 126 (primary_expression -> ID .)
    MULTI_ASSIGN    reduce using rule 126 (primary_expression -> ID .)
    DIVIDE_ASSIGN   reduce using rule 126 (primary_expression -> ID .)
    POTENCIACAO     reduce using rule 126 (primary_expression -> ID .)
    MULTI           reduce using rule 126 (primary_expression -> ID .)
    DIVIDE          reduce using rule 126 (primary_expression -> ID .)
    MODULO          reduce using rule 126 (primary_expression -> ID .)
    PLUS            reduce using rule 126 (primary_expression -> ID .)
    MINUS           reduce using rule 126 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 126 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 126 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 126 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 126 (primary_expression -> ID .)
    EQUAL           reduce using rule 126 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 126 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 126 (primary_expression -> ID .)
    AND             reduce using rule 126 (primary_expression -> ID .)
    QMARK           reduce using rule 126 (primary_expression -> ID .)
    OR              reduce using rule 126 (primary_expression -> ID .)
    DOT             reduce using rule 126 (primary_expression -> ID .)
    NEWLINE         reduce using rule 126 (primary_expression -> ID .)
    END             reduce using rule 126 (primary_expression -> ID .)
    ELSIF           reduce using rule 126 (primary_expression -> ID .)
    ELSE            reduce using rule 126 (primary_expression -> ID .)
    WHEN            reduce using rule 126 (primary_expression -> ID .)
    LPAREN          shift and go to state 91
    STRING          shift and go to state 171
    CHAR            shift and go to state 172
    NIL             shift and go to state 173
    INT             shift and go to state 177
    INT8            shift and go to state 178
    INT16           shift and go to state 179
    INT32           shift and go to state 180
    INT64           shift and go to state 181
    INT128          shift and go to state 182
    UINT8           shift and go to state 183
    UINT16          shift and go to state 184
    UINT32          shift and go to state 185
    UINT64          shift and go to state 186
    UINT128         shift and go to state 187
    FLOAT           shift and go to state 188
    FLOAT32         shift and go to state 189
    FLOAT64         shift and go to state 190
    BOOL            shift and go to state 191

  ! ASSIGN          [ reduce using rule 126 (primary_expression -> ID .) ]

    types                          shift and go to state 168
    integer                        shift and go to state 174
    float                          shift and go to state 175
    boolean                        shift and go to state 176

state 108

    (24) module -> MODULE ID NEWLINE statements . END

    END             shift and go to state 192


state 109

    (128) statements -> statement .
    (129) statements -> statement . NEWLINE statements

  ! shift/reduce conflict for NEWLINE resolved as shift
    END             reduce using rule 128 (statements -> statement .)
    ELSIF           reduce using rule 128 (statements -> statement .)
    ELSE            reduce using rule 128 (statements -> statement .)
    WHEN            reduce using rule 128 (statements -> statement .)
    NEWLINE         shift and go to state 193

  ! NEWLINE         [ reduce using rule 128 (statements -> statement .) ]


state 110

    (130) statement -> expression .
    (154) iterator -> expression . DOT MULTI statements_block
    (155) iterator -> expression . DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> expression . DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block

    NEWLINE         reduce using rule 130 (statement -> expression .)
    END             reduce using rule 130 (statement -> expression .)
    ELSIF           reduce using rule 130 (statement -> expression .)
    ELSE            reduce using rule 130 (statement -> expression .)
    WHEN            reduce using rule 130 (statement -> expression .)
    DOT             shift and go to state 194


state 111

    (131) statement -> control_structure .

    NEWLINE         reduce using rule 131 (statement -> control_structure .)
    END             reduce using rule 131 (statement -> control_structure .)
    ELSIF           reduce using rule 131 (statement -> control_structure .)
    ELSE            reduce using rule 131 (statement -> control_structure .)
    WHEN            reduce using rule 131 (statement -> control_structure .)


state 112

    (132) statement -> variable_declaration .

    NEWLINE         reduce using rule 132 (statement -> variable_declaration .)
    END             reduce using rule 132 (statement -> variable_declaration .)
    ELSIF           reduce using rule 132 (statement -> variable_declaration .)
    ELSE            reduce using rule 132 (statement -> variable_declaration .)
    WHEN            reduce using rule 132 (statement -> variable_declaration .)


state 113

    (133) control_structure -> conditional .

    NEWLINE         reduce using rule 133 (control_structure -> conditional .)
    END             reduce using rule 133 (control_structure -> conditional .)
    ELSIF           reduce using rule 133 (control_structure -> conditional .)
    ELSE            reduce using rule 133 (control_structure -> conditional .)
    WHEN            reduce using rule 133 (control_structure -> conditional .)


state 114

    (134) control_structure -> loop_structure .

    NEWLINE         reduce using rule 134 (control_structure -> loop_structure .)
    END             reduce using rule 134 (control_structure -> loop_structure .)
    ELSIF           reduce using rule 134 (control_structure -> loop_structure .)
    ELSE            reduce using rule 134 (control_structure -> loop_structure .)
    WHEN            reduce using rule 134 (control_structure -> loop_structure .)


state 115

    (135) control_structure -> case_structure .

    NEWLINE         reduce using rule 135 (control_structure -> case_structure .)
    END             reduce using rule 135 (control_structure -> case_structure .)
    ELSIF           reduce using rule 135 (control_structure -> case_structure .)
    ELSE            reduce using rule 135 (control_structure -> case_structure .)
    WHEN            reduce using rule 135 (control_structure -> case_structure .)


state 116

    (136) control_structure -> return_statement .

    NEWLINE         reduce using rule 136 (control_structure -> return_statement .)
    END             reduce using rule 136 (control_structure -> return_statement .)
    ELSIF           reduce using rule 136 (control_structure -> return_statement .)
    ELSE            reduce using rule 136 (control_structure -> return_statement .)
    WHEN            reduce using rule 136 (control_structure -> return_statement .)


state 117

    (137) control_structure -> break_statement .

    NEWLINE         reduce using rule 137 (control_structure -> break_statement .)
    END             reduce using rule 137 (control_structure -> break_statement .)
    ELSIF           reduce using rule 137 (control_structure -> break_statement .)
    ELSE            reduce using rule 137 (control_structure -> break_statement .)
    WHEN            reduce using rule 137 (control_structure -> break_statement .)


state 118

    (138) control_structure -> next_statement .

    NEWLINE         reduce using rule 138 (control_structure -> next_statement .)
    END             reduce using rule 138 (control_structure -> next_statement .)
    ELSIF           reduce using rule 138 (control_structure -> next_statement .)
    ELSE            reduce using rule 138 (control_structure -> next_statement .)
    WHEN            reduce using rule 138 (control_structure -> next_statement .)


state 119

    (139) conditional -> if_statement .

    NEWLINE         reduce using rule 139 (conditional -> if_statement .)
    END             reduce using rule 139 (conditional -> if_statement .)
    ELSIF           reduce using rule 139 (conditional -> if_statement .)
    ELSE            reduce using rule 139 (conditional -> if_statement .)
    WHEN            reduce using rule 139 (conditional -> if_statement .)


state 120

    (140) conditional -> unless_statement .

    NEWLINE         reduce using rule 140 (conditional -> unless_statement .)
    END             reduce using rule 140 (conditional -> unless_statement .)
    ELSIF           reduce using rule 140 (conditional -> unless_statement .)
    ELSE            reduce using rule 140 (conditional -> unless_statement .)
    WHEN            reduce using rule 140 (conditional -> unless_statement .)


state 121

    (147) loop_structure -> while .

    NEWLINE         reduce using rule 147 (loop_structure -> while .)
    END             reduce using rule 147 (loop_structure -> while .)
    ELSIF           reduce using rule 147 (loop_structure -> while .)
    ELSE            reduce using rule 147 (loop_structure -> while .)
    WHEN            reduce using rule 147 (loop_structure -> while .)


state 122

    (148) loop_structure -> until .

    NEWLINE         reduce using rule 148 (loop_structure -> until .)
    END             reduce using rule 148 (loop_structure -> until .)
    ELSIF           reduce using rule 148 (loop_structure -> until .)
    ELSE            reduce using rule 148 (loop_structure -> until .)
    WHEN            reduce using rule 148 (loop_structure -> until .)


state 123

    (149) loop_structure -> loop .

    NEWLINE         reduce using rule 149 (loop_structure -> loop .)
    END             reduce using rule 149 (loop_structure -> loop .)
    ELSIF           reduce using rule 149 (loop_structure -> loop .)
    ELSE            reduce using rule 149 (loop_structure -> loop .)
    WHEN            reduce using rule 149 (loop_structure -> loop .)


state 124

    (150) loop_structure -> iterator .

    NEWLINE         reduce using rule 150 (loop_structure -> iterator .)
    END             reduce using rule 150 (loop_structure -> iterator .)
    ELSIF           reduce using rule 150 (loop_structure -> iterator .)
    ELSE            reduce using rule 150 (loop_structure -> iterator .)
    WHEN            reduce using rule 150 (loop_structure -> iterator .)


state 125

    (157) case_structure -> CASE . expression when_list opt_else END
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 195
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 126

    (160) return_statement -> RETURN . opt_expression
    (163) opt_expression -> . expression
    (164) opt_expression -> . empty
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (166) empty -> .
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 166 (empty -> .)
    END             reduce using rule 166 (empty -> .)
    ELSIF           reduce using rule 166 (empty -> .)
    ELSE            reduce using rule 166 (empty -> .)
    WHEN            reduce using rule 166 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    opt_expression                 shift and go to state 196
    expression                     shift and go to state 197
    empty                          shift and go to state 198
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 127

    (161) break_statement -> BREAK . opt_expression
    (163) opt_expression -> . expression
    (164) opt_expression -> . empty
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (166) empty -> .
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 166 (empty -> .)
    END             reduce using rule 166 (empty -> .)
    ELSIF           reduce using rule 166 (empty -> .)
    ELSE            reduce using rule 166 (empty -> .)
    WHEN            reduce using rule 166 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    opt_expression                 shift and go to state 199
    expression                     shift and go to state 197
    empty                          shift and go to state 198
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 128

    (162) next_statement -> NEXT . opt_expression
    (163) opt_expression -> . expression
    (164) opt_expression -> . empty
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (166) empty -> .
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    NEWLINE         reduce using rule 166 (empty -> .)
    END             reduce using rule 166 (empty -> .)
    ELSIF           reduce using rule 166 (empty -> .)
    ELSE            reduce using rule 166 (empty -> .)
    WHEN            reduce using rule 166 (empty -> .)
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    opt_expression                 shift and go to state 200
    expression                     shift and go to state 197
    empty                          shift and go to state 198
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 129

    (141) if_statement -> IF . expression statements_block opt_elsif opt_else END
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 201
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 130

    (142) unless_statement -> UNLESS . expression statements_block opt_else END
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 202
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 131

    (151) while -> WHILE . expression statements_block
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 203
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 132

    (152) until -> UNTIL . expression statements_block
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 204
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 133

    (153) loop -> LOOP . statements_block
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    statements_block               shift and go to state 205
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    expression                     shift and go to state 110
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 134

    (32) argument -> ID .
    (33) argument -> ID . COLON types
    (34) argument -> ID . ASSIGN expression
    (35) argument -> ID . COLON types ASSIGN expression

    COMMA           reduce using rule 32 (argument -> ID .)
    RPAREN          reduce using rule 32 (argument -> ID .)
    COLON           shift and go to state 207
    ASSIGN          shift and go to state 208


state 135

    (27) function -> DEF ID LPAREN opt_argument_list . RPAREN opt_return_type statements_block END

    RPAREN          shift and go to state 209


state 136

    (28) opt_argument_list -> argument_list .

    RPAREN          reduce using rule 28 (opt_argument_list -> argument_list .)


state 137

    (29) opt_argument_list -> empty .

    RPAREN          reduce using rule 29 (opt_argument_list -> empty .)


state 138

    (30) argument_list -> argument .
    (31) argument_list -> argument . COMMA argument_list

    RPAREN          reduce using rule 30 (argument_list -> argument .)
    COMMA           shift and go to state 210


state 139

    (87) ternary_expression -> logical_or_expression QMARK expression . TCOLON expression

    TCOLON          shift and go to state 211


state 140

    (90) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (92) logical_and_expression -> logical_and_expression . AND equality_expression

    QMARK           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONSTANT        reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MODULE          reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DEF             reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    $end            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOT             reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEWLINE         reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    END             reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TCOLON          reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHEN            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSIF           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSE            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ID              reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CASE            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RETURN          reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    BREAK           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEXT            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNDERSCORE      reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASTERISK        reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IF              reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNLESS          reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHILE           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNTIL           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LOOP            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LPAREN          reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACKET        reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTNUMBER       reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FLOATNUMBER     reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRING          reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CHAR            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRUE            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FALSE           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    PLUS            reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MINUS           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    EXCLAMATION     reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TILDE           reduce using rule 90 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 74


state 141

    (79) assignment_expression -> assignment_target ASSIGN expression .

    CONSTANT        reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    MODULE          reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    DEF             reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    $end            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    RPAREN          reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    COMMA           reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    RBRACKET        reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    DOT             reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    NEWLINE         reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    END             reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    TCOLON          reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    WHEN            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSIF           reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    ELSE            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    ID              reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    CASE            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    RETURN          reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    BREAK           reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    NEXT            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    UNDERSCORE      reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    ASTERISK        reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    IF              reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    UNLESS          reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    WHILE           reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    UNTIL           reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    LOOP            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    LPAREN          reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    LBRACKET        reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    INTNUMBER       reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    FLOATNUMBER     reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    STRING          reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    CHAR            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    TRUE            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    FALSE           reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    PLUS            reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    MINUS           reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    EXCLAMATION     reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)
    TILDE           reduce using rule 79 (assignment_expression -> assignment_target ASSIGN expression .)


state 142

    (80) assignment_expression -> assignment_target PLUS_ASSIGN expression .

    CONSTANT        reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MODULE          reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DEF             reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    $end            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    COMMA           reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DOT             reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEWLINE         reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    END             reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TCOLON          reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHEN            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSE            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ID              reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CASE            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RETURN          reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    BREAK           reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEXT            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ASTERISK        reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    IF              reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNLESS          reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHILE           reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNTIL           reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LOOP            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LPAREN          reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    STRING          reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CHAR            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TRUE            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FALSE           reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    PLUS            reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MINUS           reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TILDE           reduce using rule 80 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)


state 143

    (81) assignment_expression -> assignment_target MINUS_ASSIGN expression .

    CONSTANT        reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MODULE          reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DEF             reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    $end            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    COMMA           reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DOT             reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEWLINE         reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    END             reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TCOLON          reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHEN            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSE            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ID              reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CASE            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RETURN          reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    BREAK           reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEXT            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ASTERISK        reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    IF              reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNLESS          reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHILE           reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNTIL           reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LOOP            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LPAREN          reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    STRING          reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CHAR            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TRUE            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FALSE           reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    PLUS            reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MINUS           reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TILDE           reduce using rule 81 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)


state 144

    (82) assignment_expression -> assignment_target MULTI_ASSIGN expression .

    CONSTANT        reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MODULE          reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DEF             reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    $end            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RPAREN          reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    COMMA           reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACKET        reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DOT             reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEWLINE         reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    END             reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TCOLON          reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHEN            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSIF           reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSE            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ID              reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CASE            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RETURN          reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    BREAK           reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEXT            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNDERSCORE      reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ASTERISK        reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    IF              reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNLESS          reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHILE           reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNTIL           reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LOOP            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LPAREN          reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACKET        reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTNUMBER       reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    STRING          reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CHAR            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TRUE            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FALSE           reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    PLUS            reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MINUS           reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    EXCLAMATION     reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TILDE           reduce using rule 82 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)


state 145

    (83) assignment_expression -> assignment_target DIVIDE_ASSIGN expression .

    CONSTANT        reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MODULE          reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DEF             reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    $end            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACKET        reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DOT             reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEWLINE         reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    END             reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TCOLON          reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHEN            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ID              reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    BREAK           reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEXT            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNDERSCORE      reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ASTERISK        reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    IF              reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNLESS          reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHILE           reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNTIL           reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LOOP            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LPAREN          reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTNUMBER       reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CHAR            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TRUE            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FALSE           reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    PLUS            reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MINUS           reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    EXCLAMATION     reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TILDE           reduce using rule 83 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)


state 146

    (92) logical_and_expression -> logical_and_expression AND equality_expression .
    (94) equality_expression -> equality_expression . EQUAL relational_expression
    (95) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (96) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    QMARK           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONSTANT        reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MODULE          reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEF             reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    $end            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOT             reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEWLINE         reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    END             reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TCOLON          reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHEN            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSIF           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSE            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ID              reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CASE            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RETURN          reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    BREAK           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEXT            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNDERSCORE      reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASTERISK        reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IF              reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNLESS          reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHILE           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNTIL           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LOOP            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACKET        reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTNUMBER       reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOATNUMBER     reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRING          reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRUE            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FALSE           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    PLUS            reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MINUS           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EXCLAMATION     reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TILDE           reduce using rule 92 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQUAL           shift and go to state 77
    NOT_EQUAL       shift and go to state 78
    TIPO_EQUAL      shift and go to state 79


state 147

    (94) equality_expression -> equality_expression EQUAL relational_expression .
    (98) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (99) relational_expression -> relational_expression . LESS_THAN additive_expression
    (100) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (101) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    QMARK           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONSTANT        reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    MODULE          reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    DEF             reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    $end            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACKET        reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOT             reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEWLINE         reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    END             reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    TCOLON          reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHEN            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSIF           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSE            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    ID              reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    CASE            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    RETURN          reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    BREAK           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEXT            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    ASTERISK        reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    IF              reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNLESS          reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHILE           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNTIL           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOOP            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    LPAREN          reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACKET        reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTNUMBER       reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    CHAR            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    TRUE            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    FALSE           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    PLUS            reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    MINUS           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    TILDE           reduce using rule 94 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 86
    LESS_THAN       shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89


state 148

    (95) equality_expression -> equality_expression NOT_EQUAL relational_expression .
    (98) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (99) relational_expression -> relational_expression . LESS_THAN additive_expression
    (100) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (101) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    AND             reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    QMARK           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    OR              reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CONSTANT        reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MODULE          reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DEF             reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    $end            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RPAREN          reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    COMMA           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACKET        reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOT             reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEWLINE         reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    END             reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TCOLON          reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHEN            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSIF           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSE            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ID              reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CASE            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RETURN          reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    BREAK           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEXT            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ASTERISK        reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    IF              reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNLESS          reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHILE           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNTIL           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LOOP            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LPAREN          reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACKET        reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    STRING          reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CHAR            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TRUE            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FALSE           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    PLUS            reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MINUS           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TILDE           reduce using rule 95 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 86
    LESS_THAN       shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89


state 149

    (96) equality_expression -> equality_expression TIPO_EQUAL relational_expression .
    (98) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (99) relational_expression -> relational_expression . LESS_THAN additive_expression
    (100) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (101) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    AND             reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    QMARK           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    OR              reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CONSTANT        reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MODULE          reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DEF             reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    $end            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RPAREN          reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    COMMA           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACKET        reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOT             reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEWLINE         reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    END             reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TCOLON          reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHEN            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSIF           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSE            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ID              reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CASE            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RETURN          reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    BREAK           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEXT            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ASTERISK        reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    IF              reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNLESS          reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHILE           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNTIL           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LOOP            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LPAREN          reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACKET        reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    STRING          reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CHAR            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TRUE            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FALSE           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    PLUS            reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MINUS           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TILDE           reduce using rule 96 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 86
    LESS_THAN       shift and go to state 87
    GREATER_EQUAL   shift and go to state 88
    LESS_EQUAL      shift and go to state 89


state 150

    (117) postfix_suffixes -> postfix_suffix postfix_suffixes .

    ASSIGN          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    PLUS_ASSIGN     reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MINUS_ASSIGN    reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MULTI_ASSIGN    reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DIVIDE_ASSIGN   reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    POTENCIACAO     reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MULTI           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DIVIDE          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MODULO          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    PLUS            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MINUS           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    GREATER_THAN    reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LESS_THAN       reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    GREATER_EQUAL   reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LESS_EQUAL      reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    EQUAL           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NOT_EQUAL       reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TIPO_EQUAL      reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    AND             reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    QMARK           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    OR              reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CONSTANT        reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    MODULE          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DEF             reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    $end            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RPAREN          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    COMMA           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RBRACKET        reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    DOT             reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NEWLINE         reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    END             reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TCOLON          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    WHEN            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ELSIF           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ELSE            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ID              reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CASE            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    RETURN          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    BREAK           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    NEXT            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNDERSCORE      reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    ASTERISK        reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    IF              reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNLESS          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    WHILE           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    UNTIL           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LOOP            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LPAREN          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    LBRACKET        reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    INTNUMBER       reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    FLOATNUMBER     reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    STRING          reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    CHAR            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TRUE            reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    FALSE           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    EXCLAMATION     reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)
    TILDE           reduce using rule 117 (postfix_suffixes -> postfix_suffix postfix_suffixes .)


state 151

    (119) postfix_suffix -> LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 212


state 152

    (120) postfix_suffix -> DOTDOT primary_expression .

    LBRACKET        reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    DOTDOT          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    DOTDOTDOT       reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    ASSIGN          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    PLUS_ASSIGN     reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    MINUS_ASSIGN    reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    MULTI_ASSIGN    reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    POTENCIACAO     reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    MULTI           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    DIVIDE          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    MODULO          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    PLUS            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    MINUS           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    GREATER_THAN    reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    LESS_THAN       reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    GREATER_EQUAL   reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    LESS_EQUAL      reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    EQUAL           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    NOT_EQUAL       reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    TIPO_EQUAL      reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    AND             reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    QMARK           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    OR              reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    CONSTANT        reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    MODULE          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    DEF             reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    $end            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    RPAREN          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    COMMA           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    RBRACKET        reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    DOT             reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    NEWLINE         reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    END             reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    TCOLON          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    WHEN            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    ELSIF           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    ELSE            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    ID              reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    CASE            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    RETURN          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    BREAK           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    NEXT            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    UNDERSCORE      reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    ASTERISK        reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    IF              reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    UNLESS          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    WHILE           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    UNTIL           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    LOOP            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    LPAREN          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    INTNUMBER       reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    FLOATNUMBER     reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    STRING          reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    CHAR            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    TRUE            reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    FALSE           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    EXCLAMATION     reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)
    TILDE           reduce using rule 120 (postfix_suffix -> DOTDOT primary_expression .)


state 153

    (121) postfix_suffix -> DOTDOTDOT primary_expression .

    LBRACKET        reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOTDOT          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOTDOTDOT       reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ASSIGN          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    PLUS_ASSIGN     reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MINUS_ASSIGN    reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MULTI_ASSIGN    reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DIVIDE_ASSIGN   reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    POTENCIACAO     reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MULTI           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DIVIDE          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MODULO          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    PLUS            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MINUS           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    GREATER_THAN    reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LESS_THAN       reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    GREATER_EQUAL   reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LESS_EQUAL      reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    EQUAL           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NOT_EQUAL       reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TIPO_EQUAL      reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    AND             reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    QMARK           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    OR              reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CONSTANT        reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    MODULE          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DEF             reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    $end            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RPAREN          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    COMMA           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RBRACKET        reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    DOT             reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NEWLINE         reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    END             reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TCOLON          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    WHEN            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ELSIF           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ELSE            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ID              reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CASE            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    RETURN          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    BREAK           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    NEXT            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNDERSCORE      reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    ASTERISK        reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    IF              reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNLESS          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    WHILE           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    UNTIL           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LOOP            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    LPAREN          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    INTNUMBER       reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    FLOATNUMBER     reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    STRING          reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    CHAR            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TRUE            reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    FALSE           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    EXCLAMATION     reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)
    TILDE           reduce using rule 121 (postfix_suffix -> DOTDOTDOT primary_expression .)


state 154

    (98) relational_expression -> relational_expression GREATER_THAN additive_expression .
    (103) additive_expression -> additive_expression . PLUS multiplicative_expression
    (104) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_THAN       reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EQUAL           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    AND             reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    QMARK           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    OR              reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CONSTANT        reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    MODULE          reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DEF             reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    $end            reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RPAREN          reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    COMMA           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACKET        reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOT             reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEWLINE         reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    END             reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TCOLON          reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHEN            reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSIF           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSE            reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ID              reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CASE            reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RETURN          reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    BREAK           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEXT            reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNDERSCORE      reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ASTERISK        reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    IF              reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNLESS          reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHILE           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNTIL           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LOOP            reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LPAREN          reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACKET        reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTNUMBER       reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    STRING          reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CHAR            reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TRUE            reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FALSE           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EXCLAMATION     reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TILDE           reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93

  ! PLUS            [ reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 98 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]


state 155

    (99) relational_expression -> relational_expression LESS_THAN additive_expression .
    (103) additive_expression -> additive_expression . PLUS multiplicative_expression
    (104) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_THAN       reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EQUAL           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    AND             reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    QMARK           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    OR              reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CONSTANT        reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    MODULE          reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DEF             reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    $end            reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RPAREN          reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    COMMA           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACKET        reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOT             reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEWLINE         reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    END             reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TCOLON          reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHEN            reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSIF           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSE            reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ID              reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CASE            reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RETURN          reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    BREAK           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEXT            reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNDERSCORE      reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ASTERISK        reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    IF              reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNLESS          reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHILE           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNTIL           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LOOP            reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LPAREN          reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACKET        reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTNUMBER       reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    STRING          reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CHAR            reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TRUE            reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FALSE           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EXCLAMATION     reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TILDE           reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93

  ! PLUS            [ reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 99 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]


state 156

    (100) relational_expression -> relational_expression GREATER_EQUAL additive_expression .
    (103) additive_expression -> additive_expression . PLUS multiplicative_expression
    (104) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EQUAL           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    AND             reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    QMARK           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    OR              reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CONSTANT        reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    MODULE          reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DEF             reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    $end            reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RPAREN          reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    COMMA           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACKET        reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOT             reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEWLINE         reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    END             reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TCOLON          reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHEN            reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSIF           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSE            reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ID              reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CASE            reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RETURN          reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    BREAK           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEXT            reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ASTERISK        reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    IF              reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNLESS          reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHILE           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNTIL           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LOOP            reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LPAREN          reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACKET        reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    STRING          reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CHAR            reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TRUE            reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FALSE           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TILDE           reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93

  ! PLUS            [ reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 100 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]


state 157

    (101) relational_expression -> relational_expression LESS_EQUAL additive_expression .
    (103) additive_expression -> additive_expression . PLUS multiplicative_expression
    (104) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EQUAL           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    AND             reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    QMARK           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    OR              reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CONSTANT        reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    MODULE          reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DEF             reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    $end            reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RPAREN          reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    COMMA           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACKET        reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOT             reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEWLINE         reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    END             reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TCOLON          reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHEN            reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSIF           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSE            reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ID              reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CASE            reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RETURN          reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    BREAK           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEXT            reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ASTERISK        reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    IF              reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNLESS          reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHILE           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNTIL           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LOOP            reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LPAREN          reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACKET        reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    STRING          reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CHAR            reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TRUE            reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FALSE           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TILDE           reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    PLUS            shift and go to state 92
    MINUS           shift and go to state 93

  ! PLUS            [ reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 101 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]


state 158

    (122) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOTDOT       reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    PLUS_ASSIGN     reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    MINUS_ASSIGN    reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    MULTI_ASSIGN    reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    POTENCIACAO     reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    MULTI           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    TIPO_EQUAL      reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    CONSTANT        reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    TCOLON          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    NEXT            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    UNDERSCORE      reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    INTNUMBER       reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 122 (primary_expression -> LPAREN expression RPAREN .)


state 159

    (65) function_call -> ID LPAREN opt_expression_list . RPAREN

    RPAREN          shift and go to state 213


state 160

    (103) additive_expression -> additive_expression PLUS multiplicative_expression .
    (106) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (107) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (108) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QMARK           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONSTANT        reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MODULE          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DEF             reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    $end            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOT             reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEWLINE         reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    END             reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TCOLON          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHEN            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSIF           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ID              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CASE            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RETURN          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BREAK           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEXT            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASTERISK        reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IF              reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNLESS          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHILE           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNTIL           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOOP            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LPAREN          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACKET        reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTNUMBER       reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CHAR            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TRUE            reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FALSE           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TILDE           reduce using rule 103 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTI           shift and go to state 98
    DIVIDE          shift and go to state 99
    MODULO          shift and go to state 100


state 161

    (104) additive_expression -> additive_expression MINUS multiplicative_expression .
    (106) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (107) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (108) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QMARK           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONSTANT        reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MODULE          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DEF             reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    $end            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOT             reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEWLINE         reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    END             reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TCOLON          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHEN            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSIF           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ID              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CASE            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RETURN          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BREAK           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEXT            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASTERISK        reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IF              reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNLESS          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHILE           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNTIL           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOOP            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LPAREN          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACKET        reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTNUMBER       reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRING          reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CHAR            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TRUE            reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FALSE           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TILDE           reduce using rule 104 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTI           shift and go to state 98
    DIVIDE          shift and go to state 99
    MODULO          shift and go to state 100


state 162

    (127) array_literal -> LBRACKET opt_expression_list RBRACKET .

    LBRACKET        reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOT          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOTDOT       reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASSIGN          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS_ASSIGN     reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS_ASSIGN    reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI_ASSIGN    reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    POTENCIACAO     reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULO          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_THAN    reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_THAN       reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_EQUAL   reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_EQUAL      reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EQUAL           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NOT_EQUAL       reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TIPO_EQUAL      reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    AND             reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    QMARK           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    OR              reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CONSTANT        reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULE          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DEF             reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    $end            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RPAREN          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    COMMA           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACKET        reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOT             reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEWLINE         reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    END             reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TCOLON          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHEN            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSIF           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSE            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ID              reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CASE            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RETURN          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    BREAK           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEXT            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNDERSCORE      reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASTERISK        reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    IF              reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNLESS          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHILE           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNTIL           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LOOP            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LPAREN          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTNUMBER       reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FLOATNUMBER     reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    STRING          reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CHAR            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TRUE            reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FALSE           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EXCLAMATION     reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TILDE           reduce using rule 127 (array_literal -> LBRACKET opt_expression_list RBRACKET .)


state 163

    (69) expression_list -> expression COMMA . expression_list
    (68) expression_list -> . expression
    (69) expression_list -> . expression COMMA expression_list
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 97
    expression_list                shift and go to state 214
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 164

    (106) multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .
    (110) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DIVIDE          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULO          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    PLUS            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MINUS           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_THAN    reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_THAN       reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_EQUAL      reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EQUAL           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NOT_EQUAL       reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    AND             reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    QMARK           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    OR              reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CONSTANT        reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULE          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DEF             reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    $end            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RPAREN          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    COMMA           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACKET        reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOT             reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEWLINE         reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    END             reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TCOLON          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHEN            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSIF           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSE            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ID              reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CASE            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RETURN          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    BREAK           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEXT            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNDERSCORE      reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ASTERISK        reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    IF              reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNLESS          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHILE           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNTIL           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LOOP            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LPAREN          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACKET        reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTNUMBER       reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FLOATNUMBER     reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    STRING          reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CHAR            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TRUE            reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FALSE           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EXCLAMATION     reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TILDE           reduce using rule 106 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    POTENCIACAO     shift and go to state 104


state 165

    (107) multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .
    (110) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DIVIDE          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULO          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    PLUS            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MINUS           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_THAN    reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_THAN       reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_EQUAL      reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EQUAL           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NOT_EQUAL       reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    AND             reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    QMARK           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    OR              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CONSTANT        reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULE          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DEF             reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    $end            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RPAREN          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    COMMA           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACKET        reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOT             reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEWLINE         reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    END             reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TCOLON          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHEN            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSIF           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSE            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ID              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CASE            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RETURN          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    BREAK           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEXT            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNDERSCORE      reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ASTERISK        reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    IF              reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNLESS          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHILE           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNTIL           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LOOP            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LPAREN          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACKET        reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTNUMBER       reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FLOATNUMBER     reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    STRING          reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CHAR            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TRUE            reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FALSE           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EXCLAMATION     reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TILDE           reduce using rule 107 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    POTENCIACAO     shift and go to state 104


state 166

    (108) multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .
    (110) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DIVIDE          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULO          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    PLUS            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MINUS           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_THAN    reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_THAN       reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_EQUAL      reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EQUAL           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NOT_EQUAL       reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    AND             reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    QMARK           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    OR              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CONSTANT        reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULE          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DEF             reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    $end            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RPAREN          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    COMMA           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACKET        reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOT             reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEWLINE         reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    END             reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TCOLON          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHEN            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSIF           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSE            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ID              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CASE            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RETURN          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    BREAK           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEXT            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNDERSCORE      reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ASTERISK        reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    IF              reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNLESS          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHILE           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNTIL           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LOOP            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LPAREN          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACKET        reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTNUMBER       reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FLOATNUMBER     reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    STRING          reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CHAR            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TRUE            reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FALSE           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EXCLAMATION     reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TILDE           reduce using rule 108 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    POTENCIACAO     shift and go to state 104


state 167

    (110) potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .

    POTENCIACAO     reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MULTI           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DIVIDE          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULO          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    PLUS            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MINUS           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_THAN    reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_THAN       reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_EQUAL   reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_EQUAL      reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EQUAL           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NOT_EQUAL       reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TIPO_EQUAL      reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    AND             reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    QMARK           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    OR              reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CONSTANT        reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULE          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DEF             reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    $end            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RPAREN          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    COMMA           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACKET        reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOT             reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEWLINE         reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    END             reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TCOLON          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHEN            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSIF           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSE            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ID              reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CASE            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RETURN          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    BREAK           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEXT            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNDERSCORE      reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ASTERISK        reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    IF              reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNLESS          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHILE           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNTIL           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LOOP            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LPAREN          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACKET        reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTNUMBER       reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FLOATNUMBER     reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    STRING          reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CHAR            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TRUE            reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FALSE           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EXCLAMATION     reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TILDE           reduce using rule 110 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)


state 168

    (70) variable_declaration -> ID types . ASSIGN expression

    ASSIGN          shift and go to state 215


state 169

    (71) variable_declaration -> ID ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 216
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 170

    (72) variable_declaration -> ID COMMA . list_of_identifiers ASSIGN expression COMMA list_of_values
    (73) list_of_identifiers -> . ID
    (74) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 217

    list_of_identifiers            shift and go to state 218

state 171

    (38) types -> STRING .

    ASSIGN          reduce using rule 38 (types -> STRING .)
    COMMA           reduce using rule 38 (types -> STRING .)
    RPAREN          reduce using rule 38 (types -> STRING .)
    ID              reduce using rule 38 (types -> STRING .)
    CASE            reduce using rule 38 (types -> STRING .)
    RETURN          reduce using rule 38 (types -> STRING .)
    BREAK           reduce using rule 38 (types -> STRING .)
    NEXT            reduce using rule 38 (types -> STRING .)
    UNDERSCORE      reduce using rule 38 (types -> STRING .)
    ASTERISK        reduce using rule 38 (types -> STRING .)
    IF              reduce using rule 38 (types -> STRING .)
    UNLESS          reduce using rule 38 (types -> STRING .)
    WHILE           reduce using rule 38 (types -> STRING .)
    UNTIL           reduce using rule 38 (types -> STRING .)
    LOOP            reduce using rule 38 (types -> STRING .)
    LPAREN          reduce using rule 38 (types -> STRING .)
    LBRACKET        reduce using rule 38 (types -> STRING .)
    INTNUMBER       reduce using rule 38 (types -> STRING .)
    FLOATNUMBER     reduce using rule 38 (types -> STRING .)
    STRING          reduce using rule 38 (types -> STRING .)
    CHAR            reduce using rule 38 (types -> STRING .)
    TRUE            reduce using rule 38 (types -> STRING .)
    FALSE           reduce using rule 38 (types -> STRING .)
    PLUS            reduce using rule 38 (types -> STRING .)
    MINUS           reduce using rule 38 (types -> STRING .)
    EXCLAMATION     reduce using rule 38 (types -> STRING .)
    TILDE           reduce using rule 38 (types -> STRING .)


state 172

    (39) types -> CHAR .

    ASSIGN          reduce using rule 39 (types -> CHAR .)
    COMMA           reduce using rule 39 (types -> CHAR .)
    RPAREN          reduce using rule 39 (types -> CHAR .)
    ID              reduce using rule 39 (types -> CHAR .)
    CASE            reduce using rule 39 (types -> CHAR .)
    RETURN          reduce using rule 39 (types -> CHAR .)
    BREAK           reduce using rule 39 (types -> CHAR .)
    NEXT            reduce using rule 39 (types -> CHAR .)
    UNDERSCORE      reduce using rule 39 (types -> CHAR .)
    ASTERISK        reduce using rule 39 (types -> CHAR .)
    IF              reduce using rule 39 (types -> CHAR .)
    UNLESS          reduce using rule 39 (types -> CHAR .)
    WHILE           reduce using rule 39 (types -> CHAR .)
    UNTIL           reduce using rule 39 (types -> CHAR .)
    LOOP            reduce using rule 39 (types -> CHAR .)
    LPAREN          reduce using rule 39 (types -> CHAR .)
    LBRACKET        reduce using rule 39 (types -> CHAR .)
    INTNUMBER       reduce using rule 39 (types -> CHAR .)
    FLOATNUMBER     reduce using rule 39 (types -> CHAR .)
    STRING          reduce using rule 39 (types -> CHAR .)
    CHAR            reduce using rule 39 (types -> CHAR .)
    TRUE            reduce using rule 39 (types -> CHAR .)
    FALSE           reduce using rule 39 (types -> CHAR .)
    PLUS            reduce using rule 39 (types -> CHAR .)
    MINUS           reduce using rule 39 (types -> CHAR .)
    EXCLAMATION     reduce using rule 39 (types -> CHAR .)
    TILDE           reduce using rule 39 (types -> CHAR .)


state 173

    (40) types -> NIL .

    ASSIGN          reduce using rule 40 (types -> NIL .)
    COMMA           reduce using rule 40 (types -> NIL .)
    RPAREN          reduce using rule 40 (types -> NIL .)
    ID              reduce using rule 40 (types -> NIL .)
    CASE            reduce using rule 40 (types -> NIL .)
    RETURN          reduce using rule 40 (types -> NIL .)
    BREAK           reduce using rule 40 (types -> NIL .)
    NEXT            reduce using rule 40 (types -> NIL .)
    UNDERSCORE      reduce using rule 40 (types -> NIL .)
    ASTERISK        reduce using rule 40 (types -> NIL .)
    IF              reduce using rule 40 (types -> NIL .)
    UNLESS          reduce using rule 40 (types -> NIL .)
    WHILE           reduce using rule 40 (types -> NIL .)
    UNTIL           reduce using rule 40 (types -> NIL .)
    LOOP            reduce using rule 40 (types -> NIL .)
    LPAREN          reduce using rule 40 (types -> NIL .)
    LBRACKET        reduce using rule 40 (types -> NIL .)
    INTNUMBER       reduce using rule 40 (types -> NIL .)
    FLOATNUMBER     reduce using rule 40 (types -> NIL .)
    STRING          reduce using rule 40 (types -> NIL .)
    CHAR            reduce using rule 40 (types -> NIL .)
    TRUE            reduce using rule 40 (types -> NIL .)
    FALSE           reduce using rule 40 (types -> NIL .)
    PLUS            reduce using rule 40 (types -> NIL .)
    MINUS           reduce using rule 40 (types -> NIL .)
    EXCLAMATION     reduce using rule 40 (types -> NIL .)
    TILDE           reduce using rule 40 (types -> NIL .)


state 174

    (41) types -> integer .

    ASSIGN          reduce using rule 41 (types -> integer .)
    COMMA           reduce using rule 41 (types -> integer .)
    RPAREN          reduce using rule 41 (types -> integer .)
    ID              reduce using rule 41 (types -> integer .)
    CASE            reduce using rule 41 (types -> integer .)
    RETURN          reduce using rule 41 (types -> integer .)
    BREAK           reduce using rule 41 (types -> integer .)
    NEXT            reduce using rule 41 (types -> integer .)
    UNDERSCORE      reduce using rule 41 (types -> integer .)
    ASTERISK        reduce using rule 41 (types -> integer .)
    IF              reduce using rule 41 (types -> integer .)
    UNLESS          reduce using rule 41 (types -> integer .)
    WHILE           reduce using rule 41 (types -> integer .)
    UNTIL           reduce using rule 41 (types -> integer .)
    LOOP            reduce using rule 41 (types -> integer .)
    LPAREN          reduce using rule 41 (types -> integer .)
    LBRACKET        reduce using rule 41 (types -> integer .)
    INTNUMBER       reduce using rule 41 (types -> integer .)
    FLOATNUMBER     reduce using rule 41 (types -> integer .)
    STRING          reduce using rule 41 (types -> integer .)
    CHAR            reduce using rule 41 (types -> integer .)
    TRUE            reduce using rule 41 (types -> integer .)
    FALSE           reduce using rule 41 (types -> integer .)
    PLUS            reduce using rule 41 (types -> integer .)
    MINUS           reduce using rule 41 (types -> integer .)
    EXCLAMATION     reduce using rule 41 (types -> integer .)
    TILDE           reduce using rule 41 (types -> integer .)


state 175

    (42) types -> float .

    ASSIGN          reduce using rule 42 (types -> float .)
    COMMA           reduce using rule 42 (types -> float .)
    RPAREN          reduce using rule 42 (types -> float .)
    ID              reduce using rule 42 (types -> float .)
    CASE            reduce using rule 42 (types -> float .)
    RETURN          reduce using rule 42 (types -> float .)
    BREAK           reduce using rule 42 (types -> float .)
    NEXT            reduce using rule 42 (types -> float .)
    UNDERSCORE      reduce using rule 42 (types -> float .)
    ASTERISK        reduce using rule 42 (types -> float .)
    IF              reduce using rule 42 (types -> float .)
    UNLESS          reduce using rule 42 (types -> float .)
    WHILE           reduce using rule 42 (types -> float .)
    UNTIL           reduce using rule 42 (types -> float .)
    LOOP            reduce using rule 42 (types -> float .)
    LPAREN          reduce using rule 42 (types -> float .)
    LBRACKET        reduce using rule 42 (types -> float .)
    INTNUMBER       reduce using rule 42 (types -> float .)
    FLOATNUMBER     reduce using rule 42 (types -> float .)
    STRING          reduce using rule 42 (types -> float .)
    CHAR            reduce using rule 42 (types -> float .)
    TRUE            reduce using rule 42 (types -> float .)
    FALSE           reduce using rule 42 (types -> float .)
    PLUS            reduce using rule 42 (types -> float .)
    MINUS           reduce using rule 42 (types -> float .)
    EXCLAMATION     reduce using rule 42 (types -> float .)
    TILDE           reduce using rule 42 (types -> float .)


state 176

    (43) types -> boolean .

    ASSIGN          reduce using rule 43 (types -> boolean .)
    COMMA           reduce using rule 43 (types -> boolean .)
    RPAREN          reduce using rule 43 (types -> boolean .)
    ID              reduce using rule 43 (types -> boolean .)
    CASE            reduce using rule 43 (types -> boolean .)
    RETURN          reduce using rule 43 (types -> boolean .)
    BREAK           reduce using rule 43 (types -> boolean .)
    NEXT            reduce using rule 43 (types -> boolean .)
    UNDERSCORE      reduce using rule 43 (types -> boolean .)
    ASTERISK        reduce using rule 43 (types -> boolean .)
    IF              reduce using rule 43 (types -> boolean .)
    UNLESS          reduce using rule 43 (types -> boolean .)
    WHILE           reduce using rule 43 (types -> boolean .)
    UNTIL           reduce using rule 43 (types -> boolean .)
    LOOP            reduce using rule 43 (types -> boolean .)
    LPAREN          reduce using rule 43 (types -> boolean .)
    LBRACKET        reduce using rule 43 (types -> boolean .)
    INTNUMBER       reduce using rule 43 (types -> boolean .)
    FLOATNUMBER     reduce using rule 43 (types -> boolean .)
    STRING          reduce using rule 43 (types -> boolean .)
    CHAR            reduce using rule 43 (types -> boolean .)
    TRUE            reduce using rule 43 (types -> boolean .)
    FALSE           reduce using rule 43 (types -> boolean .)
    PLUS            reduce using rule 43 (types -> boolean .)
    MINUS           reduce using rule 43 (types -> boolean .)
    EXCLAMATION     reduce using rule 43 (types -> boolean .)
    TILDE           reduce using rule 43 (types -> boolean .)


state 177

    (44) integer -> INT .

    ASSIGN          reduce using rule 44 (integer -> INT .)
    COMMA           reduce using rule 44 (integer -> INT .)
    RPAREN          reduce using rule 44 (integer -> INT .)
    ID              reduce using rule 44 (integer -> INT .)
    CASE            reduce using rule 44 (integer -> INT .)
    RETURN          reduce using rule 44 (integer -> INT .)
    BREAK           reduce using rule 44 (integer -> INT .)
    NEXT            reduce using rule 44 (integer -> INT .)
    UNDERSCORE      reduce using rule 44 (integer -> INT .)
    ASTERISK        reduce using rule 44 (integer -> INT .)
    IF              reduce using rule 44 (integer -> INT .)
    UNLESS          reduce using rule 44 (integer -> INT .)
    WHILE           reduce using rule 44 (integer -> INT .)
    UNTIL           reduce using rule 44 (integer -> INT .)
    LOOP            reduce using rule 44 (integer -> INT .)
    LPAREN          reduce using rule 44 (integer -> INT .)
    LBRACKET        reduce using rule 44 (integer -> INT .)
    INTNUMBER       reduce using rule 44 (integer -> INT .)
    FLOATNUMBER     reduce using rule 44 (integer -> INT .)
    STRING          reduce using rule 44 (integer -> INT .)
    CHAR            reduce using rule 44 (integer -> INT .)
    TRUE            reduce using rule 44 (integer -> INT .)
    FALSE           reduce using rule 44 (integer -> INT .)
    PLUS            reduce using rule 44 (integer -> INT .)
    MINUS           reduce using rule 44 (integer -> INT .)
    EXCLAMATION     reduce using rule 44 (integer -> INT .)
    TILDE           reduce using rule 44 (integer -> INT .)


state 178

    (45) integer -> INT8 .

    ASSIGN          reduce using rule 45 (integer -> INT8 .)
    COMMA           reduce using rule 45 (integer -> INT8 .)
    RPAREN          reduce using rule 45 (integer -> INT8 .)
    ID              reduce using rule 45 (integer -> INT8 .)
    CASE            reduce using rule 45 (integer -> INT8 .)
    RETURN          reduce using rule 45 (integer -> INT8 .)
    BREAK           reduce using rule 45 (integer -> INT8 .)
    NEXT            reduce using rule 45 (integer -> INT8 .)
    UNDERSCORE      reduce using rule 45 (integer -> INT8 .)
    ASTERISK        reduce using rule 45 (integer -> INT8 .)
    IF              reduce using rule 45 (integer -> INT8 .)
    UNLESS          reduce using rule 45 (integer -> INT8 .)
    WHILE           reduce using rule 45 (integer -> INT8 .)
    UNTIL           reduce using rule 45 (integer -> INT8 .)
    LOOP            reduce using rule 45 (integer -> INT8 .)
    LPAREN          reduce using rule 45 (integer -> INT8 .)
    LBRACKET        reduce using rule 45 (integer -> INT8 .)
    INTNUMBER       reduce using rule 45 (integer -> INT8 .)
    FLOATNUMBER     reduce using rule 45 (integer -> INT8 .)
    STRING          reduce using rule 45 (integer -> INT8 .)
    CHAR            reduce using rule 45 (integer -> INT8 .)
    TRUE            reduce using rule 45 (integer -> INT8 .)
    FALSE           reduce using rule 45 (integer -> INT8 .)
    PLUS            reduce using rule 45 (integer -> INT8 .)
    MINUS           reduce using rule 45 (integer -> INT8 .)
    EXCLAMATION     reduce using rule 45 (integer -> INT8 .)
    TILDE           reduce using rule 45 (integer -> INT8 .)


state 179

    (46) integer -> INT16 .

    ASSIGN          reduce using rule 46 (integer -> INT16 .)
    COMMA           reduce using rule 46 (integer -> INT16 .)
    RPAREN          reduce using rule 46 (integer -> INT16 .)
    ID              reduce using rule 46 (integer -> INT16 .)
    CASE            reduce using rule 46 (integer -> INT16 .)
    RETURN          reduce using rule 46 (integer -> INT16 .)
    BREAK           reduce using rule 46 (integer -> INT16 .)
    NEXT            reduce using rule 46 (integer -> INT16 .)
    UNDERSCORE      reduce using rule 46 (integer -> INT16 .)
    ASTERISK        reduce using rule 46 (integer -> INT16 .)
    IF              reduce using rule 46 (integer -> INT16 .)
    UNLESS          reduce using rule 46 (integer -> INT16 .)
    WHILE           reduce using rule 46 (integer -> INT16 .)
    UNTIL           reduce using rule 46 (integer -> INT16 .)
    LOOP            reduce using rule 46 (integer -> INT16 .)
    LPAREN          reduce using rule 46 (integer -> INT16 .)
    LBRACKET        reduce using rule 46 (integer -> INT16 .)
    INTNUMBER       reduce using rule 46 (integer -> INT16 .)
    FLOATNUMBER     reduce using rule 46 (integer -> INT16 .)
    STRING          reduce using rule 46 (integer -> INT16 .)
    CHAR            reduce using rule 46 (integer -> INT16 .)
    TRUE            reduce using rule 46 (integer -> INT16 .)
    FALSE           reduce using rule 46 (integer -> INT16 .)
    PLUS            reduce using rule 46 (integer -> INT16 .)
    MINUS           reduce using rule 46 (integer -> INT16 .)
    EXCLAMATION     reduce using rule 46 (integer -> INT16 .)
    TILDE           reduce using rule 46 (integer -> INT16 .)


state 180

    (47) integer -> INT32 .

    ASSIGN          reduce using rule 47 (integer -> INT32 .)
    COMMA           reduce using rule 47 (integer -> INT32 .)
    RPAREN          reduce using rule 47 (integer -> INT32 .)
    ID              reduce using rule 47 (integer -> INT32 .)
    CASE            reduce using rule 47 (integer -> INT32 .)
    RETURN          reduce using rule 47 (integer -> INT32 .)
    BREAK           reduce using rule 47 (integer -> INT32 .)
    NEXT            reduce using rule 47 (integer -> INT32 .)
    UNDERSCORE      reduce using rule 47 (integer -> INT32 .)
    ASTERISK        reduce using rule 47 (integer -> INT32 .)
    IF              reduce using rule 47 (integer -> INT32 .)
    UNLESS          reduce using rule 47 (integer -> INT32 .)
    WHILE           reduce using rule 47 (integer -> INT32 .)
    UNTIL           reduce using rule 47 (integer -> INT32 .)
    LOOP            reduce using rule 47 (integer -> INT32 .)
    LPAREN          reduce using rule 47 (integer -> INT32 .)
    LBRACKET        reduce using rule 47 (integer -> INT32 .)
    INTNUMBER       reduce using rule 47 (integer -> INT32 .)
    FLOATNUMBER     reduce using rule 47 (integer -> INT32 .)
    STRING          reduce using rule 47 (integer -> INT32 .)
    CHAR            reduce using rule 47 (integer -> INT32 .)
    TRUE            reduce using rule 47 (integer -> INT32 .)
    FALSE           reduce using rule 47 (integer -> INT32 .)
    PLUS            reduce using rule 47 (integer -> INT32 .)
    MINUS           reduce using rule 47 (integer -> INT32 .)
    EXCLAMATION     reduce using rule 47 (integer -> INT32 .)
    TILDE           reduce using rule 47 (integer -> INT32 .)


state 181

    (48) integer -> INT64 .

    ASSIGN          reduce using rule 48 (integer -> INT64 .)
    COMMA           reduce using rule 48 (integer -> INT64 .)
    RPAREN          reduce using rule 48 (integer -> INT64 .)
    ID              reduce using rule 48 (integer -> INT64 .)
    CASE            reduce using rule 48 (integer -> INT64 .)
    RETURN          reduce using rule 48 (integer -> INT64 .)
    BREAK           reduce using rule 48 (integer -> INT64 .)
    NEXT            reduce using rule 48 (integer -> INT64 .)
    UNDERSCORE      reduce using rule 48 (integer -> INT64 .)
    ASTERISK        reduce using rule 48 (integer -> INT64 .)
    IF              reduce using rule 48 (integer -> INT64 .)
    UNLESS          reduce using rule 48 (integer -> INT64 .)
    WHILE           reduce using rule 48 (integer -> INT64 .)
    UNTIL           reduce using rule 48 (integer -> INT64 .)
    LOOP            reduce using rule 48 (integer -> INT64 .)
    LPAREN          reduce using rule 48 (integer -> INT64 .)
    LBRACKET        reduce using rule 48 (integer -> INT64 .)
    INTNUMBER       reduce using rule 48 (integer -> INT64 .)
    FLOATNUMBER     reduce using rule 48 (integer -> INT64 .)
    STRING          reduce using rule 48 (integer -> INT64 .)
    CHAR            reduce using rule 48 (integer -> INT64 .)
    TRUE            reduce using rule 48 (integer -> INT64 .)
    FALSE           reduce using rule 48 (integer -> INT64 .)
    PLUS            reduce using rule 48 (integer -> INT64 .)
    MINUS           reduce using rule 48 (integer -> INT64 .)
    EXCLAMATION     reduce using rule 48 (integer -> INT64 .)
    TILDE           reduce using rule 48 (integer -> INT64 .)


state 182

    (49) integer -> INT128 .

    ASSIGN          reduce using rule 49 (integer -> INT128 .)
    COMMA           reduce using rule 49 (integer -> INT128 .)
    RPAREN          reduce using rule 49 (integer -> INT128 .)
    ID              reduce using rule 49 (integer -> INT128 .)
    CASE            reduce using rule 49 (integer -> INT128 .)
    RETURN          reduce using rule 49 (integer -> INT128 .)
    BREAK           reduce using rule 49 (integer -> INT128 .)
    NEXT            reduce using rule 49 (integer -> INT128 .)
    UNDERSCORE      reduce using rule 49 (integer -> INT128 .)
    ASTERISK        reduce using rule 49 (integer -> INT128 .)
    IF              reduce using rule 49 (integer -> INT128 .)
    UNLESS          reduce using rule 49 (integer -> INT128 .)
    WHILE           reduce using rule 49 (integer -> INT128 .)
    UNTIL           reduce using rule 49 (integer -> INT128 .)
    LOOP            reduce using rule 49 (integer -> INT128 .)
    LPAREN          reduce using rule 49 (integer -> INT128 .)
    LBRACKET        reduce using rule 49 (integer -> INT128 .)
    INTNUMBER       reduce using rule 49 (integer -> INT128 .)
    FLOATNUMBER     reduce using rule 49 (integer -> INT128 .)
    STRING          reduce using rule 49 (integer -> INT128 .)
    CHAR            reduce using rule 49 (integer -> INT128 .)
    TRUE            reduce using rule 49 (integer -> INT128 .)
    FALSE           reduce using rule 49 (integer -> INT128 .)
    PLUS            reduce using rule 49 (integer -> INT128 .)
    MINUS           reduce using rule 49 (integer -> INT128 .)
    EXCLAMATION     reduce using rule 49 (integer -> INT128 .)
    TILDE           reduce using rule 49 (integer -> INT128 .)


state 183

    (50) integer -> UINT8 .

    ASSIGN          reduce using rule 50 (integer -> UINT8 .)
    COMMA           reduce using rule 50 (integer -> UINT8 .)
    RPAREN          reduce using rule 50 (integer -> UINT8 .)
    ID              reduce using rule 50 (integer -> UINT8 .)
    CASE            reduce using rule 50 (integer -> UINT8 .)
    RETURN          reduce using rule 50 (integer -> UINT8 .)
    BREAK           reduce using rule 50 (integer -> UINT8 .)
    NEXT            reduce using rule 50 (integer -> UINT8 .)
    UNDERSCORE      reduce using rule 50 (integer -> UINT8 .)
    ASTERISK        reduce using rule 50 (integer -> UINT8 .)
    IF              reduce using rule 50 (integer -> UINT8 .)
    UNLESS          reduce using rule 50 (integer -> UINT8 .)
    WHILE           reduce using rule 50 (integer -> UINT8 .)
    UNTIL           reduce using rule 50 (integer -> UINT8 .)
    LOOP            reduce using rule 50 (integer -> UINT8 .)
    LPAREN          reduce using rule 50 (integer -> UINT8 .)
    LBRACKET        reduce using rule 50 (integer -> UINT8 .)
    INTNUMBER       reduce using rule 50 (integer -> UINT8 .)
    FLOATNUMBER     reduce using rule 50 (integer -> UINT8 .)
    STRING          reduce using rule 50 (integer -> UINT8 .)
    CHAR            reduce using rule 50 (integer -> UINT8 .)
    TRUE            reduce using rule 50 (integer -> UINT8 .)
    FALSE           reduce using rule 50 (integer -> UINT8 .)
    PLUS            reduce using rule 50 (integer -> UINT8 .)
    MINUS           reduce using rule 50 (integer -> UINT8 .)
    EXCLAMATION     reduce using rule 50 (integer -> UINT8 .)
    TILDE           reduce using rule 50 (integer -> UINT8 .)


state 184

    (51) integer -> UINT16 .

    ASSIGN          reduce using rule 51 (integer -> UINT16 .)
    COMMA           reduce using rule 51 (integer -> UINT16 .)
    RPAREN          reduce using rule 51 (integer -> UINT16 .)
    ID              reduce using rule 51 (integer -> UINT16 .)
    CASE            reduce using rule 51 (integer -> UINT16 .)
    RETURN          reduce using rule 51 (integer -> UINT16 .)
    BREAK           reduce using rule 51 (integer -> UINT16 .)
    NEXT            reduce using rule 51 (integer -> UINT16 .)
    UNDERSCORE      reduce using rule 51 (integer -> UINT16 .)
    ASTERISK        reduce using rule 51 (integer -> UINT16 .)
    IF              reduce using rule 51 (integer -> UINT16 .)
    UNLESS          reduce using rule 51 (integer -> UINT16 .)
    WHILE           reduce using rule 51 (integer -> UINT16 .)
    UNTIL           reduce using rule 51 (integer -> UINT16 .)
    LOOP            reduce using rule 51 (integer -> UINT16 .)
    LPAREN          reduce using rule 51 (integer -> UINT16 .)
    LBRACKET        reduce using rule 51 (integer -> UINT16 .)
    INTNUMBER       reduce using rule 51 (integer -> UINT16 .)
    FLOATNUMBER     reduce using rule 51 (integer -> UINT16 .)
    STRING          reduce using rule 51 (integer -> UINT16 .)
    CHAR            reduce using rule 51 (integer -> UINT16 .)
    TRUE            reduce using rule 51 (integer -> UINT16 .)
    FALSE           reduce using rule 51 (integer -> UINT16 .)
    PLUS            reduce using rule 51 (integer -> UINT16 .)
    MINUS           reduce using rule 51 (integer -> UINT16 .)
    EXCLAMATION     reduce using rule 51 (integer -> UINT16 .)
    TILDE           reduce using rule 51 (integer -> UINT16 .)


state 185

    (52) integer -> UINT32 .

    ASSIGN          reduce using rule 52 (integer -> UINT32 .)
    COMMA           reduce using rule 52 (integer -> UINT32 .)
    RPAREN          reduce using rule 52 (integer -> UINT32 .)
    ID              reduce using rule 52 (integer -> UINT32 .)
    CASE            reduce using rule 52 (integer -> UINT32 .)
    RETURN          reduce using rule 52 (integer -> UINT32 .)
    BREAK           reduce using rule 52 (integer -> UINT32 .)
    NEXT            reduce using rule 52 (integer -> UINT32 .)
    UNDERSCORE      reduce using rule 52 (integer -> UINT32 .)
    ASTERISK        reduce using rule 52 (integer -> UINT32 .)
    IF              reduce using rule 52 (integer -> UINT32 .)
    UNLESS          reduce using rule 52 (integer -> UINT32 .)
    WHILE           reduce using rule 52 (integer -> UINT32 .)
    UNTIL           reduce using rule 52 (integer -> UINT32 .)
    LOOP            reduce using rule 52 (integer -> UINT32 .)
    LPAREN          reduce using rule 52 (integer -> UINT32 .)
    LBRACKET        reduce using rule 52 (integer -> UINT32 .)
    INTNUMBER       reduce using rule 52 (integer -> UINT32 .)
    FLOATNUMBER     reduce using rule 52 (integer -> UINT32 .)
    STRING          reduce using rule 52 (integer -> UINT32 .)
    CHAR            reduce using rule 52 (integer -> UINT32 .)
    TRUE            reduce using rule 52 (integer -> UINT32 .)
    FALSE           reduce using rule 52 (integer -> UINT32 .)
    PLUS            reduce using rule 52 (integer -> UINT32 .)
    MINUS           reduce using rule 52 (integer -> UINT32 .)
    EXCLAMATION     reduce using rule 52 (integer -> UINT32 .)
    TILDE           reduce using rule 52 (integer -> UINT32 .)


state 186

    (53) integer -> UINT64 .

    ASSIGN          reduce using rule 53 (integer -> UINT64 .)
    COMMA           reduce using rule 53 (integer -> UINT64 .)
    RPAREN          reduce using rule 53 (integer -> UINT64 .)
    ID              reduce using rule 53 (integer -> UINT64 .)
    CASE            reduce using rule 53 (integer -> UINT64 .)
    RETURN          reduce using rule 53 (integer -> UINT64 .)
    BREAK           reduce using rule 53 (integer -> UINT64 .)
    NEXT            reduce using rule 53 (integer -> UINT64 .)
    UNDERSCORE      reduce using rule 53 (integer -> UINT64 .)
    ASTERISK        reduce using rule 53 (integer -> UINT64 .)
    IF              reduce using rule 53 (integer -> UINT64 .)
    UNLESS          reduce using rule 53 (integer -> UINT64 .)
    WHILE           reduce using rule 53 (integer -> UINT64 .)
    UNTIL           reduce using rule 53 (integer -> UINT64 .)
    LOOP            reduce using rule 53 (integer -> UINT64 .)
    LPAREN          reduce using rule 53 (integer -> UINT64 .)
    LBRACKET        reduce using rule 53 (integer -> UINT64 .)
    INTNUMBER       reduce using rule 53 (integer -> UINT64 .)
    FLOATNUMBER     reduce using rule 53 (integer -> UINT64 .)
    STRING          reduce using rule 53 (integer -> UINT64 .)
    CHAR            reduce using rule 53 (integer -> UINT64 .)
    TRUE            reduce using rule 53 (integer -> UINT64 .)
    FALSE           reduce using rule 53 (integer -> UINT64 .)
    PLUS            reduce using rule 53 (integer -> UINT64 .)
    MINUS           reduce using rule 53 (integer -> UINT64 .)
    EXCLAMATION     reduce using rule 53 (integer -> UINT64 .)
    TILDE           reduce using rule 53 (integer -> UINT64 .)


state 187

    (54) integer -> UINT128 .

    ASSIGN          reduce using rule 54 (integer -> UINT128 .)
    COMMA           reduce using rule 54 (integer -> UINT128 .)
    RPAREN          reduce using rule 54 (integer -> UINT128 .)
    ID              reduce using rule 54 (integer -> UINT128 .)
    CASE            reduce using rule 54 (integer -> UINT128 .)
    RETURN          reduce using rule 54 (integer -> UINT128 .)
    BREAK           reduce using rule 54 (integer -> UINT128 .)
    NEXT            reduce using rule 54 (integer -> UINT128 .)
    UNDERSCORE      reduce using rule 54 (integer -> UINT128 .)
    ASTERISK        reduce using rule 54 (integer -> UINT128 .)
    IF              reduce using rule 54 (integer -> UINT128 .)
    UNLESS          reduce using rule 54 (integer -> UINT128 .)
    WHILE           reduce using rule 54 (integer -> UINT128 .)
    UNTIL           reduce using rule 54 (integer -> UINT128 .)
    LOOP            reduce using rule 54 (integer -> UINT128 .)
    LPAREN          reduce using rule 54 (integer -> UINT128 .)
    LBRACKET        reduce using rule 54 (integer -> UINT128 .)
    INTNUMBER       reduce using rule 54 (integer -> UINT128 .)
    FLOATNUMBER     reduce using rule 54 (integer -> UINT128 .)
    STRING          reduce using rule 54 (integer -> UINT128 .)
    CHAR            reduce using rule 54 (integer -> UINT128 .)
    TRUE            reduce using rule 54 (integer -> UINT128 .)
    FALSE           reduce using rule 54 (integer -> UINT128 .)
    PLUS            reduce using rule 54 (integer -> UINT128 .)
    MINUS           reduce using rule 54 (integer -> UINT128 .)
    EXCLAMATION     reduce using rule 54 (integer -> UINT128 .)
    TILDE           reduce using rule 54 (integer -> UINT128 .)


state 188

    (55) float -> FLOAT .

    ASSIGN          reduce using rule 55 (float -> FLOAT .)
    COMMA           reduce using rule 55 (float -> FLOAT .)
    RPAREN          reduce using rule 55 (float -> FLOAT .)
    ID              reduce using rule 55 (float -> FLOAT .)
    CASE            reduce using rule 55 (float -> FLOAT .)
    RETURN          reduce using rule 55 (float -> FLOAT .)
    BREAK           reduce using rule 55 (float -> FLOAT .)
    NEXT            reduce using rule 55 (float -> FLOAT .)
    UNDERSCORE      reduce using rule 55 (float -> FLOAT .)
    ASTERISK        reduce using rule 55 (float -> FLOAT .)
    IF              reduce using rule 55 (float -> FLOAT .)
    UNLESS          reduce using rule 55 (float -> FLOAT .)
    WHILE           reduce using rule 55 (float -> FLOAT .)
    UNTIL           reduce using rule 55 (float -> FLOAT .)
    LOOP            reduce using rule 55 (float -> FLOAT .)
    LPAREN          reduce using rule 55 (float -> FLOAT .)
    LBRACKET        reduce using rule 55 (float -> FLOAT .)
    INTNUMBER       reduce using rule 55 (float -> FLOAT .)
    FLOATNUMBER     reduce using rule 55 (float -> FLOAT .)
    STRING          reduce using rule 55 (float -> FLOAT .)
    CHAR            reduce using rule 55 (float -> FLOAT .)
    TRUE            reduce using rule 55 (float -> FLOAT .)
    FALSE           reduce using rule 55 (float -> FLOAT .)
    PLUS            reduce using rule 55 (float -> FLOAT .)
    MINUS           reduce using rule 55 (float -> FLOAT .)
    EXCLAMATION     reduce using rule 55 (float -> FLOAT .)
    TILDE           reduce using rule 55 (float -> FLOAT .)


state 189

    (56) float -> FLOAT32 .

    ASSIGN          reduce using rule 56 (float -> FLOAT32 .)
    COMMA           reduce using rule 56 (float -> FLOAT32 .)
    RPAREN          reduce using rule 56 (float -> FLOAT32 .)
    ID              reduce using rule 56 (float -> FLOAT32 .)
    CASE            reduce using rule 56 (float -> FLOAT32 .)
    RETURN          reduce using rule 56 (float -> FLOAT32 .)
    BREAK           reduce using rule 56 (float -> FLOAT32 .)
    NEXT            reduce using rule 56 (float -> FLOAT32 .)
    UNDERSCORE      reduce using rule 56 (float -> FLOAT32 .)
    ASTERISK        reduce using rule 56 (float -> FLOAT32 .)
    IF              reduce using rule 56 (float -> FLOAT32 .)
    UNLESS          reduce using rule 56 (float -> FLOAT32 .)
    WHILE           reduce using rule 56 (float -> FLOAT32 .)
    UNTIL           reduce using rule 56 (float -> FLOAT32 .)
    LOOP            reduce using rule 56 (float -> FLOAT32 .)
    LPAREN          reduce using rule 56 (float -> FLOAT32 .)
    LBRACKET        reduce using rule 56 (float -> FLOAT32 .)
    INTNUMBER       reduce using rule 56 (float -> FLOAT32 .)
    FLOATNUMBER     reduce using rule 56 (float -> FLOAT32 .)
    STRING          reduce using rule 56 (float -> FLOAT32 .)
    CHAR            reduce using rule 56 (float -> FLOAT32 .)
    TRUE            reduce using rule 56 (float -> FLOAT32 .)
    FALSE           reduce using rule 56 (float -> FLOAT32 .)
    PLUS            reduce using rule 56 (float -> FLOAT32 .)
    MINUS           reduce using rule 56 (float -> FLOAT32 .)
    EXCLAMATION     reduce using rule 56 (float -> FLOAT32 .)
    TILDE           reduce using rule 56 (float -> FLOAT32 .)


state 190

    (57) float -> FLOAT64 .

    ASSIGN          reduce using rule 57 (float -> FLOAT64 .)
    COMMA           reduce using rule 57 (float -> FLOAT64 .)
    RPAREN          reduce using rule 57 (float -> FLOAT64 .)
    ID              reduce using rule 57 (float -> FLOAT64 .)
    CASE            reduce using rule 57 (float -> FLOAT64 .)
    RETURN          reduce using rule 57 (float -> FLOAT64 .)
    BREAK           reduce using rule 57 (float -> FLOAT64 .)
    NEXT            reduce using rule 57 (float -> FLOAT64 .)
    UNDERSCORE      reduce using rule 57 (float -> FLOAT64 .)
    ASTERISK        reduce using rule 57 (float -> FLOAT64 .)
    IF              reduce using rule 57 (float -> FLOAT64 .)
    UNLESS          reduce using rule 57 (float -> FLOAT64 .)
    WHILE           reduce using rule 57 (float -> FLOAT64 .)
    UNTIL           reduce using rule 57 (float -> FLOAT64 .)
    LOOP            reduce using rule 57 (float -> FLOAT64 .)
    LPAREN          reduce using rule 57 (float -> FLOAT64 .)
    LBRACKET        reduce using rule 57 (float -> FLOAT64 .)
    INTNUMBER       reduce using rule 57 (float -> FLOAT64 .)
    FLOATNUMBER     reduce using rule 57 (float -> FLOAT64 .)
    STRING          reduce using rule 57 (float -> FLOAT64 .)
    CHAR            reduce using rule 57 (float -> FLOAT64 .)
    TRUE            reduce using rule 57 (float -> FLOAT64 .)
    FALSE           reduce using rule 57 (float -> FLOAT64 .)
    PLUS            reduce using rule 57 (float -> FLOAT64 .)
    MINUS           reduce using rule 57 (float -> FLOAT64 .)
    EXCLAMATION     reduce using rule 57 (float -> FLOAT64 .)
    TILDE           reduce using rule 57 (float -> FLOAT64 .)


state 191

    (58) boolean -> BOOL .

    ASSIGN          reduce using rule 58 (boolean -> BOOL .)
    COMMA           reduce using rule 58 (boolean -> BOOL .)
    RPAREN          reduce using rule 58 (boolean -> BOOL .)
    ID              reduce using rule 58 (boolean -> BOOL .)
    CASE            reduce using rule 58 (boolean -> BOOL .)
    RETURN          reduce using rule 58 (boolean -> BOOL .)
    BREAK           reduce using rule 58 (boolean -> BOOL .)
    NEXT            reduce using rule 58 (boolean -> BOOL .)
    UNDERSCORE      reduce using rule 58 (boolean -> BOOL .)
    ASTERISK        reduce using rule 58 (boolean -> BOOL .)
    IF              reduce using rule 58 (boolean -> BOOL .)
    UNLESS          reduce using rule 58 (boolean -> BOOL .)
    WHILE           reduce using rule 58 (boolean -> BOOL .)
    UNTIL           reduce using rule 58 (boolean -> BOOL .)
    LOOP            reduce using rule 58 (boolean -> BOOL .)
    LPAREN          reduce using rule 58 (boolean -> BOOL .)
    LBRACKET        reduce using rule 58 (boolean -> BOOL .)
    INTNUMBER       reduce using rule 58 (boolean -> BOOL .)
    FLOATNUMBER     reduce using rule 58 (boolean -> BOOL .)
    STRING          reduce using rule 58 (boolean -> BOOL .)
    CHAR            reduce using rule 58 (boolean -> BOOL .)
    TRUE            reduce using rule 58 (boolean -> BOOL .)
    FALSE           reduce using rule 58 (boolean -> BOOL .)
    PLUS            reduce using rule 58 (boolean -> BOOL .)
    MINUS           reduce using rule 58 (boolean -> BOOL .)
    EXCLAMATION     reduce using rule 58 (boolean -> BOOL .)
    TILDE           reduce using rule 58 (boolean -> BOOL .)


state 192

    (24) module -> MODULE ID NEWLINE statements END .

    MODULE          reduce using rule 24 (module -> MODULE ID NEWLINE statements END .)
    DEF             reduce using rule 24 (module -> MODULE ID NEWLINE statements END .)
    $end            reduce using rule 24 (module -> MODULE ID NEWLINE statements END .)


state 193

    (129) statements -> statement NEWLINE . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    statement                      shift and go to state 109
    statements                     shift and go to state 219
    expression                     shift and go to state 110
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 194

    (154) iterator -> expression DOT . MULTI statements_block
    (155) iterator -> expression DOT . EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> expression DOT . EACH LBRACE PIPE ID PIPE RBRACE statements_block

    MULTI           shift and go to state 220
    EACH            shift and go to state 221


state 195

    (157) case_structure -> CASE expression . when_list opt_else END
    (158) when_list -> . WHEN expression statements_block
    (159) when_list -> . when_list WHEN expression statements_block

    WHEN            shift and go to state 223

    when_list                      shift and go to state 222

state 196

    (160) return_statement -> RETURN opt_expression .

    NEWLINE         reduce using rule 160 (return_statement -> RETURN opt_expression .)
    END             reduce using rule 160 (return_statement -> RETURN opt_expression .)
    ELSIF           reduce using rule 160 (return_statement -> RETURN opt_expression .)
    ELSE            reduce using rule 160 (return_statement -> RETURN opt_expression .)
    WHEN            reduce using rule 160 (return_statement -> RETURN opt_expression .)


state 197

    (163) opt_expression -> expression .

    NEWLINE         reduce using rule 163 (opt_expression -> expression .)
    END             reduce using rule 163 (opt_expression -> expression .)
    ELSIF           reduce using rule 163 (opt_expression -> expression .)
    ELSE            reduce using rule 163 (opt_expression -> expression .)
    WHEN            reduce using rule 163 (opt_expression -> expression .)


state 198

    (164) opt_expression -> empty .

    NEWLINE         reduce using rule 164 (opt_expression -> empty .)
    END             reduce using rule 164 (opt_expression -> empty .)
    ELSIF           reduce using rule 164 (opt_expression -> empty .)
    ELSE            reduce using rule 164 (opt_expression -> empty .)
    WHEN            reduce using rule 164 (opt_expression -> empty .)


state 199

    (161) break_statement -> BREAK opt_expression .

    NEWLINE         reduce using rule 161 (break_statement -> BREAK opt_expression .)
    END             reduce using rule 161 (break_statement -> BREAK opt_expression .)
    ELSIF           reduce using rule 161 (break_statement -> BREAK opt_expression .)
    ELSE            reduce using rule 161 (break_statement -> BREAK opt_expression .)
    WHEN            reduce using rule 161 (break_statement -> BREAK opt_expression .)


state 200

    (162) next_statement -> NEXT opt_expression .

    NEWLINE         reduce using rule 162 (next_statement -> NEXT opt_expression .)
    END             reduce using rule 162 (next_statement -> NEXT opt_expression .)
    ELSIF           reduce using rule 162 (next_statement -> NEXT opt_expression .)
    ELSE            reduce using rule 162 (next_statement -> NEXT opt_expression .)
    WHEN            reduce using rule 162 (next_statement -> NEXT opt_expression .)


state 201

    (141) if_statement -> IF expression . statements_block opt_elsif opt_else END
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 224
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 202

    (142) unless_statement -> UNLESS expression . statements_block opt_else END
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 225
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 203

    (151) while -> WHILE expression . statements_block
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 226
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 204

    (152) until -> UNTIL expression . statements_block
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 227
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 205

    (153) loop -> LOOP statements_block .

    NEWLINE         reduce using rule 153 (loop -> LOOP statements_block .)
    END             reduce using rule 153 (loop -> LOOP statements_block .)
    ELSIF           reduce using rule 153 (loop -> LOOP statements_block .)
    ELSE            reduce using rule 153 (loop -> LOOP statements_block .)
    WHEN            reduce using rule 153 (loop -> LOOP statements_block .)


state 206

    (165) statements_block -> statements .

    NEWLINE         reduce using rule 165 (statements_block -> statements .)
    END             reduce using rule 165 (statements_block -> statements .)
    ELSIF           reduce using rule 165 (statements_block -> statements .)
    ELSE            reduce using rule 165 (statements_block -> statements .)
    WHEN            reduce using rule 165 (statements_block -> statements .)


state 207

    (33) argument -> ID COLON . types
    (35) argument -> ID COLON . types ASSIGN expression
    (38) types -> . STRING
    (39) types -> . CHAR
    (40) types -> . NIL
    (41) types -> . integer
    (42) types -> . float
    (43) types -> . boolean
    (44) integer -> . INT
    (45) integer -> . INT8
    (46) integer -> . INT16
    (47) integer -> . INT32
    (48) integer -> . INT64
    (49) integer -> . INT128
    (50) integer -> . UINT8
    (51) integer -> . UINT16
    (52) integer -> . UINT32
    (53) integer -> . UINT64
    (54) integer -> . UINT128
    (55) float -> . FLOAT
    (56) float -> . FLOAT32
    (57) float -> . FLOAT64
    (58) boolean -> . BOOL

    STRING          shift and go to state 171
    CHAR            shift and go to state 172
    NIL             shift and go to state 173
    INT             shift and go to state 177
    INT8            shift and go to state 178
    INT16           shift and go to state 179
    INT32           shift and go to state 180
    INT64           shift and go to state 181
    INT128          shift and go to state 182
    UINT8           shift and go to state 183
    UINT16          shift and go to state 184
    UINT32          shift and go to state 185
    UINT64          shift and go to state 186
    UINT128         shift and go to state 187
    FLOAT           shift and go to state 188
    FLOAT32         shift and go to state 189
    FLOAT64         shift and go to state 190
    BOOL            shift and go to state 191

    types                          shift and go to state 228
    integer                        shift and go to state 174
    float                          shift and go to state 175
    boolean                        shift and go to state 176

state 208

    (34) argument -> ID ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 229
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 209

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN . opt_return_type statements_block END
    (36) opt_return_type -> . COLON types
    (37) opt_return_type -> . empty
    (166) empty -> .

    COLON           shift and go to state 231
    ID              reduce using rule 166 (empty -> .)
    CASE            reduce using rule 166 (empty -> .)
    RETURN          reduce using rule 166 (empty -> .)
    BREAK           reduce using rule 166 (empty -> .)
    NEXT            reduce using rule 166 (empty -> .)
    UNDERSCORE      reduce using rule 166 (empty -> .)
    ASTERISK        reduce using rule 166 (empty -> .)
    IF              reduce using rule 166 (empty -> .)
    UNLESS          reduce using rule 166 (empty -> .)
    WHILE           reduce using rule 166 (empty -> .)
    UNTIL           reduce using rule 166 (empty -> .)
    LOOP            reduce using rule 166 (empty -> .)
    LPAREN          reduce using rule 166 (empty -> .)
    LBRACKET        reduce using rule 166 (empty -> .)
    INTNUMBER       reduce using rule 166 (empty -> .)
    FLOATNUMBER     reduce using rule 166 (empty -> .)
    STRING          reduce using rule 166 (empty -> .)
    CHAR            reduce using rule 166 (empty -> .)
    TRUE            reduce using rule 166 (empty -> .)
    FALSE           reduce using rule 166 (empty -> .)
    PLUS            reduce using rule 166 (empty -> .)
    MINUS           reduce using rule 166 (empty -> .)
    EXCLAMATION     reduce using rule 166 (empty -> .)
    TILDE           reduce using rule 166 (empty -> .)

    opt_return_type                shift and go to state 230
    empty                          shift and go to state 232

state 210

    (31) argument_list -> argument COMMA . argument_list
    (30) argument_list -> . argument
    (31) argument_list -> . argument COMMA argument_list
    (32) argument -> . ID
    (33) argument -> . ID COLON types
    (34) argument -> . ID ASSIGN expression
    (35) argument -> . ID COLON types ASSIGN expression

    ID              shift and go to state 134

    argument                       shift and go to state 138
    argument_list                  shift and go to state 233

state 211

    (87) ternary_expression -> logical_or_expression QMARK expression TCOLON . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    logical_or_expression          shift and go to state 35
    expression                     shift and go to state 234
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 212

    (119) postfix_suffix -> LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOTDOT          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOTDOTDOT       reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MULTI_ASSIGN    reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    POTENCIACAO     reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MULTI           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    GREATER_THAN    reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LESS_THAN       reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    GREATER_EQUAL   reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NOT_EQUAL       reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TIPO_EQUAL      reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    AND             reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    QMARK           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    OR              reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CONSTANT        reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    MODULE          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DEF             reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    $end            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    DOT             reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NEWLINE         reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    END             reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TCOLON          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    WHEN            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ELSIF           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ID              reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CASE            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    NEXT            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNDERSCORE      reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    ASTERISK        reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    IF              reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNLESS          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    UNTIL           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LOOP            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    INTNUMBER       reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    FLOATNUMBER     reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    STRING          reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    CHAR            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    EXCLAMATION     reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)
    TILDE           reduce using rule 119 (postfix_suffix -> LBRACKET expression RBRACKET .)


state 213

    (65) function_call -> ID LPAREN opt_expression_list RPAREN .

    LBRACKET        reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    DOTDOT          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    DOTDOTDOT       reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    ASSIGN          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    PLUS_ASSIGN     reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    MINUS_ASSIGN    reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    MULTI_ASSIGN    reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    DIVIDE_ASSIGN   reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    POTENCIACAO     reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    MULTI           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    DIVIDE          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    MODULO          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    PLUS            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    MINUS           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    GREATER_THAN    reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    LESS_THAN       reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    GREATER_EQUAL   reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    LESS_EQUAL      reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    EQUAL           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    NOT_EQUAL       reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    TIPO_EQUAL      reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    AND             reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    QMARK           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    OR              reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    CONSTANT        reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    MODULE          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    DEF             reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    $end            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    RPAREN          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    COMMA           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    RBRACKET        reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    DOT             reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    NEWLINE         reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    END             reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    TCOLON          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    WHEN            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    ELSIF           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    ELSE            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    ID              reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    CASE            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    RETURN          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    BREAK           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    NEXT            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    UNDERSCORE      reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    ASTERISK        reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    IF              reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    UNLESS          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    WHILE           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    UNTIL           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    LOOP            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    LPAREN          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    INTNUMBER       reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    FLOATNUMBER     reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    STRING          reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    CHAR            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    TRUE            reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    FALSE           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    EXCLAMATION     reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)
    TILDE           reduce using rule 65 (function_call -> ID LPAREN opt_expression_list RPAREN .)


state 214

    (69) expression_list -> expression COMMA expression_list .

    RBRACKET        reduce using rule 69 (expression_list -> expression COMMA expression_list .)
    RPAREN          reduce using rule 69 (expression_list -> expression COMMA expression_list .)


state 215

    (70) variable_declaration -> ID types ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 235
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 216

    (71) variable_declaration -> ID ASSIGN expression .

    NEWLINE         reduce using rule 71 (variable_declaration -> ID ASSIGN expression .)
    END             reduce using rule 71 (variable_declaration -> ID ASSIGN expression .)
    ELSIF           reduce using rule 71 (variable_declaration -> ID ASSIGN expression .)
    ELSE            reduce using rule 71 (variable_declaration -> ID ASSIGN expression .)
    WHEN            reduce using rule 71 (variable_declaration -> ID ASSIGN expression .)


state 217

    (73) list_of_identifiers -> ID .
    (74) list_of_identifiers -> ID . COMMA list_of_identifiers

    ASSIGN          reduce using rule 73 (list_of_identifiers -> ID .)
    COMMA           shift and go to state 236


state 218

    (72) variable_declaration -> ID COMMA list_of_identifiers . ASSIGN expression COMMA list_of_values

    ASSIGN          shift and go to state 237


state 219

    (129) statements -> statement NEWLINE statements .

    END             reduce using rule 129 (statements -> statement NEWLINE statements .)
    NEWLINE         reduce using rule 129 (statements -> statement NEWLINE statements .)
    ELSIF           reduce using rule 129 (statements -> statement NEWLINE statements .)
    ELSE            reduce using rule 129 (statements -> statement NEWLINE statements .)
    WHEN            reduce using rule 129 (statements -> statement NEWLINE statements .)


state 220

    (154) iterator -> expression DOT MULTI . statements_block
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 238
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 221

    (155) iterator -> expression DOT EACH . DO PIPE ID PIPE statements_block END
    (156) iterator -> expression DOT EACH . LBRACE PIPE ID PIPE RBRACE statements_block

    DO              shift and go to state 239
    LBRACE          shift and go to state 240


state 222

    (157) case_structure -> CASE expression when_list . opt_else END
    (159) when_list -> when_list . WHEN expression statements_block
    (145) opt_else -> . ELSE statements_block
    (146) opt_else -> . empty
    (166) empty -> .

    WHEN            shift and go to state 242
    ELSE            shift and go to state 243
    END             reduce using rule 166 (empty -> .)

    opt_else                       shift and go to state 241
    empty                          shift and go to state 244

state 223

    (158) when_list -> WHEN . expression statements_block
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 245
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 224

    (141) if_statement -> IF expression statements_block . opt_elsif opt_else END
    (143) opt_elsif -> . ELSIF expression statements_block opt_elsif
    (144) opt_elsif -> . empty
    (166) empty -> .

    ELSIF           shift and go to state 247
    ELSE            reduce using rule 166 (empty -> .)
    END             reduce using rule 166 (empty -> .)

    opt_elsif                      shift and go to state 246
    empty                          shift and go to state 248

state 225

    (142) unless_statement -> UNLESS expression statements_block . opt_else END
    (145) opt_else -> . ELSE statements_block
    (146) opt_else -> . empty
    (166) empty -> .

    ELSE            shift and go to state 243
    END             reduce using rule 166 (empty -> .)

    opt_else                       shift and go to state 249
    empty                          shift and go to state 244

state 226

    (151) while -> WHILE expression statements_block .

    NEWLINE         reduce using rule 151 (while -> WHILE expression statements_block .)
    END             reduce using rule 151 (while -> WHILE expression statements_block .)
    ELSIF           reduce using rule 151 (while -> WHILE expression statements_block .)
    ELSE            reduce using rule 151 (while -> WHILE expression statements_block .)
    WHEN            reduce using rule 151 (while -> WHILE expression statements_block .)


state 227

    (152) until -> UNTIL expression statements_block .

    NEWLINE         reduce using rule 152 (until -> UNTIL expression statements_block .)
    END             reduce using rule 152 (until -> UNTIL expression statements_block .)
    ELSIF           reduce using rule 152 (until -> UNTIL expression statements_block .)
    ELSE            reduce using rule 152 (until -> UNTIL expression statements_block .)
    WHEN            reduce using rule 152 (until -> UNTIL expression statements_block .)


state 228

    (33) argument -> ID COLON types .
    (35) argument -> ID COLON types . ASSIGN expression

    COMMA           reduce using rule 33 (argument -> ID COLON types .)
    RPAREN          reduce using rule 33 (argument -> ID COLON types .)
    ASSIGN          shift and go to state 250


state 229

    (34) argument -> ID ASSIGN expression .

    COMMA           reduce using rule 34 (argument -> ID ASSIGN expression .)
    RPAREN          reduce using rule 34 (argument -> ID ASSIGN expression .)


state 230

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type . statements_block END
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    statements_block               shift and go to state 251
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    expression                     shift and go to state 110
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 231

    (36) opt_return_type -> COLON . types
    (38) types -> . STRING
    (39) types -> . CHAR
    (40) types -> . NIL
    (41) types -> . integer
    (42) types -> . float
    (43) types -> . boolean
    (44) integer -> . INT
    (45) integer -> . INT8
    (46) integer -> . INT16
    (47) integer -> . INT32
    (48) integer -> . INT64
    (49) integer -> . INT128
    (50) integer -> . UINT8
    (51) integer -> . UINT16
    (52) integer -> . UINT32
    (53) integer -> . UINT64
    (54) integer -> . UINT128
    (55) float -> . FLOAT
    (56) float -> . FLOAT32
    (57) float -> . FLOAT64
    (58) boolean -> . BOOL

    STRING          shift and go to state 171
    CHAR            shift and go to state 172
    NIL             shift and go to state 173
    INT             shift and go to state 177
    INT8            shift and go to state 178
    INT16           shift and go to state 179
    INT32           shift and go to state 180
    INT64           shift and go to state 181
    INT128          shift and go to state 182
    UINT8           shift and go to state 183
    UINT16          shift and go to state 184
    UINT32          shift and go to state 185
    UINT64          shift and go to state 186
    UINT128         shift and go to state 187
    FLOAT           shift and go to state 188
    FLOAT32         shift and go to state 189
    FLOAT64         shift and go to state 190
    BOOL            shift and go to state 191

    types                          shift and go to state 252
    integer                        shift and go to state 174
    float                          shift and go to state 175
    boolean                        shift and go to state 176

state 232

    (37) opt_return_type -> empty .

    ID              reduce using rule 37 (opt_return_type -> empty .)
    CASE            reduce using rule 37 (opt_return_type -> empty .)
    RETURN          reduce using rule 37 (opt_return_type -> empty .)
    BREAK           reduce using rule 37 (opt_return_type -> empty .)
    NEXT            reduce using rule 37 (opt_return_type -> empty .)
    UNDERSCORE      reduce using rule 37 (opt_return_type -> empty .)
    ASTERISK        reduce using rule 37 (opt_return_type -> empty .)
    IF              reduce using rule 37 (opt_return_type -> empty .)
    UNLESS          reduce using rule 37 (opt_return_type -> empty .)
    WHILE           reduce using rule 37 (opt_return_type -> empty .)
    UNTIL           reduce using rule 37 (opt_return_type -> empty .)
    LOOP            reduce using rule 37 (opt_return_type -> empty .)
    LPAREN          reduce using rule 37 (opt_return_type -> empty .)
    LBRACKET        reduce using rule 37 (opt_return_type -> empty .)
    INTNUMBER       reduce using rule 37 (opt_return_type -> empty .)
    FLOATNUMBER     reduce using rule 37 (opt_return_type -> empty .)
    STRING          reduce using rule 37 (opt_return_type -> empty .)
    CHAR            reduce using rule 37 (opt_return_type -> empty .)
    TRUE            reduce using rule 37 (opt_return_type -> empty .)
    FALSE           reduce using rule 37 (opt_return_type -> empty .)
    PLUS            reduce using rule 37 (opt_return_type -> empty .)
    MINUS           reduce using rule 37 (opt_return_type -> empty .)
    EXCLAMATION     reduce using rule 37 (opt_return_type -> empty .)
    TILDE           reduce using rule 37 (opt_return_type -> empty .)


state 233

    (31) argument_list -> argument COMMA argument_list .

    RPAREN          reduce using rule 31 (argument_list -> argument COMMA argument_list .)


state 234

    (87) ternary_expression -> logical_or_expression QMARK expression TCOLON expression .

    CONSTANT        reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    MODULE          reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    DEF             reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    $end            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RPAREN          reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    COMMA           reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RBRACKET        reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    DOT             reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    NEWLINE         reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    END             reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TCOLON          reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    WHEN            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ELSIF           reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ELSE            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ID              reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    CASE            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    RETURN          reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    BREAK           reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    NEXT            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNDERSCORE      reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    ASTERISK        reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    IF              reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNLESS          reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    WHILE           reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    UNTIL           reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LOOP            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LPAREN          reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    LBRACKET        reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    INTNUMBER       reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    FLOATNUMBER     reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    STRING          reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    CHAR            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TRUE            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    FALSE           reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    PLUS            reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    MINUS           reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    EXCLAMATION     reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)
    TILDE           reduce using rule 87 (ternary_expression -> logical_or_expression QMARK expression TCOLON expression .)


state 235

    (70) variable_declaration -> ID types ASSIGN expression .

    NEWLINE         reduce using rule 70 (variable_declaration -> ID types ASSIGN expression .)
    END             reduce using rule 70 (variable_declaration -> ID types ASSIGN expression .)
    ELSIF           reduce using rule 70 (variable_declaration -> ID types ASSIGN expression .)
    ELSE            reduce using rule 70 (variable_declaration -> ID types ASSIGN expression .)
    WHEN            reduce using rule 70 (variable_declaration -> ID types ASSIGN expression .)


state 236

    (74) list_of_identifiers -> ID COMMA . list_of_identifiers
    (73) list_of_identifiers -> . ID
    (74) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 217

    list_of_identifiers            shift and go to state 253

state 237

    (72) variable_declaration -> ID COMMA list_of_identifiers ASSIGN . expression COMMA list_of_values
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 254
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 238

    (154) iterator -> expression DOT MULTI statements_block .

    NEWLINE         reduce using rule 154 (iterator -> expression DOT MULTI statements_block .)
    END             reduce using rule 154 (iterator -> expression DOT MULTI statements_block .)
    ELSIF           reduce using rule 154 (iterator -> expression DOT MULTI statements_block .)
    ELSE            reduce using rule 154 (iterator -> expression DOT MULTI statements_block .)
    WHEN            reduce using rule 154 (iterator -> expression DOT MULTI statements_block .)


state 239

    (155) iterator -> expression DOT EACH DO . PIPE ID PIPE statements_block END

    PIPE            shift and go to state 255


state 240

    (156) iterator -> expression DOT EACH LBRACE . PIPE ID PIPE RBRACE statements_block

    PIPE            shift and go to state 256


state 241

    (157) case_structure -> CASE expression when_list opt_else . END

    END             shift and go to state 257


state 242

    (159) when_list -> when_list WHEN . expression statements_block
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 258
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 243

    (145) opt_else -> ELSE . statements_block
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    statements_block               shift and go to state 259
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    expression                     shift and go to state 110
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 244

    (146) opt_else -> empty .

    END             reduce using rule 146 (opt_else -> empty .)


state 245

    (158) when_list -> WHEN expression . statements_block
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 260
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 246

    (141) if_statement -> IF expression statements_block opt_elsif . opt_else END
    (145) opt_else -> . ELSE statements_block
    (146) opt_else -> . empty
    (166) empty -> .

    ELSE            shift and go to state 243
    END             reduce using rule 166 (empty -> .)

    opt_else                       shift and go to state 261
    empty                          shift and go to state 244

state 247

    (143) opt_elsif -> ELSIF . expression statements_block opt_elsif
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 262
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 248

    (144) opt_elsif -> empty .

    ELSE            reduce using rule 144 (opt_elsif -> empty .)
    END             reduce using rule 144 (opt_elsif -> empty .)


state 249

    (142) unless_statement -> UNLESS expression statements_block opt_else . END

    END             shift and go to state 263


state 250

    (35) argument -> ID COLON types ASSIGN . expression
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 264
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 251

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block . END

    END             shift and go to state 265


state 252

    (36) opt_return_type -> COLON types .

    ID              reduce using rule 36 (opt_return_type -> COLON types .)
    CASE            reduce using rule 36 (opt_return_type -> COLON types .)
    RETURN          reduce using rule 36 (opt_return_type -> COLON types .)
    BREAK           reduce using rule 36 (opt_return_type -> COLON types .)
    NEXT            reduce using rule 36 (opt_return_type -> COLON types .)
    UNDERSCORE      reduce using rule 36 (opt_return_type -> COLON types .)
    ASTERISK        reduce using rule 36 (opt_return_type -> COLON types .)
    IF              reduce using rule 36 (opt_return_type -> COLON types .)
    UNLESS          reduce using rule 36 (opt_return_type -> COLON types .)
    WHILE           reduce using rule 36 (opt_return_type -> COLON types .)
    UNTIL           reduce using rule 36 (opt_return_type -> COLON types .)
    LOOP            reduce using rule 36 (opt_return_type -> COLON types .)
    LPAREN          reduce using rule 36 (opt_return_type -> COLON types .)
    LBRACKET        reduce using rule 36 (opt_return_type -> COLON types .)
    INTNUMBER       reduce using rule 36 (opt_return_type -> COLON types .)
    FLOATNUMBER     reduce using rule 36 (opt_return_type -> COLON types .)
    STRING          reduce using rule 36 (opt_return_type -> COLON types .)
    CHAR            reduce using rule 36 (opt_return_type -> COLON types .)
    TRUE            reduce using rule 36 (opt_return_type -> COLON types .)
    FALSE           reduce using rule 36 (opt_return_type -> COLON types .)
    PLUS            reduce using rule 36 (opt_return_type -> COLON types .)
    MINUS           reduce using rule 36 (opt_return_type -> COLON types .)
    EXCLAMATION     reduce using rule 36 (opt_return_type -> COLON types .)
    TILDE           reduce using rule 36 (opt_return_type -> COLON types .)


state 253

    (74) list_of_identifiers -> ID COMMA list_of_identifiers .

    ASSIGN          reduce using rule 74 (list_of_identifiers -> ID COMMA list_of_identifiers .)


state 254

    (72) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression . COMMA list_of_values

    COMMA           shift and go to state 266


state 255

    (155) iterator -> expression DOT EACH DO PIPE . ID PIPE statements_block END

    ID              shift and go to state 267


state 256

    (156) iterator -> expression DOT EACH LBRACE PIPE . ID PIPE RBRACE statements_block

    ID              shift and go to state 268


state 257

    (157) case_structure -> CASE expression when_list opt_else END .

    NEWLINE         reduce using rule 157 (case_structure -> CASE expression when_list opt_else END .)
    END             reduce using rule 157 (case_structure -> CASE expression when_list opt_else END .)
    ELSIF           reduce using rule 157 (case_structure -> CASE expression when_list opt_else END .)
    ELSE            reduce using rule 157 (case_structure -> CASE expression when_list opt_else END .)
    WHEN            reduce using rule 157 (case_structure -> CASE expression when_list opt_else END .)


state 258

    (159) when_list -> when_list WHEN expression . statements_block
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 269
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 259

    (145) opt_else -> ELSE statements_block .

    END             reduce using rule 145 (opt_else -> ELSE statements_block .)


state 260

    (158) when_list -> WHEN expression statements_block .

    WHEN            reduce using rule 158 (when_list -> WHEN expression statements_block .)
    ELSE            reduce using rule 158 (when_list -> WHEN expression statements_block .)
    END             reduce using rule 158 (when_list -> WHEN expression statements_block .)


state 261

    (141) if_statement -> IF expression statements_block opt_elsif opt_else . END

    END             shift and go to state 270


state 262

    (143) opt_elsif -> ELSIF expression . statements_block opt_elsif
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 271
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 263

    (142) unless_statement -> UNLESS expression statements_block opt_else END .

    NEWLINE         reduce using rule 142 (unless_statement -> UNLESS expression statements_block opt_else END .)
    END             reduce using rule 142 (unless_statement -> UNLESS expression statements_block opt_else END .)
    ELSIF           reduce using rule 142 (unless_statement -> UNLESS expression statements_block opt_else END .)
    ELSE            reduce using rule 142 (unless_statement -> UNLESS expression statements_block opt_else END .)
    WHEN            reduce using rule 142 (unless_statement -> UNLESS expression statements_block opt_else END .)


state 264

    (35) argument -> ID COLON types ASSIGN expression .

    COMMA           reduce using rule 35 (argument -> ID COLON types ASSIGN expression .)
    RPAREN          reduce using rule 35 (argument -> ID COLON types ASSIGN expression .)


state 265

    (27) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END .

    DEF             reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END .)
    $end            reduce using rule 27 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements_block END .)


state 266

    (72) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA . list_of_values
    (75) list_of_values -> . expression
    (76) list_of_values -> . expression COMMA list_of_values
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 272
    list_of_values                 shift and go to state 273
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 267

    (155) iterator -> expression DOT EACH DO PIPE ID . PIPE statements_block END

    PIPE            shift and go to state 274


state 268

    (156) iterator -> expression DOT EACH LBRACE PIPE ID . PIPE RBRACE statements_block

    PIPE            shift and go to state 275


state 269

    (159) when_list -> when_list WHEN expression statements_block .

    WHEN            reduce using rule 159 (when_list -> when_list WHEN expression statements_block .)
    ELSE            reduce using rule 159 (when_list -> when_list WHEN expression statements_block .)
    END             reduce using rule 159 (when_list -> when_list WHEN expression statements_block .)


state 270

    (141) if_statement -> IF expression statements_block opt_elsif opt_else END .

    NEWLINE         reduce using rule 141 (if_statement -> IF expression statements_block opt_elsif opt_else END .)
    END             reduce using rule 141 (if_statement -> IF expression statements_block opt_elsif opt_else END .)
    ELSIF           reduce using rule 141 (if_statement -> IF expression statements_block opt_elsif opt_else END .)
    ELSE            reduce using rule 141 (if_statement -> IF expression statements_block opt_elsif opt_else END .)
    WHEN            reduce using rule 141 (if_statement -> IF expression statements_block opt_elsif opt_else END .)


state 271

    (143) opt_elsif -> ELSIF expression statements_block . opt_elsif
    (143) opt_elsif -> . ELSIF expression statements_block opt_elsif
    (144) opt_elsif -> . empty
    (166) empty -> .

    ELSIF           shift and go to state 247
    ELSE            reduce using rule 166 (empty -> .)
    END             reduce using rule 166 (empty -> .)

    opt_elsif                      shift and go to state 276
    empty                          shift and go to state 248

state 272

    (75) list_of_values -> expression .
    (76) list_of_values -> expression . COMMA list_of_values

    NEWLINE         reduce using rule 75 (list_of_values -> expression .)
    END             reduce using rule 75 (list_of_values -> expression .)
    ELSIF           reduce using rule 75 (list_of_values -> expression .)
    ELSE            reduce using rule 75 (list_of_values -> expression .)
    WHEN            reduce using rule 75 (list_of_values -> expression .)
    COMMA           shift and go to state 277


state 273

    (72) variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .

    NEWLINE         reduce using rule 72 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    END             reduce using rule 72 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSIF           reduce using rule 72 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    ELSE            reduce using rule 72 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)
    WHEN            reduce using rule 72 (variable_declaration -> ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values .)


state 274

    (155) iterator -> expression DOT EACH DO PIPE ID PIPE . statements_block END
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 278
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 275

    (156) iterator -> expression DOT EACH LBRACE PIPE ID PIPE . RBRACE statements_block

    RBRACE          shift and go to state 279


state 276

    (143) opt_elsif -> ELSIF expression statements_block opt_elsif .

    ELSE            reduce using rule 143 (opt_elsif -> ELSIF expression statements_block opt_elsif .)
    END             reduce using rule 143 (opt_elsif -> ELSIF expression statements_block opt_elsif .)


state 277

    (76) list_of_values -> expression COMMA . list_of_values
    (75) list_of_values -> . expression
    (76) list_of_values -> . expression COMMA list_of_values
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    LPAREN          shift and go to state 44
    ID              shift and go to state 48
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 272
    list_of_values                 shift and go to state 280
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 278

    (155) iterator -> expression DOT EACH DO PIPE ID PIPE statements_block . END

    END             shift and go to state 281


state 279

    (156) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE . statements_block
    (165) statements_block -> . statements
    (128) statements -> . statement
    (129) statements -> . statement NEWLINE statements
    (130) statement -> . expression
    (131) statement -> . control_structure
    (132) statement -> . variable_declaration
    (77) expression -> . ternary_expression
    (78) expression -> . assignment_expression
    (133) control_structure -> . conditional
    (134) control_structure -> . loop_structure
    (135) control_structure -> . case_structure
    (136) control_structure -> . return_statement
    (137) control_structure -> . break_statement
    (138) control_structure -> . next_statement
    (70) variable_declaration -> . ID types ASSIGN expression
    (71) variable_declaration -> . ID ASSIGN expression
    (72) variable_declaration -> . ID COMMA list_of_identifiers ASSIGN expression COMMA list_of_values
    (87) ternary_expression -> . logical_or_expression QMARK expression TCOLON expression
    (88) ternary_expression -> . logical_or_expression
    (79) assignment_expression -> . assignment_target ASSIGN expression
    (80) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (81) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (82) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (83) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (139) conditional -> . if_statement
    (140) conditional -> . unless_statement
    (147) loop_structure -> . while
    (148) loop_structure -> . until
    (149) loop_structure -> . loop
    (150) loop_structure -> . iterator
    (157) case_structure -> . CASE expression when_list opt_else END
    (160) return_statement -> . RETURN opt_expression
    (161) break_statement -> . BREAK opt_expression
    (162) next_statement -> . NEXT opt_expression
    (89) logical_or_expression -> . logical_and_expression
    (90) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (84) assignment_target -> . postfix_expression
    (85) assignment_target -> . UNDERSCORE
    (86) assignment_target -> . ASTERISK assignment_target
    (141) if_statement -> . IF expression statements_block opt_elsif opt_else END
    (142) unless_statement -> . UNLESS expression statements_block opt_else END
    (151) while -> . WHILE expression statements_block
    (152) until -> . UNTIL expression statements_block
    (153) loop -> . LOOP statements_block
    (154) iterator -> . expression DOT MULTI statements_block
    (155) iterator -> . expression DOT EACH DO PIPE ID PIPE statements_block END
    (156) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
    (91) logical_and_expression -> . equality_expression
    (92) logical_and_expression -> . logical_and_expression AND equality_expression
    (116) postfix_expression -> . primary_expression postfix_suffixes
    (93) equality_expression -> . relational_expression
    (94) equality_expression -> . equality_expression EQUAL relational_expression
    (95) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (96) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (122) primary_expression -> . LPAREN expression RPAREN
    (123) primary_expression -> . array_literal
    (124) primary_expression -> . literal
    (125) primary_expression -> . function_call
    (126) primary_expression -> . ID
    (97) relational_expression -> . additive_expression
    (98) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (99) relational_expression -> . relational_expression LESS_THAN additive_expression
    (100) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (101) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (127) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (59) literal -> . INTNUMBER
    (60) literal -> . FLOATNUMBER
    (61) literal -> . STRING
    (62) literal -> . CHAR
    (63) literal -> . TRUE
    (64) literal -> . FALSE
    (65) function_call -> . ID LPAREN opt_expression_list RPAREN
    (102) additive_expression -> . multiplicative_expression
    (103) additive_expression -> . additive_expression PLUS multiplicative_expression
    (104) additive_expression -> . additive_expression MINUS multiplicative_expression
    (105) multiplicative_expression -> . potenciacao_expression
    (106) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (107) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (108) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (109) potenciacao_expression -> . unary_expression
    (110) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (111) unary_expression -> . PLUS unary_expression
    (112) unary_expression -> . MINUS unary_expression
    (113) unary_expression -> . EXCLAMATION unary_expression
    (114) unary_expression -> . TILDE unary_expression
    (115) unary_expression -> . postfix_expression

    ID              shift and go to state 107
    CASE            shift and go to state 125
    RETURN          shift and go to state 126
    BREAK           shift and go to state 127
    NEXT            shift and go to state 128
    UNDERSCORE      shift and go to state 39
    ASTERISK        shift and go to state 40
    IF              shift and go to state 129
    UNLESS          shift and go to state 130
    WHILE           shift and go to state 131
    UNTIL           shift and go to state 132
    LOOP            shift and go to state 133
    LPAREN          shift and go to state 44
    LBRACKET        shift and go to state 50
    INTNUMBER       shift and go to state 51
    FLOATNUMBER     shift and go to state 52
    STRING          shift and go to state 53
    CHAR            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63

    expression                     shift and go to state 110
    statements_block               shift and go to state 282
    statements                     shift and go to state 206
    statement                      shift and go to state 109
    control_structure              shift and go to state 111
    variable_declaration           shift and go to state 112
    ternary_expression             shift and go to state 33
    assignment_expression          shift and go to state 34
    conditional                    shift and go to state 113
    loop_structure                 shift and go to state 114
    case_structure                 shift and go to state 115
    return_statement               shift and go to state 116
    break_statement                shift and go to state 117
    next_statement                 shift and go to state 118
    logical_or_expression          shift and go to state 35
    assignment_target              shift and go to state 36
    if_statement                   shift and go to state 119
    unless_statement               shift and go to state 120
    while                          shift and go to state 121
    until                          shift and go to state 122
    loop                           shift and go to state 123
    iterator                       shift and go to state 124
    logical_and_expression         shift and go to state 37
    postfix_expression             shift and go to state 38
    equality_expression            shift and go to state 41
    primary_expression             shift and go to state 42
    relational_expression          shift and go to state 43
    array_literal                  shift and go to state 45
    literal                        shift and go to state 46
    function_call                  shift and go to state 47
    additive_expression            shift and go to state 49
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61

state 280

    (76) list_of_values -> expression COMMA list_of_values .

    NEWLINE         reduce using rule 76 (list_of_values -> expression COMMA list_of_values .)
    END             reduce using rule 76 (list_of_values -> expression COMMA list_of_values .)
    ELSIF           reduce using rule 76 (list_of_values -> expression COMMA list_of_values .)
    ELSE            reduce using rule 76 (list_of_values -> expression COMMA list_of_values .)
    WHEN            reduce using rule 76 (list_of_values -> expression COMMA list_of_values .)


state 281

    (155) iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .

    NEWLINE         reduce using rule 155 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)
    END             reduce using rule 155 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)
    ELSIF           reduce using rule 155 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)
    ELSE            reduce using rule 155 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)
    WHEN            reduce using rule 155 (iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END .)


state 282

    (156) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .

    NEWLINE         reduce using rule 156 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)
    END             reduce using rule 156 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)
    ELSIF           reduce using rule 156 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)
    ELSE            reduce using rule 156 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)
    WHEN            reduce using rule 156 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 42 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 49 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 49 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 81 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 107 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 109 resolved as shift
