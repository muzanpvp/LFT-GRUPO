Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    AT
    BEGIN
    BINNUMBER
    CLASS
    CLASSVAR
    CLASS_VAR
    DEFINE_BLOCO
    DOLAR_SIGN
    ENUM
    GLOBALVAR
    HEXNUMBER
    IN
    INCLUDE
    INSTANCEVAR
    INSTANCE_VAR
    INTERP_END
    INTERP_START
    LITERAL
    MACRO
    MODULO_ASSIGN
    NOT
    OCTNUMBER
    OF
    OR_ASSIGN
    OUT
    PASSA_ARGUMENTO
    POTENCIACAO_ASSIGN
    PRIVATE
    PROTECTED
    SAFE_CALL
    SCOPE
    SELECT
    SEMICOLON
    SHIFT_LEFT
    SHIFT_RIGHT
    SIZEOF
    STRUCT
    SYMBOL
    THEN
    TYPE
    TYPEOF
    UNINITIALIZED
    UNION
    VAR_GLOBAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> require_list constant_list module_list function_list
Rule 2     program -> require_list constant_list module_list
Rule 3     program -> require_list constant_list function_list
Rule 4     program -> require_list module_list function_list
Rule 5     program -> constant_list module_list function_list
Rule 6     program -> require_list constant_list
Rule 7     program -> require_list module_list
Rule 8     program -> constant_list module_list
Rule 9     program -> require_list function_list
Rule 10    program -> constant_list function_list
Rule 11    program -> module_list function_list
Rule 12    program -> require_list
Rule 13    program -> constant_list
Rule 14    program -> module_list
Rule 15    program -> function_list
Rule 16    program -> statements
Rule 17    require_list -> require require_list
Rule 18    require_list -> require
Rule 19    require -> REQUIRE STRING
Rule 20    constant_list -> constant constant_list
Rule 21    constant_list -> constant
Rule 22    constant -> CONSTANT ASSIGN expression
Rule 23    module_list -> module module_list
Rule 24    module_list -> module
Rule 25    module -> MODULE ID statements END
Rule 26    function_list -> function
Rule 27    function_list -> function function_list
Rule 28    function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
Rule 29    function -> DEF ID opt_return_type NEWLINE statements END
Rule 30    opt_argument_list -> argument_list
Rule 31    opt_argument_list -> empty
Rule 32    argument_list -> argument
Rule 33    argument_list -> argument COMMA argument_list
Rule 34    argument -> ID
Rule 35    argument -> ID COLON types
Rule 36    argument -> ID ASSIGN expression
Rule 37    argument -> ID COLON types ASSIGN expression
Rule 38    opt_return_type -> COLON types
Rule 39    opt_return_type -> empty
Rule 40    types -> STRING
Rule 41    types -> CHAR
Rule 42    types -> NIL
Rule 43    types -> integer
Rule 44    types -> float
Rule 45    types -> boolean
Rule 46    integer -> INT
Rule 47    integer -> INT8
Rule 48    integer -> INT16
Rule 49    integer -> INT32
Rule 50    integer -> INT64
Rule 51    integer -> INT128
Rule 52    integer -> UINT8
Rule 53    integer -> UINT16
Rule 54    integer -> UINT32
Rule 55    integer -> UINT64
Rule 56    integer -> UINT128
Rule 57    float -> FLOAT
Rule 58    float -> FLOAT32
Rule 59    float -> FLOAT64
Rule 60    boolean -> BOOL
Rule 61    literal -> INTNUMBER
Rule 62    literal -> FLOATNUMBER
Rule 63    literal -> STRING
Rule 64    literal -> CHAR
Rule 65    literal -> TRUE
Rule 66    literal -> FALSE
Rule 67    variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1
Rule 68    variable_declaration -> list_of_identifiers ASSIGN expression_list1
Rule 69    list_of_identifiers -> ID
Rule 70    list_of_identifiers -> ID COMMA list_of_identifiers
Rule 71    expression_list1 -> expression
Rule 72    expression_list1 -> expression COMMA expression_list1
Rule 73    function_call -> ID LPAREN expression_list RPAREN
Rule 74    function_call -> ID LPAREN RPAREN
Rule 75    opt_expression_list -> expression_list
Rule 76    opt_expression_list -> empty
Rule 77    expression_list -> expression
Rule 78    expression_list -> expression_list COMMA expression
Rule 79    statements -> statements_list
Rule 80    statements_list -> statement NEWLINE statements_list
Rule 81    statements_list -> statement
Rule 82    opt_statements -> statements_list
Rule 83    opt_statements -> empty
Rule 84    statement -> expression
Rule 85    statement -> control_structure
Rule 86    statement -> variable_declaration
Rule 87    statement -> function_call
Rule 88    control_structure -> conditional
Rule 89    control_structure -> loop_structure
Rule 90    control_structure -> case_structure
Rule 91    control_structure -> return_statement
Rule 92    control_structure -> break_statement
Rule 93    control_structure -> next_statement
Rule 94    conditional -> if_statement
Rule 95    conditional -> unless_statement
Rule 96    if_statement -> IF if_condition statements opt_elsif opt_else END
Rule 97    unless_statement -> UNLESS if_condition statements opt_else END
Rule 98    if_condition -> expression
Rule 99    if_condition -> expression LBRACE statements RBRACE
Rule 100   opt_elsif -> elsif_list
Rule 101   opt_elsif -> empty
Rule 102   elsif_list -> elsif_list elsif
Rule 103   elsif_list -> elsif
Rule 104   elsif -> ELSIF if_condition statements
Rule 105   opt_else -> ELSE statements
Rule 106   opt_else -> empty
Rule 107   loop_structure -> while
Rule 108   loop_structure -> until
Rule 109   loop_structure -> loop
Rule 110   loop_structure -> iterator
Rule 111   while -> WHILE expression statements
Rule 112   until -> UNTIL expression statements
Rule 113   loop -> LOOP DO statements END
Rule 114   loop -> LOOP LBRACE statements RBRACE
Rule 115   iterator -> expression DOT MULTI statements
Rule 116   iterator -> expression DOT EACH DO PIPE ID PIPE statements END
Rule 117   iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
Rule 118   case_structure -> CASE expression when_list opt_else END
Rule 119   when_list -> WHEN expression statements
Rule 120   when_list -> when_list WHEN expression statements
Rule 121   return_statement -> RETURN opt_expression
Rule 122   break_statement -> BREAK opt_expression
Rule 123   next_statement -> NEXT opt_expression
Rule 124   opt_expression -> expression
Rule 125   opt_expression -> empty
Rule 126   expression -> assignment_expression
Rule 127   assignment_expression -> assignment_target PLUS_ASSIGN expression
Rule 128   assignment_expression -> assignment_target MINUS_ASSIGN expression
Rule 129   assignment_expression -> assignment_target MULTI_ASSIGN expression
Rule 130   assignment_expression -> assignment_target DIVIDE_ASSIGN expression
Rule 131   assignment_expression -> ternary_expression
Rule 132   assignment_target -> ID
Rule 133   assignment_target -> UNDERSCORE
Rule 134   assignment_target -> ASTERISK assignment_target
Rule 135   ternary_expression -> range_expression QMARK expression TCOLON expression
Rule 136   ternary_expression -> range_expression
Rule 137   range_expression -> logical_or_expression DOTDOT logical_or_expression
Rule 138   range_expression -> logical_or_expression DOTDOTDOT logical_or_expression
Rule 139   range_expression -> logical_or_expression
Rule 140   logical_or_expression -> logical_and_expression
Rule 141   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 142   logical_and_expression -> equality_expression
Rule 143   logical_and_expression -> logical_and_expression AND equality_expression
Rule 144   equality_expression -> relational_expression
Rule 145   equality_expression -> equality_expression EQUAL relational_expression
Rule 146   equality_expression -> equality_expression NOT_EQUAL relational_expression
Rule 147   equality_expression -> equality_expression TIPO_EQUAL relational_expression
Rule 148   relational_expression -> additive_expression
Rule 149   relational_expression -> relational_expression GREATER_THAN additive_expression
Rule 150   relational_expression -> relational_expression LESS_THAN additive_expression
Rule 151   relational_expression -> relational_expression GREATER_EQUAL additive_expression
Rule 152   relational_expression -> relational_expression LESS_EQUAL additive_expression
Rule 153   additive_expression -> multiplicative_expression
Rule 154   additive_expression -> additive_expression PLUS multiplicative_expression
Rule 155   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 156   multiplicative_expression -> potenciacao_expression
Rule 157   multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression
Rule 158   multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression
Rule 159   multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression
Rule 160   potenciacao_expression -> unary_expression
Rule 161   potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression
Rule 162   unary_expression -> PLUS unary_expression
Rule 163   unary_expression -> MINUS unary_expression
Rule 164   unary_expression -> EXCLAMATION unary_expression
Rule 165   unary_expression -> TILDE unary_expression
Rule 166   unary_expression -> primary_expression
Rule 167   primary_expression -> LPAREN expression RPAREN
Rule 168   primary_expression -> array_literal
Rule 169   primary_expression -> literal
Rule 170   primary_expression -> ID
Rule 171   array_literal -> LBRACKET opt_expression_list RBRACKET
Rule 172   empty -> <empty>

Terminals, with rules where they appear

AND                  : 143
AS                   : 
ASSIGN               : 22 36 37 67 68
ASTERISK             : 134
AT                   : 
BEGIN                : 
BINNUMBER            : 
BOOL                 : 60
BREAK                : 122
CASE                 : 118
CHAR                 : 41 64
CLASS                : 
CLASSVAR             : 
CLASS_VAR            : 
COLON                : 35 37 38 67
COMMA                : 33 70 72 78
CONSTANT             : 22
DEF                  : 28 29
DEFINE_BLOCO         : 
DIVIDE               : 158
DIVIDE_ASSIGN        : 130
DO                   : 113 116
DOLAR_SIGN           : 
DOT                  : 115 116 117
DOTDOT               : 137
DOTDOTDOT            : 138
EACH                 : 116 117
ELSE                 : 105
ELSIF                : 104
END                  : 25 28 29 96 97 113 116 118
ENUM                 : 
EQUAL                : 145
EXCLAMATION          : 164
FALSE                : 66
FLOAT                : 57
FLOAT32              : 58
FLOAT64              : 59
FLOATNUMBER          : 62
GLOBALVAR            : 
GREATER_EQUAL        : 151
GREATER_THAN         : 149
HEXNUMBER            : 
ID                   : 25 28 29 34 35 36 37 69 70 73 74 116 117 132 170
IF                   : 96
IN                   : 
INCLUDE              : 
INSTANCEVAR          : 
INSTANCE_VAR         : 
INT                  : 46
INT128               : 51
INT16                : 48
INT32                : 49
INT64                : 50
INT8                 : 47
INTERP_END           : 
INTERP_START         : 
INTNUMBER            : 61
LBRACE               : 99 114 117
LBRACKET             : 171
LESS_EQUAL           : 152
LESS_THAN            : 150
LITERAL              : 
LOOP                 : 113 114
LPAREN               : 28 73 74 167
MACRO                : 
MINUS                : 155 163
MINUS_ASSIGN         : 128
MODULE               : 25
MODULO               : 159
MODULO_ASSIGN        : 
MULTI                : 115 157
MULTI_ASSIGN         : 129
NEWLINE              : 29 80
NEXT                 : 123
NIL                  : 42
NOT                  : 
NOT_EQUAL            : 146
OCTNUMBER            : 
OF                   : 
OR                   : 141
OR_ASSIGN            : 
OUT                  : 
PASSA_ARGUMENTO      : 
PIPE                 : 116 116 117 117
PLUS                 : 154 162
PLUS_ASSIGN          : 127
POTENCIACAO          : 161
POTENCIACAO_ASSIGN   : 
PRIVATE              : 
PROTECTED            : 
QMARK                : 135
RBRACE               : 99 114 117
RBRACKET             : 171
REQUIRE              : 19
RETURN               : 121
RPAREN               : 28 73 74 167
SAFE_CALL            : 
SCOPE                : 
SELECT               : 
SEMICOLON            : 
SHIFT_LEFT           : 
SHIFT_RIGHT          : 
SIZEOF               : 
STRING               : 19 40 63
STRUCT               : 
SYMBOL               : 
TCOLON               : 135
THEN                 : 
TILDE                : 165
TIPO_EQUAL           : 147
TRUE                 : 65
TYPE                 : 
TYPEOF               : 
UINT128              : 56
UINT16               : 53
UINT32               : 54
UINT64               : 55
UINT8                : 52
UNDERSCORE           : 133
UNINITIALIZED        : 
UNION                : 
UNLESS               : 97
UNTIL                : 112
VAR_GLOBAL           : 
WHEN                 : 119 120
WHILE                : 111
YIELD                : 
error                : 

Nonterminals, with rules where they appear

additive_expression  : 148 149 150 151 152 154 155
argument             : 32 33
argument_list        : 30 33
array_literal        : 168
assignment_expression : 126
assignment_target    : 127 128 129 130 134
boolean              : 45
break_statement      : 92
case_structure       : 90
conditional          : 88
constant             : 20 21
constant_list        : 1 2 3 5 6 8 10 13 20
control_structure    : 85
elsif                : 102 103
elsif_list           : 100 102
empty                : 31 39 76 83 101 106 125
equality_expression  : 142 143 145 146 147
expression           : 22 36 37 71 72 77 78 84 98 99 111 112 115 116 117 118 119 120 124 127 128 129 130 135 135 167
expression_list      : 73 75 78
expression_list1     : 67 68 72
float                : 44
function             : 26 27
function_call        : 87
function_list        : 1 3 4 5 9 10 11 15 27
if_condition         : 96 97 104
if_statement         : 94
integer              : 43
iterator             : 110
list_of_identifiers  : 67 68 70
literal              : 169
logical_and_expression : 140 141 143
logical_or_expression : 137 137 138 138 139 141
loop                 : 109
loop_structure       : 89
module               : 23 24
module_list          : 1 2 4 5 7 8 11 14 23
multiplicative_expression : 153 154 155 157 158 159
next_statement       : 93
opt_argument_list    : 28
opt_else             : 96 97 118
opt_elsif            : 96
opt_expression       : 121 122 123
opt_expression_list  : 171
opt_return_type      : 28 29
opt_statements       : 
potenciacao_expression : 156 157 158 159 161
primary_expression   : 166
program              : 0
range_expression     : 135 136
relational_expression : 144 145 146 147 149 150 151 152
require              : 17 18
require_list         : 1 2 3 4 6 7 9 12 17
return_statement     : 91
statement            : 80 81
statements           : 16 25 28 29 96 97 99 104 105 111 112 113 114 115 116 117 119 120
statements_list      : 79 80 82
ternary_expression   : 131
types                : 35 37 38 67
unary_expression     : 160 161 162 163 164 165
unless_statement     : 95
until                : 108
variable_declaration : 86
when_list            : 118 120
while                : 107

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . require_list constant_list module_list function_list
    (2) program -> . require_list constant_list module_list
    (3) program -> . require_list constant_list function_list
    (4) program -> . require_list module_list function_list
    (5) program -> . constant_list module_list function_list
    (6) program -> . require_list constant_list
    (7) program -> . require_list module_list
    (8) program -> . constant_list module_list
    (9) program -> . require_list function_list
    (10) program -> . constant_list function_list
    (11) program -> . module_list function_list
    (12) program -> . require_list
    (13) program -> . constant_list
    (14) program -> . module_list
    (15) program -> . function_list
    (16) program -> . statements
    (17) require_list -> . require require_list
    (18) require_list -> . require
    (20) constant_list -> . constant constant_list
    (21) constant_list -> . constant
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (79) statements -> . statements_list
    (19) require -> . REQUIRE STRING
    (22) constant -> . CONSTANT ASSIGN expression
    (25) module -> . MODULE ID statements END
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    REQUIRE         shift and go to state 12
    CONSTANT        shift and go to state 14
    MODULE          shift and go to state 16
    DEF             shift and go to state 18
    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    program                        shift and go to state 1
    require_list                   shift and go to state 2
    constant_list                  shift and go to state 3
    module_list                    shift and go to state 4
    function_list                  shift and go to state 5
    statements                     shift and go to state 6
    require                        shift and go to state 7
    constant                       shift and go to state 8
    module                         shift and go to state 9
    function                       shift and go to state 10
    statements_list                shift and go to state 11
    expression                     shift and go to state 15
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 1

    (0) S' -> program .



state 2

    (1) program -> require_list . constant_list module_list function_list
    (2) program -> require_list . constant_list module_list
    (3) program -> require_list . constant_list function_list
    (4) program -> require_list . module_list function_list
    (6) program -> require_list . constant_list
    (7) program -> require_list . module_list
    (9) program -> require_list . function_list
    (12) program -> require_list .
    (20) constant_list -> . constant constant_list
    (21) constant_list -> . constant
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (22) constant -> . CONSTANT ASSIGN expression
    (25) module -> . MODULE ID statements END
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 12 (program -> require_list .)
    CONSTANT        shift and go to state 14
    MODULE          shift and go to state 16
    DEF             shift and go to state 18

    constant_list                  shift and go to state 73
    module_list                    shift and go to state 74
    function_list                  shift and go to state 75
    constant                       shift and go to state 8
    module                         shift and go to state 9
    function                       shift and go to state 10

state 3

    (5) program -> constant_list . module_list function_list
    (8) program -> constant_list . module_list
    (10) program -> constant_list . function_list
    (13) program -> constant_list .
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (25) module -> . MODULE ID statements END
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 13 (program -> constant_list .)
    MODULE          shift and go to state 16
    DEF             shift and go to state 18

    module_list                    shift and go to state 76
    function_list                  shift and go to state 77
    module                         shift and go to state 9
    function                       shift and go to state 10

state 4

    (11) program -> module_list . function_list
    (14) program -> module_list .
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 14 (program -> module_list .)
    DEF             shift and go to state 18

    function_list                  shift and go to state 78
    function                       shift and go to state 10

state 5

    (15) program -> function_list .

    $end            reduce using rule 15 (program -> function_list .)


state 6

    (16) program -> statements .

    $end            reduce using rule 16 (program -> statements .)


state 7

    (17) require_list -> require . require_list
    (18) require_list -> require .
    (17) require_list -> . require require_list
    (18) require_list -> . require
    (19) require -> . REQUIRE STRING

    CONSTANT        reduce using rule 18 (require_list -> require .)
    MODULE          reduce using rule 18 (require_list -> require .)
    DEF             reduce using rule 18 (require_list -> require .)
    $end            reduce using rule 18 (require_list -> require .)
    REQUIRE         shift and go to state 12

    require                        shift and go to state 7
    require_list                   shift and go to state 79

state 8

    (20) constant_list -> constant . constant_list
    (21) constant_list -> constant .
    (20) constant_list -> . constant constant_list
    (21) constant_list -> . constant
    (22) constant -> . CONSTANT ASSIGN expression

    MODULE          reduce using rule 21 (constant_list -> constant .)
    DEF             reduce using rule 21 (constant_list -> constant .)
    $end            reduce using rule 21 (constant_list -> constant .)
    CONSTANT        shift and go to state 14

    constant                       shift and go to state 8
    constant_list                  shift and go to state 80

state 9

    (23) module_list -> module . module_list
    (24) module_list -> module .
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (25) module -> . MODULE ID statements END

    DEF             reduce using rule 24 (module_list -> module .)
    $end            reduce using rule 24 (module_list -> module .)
    MODULE          shift and go to state 16

    module                         shift and go to state 9
    module_list                    shift and go to state 81

state 10

    (26) function_list -> function .
    (27) function_list -> function . function_list
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 26 (function_list -> function .)
    DEF             shift and go to state 18

    function                       shift and go to state 10
    function_list                  shift and go to state 82

state 11

    (79) statements -> statements_list .

    $end            reduce using rule 79 (statements -> statements_list .)
    END             reduce using rule 79 (statements -> statements_list .)
    ELSIF           reduce using rule 79 (statements -> statements_list .)
    ELSE            reduce using rule 79 (statements -> statements_list .)
    NEWLINE         reduce using rule 79 (statements -> statements_list .)
    RBRACE          reduce using rule 79 (statements -> statements_list .)
    WHEN            reduce using rule 79 (statements -> statements_list .)


state 12

    (19) require -> REQUIRE . STRING

    STRING          shift and go to state 83


state 13

    (63) literal -> STRING .

    POTENCIACAO     reduce using rule 63 (literal -> STRING .)
    MULTI           reduce using rule 63 (literal -> STRING .)
    DIVIDE          reduce using rule 63 (literal -> STRING .)
    MODULO          reduce using rule 63 (literal -> STRING .)
    PLUS            reduce using rule 63 (literal -> STRING .)
    MINUS           reduce using rule 63 (literal -> STRING .)
    GREATER_THAN    reduce using rule 63 (literal -> STRING .)
    LESS_THAN       reduce using rule 63 (literal -> STRING .)
    GREATER_EQUAL   reduce using rule 63 (literal -> STRING .)
    LESS_EQUAL      reduce using rule 63 (literal -> STRING .)
    EQUAL           reduce using rule 63 (literal -> STRING .)
    NOT_EQUAL       reduce using rule 63 (literal -> STRING .)
    TIPO_EQUAL      reduce using rule 63 (literal -> STRING .)
    AND             reduce using rule 63 (literal -> STRING .)
    DOTDOT          reduce using rule 63 (literal -> STRING .)
    DOTDOTDOT       reduce using rule 63 (literal -> STRING .)
    OR              reduce using rule 63 (literal -> STRING .)
    QMARK           reduce using rule 63 (literal -> STRING .)
    DOT             reduce using rule 63 (literal -> STRING .)
    NEWLINE         reduce using rule 63 (literal -> STRING .)
    $end            reduce using rule 63 (literal -> STRING .)
    RPAREN          reduce using rule 63 (literal -> STRING .)
    WHEN            reduce using rule 63 (literal -> STRING .)
    END             reduce using rule 63 (literal -> STRING .)
    ELSIF           reduce using rule 63 (literal -> STRING .)
    ELSE            reduce using rule 63 (literal -> STRING .)
    RBRACE          reduce using rule 63 (literal -> STRING .)
    LBRACE          reduce using rule 63 (literal -> STRING .)
    ID              reduce using rule 63 (literal -> STRING .)
    CASE            reduce using rule 63 (literal -> STRING .)
    RETURN          reduce using rule 63 (literal -> STRING .)
    BREAK           reduce using rule 63 (literal -> STRING .)
    NEXT            reduce using rule 63 (literal -> STRING .)
    UNDERSCORE      reduce using rule 63 (literal -> STRING .)
    ASTERISK        reduce using rule 63 (literal -> STRING .)
    IF              reduce using rule 63 (literal -> STRING .)
    UNLESS          reduce using rule 63 (literal -> STRING .)
    WHILE           reduce using rule 63 (literal -> STRING .)
    UNTIL           reduce using rule 63 (literal -> STRING .)
    LOOP            reduce using rule 63 (literal -> STRING .)
    EXCLAMATION     reduce using rule 63 (literal -> STRING .)
    TILDE           reduce using rule 63 (literal -> STRING .)
    LPAREN          reduce using rule 63 (literal -> STRING .)
    LBRACKET        reduce using rule 63 (literal -> STRING .)
    INTNUMBER       reduce using rule 63 (literal -> STRING .)
    FLOATNUMBER     reduce using rule 63 (literal -> STRING .)
    STRING          reduce using rule 63 (literal -> STRING .)
    CHAR            reduce using rule 63 (literal -> STRING .)
    TRUE            reduce using rule 63 (literal -> STRING .)
    FALSE           reduce using rule 63 (literal -> STRING .)
    COMMA           reduce using rule 63 (literal -> STRING .)
    RBRACKET        reduce using rule 63 (literal -> STRING .)
    CONSTANT        reduce using rule 63 (literal -> STRING .)
    MODULE          reduce using rule 63 (literal -> STRING .)
    DEF             reduce using rule 63 (literal -> STRING .)
    TCOLON          reduce using rule 63 (literal -> STRING .)


state 14

    (22) constant -> CONSTANT . ASSIGN expression

    ASSIGN          shift and go to state 84


state 15

    (84) statement -> expression .
    (115) iterator -> expression . DOT MULTI statements
    (116) iterator -> expression . DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> expression . DOT EACH LBRACE PIPE ID PIPE RBRACE statements

    NEWLINE         reduce using rule 84 (statement -> expression .)
    $end            reduce using rule 84 (statement -> expression .)
    END             reduce using rule 84 (statement -> expression .)
    ELSIF           reduce using rule 84 (statement -> expression .)
    ELSE            reduce using rule 84 (statement -> expression .)
    RBRACE          reduce using rule 84 (statement -> expression .)
    WHEN            reduce using rule 84 (statement -> expression .)
    DOT             shift and go to state 85


state 16

    (25) module -> MODULE . ID statements END

    ID              shift and go to state 86


state 17

    (73) function_call -> ID . LPAREN expression_list RPAREN
    (74) function_call -> ID . LPAREN RPAREN
    (69) list_of_identifiers -> ID .
    (70) list_of_identifiers -> ID . COMMA list_of_identifiers
    (132) assignment_target -> ID .
    (170) primary_expression -> ID .

    LPAREN          shift and go to state 87
    COLON           reduce using rule 69 (list_of_identifiers -> ID .)
    ASSIGN          reduce using rule 69 (list_of_identifiers -> ID .)
    COMMA           shift and go to state 88
    PLUS_ASSIGN     reduce using rule 132 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 132 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 132 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 132 (assignment_target -> ID .)
    POTENCIACAO     reduce using rule 170 (primary_expression -> ID .)
    MULTI           reduce using rule 170 (primary_expression -> ID .)
    DIVIDE          reduce using rule 170 (primary_expression -> ID .)
    MODULO          reduce using rule 170 (primary_expression -> ID .)
    PLUS            reduce using rule 170 (primary_expression -> ID .)
    MINUS           reduce using rule 170 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 170 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 170 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 170 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 170 (primary_expression -> ID .)
    EQUAL           reduce using rule 170 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 170 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 170 (primary_expression -> ID .)
    AND             reduce using rule 170 (primary_expression -> ID .)
    DOTDOT          reduce using rule 170 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 170 (primary_expression -> ID .)
    OR              reduce using rule 170 (primary_expression -> ID .)
    QMARK           reduce using rule 170 (primary_expression -> ID .)
    DOT             reduce using rule 170 (primary_expression -> ID .)
    NEWLINE         reduce using rule 170 (primary_expression -> ID .)
    $end            reduce using rule 170 (primary_expression -> ID .)
    END             reduce using rule 170 (primary_expression -> ID .)
    ELSIF           reduce using rule 170 (primary_expression -> ID .)
    ELSE            reduce using rule 170 (primary_expression -> ID .)
    RBRACE          reduce using rule 170 (primary_expression -> ID .)
    WHEN            reduce using rule 170 (primary_expression -> ID .)


state 18

    (28) function -> DEF . ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> DEF . ID opt_return_type NEWLINE statements END

    ID              shift and go to state 89


state 19

    (167) primary_expression -> LPAREN . expression RPAREN
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 90
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 20

    (80) statements_list -> statement . NEWLINE statements_list
    (81) statements_list -> statement .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 92
    $end            reduce using rule 81 (statements_list -> statement .)
    END             reduce using rule 81 (statements_list -> statement .)
    ELSIF           reduce using rule 81 (statements_list -> statement .)
    ELSE            reduce using rule 81 (statements_list -> statement .)
    RBRACE          reduce using rule 81 (statements_list -> statement .)
    WHEN            reduce using rule 81 (statements_list -> statement .)

  ! NEWLINE         [ reduce using rule 81 (statements_list -> statement .) ]


state 21

    (85) statement -> control_structure .

    NEWLINE         reduce using rule 85 (statement -> control_structure .)
    $end            reduce using rule 85 (statement -> control_structure .)
    END             reduce using rule 85 (statement -> control_structure .)
    ELSIF           reduce using rule 85 (statement -> control_structure .)
    ELSE            reduce using rule 85 (statement -> control_structure .)
    RBRACE          reduce using rule 85 (statement -> control_structure .)
    WHEN            reduce using rule 85 (statement -> control_structure .)


state 22

    (86) statement -> variable_declaration .

    NEWLINE         reduce using rule 86 (statement -> variable_declaration .)
    $end            reduce using rule 86 (statement -> variable_declaration .)
    END             reduce using rule 86 (statement -> variable_declaration .)
    ELSIF           reduce using rule 86 (statement -> variable_declaration .)
    ELSE            reduce using rule 86 (statement -> variable_declaration .)
    RBRACE          reduce using rule 86 (statement -> variable_declaration .)
    WHEN            reduce using rule 86 (statement -> variable_declaration .)


state 23

    (87) statement -> function_call .

    NEWLINE         reduce using rule 87 (statement -> function_call .)
    $end            reduce using rule 87 (statement -> function_call .)
    END             reduce using rule 87 (statement -> function_call .)
    ELSIF           reduce using rule 87 (statement -> function_call .)
    ELSE            reduce using rule 87 (statement -> function_call .)
    RBRACE          reduce using rule 87 (statement -> function_call .)
    WHEN            reduce using rule 87 (statement -> function_call .)


state 24

    (126) expression -> assignment_expression .

    DOT             reduce using rule 126 (expression -> assignment_expression .)
    NEWLINE         reduce using rule 126 (expression -> assignment_expression .)
    $end            reduce using rule 126 (expression -> assignment_expression .)
    RPAREN          reduce using rule 126 (expression -> assignment_expression .)
    WHEN            reduce using rule 126 (expression -> assignment_expression .)
    END             reduce using rule 126 (expression -> assignment_expression .)
    ELSIF           reduce using rule 126 (expression -> assignment_expression .)
    ELSE            reduce using rule 126 (expression -> assignment_expression .)
    RBRACE          reduce using rule 126 (expression -> assignment_expression .)
    LBRACE          reduce using rule 126 (expression -> assignment_expression .)
    ID              reduce using rule 126 (expression -> assignment_expression .)
    CASE            reduce using rule 126 (expression -> assignment_expression .)
    RETURN          reduce using rule 126 (expression -> assignment_expression .)
    BREAK           reduce using rule 126 (expression -> assignment_expression .)
    NEXT            reduce using rule 126 (expression -> assignment_expression .)
    UNDERSCORE      reduce using rule 126 (expression -> assignment_expression .)
    ASTERISK        reduce using rule 126 (expression -> assignment_expression .)
    IF              reduce using rule 126 (expression -> assignment_expression .)
    UNLESS          reduce using rule 126 (expression -> assignment_expression .)
    WHILE           reduce using rule 126 (expression -> assignment_expression .)
    UNTIL           reduce using rule 126 (expression -> assignment_expression .)
    LOOP            reduce using rule 126 (expression -> assignment_expression .)
    PLUS            reduce using rule 126 (expression -> assignment_expression .)
    MINUS           reduce using rule 126 (expression -> assignment_expression .)
    EXCLAMATION     reduce using rule 126 (expression -> assignment_expression .)
    TILDE           reduce using rule 126 (expression -> assignment_expression .)
    LPAREN          reduce using rule 126 (expression -> assignment_expression .)
    LBRACKET        reduce using rule 126 (expression -> assignment_expression .)
    INTNUMBER       reduce using rule 126 (expression -> assignment_expression .)
    FLOATNUMBER     reduce using rule 126 (expression -> assignment_expression .)
    STRING          reduce using rule 126 (expression -> assignment_expression .)
    CHAR            reduce using rule 126 (expression -> assignment_expression .)
    TRUE            reduce using rule 126 (expression -> assignment_expression .)
    FALSE           reduce using rule 126 (expression -> assignment_expression .)
    COMMA           reduce using rule 126 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 126 (expression -> assignment_expression .)
    CONSTANT        reduce using rule 126 (expression -> assignment_expression .)
    MODULE          reduce using rule 126 (expression -> assignment_expression .)
    DEF             reduce using rule 126 (expression -> assignment_expression .)
    TCOLON          reduce using rule 126 (expression -> assignment_expression .)


state 25

    (88) control_structure -> conditional .

    NEWLINE         reduce using rule 88 (control_structure -> conditional .)
    $end            reduce using rule 88 (control_structure -> conditional .)
    END             reduce using rule 88 (control_structure -> conditional .)
    ELSIF           reduce using rule 88 (control_structure -> conditional .)
    ELSE            reduce using rule 88 (control_structure -> conditional .)
    RBRACE          reduce using rule 88 (control_structure -> conditional .)
    WHEN            reduce using rule 88 (control_structure -> conditional .)


state 26

    (89) control_structure -> loop_structure .

    NEWLINE         reduce using rule 89 (control_structure -> loop_structure .)
    $end            reduce using rule 89 (control_structure -> loop_structure .)
    END             reduce using rule 89 (control_structure -> loop_structure .)
    ELSIF           reduce using rule 89 (control_structure -> loop_structure .)
    ELSE            reduce using rule 89 (control_structure -> loop_structure .)
    RBRACE          reduce using rule 89 (control_structure -> loop_structure .)
    WHEN            reduce using rule 89 (control_structure -> loop_structure .)


state 27

    (90) control_structure -> case_structure .

    NEWLINE         reduce using rule 90 (control_structure -> case_structure .)
    $end            reduce using rule 90 (control_structure -> case_structure .)
    END             reduce using rule 90 (control_structure -> case_structure .)
    ELSIF           reduce using rule 90 (control_structure -> case_structure .)
    ELSE            reduce using rule 90 (control_structure -> case_structure .)
    RBRACE          reduce using rule 90 (control_structure -> case_structure .)
    WHEN            reduce using rule 90 (control_structure -> case_structure .)


state 28

    (91) control_structure -> return_statement .

    NEWLINE         reduce using rule 91 (control_structure -> return_statement .)
    $end            reduce using rule 91 (control_structure -> return_statement .)
    END             reduce using rule 91 (control_structure -> return_statement .)
    ELSIF           reduce using rule 91 (control_structure -> return_statement .)
    ELSE            reduce using rule 91 (control_structure -> return_statement .)
    RBRACE          reduce using rule 91 (control_structure -> return_statement .)
    WHEN            reduce using rule 91 (control_structure -> return_statement .)


state 29

    (92) control_structure -> break_statement .

    NEWLINE         reduce using rule 92 (control_structure -> break_statement .)
    $end            reduce using rule 92 (control_structure -> break_statement .)
    END             reduce using rule 92 (control_structure -> break_statement .)
    ELSIF           reduce using rule 92 (control_structure -> break_statement .)
    ELSE            reduce using rule 92 (control_structure -> break_statement .)
    RBRACE          reduce using rule 92 (control_structure -> break_statement .)
    WHEN            reduce using rule 92 (control_structure -> break_statement .)


state 30

    (93) control_structure -> next_statement .

    NEWLINE         reduce using rule 93 (control_structure -> next_statement .)
    $end            reduce using rule 93 (control_structure -> next_statement .)
    END             reduce using rule 93 (control_structure -> next_statement .)
    ELSIF           reduce using rule 93 (control_structure -> next_statement .)
    ELSE            reduce using rule 93 (control_structure -> next_statement .)
    RBRACE          reduce using rule 93 (control_structure -> next_statement .)
    WHEN            reduce using rule 93 (control_structure -> next_statement .)


state 31

    (67) variable_declaration -> list_of_identifiers . COLON types ASSIGN expression_list1
    (68) variable_declaration -> list_of_identifiers . ASSIGN expression_list1

    COLON           shift and go to state 93
    ASSIGN          shift and go to state 94


state 32

    (127) assignment_expression -> assignment_target . PLUS_ASSIGN expression
    (128) assignment_expression -> assignment_target . MINUS_ASSIGN expression
    (129) assignment_expression -> assignment_target . MULTI_ASSIGN expression
    (130) assignment_expression -> assignment_target . DIVIDE_ASSIGN expression

    PLUS_ASSIGN     shift and go to state 95
    MINUS_ASSIGN    shift and go to state 96
    MULTI_ASSIGN    shift and go to state 97
    DIVIDE_ASSIGN   shift and go to state 98


state 33

    (131) assignment_expression -> ternary_expression .

    DOT             reduce using rule 131 (assignment_expression -> ternary_expression .)
    NEWLINE         reduce using rule 131 (assignment_expression -> ternary_expression .)
    $end            reduce using rule 131 (assignment_expression -> ternary_expression .)
    RPAREN          reduce using rule 131 (assignment_expression -> ternary_expression .)
    WHEN            reduce using rule 131 (assignment_expression -> ternary_expression .)
    END             reduce using rule 131 (assignment_expression -> ternary_expression .)
    ELSIF           reduce using rule 131 (assignment_expression -> ternary_expression .)
    ELSE            reduce using rule 131 (assignment_expression -> ternary_expression .)
    RBRACE          reduce using rule 131 (assignment_expression -> ternary_expression .)
    LBRACE          reduce using rule 131 (assignment_expression -> ternary_expression .)
    ID              reduce using rule 131 (assignment_expression -> ternary_expression .)
    CASE            reduce using rule 131 (assignment_expression -> ternary_expression .)
    RETURN          reduce using rule 131 (assignment_expression -> ternary_expression .)
    BREAK           reduce using rule 131 (assignment_expression -> ternary_expression .)
    NEXT            reduce using rule 131 (assignment_expression -> ternary_expression .)
    UNDERSCORE      reduce using rule 131 (assignment_expression -> ternary_expression .)
    ASTERISK        reduce using rule 131 (assignment_expression -> ternary_expression .)
    IF              reduce using rule 131 (assignment_expression -> ternary_expression .)
    UNLESS          reduce using rule 131 (assignment_expression -> ternary_expression .)
    WHILE           reduce using rule 131 (assignment_expression -> ternary_expression .)
    UNTIL           reduce using rule 131 (assignment_expression -> ternary_expression .)
    LOOP            reduce using rule 131 (assignment_expression -> ternary_expression .)
    PLUS            reduce using rule 131 (assignment_expression -> ternary_expression .)
    MINUS           reduce using rule 131 (assignment_expression -> ternary_expression .)
    EXCLAMATION     reduce using rule 131 (assignment_expression -> ternary_expression .)
    TILDE           reduce using rule 131 (assignment_expression -> ternary_expression .)
    LPAREN          reduce using rule 131 (assignment_expression -> ternary_expression .)
    LBRACKET        reduce using rule 131 (assignment_expression -> ternary_expression .)
    INTNUMBER       reduce using rule 131 (assignment_expression -> ternary_expression .)
    FLOATNUMBER     reduce using rule 131 (assignment_expression -> ternary_expression .)
    STRING          reduce using rule 131 (assignment_expression -> ternary_expression .)
    CHAR            reduce using rule 131 (assignment_expression -> ternary_expression .)
    TRUE            reduce using rule 131 (assignment_expression -> ternary_expression .)
    FALSE           reduce using rule 131 (assignment_expression -> ternary_expression .)
    COMMA           reduce using rule 131 (assignment_expression -> ternary_expression .)
    RBRACKET        reduce using rule 131 (assignment_expression -> ternary_expression .)
    CONSTANT        reduce using rule 131 (assignment_expression -> ternary_expression .)
    MODULE          reduce using rule 131 (assignment_expression -> ternary_expression .)
    DEF             reduce using rule 131 (assignment_expression -> ternary_expression .)
    TCOLON          reduce using rule 131 (assignment_expression -> ternary_expression .)


state 34

    (94) conditional -> if_statement .

    NEWLINE         reduce using rule 94 (conditional -> if_statement .)
    $end            reduce using rule 94 (conditional -> if_statement .)
    END             reduce using rule 94 (conditional -> if_statement .)
    ELSIF           reduce using rule 94 (conditional -> if_statement .)
    ELSE            reduce using rule 94 (conditional -> if_statement .)
    RBRACE          reduce using rule 94 (conditional -> if_statement .)
    WHEN            reduce using rule 94 (conditional -> if_statement .)


state 35

    (95) conditional -> unless_statement .

    NEWLINE         reduce using rule 95 (conditional -> unless_statement .)
    $end            reduce using rule 95 (conditional -> unless_statement .)
    END             reduce using rule 95 (conditional -> unless_statement .)
    ELSIF           reduce using rule 95 (conditional -> unless_statement .)
    ELSE            reduce using rule 95 (conditional -> unless_statement .)
    RBRACE          reduce using rule 95 (conditional -> unless_statement .)
    WHEN            reduce using rule 95 (conditional -> unless_statement .)


state 36

    (107) loop_structure -> while .

    NEWLINE         reduce using rule 107 (loop_structure -> while .)
    $end            reduce using rule 107 (loop_structure -> while .)
    END             reduce using rule 107 (loop_structure -> while .)
    ELSIF           reduce using rule 107 (loop_structure -> while .)
    ELSE            reduce using rule 107 (loop_structure -> while .)
    RBRACE          reduce using rule 107 (loop_structure -> while .)
    WHEN            reduce using rule 107 (loop_structure -> while .)


state 37

    (108) loop_structure -> until .

    NEWLINE         reduce using rule 108 (loop_structure -> until .)
    $end            reduce using rule 108 (loop_structure -> until .)
    END             reduce using rule 108 (loop_structure -> until .)
    ELSIF           reduce using rule 108 (loop_structure -> until .)
    ELSE            reduce using rule 108 (loop_structure -> until .)
    RBRACE          reduce using rule 108 (loop_structure -> until .)
    WHEN            reduce using rule 108 (loop_structure -> until .)


state 38

    (109) loop_structure -> loop .

    NEWLINE         reduce using rule 109 (loop_structure -> loop .)
    $end            reduce using rule 109 (loop_structure -> loop .)
    END             reduce using rule 109 (loop_structure -> loop .)
    ELSIF           reduce using rule 109 (loop_structure -> loop .)
    ELSE            reduce using rule 109 (loop_structure -> loop .)
    RBRACE          reduce using rule 109 (loop_structure -> loop .)
    WHEN            reduce using rule 109 (loop_structure -> loop .)


state 39

    (110) loop_structure -> iterator .

    NEWLINE         reduce using rule 110 (loop_structure -> iterator .)
    $end            reduce using rule 110 (loop_structure -> iterator .)
    END             reduce using rule 110 (loop_structure -> iterator .)
    ELSIF           reduce using rule 110 (loop_structure -> iterator .)
    ELSE            reduce using rule 110 (loop_structure -> iterator .)
    RBRACE          reduce using rule 110 (loop_structure -> iterator .)
    WHEN            reduce using rule 110 (loop_structure -> iterator .)


state 40

    (118) case_structure -> CASE . expression when_list opt_else END
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 99
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 41

    (121) return_statement -> RETURN . opt_expression
    (124) opt_expression -> . expression
    (125) opt_expression -> . empty
    (126) expression -> . assignment_expression
    (172) empty -> .
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEWLINE         reduce using rule 172 (empty -> .)
    $end            reduce using rule 172 (empty -> .)
    END             reduce using rule 172 (empty -> .)
    ELSIF           reduce using rule 172 (empty -> .)
    ELSE            reduce using rule 172 (empty -> .)
    RBRACE          reduce using rule 172 (empty -> .)
    WHEN            reduce using rule 172 (empty -> .)
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    opt_expression                 shift and go to state 100
    expression                     shift and go to state 101
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 42

    (122) break_statement -> BREAK . opt_expression
    (124) opt_expression -> . expression
    (125) opt_expression -> . empty
    (126) expression -> . assignment_expression
    (172) empty -> .
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEWLINE         reduce using rule 172 (empty -> .)
    $end            reduce using rule 172 (empty -> .)
    END             reduce using rule 172 (empty -> .)
    ELSIF           reduce using rule 172 (empty -> .)
    ELSE            reduce using rule 172 (empty -> .)
    RBRACE          reduce using rule 172 (empty -> .)
    WHEN            reduce using rule 172 (empty -> .)
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    opt_expression                 shift and go to state 103
    expression                     shift and go to state 101
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 43

    (123) next_statement -> NEXT . opt_expression
    (124) opt_expression -> . expression
    (125) opt_expression -> . empty
    (126) expression -> . assignment_expression
    (172) empty -> .
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    NEWLINE         reduce using rule 172 (empty -> .)
    $end            reduce using rule 172 (empty -> .)
    END             reduce using rule 172 (empty -> .)
    ELSIF           reduce using rule 172 (empty -> .)
    ELSE            reduce using rule 172 (empty -> .)
    RBRACE          reduce using rule 172 (empty -> .)
    WHEN            reduce using rule 172 (empty -> .)
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    opt_expression                 shift and go to state 104
    expression                     shift and go to state 101
    empty                          shift and go to state 102
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 44

    (133) assignment_target -> UNDERSCORE .

    PLUS_ASSIGN     reduce using rule 133 (assignment_target -> UNDERSCORE .)
    MINUS_ASSIGN    reduce using rule 133 (assignment_target -> UNDERSCORE .)
    MULTI_ASSIGN    reduce using rule 133 (assignment_target -> UNDERSCORE .)
    DIVIDE_ASSIGN   reduce using rule 133 (assignment_target -> UNDERSCORE .)


state 45

    (134) assignment_target -> ASTERISK . assignment_target
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target

    ID              shift and go to state 106
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45

    assignment_target              shift and go to state 105

state 46

    (135) ternary_expression -> range_expression . QMARK expression TCOLON expression
    (136) ternary_expression -> range_expression .

    QMARK           shift and go to state 107
    DOT             reduce using rule 136 (ternary_expression -> range_expression .)
    NEWLINE         reduce using rule 136 (ternary_expression -> range_expression .)
    $end            reduce using rule 136 (ternary_expression -> range_expression .)
    RPAREN          reduce using rule 136 (ternary_expression -> range_expression .)
    WHEN            reduce using rule 136 (ternary_expression -> range_expression .)
    END             reduce using rule 136 (ternary_expression -> range_expression .)
    ELSIF           reduce using rule 136 (ternary_expression -> range_expression .)
    ELSE            reduce using rule 136 (ternary_expression -> range_expression .)
    RBRACE          reduce using rule 136 (ternary_expression -> range_expression .)
    LBRACE          reduce using rule 136 (ternary_expression -> range_expression .)
    ID              reduce using rule 136 (ternary_expression -> range_expression .)
    CASE            reduce using rule 136 (ternary_expression -> range_expression .)
    RETURN          reduce using rule 136 (ternary_expression -> range_expression .)
    BREAK           reduce using rule 136 (ternary_expression -> range_expression .)
    NEXT            reduce using rule 136 (ternary_expression -> range_expression .)
    UNDERSCORE      reduce using rule 136 (ternary_expression -> range_expression .)
    ASTERISK        reduce using rule 136 (ternary_expression -> range_expression .)
    IF              reduce using rule 136 (ternary_expression -> range_expression .)
    UNLESS          reduce using rule 136 (ternary_expression -> range_expression .)
    WHILE           reduce using rule 136 (ternary_expression -> range_expression .)
    UNTIL           reduce using rule 136 (ternary_expression -> range_expression .)
    LOOP            reduce using rule 136 (ternary_expression -> range_expression .)
    PLUS            reduce using rule 136 (ternary_expression -> range_expression .)
    MINUS           reduce using rule 136 (ternary_expression -> range_expression .)
    EXCLAMATION     reduce using rule 136 (ternary_expression -> range_expression .)
    TILDE           reduce using rule 136 (ternary_expression -> range_expression .)
    LPAREN          reduce using rule 136 (ternary_expression -> range_expression .)
    LBRACKET        reduce using rule 136 (ternary_expression -> range_expression .)
    INTNUMBER       reduce using rule 136 (ternary_expression -> range_expression .)
    FLOATNUMBER     reduce using rule 136 (ternary_expression -> range_expression .)
    STRING          reduce using rule 136 (ternary_expression -> range_expression .)
    CHAR            reduce using rule 136 (ternary_expression -> range_expression .)
    TRUE            reduce using rule 136 (ternary_expression -> range_expression .)
    FALSE           reduce using rule 136 (ternary_expression -> range_expression .)
    COMMA           reduce using rule 136 (ternary_expression -> range_expression .)
    RBRACKET        reduce using rule 136 (ternary_expression -> range_expression .)
    CONSTANT        reduce using rule 136 (ternary_expression -> range_expression .)
    MODULE          reduce using rule 136 (ternary_expression -> range_expression .)
    DEF             reduce using rule 136 (ternary_expression -> range_expression .)
    TCOLON          reduce using rule 136 (ternary_expression -> range_expression .)


state 47

    (96) if_statement -> IF . if_condition statements opt_elsif opt_else END
    (98) if_condition -> . expression
    (99) if_condition -> . expression LBRACE statements RBRACE
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    if_condition                   shift and go to state 108
    expression                     shift and go to state 109
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 48

    (97) unless_statement -> UNLESS . if_condition statements opt_else END
    (98) if_condition -> . expression
    (99) if_condition -> . expression LBRACE statements RBRACE
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    if_condition                   shift and go to state 110
    expression                     shift and go to state 109
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 49

    (111) while -> WHILE . expression statements
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 111
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 50

    (112) until -> UNTIL . expression statements
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 112
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 51

    (113) loop -> LOOP . DO statements END
    (114) loop -> LOOP . LBRACE statements RBRACE

    DO              shift and go to state 113
    LBRACE          shift and go to state 114


state 52

    (137) range_expression -> logical_or_expression . DOTDOT logical_or_expression
    (138) range_expression -> logical_or_expression . DOTDOTDOT logical_or_expression
    (139) range_expression -> logical_or_expression .
    (141) logical_or_expression -> logical_or_expression . OR logical_and_expression

    DOTDOT          shift and go to state 115
    DOTDOTDOT       shift and go to state 116
    QMARK           reduce using rule 139 (range_expression -> logical_or_expression .)
    DOT             reduce using rule 139 (range_expression -> logical_or_expression .)
    NEWLINE         reduce using rule 139 (range_expression -> logical_or_expression .)
    $end            reduce using rule 139 (range_expression -> logical_or_expression .)
    RPAREN          reduce using rule 139 (range_expression -> logical_or_expression .)
    WHEN            reduce using rule 139 (range_expression -> logical_or_expression .)
    END             reduce using rule 139 (range_expression -> logical_or_expression .)
    ELSIF           reduce using rule 139 (range_expression -> logical_or_expression .)
    ELSE            reduce using rule 139 (range_expression -> logical_or_expression .)
    RBRACE          reduce using rule 139 (range_expression -> logical_or_expression .)
    LBRACE          reduce using rule 139 (range_expression -> logical_or_expression .)
    ID              reduce using rule 139 (range_expression -> logical_or_expression .)
    CASE            reduce using rule 139 (range_expression -> logical_or_expression .)
    RETURN          reduce using rule 139 (range_expression -> logical_or_expression .)
    BREAK           reduce using rule 139 (range_expression -> logical_or_expression .)
    NEXT            reduce using rule 139 (range_expression -> logical_or_expression .)
    UNDERSCORE      reduce using rule 139 (range_expression -> logical_or_expression .)
    ASTERISK        reduce using rule 139 (range_expression -> logical_or_expression .)
    IF              reduce using rule 139 (range_expression -> logical_or_expression .)
    UNLESS          reduce using rule 139 (range_expression -> logical_or_expression .)
    WHILE           reduce using rule 139 (range_expression -> logical_or_expression .)
    UNTIL           reduce using rule 139 (range_expression -> logical_or_expression .)
    LOOP            reduce using rule 139 (range_expression -> logical_or_expression .)
    PLUS            reduce using rule 139 (range_expression -> logical_or_expression .)
    MINUS           reduce using rule 139 (range_expression -> logical_or_expression .)
    EXCLAMATION     reduce using rule 139 (range_expression -> logical_or_expression .)
    TILDE           reduce using rule 139 (range_expression -> logical_or_expression .)
    LPAREN          reduce using rule 139 (range_expression -> logical_or_expression .)
    LBRACKET        reduce using rule 139 (range_expression -> logical_or_expression .)
    INTNUMBER       reduce using rule 139 (range_expression -> logical_or_expression .)
    FLOATNUMBER     reduce using rule 139 (range_expression -> logical_or_expression .)
    STRING          reduce using rule 139 (range_expression -> logical_or_expression .)
    CHAR            reduce using rule 139 (range_expression -> logical_or_expression .)
    TRUE            reduce using rule 139 (range_expression -> logical_or_expression .)
    FALSE           reduce using rule 139 (range_expression -> logical_or_expression .)
    COMMA           reduce using rule 139 (range_expression -> logical_or_expression .)
    RBRACKET        reduce using rule 139 (range_expression -> logical_or_expression .)
    CONSTANT        reduce using rule 139 (range_expression -> logical_or_expression .)
    MODULE          reduce using rule 139 (range_expression -> logical_or_expression .)
    DEF             reduce using rule 139 (range_expression -> logical_or_expression .)
    TCOLON          reduce using rule 139 (range_expression -> logical_or_expression .)
    OR              shift and go to state 117


state 53

    (140) logical_or_expression -> logical_and_expression .
    (143) logical_and_expression -> logical_and_expression . AND equality_expression

    DOTDOT          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    DOTDOTDOT       reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    QMARK           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    DOT             reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    NEWLINE         reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    WHEN            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    END             reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    ELSIF           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    ELSE            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    RBRACE          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    LBRACE          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    ID              reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    CASE            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    NEXT            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    UNDERSCORE      reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    ASTERISK        reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    UNLESS          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    WHILE           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    UNTIL           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    LOOP            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    PLUS            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    EXCLAMATION     reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    TILDE           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    LPAREN          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    LBRACKET        reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    INTNUMBER       reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    FLOATNUMBER     reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    STRING          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    CHAR            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    TRUE            reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    FALSE           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    RBRACKET        reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    CONSTANT        reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    MODULE          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    DEF             reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    TCOLON          reduce using rule 140 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 118


state 54

    (142) logical_and_expression -> equality_expression .
    (145) equality_expression -> equality_expression . EQUAL relational_expression
    (146) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (147) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 142 (logical_and_expression -> equality_expression .)
    DOTDOT          reduce using rule 142 (logical_and_expression -> equality_expression .)
    DOTDOTDOT       reduce using rule 142 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 142 (logical_and_expression -> equality_expression .)
    QMARK           reduce using rule 142 (logical_and_expression -> equality_expression .)
    DOT             reduce using rule 142 (logical_and_expression -> equality_expression .)
    NEWLINE         reduce using rule 142 (logical_and_expression -> equality_expression .)
    $end            reduce using rule 142 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 142 (logical_and_expression -> equality_expression .)
    WHEN            reduce using rule 142 (logical_and_expression -> equality_expression .)
    END             reduce using rule 142 (logical_and_expression -> equality_expression .)
    ELSIF           reduce using rule 142 (logical_and_expression -> equality_expression .)
    ELSE            reduce using rule 142 (logical_and_expression -> equality_expression .)
    RBRACE          reduce using rule 142 (logical_and_expression -> equality_expression .)
    LBRACE          reduce using rule 142 (logical_and_expression -> equality_expression .)
    ID              reduce using rule 142 (logical_and_expression -> equality_expression .)
    CASE            reduce using rule 142 (logical_and_expression -> equality_expression .)
    RETURN          reduce using rule 142 (logical_and_expression -> equality_expression .)
    BREAK           reduce using rule 142 (logical_and_expression -> equality_expression .)
    NEXT            reduce using rule 142 (logical_and_expression -> equality_expression .)
    UNDERSCORE      reduce using rule 142 (logical_and_expression -> equality_expression .)
    ASTERISK        reduce using rule 142 (logical_and_expression -> equality_expression .)
    IF              reduce using rule 142 (logical_and_expression -> equality_expression .)
    UNLESS          reduce using rule 142 (logical_and_expression -> equality_expression .)
    WHILE           reduce using rule 142 (logical_and_expression -> equality_expression .)
    UNTIL           reduce using rule 142 (logical_and_expression -> equality_expression .)
    LOOP            reduce using rule 142 (logical_and_expression -> equality_expression .)
    PLUS            reduce using rule 142 (logical_and_expression -> equality_expression .)
    MINUS           reduce using rule 142 (logical_and_expression -> equality_expression .)
    EXCLAMATION     reduce using rule 142 (logical_and_expression -> equality_expression .)
    TILDE           reduce using rule 142 (logical_and_expression -> equality_expression .)
    LPAREN          reduce using rule 142 (logical_and_expression -> equality_expression .)
    LBRACKET        reduce using rule 142 (logical_and_expression -> equality_expression .)
    INTNUMBER       reduce using rule 142 (logical_and_expression -> equality_expression .)
    FLOATNUMBER     reduce using rule 142 (logical_and_expression -> equality_expression .)
    STRING          reduce using rule 142 (logical_and_expression -> equality_expression .)
    CHAR            reduce using rule 142 (logical_and_expression -> equality_expression .)
    TRUE            reduce using rule 142 (logical_and_expression -> equality_expression .)
    FALSE           reduce using rule 142 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 142 (logical_and_expression -> equality_expression .)
    RBRACKET        reduce using rule 142 (logical_and_expression -> equality_expression .)
    CONSTANT        reduce using rule 142 (logical_and_expression -> equality_expression .)
    MODULE          reduce using rule 142 (logical_and_expression -> equality_expression .)
    DEF             reduce using rule 142 (logical_and_expression -> equality_expression .)
    TCOLON          reduce using rule 142 (logical_and_expression -> equality_expression .)
    EQUAL           shift and go to state 119
    NOT_EQUAL       shift and go to state 120
    TIPO_EQUAL      shift and go to state 121


state 55

    (144) equality_expression -> relational_expression .
    (149) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (150) relational_expression -> relational_expression . LESS_THAN additive_expression
    (151) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (152) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 144 (equality_expression -> relational_expression .)
    NOT_EQUAL       reduce using rule 144 (equality_expression -> relational_expression .)
    TIPO_EQUAL      reduce using rule 144 (equality_expression -> relational_expression .)
    AND             reduce using rule 144 (equality_expression -> relational_expression .)
    DOTDOT          reduce using rule 144 (equality_expression -> relational_expression .)
    DOTDOTDOT       reduce using rule 144 (equality_expression -> relational_expression .)
    OR              reduce using rule 144 (equality_expression -> relational_expression .)
    QMARK           reduce using rule 144 (equality_expression -> relational_expression .)
    DOT             reduce using rule 144 (equality_expression -> relational_expression .)
    NEWLINE         reduce using rule 144 (equality_expression -> relational_expression .)
    $end            reduce using rule 144 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 144 (equality_expression -> relational_expression .)
    WHEN            reduce using rule 144 (equality_expression -> relational_expression .)
    END             reduce using rule 144 (equality_expression -> relational_expression .)
    ELSIF           reduce using rule 144 (equality_expression -> relational_expression .)
    ELSE            reduce using rule 144 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 144 (equality_expression -> relational_expression .)
    LBRACE          reduce using rule 144 (equality_expression -> relational_expression .)
    ID              reduce using rule 144 (equality_expression -> relational_expression .)
    CASE            reduce using rule 144 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 144 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 144 (equality_expression -> relational_expression .)
    NEXT            reduce using rule 144 (equality_expression -> relational_expression .)
    UNDERSCORE      reduce using rule 144 (equality_expression -> relational_expression .)
    ASTERISK        reduce using rule 144 (equality_expression -> relational_expression .)
    IF              reduce using rule 144 (equality_expression -> relational_expression .)
    UNLESS          reduce using rule 144 (equality_expression -> relational_expression .)
    WHILE           reduce using rule 144 (equality_expression -> relational_expression .)
    UNTIL           reduce using rule 144 (equality_expression -> relational_expression .)
    LOOP            reduce using rule 144 (equality_expression -> relational_expression .)
    PLUS            reduce using rule 144 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 144 (equality_expression -> relational_expression .)
    EXCLAMATION     reduce using rule 144 (equality_expression -> relational_expression .)
    TILDE           reduce using rule 144 (equality_expression -> relational_expression .)
    LPAREN          reduce using rule 144 (equality_expression -> relational_expression .)
    LBRACKET        reduce using rule 144 (equality_expression -> relational_expression .)
    INTNUMBER       reduce using rule 144 (equality_expression -> relational_expression .)
    FLOATNUMBER     reduce using rule 144 (equality_expression -> relational_expression .)
    STRING          reduce using rule 144 (equality_expression -> relational_expression .)
    CHAR            reduce using rule 144 (equality_expression -> relational_expression .)
    TRUE            reduce using rule 144 (equality_expression -> relational_expression .)
    FALSE           reduce using rule 144 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 144 (equality_expression -> relational_expression .)
    RBRACKET        reduce using rule 144 (equality_expression -> relational_expression .)
    CONSTANT        reduce using rule 144 (equality_expression -> relational_expression .)
    MODULE          reduce using rule 144 (equality_expression -> relational_expression .)
    DEF             reduce using rule 144 (equality_expression -> relational_expression .)
    TCOLON          reduce using rule 144 (equality_expression -> relational_expression .)
    GREATER_THAN    shift and go to state 122
    LESS_THAN       shift and go to state 123
    GREATER_EQUAL   shift and go to state 124
    LESS_EQUAL      shift and go to state 125


state 56

    (148) relational_expression -> additive_expression .
    (154) additive_expression -> additive_expression . PLUS multiplicative_expression
    (155) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GREATER_THAN    reduce using rule 148 (relational_expression -> additive_expression .)
    LESS_THAN       reduce using rule 148 (relational_expression -> additive_expression .)
    GREATER_EQUAL   reduce using rule 148 (relational_expression -> additive_expression .)
    LESS_EQUAL      reduce using rule 148 (relational_expression -> additive_expression .)
    EQUAL           reduce using rule 148 (relational_expression -> additive_expression .)
    NOT_EQUAL       reduce using rule 148 (relational_expression -> additive_expression .)
    TIPO_EQUAL      reduce using rule 148 (relational_expression -> additive_expression .)
    AND             reduce using rule 148 (relational_expression -> additive_expression .)
    DOTDOT          reduce using rule 148 (relational_expression -> additive_expression .)
    DOTDOTDOT       reduce using rule 148 (relational_expression -> additive_expression .)
    OR              reduce using rule 148 (relational_expression -> additive_expression .)
    QMARK           reduce using rule 148 (relational_expression -> additive_expression .)
    DOT             reduce using rule 148 (relational_expression -> additive_expression .)
    NEWLINE         reduce using rule 148 (relational_expression -> additive_expression .)
    $end            reduce using rule 148 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 148 (relational_expression -> additive_expression .)
    WHEN            reduce using rule 148 (relational_expression -> additive_expression .)
    END             reduce using rule 148 (relational_expression -> additive_expression .)
    ELSIF           reduce using rule 148 (relational_expression -> additive_expression .)
    ELSE            reduce using rule 148 (relational_expression -> additive_expression .)
    RBRACE          reduce using rule 148 (relational_expression -> additive_expression .)
    LBRACE          reduce using rule 148 (relational_expression -> additive_expression .)
    ID              reduce using rule 148 (relational_expression -> additive_expression .)
    CASE            reduce using rule 148 (relational_expression -> additive_expression .)
    RETURN          reduce using rule 148 (relational_expression -> additive_expression .)
    BREAK           reduce using rule 148 (relational_expression -> additive_expression .)
    NEXT            reduce using rule 148 (relational_expression -> additive_expression .)
    UNDERSCORE      reduce using rule 148 (relational_expression -> additive_expression .)
    ASTERISK        reduce using rule 148 (relational_expression -> additive_expression .)
    IF              reduce using rule 148 (relational_expression -> additive_expression .)
    UNLESS          reduce using rule 148 (relational_expression -> additive_expression .)
    WHILE           reduce using rule 148 (relational_expression -> additive_expression .)
    UNTIL           reduce using rule 148 (relational_expression -> additive_expression .)
    LOOP            reduce using rule 148 (relational_expression -> additive_expression .)
    EXCLAMATION     reduce using rule 148 (relational_expression -> additive_expression .)
    TILDE           reduce using rule 148 (relational_expression -> additive_expression .)
    LPAREN          reduce using rule 148 (relational_expression -> additive_expression .)
    LBRACKET        reduce using rule 148 (relational_expression -> additive_expression .)
    INTNUMBER       reduce using rule 148 (relational_expression -> additive_expression .)
    FLOATNUMBER     reduce using rule 148 (relational_expression -> additive_expression .)
    STRING          reduce using rule 148 (relational_expression -> additive_expression .)
    CHAR            reduce using rule 148 (relational_expression -> additive_expression .)
    TRUE            reduce using rule 148 (relational_expression -> additive_expression .)
    FALSE           reduce using rule 148 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 148 (relational_expression -> additive_expression .)
    RBRACKET        reduce using rule 148 (relational_expression -> additive_expression .)
    CONSTANT        reduce using rule 148 (relational_expression -> additive_expression .)
    MODULE          reduce using rule 148 (relational_expression -> additive_expression .)
    DEF             reduce using rule 148 (relational_expression -> additive_expression .)
    TCOLON          reduce using rule 148 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127

  ! PLUS            [ reduce using rule 148 (relational_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 148 (relational_expression -> additive_expression .) ]


state 57

    (153) additive_expression -> multiplicative_expression .
    (157) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (158) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (159) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    GREATER_THAN    reduce using rule 153 (additive_expression -> multiplicative_expression .)
    LESS_THAN       reduce using rule 153 (additive_expression -> multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 153 (additive_expression -> multiplicative_expression .)
    LESS_EQUAL      reduce using rule 153 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    NOT_EQUAL       reduce using rule 153 (additive_expression -> multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 153 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 153 (additive_expression -> multiplicative_expression .)
    DOTDOT          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    DOTDOTDOT       reduce using rule 153 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 153 (additive_expression -> multiplicative_expression .)
    QMARK           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    DOT             reduce using rule 153 (additive_expression -> multiplicative_expression .)
    NEWLINE         reduce using rule 153 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    WHEN            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    END             reduce using rule 153 (additive_expression -> multiplicative_expression .)
    ELSIF           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    ELSE            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    LBRACE          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    ID              reduce using rule 153 (additive_expression -> multiplicative_expression .)
    CASE            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    NEXT            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    UNDERSCORE      reduce using rule 153 (additive_expression -> multiplicative_expression .)
    ASTERISK        reduce using rule 153 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 153 (additive_expression -> multiplicative_expression .)
    UNLESS          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    WHILE           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    UNTIL           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    LOOP            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    EXCLAMATION     reduce using rule 153 (additive_expression -> multiplicative_expression .)
    TILDE           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    LPAREN          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    LBRACKET        reduce using rule 153 (additive_expression -> multiplicative_expression .)
    INTNUMBER       reduce using rule 153 (additive_expression -> multiplicative_expression .)
    FLOATNUMBER     reduce using rule 153 (additive_expression -> multiplicative_expression .)
    STRING          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    CHAR            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    TRUE            reduce using rule 153 (additive_expression -> multiplicative_expression .)
    FALSE           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 153 (additive_expression -> multiplicative_expression .)
    RBRACKET        reduce using rule 153 (additive_expression -> multiplicative_expression .)
    CONSTANT        reduce using rule 153 (additive_expression -> multiplicative_expression .)
    MODULE          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    DEF             reduce using rule 153 (additive_expression -> multiplicative_expression .)
    TCOLON          reduce using rule 153 (additive_expression -> multiplicative_expression .)
    MULTI           shift and go to state 128
    DIVIDE          shift and go to state 129
    MODULO          shift and go to state 130


state 58

    (162) unary_expression -> PLUS . unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    unary_expression               shift and go to state 131
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 59

    (163) unary_expression -> MINUS . unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    unary_expression               shift and go to state 133
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 60

    (156) multiplicative_expression -> potenciacao_expression .
    (161) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    DIVIDE          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    MODULO          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    PLUS            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    MINUS           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    GREATER_THAN    reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    LESS_THAN       reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    LESS_EQUAL      reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    EQUAL           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    NOT_EQUAL       reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    AND             reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    DOTDOT          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    DOTDOTDOT       reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    OR              reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    QMARK           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    DOT             reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    NEWLINE         reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    $end            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    RPAREN          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    WHEN            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    END             reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    ELSIF           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    ELSE            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    RBRACE          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    LBRACE          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    ID              reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    CASE            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    RETURN          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    BREAK           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    NEXT            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    UNDERSCORE      reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    ASTERISK        reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    IF              reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    UNLESS          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    WHILE           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    UNTIL           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    LOOP            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    EXCLAMATION     reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    TILDE           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    LPAREN          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    LBRACKET        reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    INTNUMBER       reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    FLOATNUMBER     reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    STRING          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    CHAR            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    TRUE            reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    FALSE           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    COMMA           reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    RBRACKET        reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    CONSTANT        reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    MODULE          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    DEF             reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    TCOLON          reduce using rule 156 (multiplicative_expression -> potenciacao_expression .)
    POTENCIACAO     shift and go to state 134


state 61

    (160) potenciacao_expression -> unary_expression .

    POTENCIACAO     reduce using rule 160 (potenciacao_expression -> unary_expression .)
    MULTI           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    DIVIDE          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    MODULO          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    PLUS            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    MINUS           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    GREATER_THAN    reduce using rule 160 (potenciacao_expression -> unary_expression .)
    LESS_THAN       reduce using rule 160 (potenciacao_expression -> unary_expression .)
    GREATER_EQUAL   reduce using rule 160 (potenciacao_expression -> unary_expression .)
    LESS_EQUAL      reduce using rule 160 (potenciacao_expression -> unary_expression .)
    EQUAL           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    NOT_EQUAL       reduce using rule 160 (potenciacao_expression -> unary_expression .)
    TIPO_EQUAL      reduce using rule 160 (potenciacao_expression -> unary_expression .)
    AND             reduce using rule 160 (potenciacao_expression -> unary_expression .)
    DOTDOT          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    DOTDOTDOT       reduce using rule 160 (potenciacao_expression -> unary_expression .)
    OR              reduce using rule 160 (potenciacao_expression -> unary_expression .)
    QMARK           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    DOT             reduce using rule 160 (potenciacao_expression -> unary_expression .)
    NEWLINE         reduce using rule 160 (potenciacao_expression -> unary_expression .)
    $end            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    RPAREN          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    WHEN            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    END             reduce using rule 160 (potenciacao_expression -> unary_expression .)
    ELSIF           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    ELSE            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    RBRACE          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    LBRACE          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    ID              reduce using rule 160 (potenciacao_expression -> unary_expression .)
    CASE            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    RETURN          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    BREAK           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    NEXT            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    UNDERSCORE      reduce using rule 160 (potenciacao_expression -> unary_expression .)
    ASTERISK        reduce using rule 160 (potenciacao_expression -> unary_expression .)
    IF              reduce using rule 160 (potenciacao_expression -> unary_expression .)
    UNLESS          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    WHILE           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    UNTIL           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    LOOP            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    EXCLAMATION     reduce using rule 160 (potenciacao_expression -> unary_expression .)
    TILDE           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    LPAREN          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    LBRACKET        reduce using rule 160 (potenciacao_expression -> unary_expression .)
    INTNUMBER       reduce using rule 160 (potenciacao_expression -> unary_expression .)
    FLOATNUMBER     reduce using rule 160 (potenciacao_expression -> unary_expression .)
    STRING          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    CHAR            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    TRUE            reduce using rule 160 (potenciacao_expression -> unary_expression .)
    FALSE           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    COMMA           reduce using rule 160 (potenciacao_expression -> unary_expression .)
    RBRACKET        reduce using rule 160 (potenciacao_expression -> unary_expression .)
    CONSTANT        reduce using rule 160 (potenciacao_expression -> unary_expression .)
    MODULE          reduce using rule 160 (potenciacao_expression -> unary_expression .)
    DEF             reduce using rule 160 (potenciacao_expression -> unary_expression .)
    TCOLON          reduce using rule 160 (potenciacao_expression -> unary_expression .)


state 62

    (164) unary_expression -> EXCLAMATION . unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    unary_expression               shift and go to state 135
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 63

    (165) unary_expression -> TILDE . unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    unary_expression               shift and go to state 136
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 64

    (166) unary_expression -> primary_expression .

    POTENCIACAO     reduce using rule 166 (unary_expression -> primary_expression .)
    MULTI           reduce using rule 166 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 166 (unary_expression -> primary_expression .)
    MODULO          reduce using rule 166 (unary_expression -> primary_expression .)
    PLUS            reduce using rule 166 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 166 (unary_expression -> primary_expression .)
    GREATER_THAN    reduce using rule 166 (unary_expression -> primary_expression .)
    LESS_THAN       reduce using rule 166 (unary_expression -> primary_expression .)
    GREATER_EQUAL   reduce using rule 166 (unary_expression -> primary_expression .)
    LESS_EQUAL      reduce using rule 166 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 166 (unary_expression -> primary_expression .)
    NOT_EQUAL       reduce using rule 166 (unary_expression -> primary_expression .)
    TIPO_EQUAL      reduce using rule 166 (unary_expression -> primary_expression .)
    AND             reduce using rule 166 (unary_expression -> primary_expression .)
    DOTDOT          reduce using rule 166 (unary_expression -> primary_expression .)
    DOTDOTDOT       reduce using rule 166 (unary_expression -> primary_expression .)
    OR              reduce using rule 166 (unary_expression -> primary_expression .)
    QMARK           reduce using rule 166 (unary_expression -> primary_expression .)
    DOT             reduce using rule 166 (unary_expression -> primary_expression .)
    NEWLINE         reduce using rule 166 (unary_expression -> primary_expression .)
    $end            reduce using rule 166 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 166 (unary_expression -> primary_expression .)
    WHEN            reduce using rule 166 (unary_expression -> primary_expression .)
    END             reduce using rule 166 (unary_expression -> primary_expression .)
    ELSIF           reduce using rule 166 (unary_expression -> primary_expression .)
    ELSE            reduce using rule 166 (unary_expression -> primary_expression .)
    RBRACE          reduce using rule 166 (unary_expression -> primary_expression .)
    LBRACE          reduce using rule 166 (unary_expression -> primary_expression .)
    ID              reduce using rule 166 (unary_expression -> primary_expression .)
    CASE            reduce using rule 166 (unary_expression -> primary_expression .)
    RETURN          reduce using rule 166 (unary_expression -> primary_expression .)
    BREAK           reduce using rule 166 (unary_expression -> primary_expression .)
    NEXT            reduce using rule 166 (unary_expression -> primary_expression .)
    UNDERSCORE      reduce using rule 166 (unary_expression -> primary_expression .)
    ASTERISK        reduce using rule 166 (unary_expression -> primary_expression .)
    IF              reduce using rule 166 (unary_expression -> primary_expression .)
    UNLESS          reduce using rule 166 (unary_expression -> primary_expression .)
    WHILE           reduce using rule 166 (unary_expression -> primary_expression .)
    UNTIL           reduce using rule 166 (unary_expression -> primary_expression .)
    LOOP            reduce using rule 166 (unary_expression -> primary_expression .)
    EXCLAMATION     reduce using rule 166 (unary_expression -> primary_expression .)
    TILDE           reduce using rule 166 (unary_expression -> primary_expression .)
    LPAREN          reduce using rule 166 (unary_expression -> primary_expression .)
    LBRACKET        reduce using rule 166 (unary_expression -> primary_expression .)
    INTNUMBER       reduce using rule 166 (unary_expression -> primary_expression .)
    FLOATNUMBER     reduce using rule 166 (unary_expression -> primary_expression .)
    STRING          reduce using rule 166 (unary_expression -> primary_expression .)
    CHAR            reduce using rule 166 (unary_expression -> primary_expression .)
    TRUE            reduce using rule 166 (unary_expression -> primary_expression .)
    FALSE           reduce using rule 166 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 166 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 166 (unary_expression -> primary_expression .)
    CONSTANT        reduce using rule 166 (unary_expression -> primary_expression .)
    MODULE          reduce using rule 166 (unary_expression -> primary_expression .)
    DEF             reduce using rule 166 (unary_expression -> primary_expression .)
    TCOLON          reduce using rule 166 (unary_expression -> primary_expression .)


state 65

    (168) primary_expression -> array_literal .

    POTENCIACAO     reduce using rule 168 (primary_expression -> array_literal .)
    MULTI           reduce using rule 168 (primary_expression -> array_literal .)
    DIVIDE          reduce using rule 168 (primary_expression -> array_literal .)
    MODULO          reduce using rule 168 (primary_expression -> array_literal .)
    PLUS            reduce using rule 168 (primary_expression -> array_literal .)
    MINUS           reduce using rule 168 (primary_expression -> array_literal .)
    GREATER_THAN    reduce using rule 168 (primary_expression -> array_literal .)
    LESS_THAN       reduce using rule 168 (primary_expression -> array_literal .)
    GREATER_EQUAL   reduce using rule 168 (primary_expression -> array_literal .)
    LESS_EQUAL      reduce using rule 168 (primary_expression -> array_literal .)
    EQUAL           reduce using rule 168 (primary_expression -> array_literal .)
    NOT_EQUAL       reduce using rule 168 (primary_expression -> array_literal .)
    TIPO_EQUAL      reduce using rule 168 (primary_expression -> array_literal .)
    AND             reduce using rule 168 (primary_expression -> array_literal .)
    DOTDOT          reduce using rule 168 (primary_expression -> array_literal .)
    DOTDOTDOT       reduce using rule 168 (primary_expression -> array_literal .)
    OR              reduce using rule 168 (primary_expression -> array_literal .)
    QMARK           reduce using rule 168 (primary_expression -> array_literal .)
    DOT             reduce using rule 168 (primary_expression -> array_literal .)
    NEWLINE         reduce using rule 168 (primary_expression -> array_literal .)
    $end            reduce using rule 168 (primary_expression -> array_literal .)
    RPAREN          reduce using rule 168 (primary_expression -> array_literal .)
    WHEN            reduce using rule 168 (primary_expression -> array_literal .)
    END             reduce using rule 168 (primary_expression -> array_literal .)
    ELSIF           reduce using rule 168 (primary_expression -> array_literal .)
    ELSE            reduce using rule 168 (primary_expression -> array_literal .)
    RBRACE          reduce using rule 168 (primary_expression -> array_literal .)
    LBRACE          reduce using rule 168 (primary_expression -> array_literal .)
    ID              reduce using rule 168 (primary_expression -> array_literal .)
    CASE            reduce using rule 168 (primary_expression -> array_literal .)
    RETURN          reduce using rule 168 (primary_expression -> array_literal .)
    BREAK           reduce using rule 168 (primary_expression -> array_literal .)
    NEXT            reduce using rule 168 (primary_expression -> array_literal .)
    UNDERSCORE      reduce using rule 168 (primary_expression -> array_literal .)
    ASTERISK        reduce using rule 168 (primary_expression -> array_literal .)
    IF              reduce using rule 168 (primary_expression -> array_literal .)
    UNLESS          reduce using rule 168 (primary_expression -> array_literal .)
    WHILE           reduce using rule 168 (primary_expression -> array_literal .)
    UNTIL           reduce using rule 168 (primary_expression -> array_literal .)
    LOOP            reduce using rule 168 (primary_expression -> array_literal .)
    EXCLAMATION     reduce using rule 168 (primary_expression -> array_literal .)
    TILDE           reduce using rule 168 (primary_expression -> array_literal .)
    LPAREN          reduce using rule 168 (primary_expression -> array_literal .)
    LBRACKET        reduce using rule 168 (primary_expression -> array_literal .)
    INTNUMBER       reduce using rule 168 (primary_expression -> array_literal .)
    FLOATNUMBER     reduce using rule 168 (primary_expression -> array_literal .)
    STRING          reduce using rule 168 (primary_expression -> array_literal .)
    CHAR            reduce using rule 168 (primary_expression -> array_literal .)
    TRUE            reduce using rule 168 (primary_expression -> array_literal .)
    FALSE           reduce using rule 168 (primary_expression -> array_literal .)
    COMMA           reduce using rule 168 (primary_expression -> array_literal .)
    RBRACKET        reduce using rule 168 (primary_expression -> array_literal .)
    CONSTANT        reduce using rule 168 (primary_expression -> array_literal .)
    MODULE          reduce using rule 168 (primary_expression -> array_literal .)
    DEF             reduce using rule 168 (primary_expression -> array_literal .)
    TCOLON          reduce using rule 168 (primary_expression -> array_literal .)


state 66

    (169) primary_expression -> literal .

    POTENCIACAO     reduce using rule 169 (primary_expression -> literal .)
    MULTI           reduce using rule 169 (primary_expression -> literal .)
    DIVIDE          reduce using rule 169 (primary_expression -> literal .)
    MODULO          reduce using rule 169 (primary_expression -> literal .)
    PLUS            reduce using rule 169 (primary_expression -> literal .)
    MINUS           reduce using rule 169 (primary_expression -> literal .)
    GREATER_THAN    reduce using rule 169 (primary_expression -> literal .)
    LESS_THAN       reduce using rule 169 (primary_expression -> literal .)
    GREATER_EQUAL   reduce using rule 169 (primary_expression -> literal .)
    LESS_EQUAL      reduce using rule 169 (primary_expression -> literal .)
    EQUAL           reduce using rule 169 (primary_expression -> literal .)
    NOT_EQUAL       reduce using rule 169 (primary_expression -> literal .)
    TIPO_EQUAL      reduce using rule 169 (primary_expression -> literal .)
    AND             reduce using rule 169 (primary_expression -> literal .)
    DOTDOT          reduce using rule 169 (primary_expression -> literal .)
    DOTDOTDOT       reduce using rule 169 (primary_expression -> literal .)
    OR              reduce using rule 169 (primary_expression -> literal .)
    QMARK           reduce using rule 169 (primary_expression -> literal .)
    DOT             reduce using rule 169 (primary_expression -> literal .)
    NEWLINE         reduce using rule 169 (primary_expression -> literal .)
    $end            reduce using rule 169 (primary_expression -> literal .)
    RPAREN          reduce using rule 169 (primary_expression -> literal .)
    WHEN            reduce using rule 169 (primary_expression -> literal .)
    END             reduce using rule 169 (primary_expression -> literal .)
    ELSIF           reduce using rule 169 (primary_expression -> literal .)
    ELSE            reduce using rule 169 (primary_expression -> literal .)
    RBRACE          reduce using rule 169 (primary_expression -> literal .)
    LBRACE          reduce using rule 169 (primary_expression -> literal .)
    ID              reduce using rule 169 (primary_expression -> literal .)
    CASE            reduce using rule 169 (primary_expression -> literal .)
    RETURN          reduce using rule 169 (primary_expression -> literal .)
    BREAK           reduce using rule 169 (primary_expression -> literal .)
    NEXT            reduce using rule 169 (primary_expression -> literal .)
    UNDERSCORE      reduce using rule 169 (primary_expression -> literal .)
    ASTERISK        reduce using rule 169 (primary_expression -> literal .)
    IF              reduce using rule 169 (primary_expression -> literal .)
    UNLESS          reduce using rule 169 (primary_expression -> literal .)
    WHILE           reduce using rule 169 (primary_expression -> literal .)
    UNTIL           reduce using rule 169 (primary_expression -> literal .)
    LOOP            reduce using rule 169 (primary_expression -> literal .)
    EXCLAMATION     reduce using rule 169 (primary_expression -> literal .)
    TILDE           reduce using rule 169 (primary_expression -> literal .)
    LPAREN          reduce using rule 169 (primary_expression -> literal .)
    LBRACKET        reduce using rule 169 (primary_expression -> literal .)
    INTNUMBER       reduce using rule 169 (primary_expression -> literal .)
    FLOATNUMBER     reduce using rule 169 (primary_expression -> literal .)
    STRING          reduce using rule 169 (primary_expression -> literal .)
    CHAR            reduce using rule 169 (primary_expression -> literal .)
    TRUE            reduce using rule 169 (primary_expression -> literal .)
    FALSE           reduce using rule 169 (primary_expression -> literal .)
    COMMA           reduce using rule 169 (primary_expression -> literal .)
    RBRACKET        reduce using rule 169 (primary_expression -> literal .)
    CONSTANT        reduce using rule 169 (primary_expression -> literal .)
    MODULE          reduce using rule 169 (primary_expression -> literal .)
    DEF             reduce using rule 169 (primary_expression -> literal .)
    TCOLON          reduce using rule 169 (primary_expression -> literal .)


state 67

    (171) array_literal -> LBRACKET . opt_expression_list RBRACKET
    (75) opt_expression_list -> . expression_list
    (76) opt_expression_list -> . empty
    (77) expression_list -> . expression
    (78) expression_list -> . expression_list COMMA expression
    (172) empty -> .
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    RBRACKET        reduce using rule 172 (empty -> .)
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    opt_expression_list            shift and go to state 137
    expression_list                shift and go to state 138
    empty                          shift and go to state 139
    expression                     shift and go to state 140
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 68

    (61) literal -> INTNUMBER .

    POTENCIACAO     reduce using rule 61 (literal -> INTNUMBER .)
    MULTI           reduce using rule 61 (literal -> INTNUMBER .)
    DIVIDE          reduce using rule 61 (literal -> INTNUMBER .)
    MODULO          reduce using rule 61 (literal -> INTNUMBER .)
    PLUS            reduce using rule 61 (literal -> INTNUMBER .)
    MINUS           reduce using rule 61 (literal -> INTNUMBER .)
    GREATER_THAN    reduce using rule 61 (literal -> INTNUMBER .)
    LESS_THAN       reduce using rule 61 (literal -> INTNUMBER .)
    GREATER_EQUAL   reduce using rule 61 (literal -> INTNUMBER .)
    LESS_EQUAL      reduce using rule 61 (literal -> INTNUMBER .)
    EQUAL           reduce using rule 61 (literal -> INTNUMBER .)
    NOT_EQUAL       reduce using rule 61 (literal -> INTNUMBER .)
    TIPO_EQUAL      reduce using rule 61 (literal -> INTNUMBER .)
    AND             reduce using rule 61 (literal -> INTNUMBER .)
    DOTDOT          reduce using rule 61 (literal -> INTNUMBER .)
    DOTDOTDOT       reduce using rule 61 (literal -> INTNUMBER .)
    OR              reduce using rule 61 (literal -> INTNUMBER .)
    QMARK           reduce using rule 61 (literal -> INTNUMBER .)
    DOT             reduce using rule 61 (literal -> INTNUMBER .)
    NEWLINE         reduce using rule 61 (literal -> INTNUMBER .)
    $end            reduce using rule 61 (literal -> INTNUMBER .)
    RPAREN          reduce using rule 61 (literal -> INTNUMBER .)
    WHEN            reduce using rule 61 (literal -> INTNUMBER .)
    END             reduce using rule 61 (literal -> INTNUMBER .)
    ELSIF           reduce using rule 61 (literal -> INTNUMBER .)
    ELSE            reduce using rule 61 (literal -> INTNUMBER .)
    RBRACE          reduce using rule 61 (literal -> INTNUMBER .)
    LBRACE          reduce using rule 61 (literal -> INTNUMBER .)
    ID              reduce using rule 61 (literal -> INTNUMBER .)
    CASE            reduce using rule 61 (literal -> INTNUMBER .)
    RETURN          reduce using rule 61 (literal -> INTNUMBER .)
    BREAK           reduce using rule 61 (literal -> INTNUMBER .)
    NEXT            reduce using rule 61 (literal -> INTNUMBER .)
    UNDERSCORE      reduce using rule 61 (literal -> INTNUMBER .)
    ASTERISK        reduce using rule 61 (literal -> INTNUMBER .)
    IF              reduce using rule 61 (literal -> INTNUMBER .)
    UNLESS          reduce using rule 61 (literal -> INTNUMBER .)
    WHILE           reduce using rule 61 (literal -> INTNUMBER .)
    UNTIL           reduce using rule 61 (literal -> INTNUMBER .)
    LOOP            reduce using rule 61 (literal -> INTNUMBER .)
    EXCLAMATION     reduce using rule 61 (literal -> INTNUMBER .)
    TILDE           reduce using rule 61 (literal -> INTNUMBER .)
    LPAREN          reduce using rule 61 (literal -> INTNUMBER .)
    LBRACKET        reduce using rule 61 (literal -> INTNUMBER .)
    INTNUMBER       reduce using rule 61 (literal -> INTNUMBER .)
    FLOATNUMBER     reduce using rule 61 (literal -> INTNUMBER .)
    STRING          reduce using rule 61 (literal -> INTNUMBER .)
    CHAR            reduce using rule 61 (literal -> INTNUMBER .)
    TRUE            reduce using rule 61 (literal -> INTNUMBER .)
    FALSE           reduce using rule 61 (literal -> INTNUMBER .)
    COMMA           reduce using rule 61 (literal -> INTNUMBER .)
    RBRACKET        reduce using rule 61 (literal -> INTNUMBER .)
    CONSTANT        reduce using rule 61 (literal -> INTNUMBER .)
    MODULE          reduce using rule 61 (literal -> INTNUMBER .)
    DEF             reduce using rule 61 (literal -> INTNUMBER .)
    TCOLON          reduce using rule 61 (literal -> INTNUMBER .)


state 69

    (62) literal -> FLOATNUMBER .

    POTENCIACAO     reduce using rule 62 (literal -> FLOATNUMBER .)
    MULTI           reduce using rule 62 (literal -> FLOATNUMBER .)
    DIVIDE          reduce using rule 62 (literal -> FLOATNUMBER .)
    MODULO          reduce using rule 62 (literal -> FLOATNUMBER .)
    PLUS            reduce using rule 62 (literal -> FLOATNUMBER .)
    MINUS           reduce using rule 62 (literal -> FLOATNUMBER .)
    GREATER_THAN    reduce using rule 62 (literal -> FLOATNUMBER .)
    LESS_THAN       reduce using rule 62 (literal -> FLOATNUMBER .)
    GREATER_EQUAL   reduce using rule 62 (literal -> FLOATNUMBER .)
    LESS_EQUAL      reduce using rule 62 (literal -> FLOATNUMBER .)
    EQUAL           reduce using rule 62 (literal -> FLOATNUMBER .)
    NOT_EQUAL       reduce using rule 62 (literal -> FLOATNUMBER .)
    TIPO_EQUAL      reduce using rule 62 (literal -> FLOATNUMBER .)
    AND             reduce using rule 62 (literal -> FLOATNUMBER .)
    DOTDOT          reduce using rule 62 (literal -> FLOATNUMBER .)
    DOTDOTDOT       reduce using rule 62 (literal -> FLOATNUMBER .)
    OR              reduce using rule 62 (literal -> FLOATNUMBER .)
    QMARK           reduce using rule 62 (literal -> FLOATNUMBER .)
    DOT             reduce using rule 62 (literal -> FLOATNUMBER .)
    NEWLINE         reduce using rule 62 (literal -> FLOATNUMBER .)
    $end            reduce using rule 62 (literal -> FLOATNUMBER .)
    RPAREN          reduce using rule 62 (literal -> FLOATNUMBER .)
    WHEN            reduce using rule 62 (literal -> FLOATNUMBER .)
    END             reduce using rule 62 (literal -> FLOATNUMBER .)
    ELSIF           reduce using rule 62 (literal -> FLOATNUMBER .)
    ELSE            reduce using rule 62 (literal -> FLOATNUMBER .)
    RBRACE          reduce using rule 62 (literal -> FLOATNUMBER .)
    LBRACE          reduce using rule 62 (literal -> FLOATNUMBER .)
    ID              reduce using rule 62 (literal -> FLOATNUMBER .)
    CASE            reduce using rule 62 (literal -> FLOATNUMBER .)
    RETURN          reduce using rule 62 (literal -> FLOATNUMBER .)
    BREAK           reduce using rule 62 (literal -> FLOATNUMBER .)
    NEXT            reduce using rule 62 (literal -> FLOATNUMBER .)
    UNDERSCORE      reduce using rule 62 (literal -> FLOATNUMBER .)
    ASTERISK        reduce using rule 62 (literal -> FLOATNUMBER .)
    IF              reduce using rule 62 (literal -> FLOATNUMBER .)
    UNLESS          reduce using rule 62 (literal -> FLOATNUMBER .)
    WHILE           reduce using rule 62 (literal -> FLOATNUMBER .)
    UNTIL           reduce using rule 62 (literal -> FLOATNUMBER .)
    LOOP            reduce using rule 62 (literal -> FLOATNUMBER .)
    EXCLAMATION     reduce using rule 62 (literal -> FLOATNUMBER .)
    TILDE           reduce using rule 62 (literal -> FLOATNUMBER .)
    LPAREN          reduce using rule 62 (literal -> FLOATNUMBER .)
    LBRACKET        reduce using rule 62 (literal -> FLOATNUMBER .)
    INTNUMBER       reduce using rule 62 (literal -> FLOATNUMBER .)
    FLOATNUMBER     reduce using rule 62 (literal -> FLOATNUMBER .)
    STRING          reduce using rule 62 (literal -> FLOATNUMBER .)
    CHAR            reduce using rule 62 (literal -> FLOATNUMBER .)
    TRUE            reduce using rule 62 (literal -> FLOATNUMBER .)
    FALSE           reduce using rule 62 (literal -> FLOATNUMBER .)
    COMMA           reduce using rule 62 (literal -> FLOATNUMBER .)
    RBRACKET        reduce using rule 62 (literal -> FLOATNUMBER .)
    CONSTANT        reduce using rule 62 (literal -> FLOATNUMBER .)
    MODULE          reduce using rule 62 (literal -> FLOATNUMBER .)
    DEF             reduce using rule 62 (literal -> FLOATNUMBER .)
    TCOLON          reduce using rule 62 (literal -> FLOATNUMBER .)


state 70

    (64) literal -> CHAR .

    POTENCIACAO     reduce using rule 64 (literal -> CHAR .)
    MULTI           reduce using rule 64 (literal -> CHAR .)
    DIVIDE          reduce using rule 64 (literal -> CHAR .)
    MODULO          reduce using rule 64 (literal -> CHAR .)
    PLUS            reduce using rule 64 (literal -> CHAR .)
    MINUS           reduce using rule 64 (literal -> CHAR .)
    GREATER_THAN    reduce using rule 64 (literal -> CHAR .)
    LESS_THAN       reduce using rule 64 (literal -> CHAR .)
    GREATER_EQUAL   reduce using rule 64 (literal -> CHAR .)
    LESS_EQUAL      reduce using rule 64 (literal -> CHAR .)
    EQUAL           reduce using rule 64 (literal -> CHAR .)
    NOT_EQUAL       reduce using rule 64 (literal -> CHAR .)
    TIPO_EQUAL      reduce using rule 64 (literal -> CHAR .)
    AND             reduce using rule 64 (literal -> CHAR .)
    DOTDOT          reduce using rule 64 (literal -> CHAR .)
    DOTDOTDOT       reduce using rule 64 (literal -> CHAR .)
    OR              reduce using rule 64 (literal -> CHAR .)
    QMARK           reduce using rule 64 (literal -> CHAR .)
    DOT             reduce using rule 64 (literal -> CHAR .)
    NEWLINE         reduce using rule 64 (literal -> CHAR .)
    $end            reduce using rule 64 (literal -> CHAR .)
    RPAREN          reduce using rule 64 (literal -> CHAR .)
    WHEN            reduce using rule 64 (literal -> CHAR .)
    END             reduce using rule 64 (literal -> CHAR .)
    ELSIF           reduce using rule 64 (literal -> CHAR .)
    ELSE            reduce using rule 64 (literal -> CHAR .)
    RBRACE          reduce using rule 64 (literal -> CHAR .)
    LBRACE          reduce using rule 64 (literal -> CHAR .)
    ID              reduce using rule 64 (literal -> CHAR .)
    CASE            reduce using rule 64 (literal -> CHAR .)
    RETURN          reduce using rule 64 (literal -> CHAR .)
    BREAK           reduce using rule 64 (literal -> CHAR .)
    NEXT            reduce using rule 64 (literal -> CHAR .)
    UNDERSCORE      reduce using rule 64 (literal -> CHAR .)
    ASTERISK        reduce using rule 64 (literal -> CHAR .)
    IF              reduce using rule 64 (literal -> CHAR .)
    UNLESS          reduce using rule 64 (literal -> CHAR .)
    WHILE           reduce using rule 64 (literal -> CHAR .)
    UNTIL           reduce using rule 64 (literal -> CHAR .)
    LOOP            reduce using rule 64 (literal -> CHAR .)
    EXCLAMATION     reduce using rule 64 (literal -> CHAR .)
    TILDE           reduce using rule 64 (literal -> CHAR .)
    LPAREN          reduce using rule 64 (literal -> CHAR .)
    LBRACKET        reduce using rule 64 (literal -> CHAR .)
    INTNUMBER       reduce using rule 64 (literal -> CHAR .)
    FLOATNUMBER     reduce using rule 64 (literal -> CHAR .)
    STRING          reduce using rule 64 (literal -> CHAR .)
    CHAR            reduce using rule 64 (literal -> CHAR .)
    TRUE            reduce using rule 64 (literal -> CHAR .)
    FALSE           reduce using rule 64 (literal -> CHAR .)
    COMMA           reduce using rule 64 (literal -> CHAR .)
    RBRACKET        reduce using rule 64 (literal -> CHAR .)
    CONSTANT        reduce using rule 64 (literal -> CHAR .)
    MODULE          reduce using rule 64 (literal -> CHAR .)
    DEF             reduce using rule 64 (literal -> CHAR .)
    TCOLON          reduce using rule 64 (literal -> CHAR .)


state 71

    (65) literal -> TRUE .

    POTENCIACAO     reduce using rule 65 (literal -> TRUE .)
    MULTI           reduce using rule 65 (literal -> TRUE .)
    DIVIDE          reduce using rule 65 (literal -> TRUE .)
    MODULO          reduce using rule 65 (literal -> TRUE .)
    PLUS            reduce using rule 65 (literal -> TRUE .)
    MINUS           reduce using rule 65 (literal -> TRUE .)
    GREATER_THAN    reduce using rule 65 (literal -> TRUE .)
    LESS_THAN       reduce using rule 65 (literal -> TRUE .)
    GREATER_EQUAL   reduce using rule 65 (literal -> TRUE .)
    LESS_EQUAL      reduce using rule 65 (literal -> TRUE .)
    EQUAL           reduce using rule 65 (literal -> TRUE .)
    NOT_EQUAL       reduce using rule 65 (literal -> TRUE .)
    TIPO_EQUAL      reduce using rule 65 (literal -> TRUE .)
    AND             reduce using rule 65 (literal -> TRUE .)
    DOTDOT          reduce using rule 65 (literal -> TRUE .)
    DOTDOTDOT       reduce using rule 65 (literal -> TRUE .)
    OR              reduce using rule 65 (literal -> TRUE .)
    QMARK           reduce using rule 65 (literal -> TRUE .)
    DOT             reduce using rule 65 (literal -> TRUE .)
    NEWLINE         reduce using rule 65 (literal -> TRUE .)
    $end            reduce using rule 65 (literal -> TRUE .)
    RPAREN          reduce using rule 65 (literal -> TRUE .)
    WHEN            reduce using rule 65 (literal -> TRUE .)
    END             reduce using rule 65 (literal -> TRUE .)
    ELSIF           reduce using rule 65 (literal -> TRUE .)
    ELSE            reduce using rule 65 (literal -> TRUE .)
    RBRACE          reduce using rule 65 (literal -> TRUE .)
    LBRACE          reduce using rule 65 (literal -> TRUE .)
    ID              reduce using rule 65 (literal -> TRUE .)
    CASE            reduce using rule 65 (literal -> TRUE .)
    RETURN          reduce using rule 65 (literal -> TRUE .)
    BREAK           reduce using rule 65 (literal -> TRUE .)
    NEXT            reduce using rule 65 (literal -> TRUE .)
    UNDERSCORE      reduce using rule 65 (literal -> TRUE .)
    ASTERISK        reduce using rule 65 (literal -> TRUE .)
    IF              reduce using rule 65 (literal -> TRUE .)
    UNLESS          reduce using rule 65 (literal -> TRUE .)
    WHILE           reduce using rule 65 (literal -> TRUE .)
    UNTIL           reduce using rule 65 (literal -> TRUE .)
    LOOP            reduce using rule 65 (literal -> TRUE .)
    EXCLAMATION     reduce using rule 65 (literal -> TRUE .)
    TILDE           reduce using rule 65 (literal -> TRUE .)
    LPAREN          reduce using rule 65 (literal -> TRUE .)
    LBRACKET        reduce using rule 65 (literal -> TRUE .)
    INTNUMBER       reduce using rule 65 (literal -> TRUE .)
    FLOATNUMBER     reduce using rule 65 (literal -> TRUE .)
    STRING          reduce using rule 65 (literal -> TRUE .)
    CHAR            reduce using rule 65 (literal -> TRUE .)
    TRUE            reduce using rule 65 (literal -> TRUE .)
    FALSE           reduce using rule 65 (literal -> TRUE .)
    COMMA           reduce using rule 65 (literal -> TRUE .)
    RBRACKET        reduce using rule 65 (literal -> TRUE .)
    CONSTANT        reduce using rule 65 (literal -> TRUE .)
    MODULE          reduce using rule 65 (literal -> TRUE .)
    DEF             reduce using rule 65 (literal -> TRUE .)
    TCOLON          reduce using rule 65 (literal -> TRUE .)


state 72

    (66) literal -> FALSE .

    POTENCIACAO     reduce using rule 66 (literal -> FALSE .)
    MULTI           reduce using rule 66 (literal -> FALSE .)
    DIVIDE          reduce using rule 66 (literal -> FALSE .)
    MODULO          reduce using rule 66 (literal -> FALSE .)
    PLUS            reduce using rule 66 (literal -> FALSE .)
    MINUS           reduce using rule 66 (literal -> FALSE .)
    GREATER_THAN    reduce using rule 66 (literal -> FALSE .)
    LESS_THAN       reduce using rule 66 (literal -> FALSE .)
    GREATER_EQUAL   reduce using rule 66 (literal -> FALSE .)
    LESS_EQUAL      reduce using rule 66 (literal -> FALSE .)
    EQUAL           reduce using rule 66 (literal -> FALSE .)
    NOT_EQUAL       reduce using rule 66 (literal -> FALSE .)
    TIPO_EQUAL      reduce using rule 66 (literal -> FALSE .)
    AND             reduce using rule 66 (literal -> FALSE .)
    DOTDOT          reduce using rule 66 (literal -> FALSE .)
    DOTDOTDOT       reduce using rule 66 (literal -> FALSE .)
    OR              reduce using rule 66 (literal -> FALSE .)
    QMARK           reduce using rule 66 (literal -> FALSE .)
    DOT             reduce using rule 66 (literal -> FALSE .)
    NEWLINE         reduce using rule 66 (literal -> FALSE .)
    $end            reduce using rule 66 (literal -> FALSE .)
    RPAREN          reduce using rule 66 (literal -> FALSE .)
    WHEN            reduce using rule 66 (literal -> FALSE .)
    END             reduce using rule 66 (literal -> FALSE .)
    ELSIF           reduce using rule 66 (literal -> FALSE .)
    ELSE            reduce using rule 66 (literal -> FALSE .)
    RBRACE          reduce using rule 66 (literal -> FALSE .)
    LBRACE          reduce using rule 66 (literal -> FALSE .)
    ID              reduce using rule 66 (literal -> FALSE .)
    CASE            reduce using rule 66 (literal -> FALSE .)
    RETURN          reduce using rule 66 (literal -> FALSE .)
    BREAK           reduce using rule 66 (literal -> FALSE .)
    NEXT            reduce using rule 66 (literal -> FALSE .)
    UNDERSCORE      reduce using rule 66 (literal -> FALSE .)
    ASTERISK        reduce using rule 66 (literal -> FALSE .)
    IF              reduce using rule 66 (literal -> FALSE .)
    UNLESS          reduce using rule 66 (literal -> FALSE .)
    WHILE           reduce using rule 66 (literal -> FALSE .)
    UNTIL           reduce using rule 66 (literal -> FALSE .)
    LOOP            reduce using rule 66 (literal -> FALSE .)
    EXCLAMATION     reduce using rule 66 (literal -> FALSE .)
    TILDE           reduce using rule 66 (literal -> FALSE .)
    LPAREN          reduce using rule 66 (literal -> FALSE .)
    LBRACKET        reduce using rule 66 (literal -> FALSE .)
    INTNUMBER       reduce using rule 66 (literal -> FALSE .)
    FLOATNUMBER     reduce using rule 66 (literal -> FALSE .)
    STRING          reduce using rule 66 (literal -> FALSE .)
    CHAR            reduce using rule 66 (literal -> FALSE .)
    TRUE            reduce using rule 66 (literal -> FALSE .)
    FALSE           reduce using rule 66 (literal -> FALSE .)
    COMMA           reduce using rule 66 (literal -> FALSE .)
    RBRACKET        reduce using rule 66 (literal -> FALSE .)
    CONSTANT        reduce using rule 66 (literal -> FALSE .)
    MODULE          reduce using rule 66 (literal -> FALSE .)
    DEF             reduce using rule 66 (literal -> FALSE .)
    TCOLON          reduce using rule 66 (literal -> FALSE .)


state 73

    (1) program -> require_list constant_list . module_list function_list
    (2) program -> require_list constant_list . module_list
    (3) program -> require_list constant_list . function_list
    (6) program -> require_list constant_list .
    (23) module_list -> . module module_list
    (24) module_list -> . module
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (25) module -> . MODULE ID statements END
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 6 (program -> require_list constant_list .)
    MODULE          shift and go to state 16
    DEF             shift and go to state 18

    module_list                    shift and go to state 141
    function_list                  shift and go to state 142
    module                         shift and go to state 9
    function                       shift and go to state 10

state 74

    (4) program -> require_list module_list . function_list
    (7) program -> require_list module_list .
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 7 (program -> require_list module_list .)
    DEF             shift and go to state 18

    function_list                  shift and go to state 143
    function                       shift and go to state 10

state 75

    (9) program -> require_list function_list .

    $end            reduce using rule 9 (program -> require_list function_list .)


state 76

    (5) program -> constant_list module_list . function_list
    (8) program -> constant_list module_list .
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 8 (program -> constant_list module_list .)
    DEF             shift and go to state 18

    function_list                  shift and go to state 144
    function                       shift and go to state 10

state 77

    (10) program -> constant_list function_list .

    $end            reduce using rule 10 (program -> constant_list function_list .)


state 78

    (11) program -> module_list function_list .

    $end            reduce using rule 11 (program -> module_list function_list .)


state 79

    (17) require_list -> require require_list .

    CONSTANT        reduce using rule 17 (require_list -> require require_list .)
    MODULE          reduce using rule 17 (require_list -> require require_list .)
    DEF             reduce using rule 17 (require_list -> require require_list .)
    $end            reduce using rule 17 (require_list -> require require_list .)


state 80

    (20) constant_list -> constant constant_list .

    MODULE          reduce using rule 20 (constant_list -> constant constant_list .)
    DEF             reduce using rule 20 (constant_list -> constant constant_list .)
    $end            reduce using rule 20 (constant_list -> constant constant_list .)


state 81

    (23) module_list -> module module_list .

    DEF             reduce using rule 23 (module_list -> module module_list .)
    $end            reduce using rule 23 (module_list -> module module_list .)


state 82

    (27) function_list -> function function_list .

    $end            reduce using rule 27 (function_list -> function function_list .)


state 83

    (19) require -> REQUIRE STRING .

    REQUIRE         reduce using rule 19 (require -> REQUIRE STRING .)
    CONSTANT        reduce using rule 19 (require -> REQUIRE STRING .)
    MODULE          reduce using rule 19 (require -> REQUIRE STRING .)
    DEF             reduce using rule 19 (require -> REQUIRE STRING .)
    $end            reduce using rule 19 (require -> REQUIRE STRING .)


state 84

    (22) constant -> CONSTANT ASSIGN . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 145
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 85

    (115) iterator -> expression DOT . MULTI statements
    (116) iterator -> expression DOT . EACH DO PIPE ID PIPE statements END
    (117) iterator -> expression DOT . EACH LBRACE PIPE ID PIPE RBRACE statements

    MULTI           shift and go to state 146
    EACH            shift and go to state 147


state 86

    (25) module -> MODULE ID . statements END
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 148
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 87

    (73) function_call -> ID LPAREN . expression_list RPAREN
    (74) function_call -> ID LPAREN . RPAREN
    (77) expression_list -> . expression
    (78) expression_list -> . expression_list COMMA expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    RPAREN          shift and go to state 150
    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression_list                shift and go to state 149
    expression                     shift and go to state 140
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 88

    (70) list_of_identifiers -> ID COMMA . list_of_identifiers
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers

    ID              shift and go to state 151

    list_of_identifiers            shift and go to state 152

state 89

    (28) function -> DEF ID . LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> DEF ID . opt_return_type NEWLINE statements END
    (38) opt_return_type -> . COLON types
    (39) opt_return_type -> . empty
    (172) empty -> .

    LPAREN          shift and go to state 153
    COLON           shift and go to state 155
    NEWLINE         reduce using rule 172 (empty -> .)

    opt_return_type                shift and go to state 154
    empty                          shift and go to state 156

state 90

    (167) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 157


state 91

    (132) assignment_target -> ID .
    (170) primary_expression -> ID .

    PLUS_ASSIGN     reduce using rule 132 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 132 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 132 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 132 (assignment_target -> ID .)
    POTENCIACAO     reduce using rule 170 (primary_expression -> ID .)
    MULTI           reduce using rule 170 (primary_expression -> ID .)
    DIVIDE          reduce using rule 170 (primary_expression -> ID .)
    MODULO          reduce using rule 170 (primary_expression -> ID .)
    PLUS            reduce using rule 170 (primary_expression -> ID .)
    MINUS           reduce using rule 170 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 170 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 170 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 170 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 170 (primary_expression -> ID .)
    EQUAL           reduce using rule 170 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 170 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 170 (primary_expression -> ID .)
    AND             reduce using rule 170 (primary_expression -> ID .)
    DOTDOT          reduce using rule 170 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 170 (primary_expression -> ID .)
    OR              reduce using rule 170 (primary_expression -> ID .)
    QMARK           reduce using rule 170 (primary_expression -> ID .)
    RPAREN          reduce using rule 170 (primary_expression -> ID .)
    WHEN            reduce using rule 170 (primary_expression -> ID .)
    NEWLINE         reduce using rule 170 (primary_expression -> ID .)
    $end            reduce using rule 170 (primary_expression -> ID .)
    END             reduce using rule 170 (primary_expression -> ID .)
    ELSIF           reduce using rule 170 (primary_expression -> ID .)
    ELSE            reduce using rule 170 (primary_expression -> ID .)
    RBRACE          reduce using rule 170 (primary_expression -> ID .)
    LBRACE          reduce using rule 170 (primary_expression -> ID .)
    ID              reduce using rule 170 (primary_expression -> ID .)
    CASE            reduce using rule 170 (primary_expression -> ID .)
    RETURN          reduce using rule 170 (primary_expression -> ID .)
    BREAK           reduce using rule 170 (primary_expression -> ID .)
    NEXT            reduce using rule 170 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 170 (primary_expression -> ID .)
    ASTERISK        reduce using rule 170 (primary_expression -> ID .)
    IF              reduce using rule 170 (primary_expression -> ID .)
    UNLESS          reduce using rule 170 (primary_expression -> ID .)
    WHILE           reduce using rule 170 (primary_expression -> ID .)
    UNTIL           reduce using rule 170 (primary_expression -> ID .)
    LOOP            reduce using rule 170 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 170 (primary_expression -> ID .)
    TILDE           reduce using rule 170 (primary_expression -> ID .)
    LPAREN          reduce using rule 170 (primary_expression -> ID .)
    LBRACKET        reduce using rule 170 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 170 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 170 (primary_expression -> ID .)
    STRING          reduce using rule 170 (primary_expression -> ID .)
    CHAR            reduce using rule 170 (primary_expression -> ID .)
    TRUE            reduce using rule 170 (primary_expression -> ID .)
    FALSE           reduce using rule 170 (primary_expression -> ID .)
    COMMA           reduce using rule 170 (primary_expression -> ID .)
    RBRACKET        reduce using rule 170 (primary_expression -> ID .)
    CONSTANT        reduce using rule 170 (primary_expression -> ID .)
    MODULE          reduce using rule 170 (primary_expression -> ID .)
    DEF             reduce using rule 170 (primary_expression -> ID .)
    DOT             reduce using rule 170 (primary_expression -> ID .)
    TCOLON          reduce using rule 170 (primary_expression -> ID .)


state 92

    (80) statements_list -> statement NEWLINE . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statement                      shift and go to state 20
    statements_list                shift and go to state 158
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 93

    (67) variable_declaration -> list_of_identifiers COLON . types ASSIGN expression_list1
    (40) types -> . STRING
    (41) types -> . CHAR
    (42) types -> . NIL
    (43) types -> . integer
    (44) types -> . float
    (45) types -> . boolean
    (46) integer -> . INT
    (47) integer -> . INT8
    (48) integer -> . INT16
    (49) integer -> . INT32
    (50) integer -> . INT64
    (51) integer -> . INT128
    (52) integer -> . UINT8
    (53) integer -> . UINT16
    (54) integer -> . UINT32
    (55) integer -> . UINT64
    (56) integer -> . UINT128
    (57) float -> . FLOAT
    (58) float -> . FLOAT32
    (59) float -> . FLOAT64
    (60) boolean -> . BOOL

    STRING          shift and go to state 160
    CHAR            shift and go to state 161
    NIL             shift and go to state 162
    INT             shift and go to state 166
    INT8            shift and go to state 167
    INT16           shift and go to state 168
    INT32           shift and go to state 169
    INT64           shift and go to state 170
    INT128          shift and go to state 171
    UINT8           shift and go to state 172
    UINT16          shift and go to state 173
    UINT32          shift and go to state 174
    UINT64          shift and go to state 175
    UINT128         shift and go to state 176
    FLOAT           shift and go to state 177
    FLOAT32         shift and go to state 178
    FLOAT64         shift and go to state 179
    BOOL            shift and go to state 180

    types                          shift and go to state 159
    integer                        shift and go to state 163
    float                          shift and go to state 164
    boolean                        shift and go to state 165

state 94

    (68) variable_declaration -> list_of_identifiers ASSIGN . expression_list1
    (71) expression_list1 -> . expression
    (72) expression_list1 -> . expression COMMA expression_list1
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression_list1               shift and go to state 181
    expression                     shift and go to state 182
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 95

    (127) assignment_expression -> assignment_target PLUS_ASSIGN . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    assignment_target              shift and go to state 32
    expression                     shift and go to state 183
    assignment_expression          shift and go to state 24
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 96

    (128) assignment_expression -> assignment_target MINUS_ASSIGN . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    assignment_target              shift and go to state 32
    expression                     shift and go to state 184
    assignment_expression          shift and go to state 24
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 97

    (129) assignment_expression -> assignment_target MULTI_ASSIGN . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    assignment_target              shift and go to state 32
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 24
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 98

    (130) assignment_expression -> assignment_target DIVIDE_ASSIGN . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    assignment_target              shift and go to state 32
    expression                     shift and go to state 186
    assignment_expression          shift and go to state 24
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 99

    (118) case_structure -> CASE expression . when_list opt_else END
    (119) when_list -> . WHEN expression statements
    (120) when_list -> . when_list WHEN expression statements

    WHEN            shift and go to state 188

    when_list                      shift and go to state 187

state 100

    (121) return_statement -> RETURN opt_expression .

    NEWLINE         reduce using rule 121 (return_statement -> RETURN opt_expression .)
    $end            reduce using rule 121 (return_statement -> RETURN opt_expression .)
    END             reduce using rule 121 (return_statement -> RETURN opt_expression .)
    ELSIF           reduce using rule 121 (return_statement -> RETURN opt_expression .)
    ELSE            reduce using rule 121 (return_statement -> RETURN opt_expression .)
    RBRACE          reduce using rule 121 (return_statement -> RETURN opt_expression .)
    WHEN            reduce using rule 121 (return_statement -> RETURN opt_expression .)


state 101

    (124) opt_expression -> expression .

    NEWLINE         reduce using rule 124 (opt_expression -> expression .)
    $end            reduce using rule 124 (opt_expression -> expression .)
    END             reduce using rule 124 (opt_expression -> expression .)
    ELSIF           reduce using rule 124 (opt_expression -> expression .)
    ELSE            reduce using rule 124 (opt_expression -> expression .)
    RBRACE          reduce using rule 124 (opt_expression -> expression .)
    WHEN            reduce using rule 124 (opt_expression -> expression .)


state 102

    (125) opt_expression -> empty .

    NEWLINE         reduce using rule 125 (opt_expression -> empty .)
    $end            reduce using rule 125 (opt_expression -> empty .)
    END             reduce using rule 125 (opt_expression -> empty .)
    ELSIF           reduce using rule 125 (opt_expression -> empty .)
    ELSE            reduce using rule 125 (opt_expression -> empty .)
    RBRACE          reduce using rule 125 (opt_expression -> empty .)
    WHEN            reduce using rule 125 (opt_expression -> empty .)


state 103

    (122) break_statement -> BREAK opt_expression .

    NEWLINE         reduce using rule 122 (break_statement -> BREAK opt_expression .)
    $end            reduce using rule 122 (break_statement -> BREAK opt_expression .)
    END             reduce using rule 122 (break_statement -> BREAK opt_expression .)
    ELSIF           reduce using rule 122 (break_statement -> BREAK opt_expression .)
    ELSE            reduce using rule 122 (break_statement -> BREAK opt_expression .)
    RBRACE          reduce using rule 122 (break_statement -> BREAK opt_expression .)
    WHEN            reduce using rule 122 (break_statement -> BREAK opt_expression .)


state 104

    (123) next_statement -> NEXT opt_expression .

    NEWLINE         reduce using rule 123 (next_statement -> NEXT opt_expression .)
    $end            reduce using rule 123 (next_statement -> NEXT opt_expression .)
    END             reduce using rule 123 (next_statement -> NEXT opt_expression .)
    ELSIF           reduce using rule 123 (next_statement -> NEXT opt_expression .)
    ELSE            reduce using rule 123 (next_statement -> NEXT opt_expression .)
    RBRACE          reduce using rule 123 (next_statement -> NEXT opt_expression .)
    WHEN            reduce using rule 123 (next_statement -> NEXT opt_expression .)


state 105

    (134) assignment_target -> ASTERISK assignment_target .

    PLUS_ASSIGN     reduce using rule 134 (assignment_target -> ASTERISK assignment_target .)
    MINUS_ASSIGN    reduce using rule 134 (assignment_target -> ASTERISK assignment_target .)
    MULTI_ASSIGN    reduce using rule 134 (assignment_target -> ASTERISK assignment_target .)
    DIVIDE_ASSIGN   reduce using rule 134 (assignment_target -> ASTERISK assignment_target .)


state 106

    (132) assignment_target -> ID .

    PLUS_ASSIGN     reduce using rule 132 (assignment_target -> ID .)
    MINUS_ASSIGN    reduce using rule 132 (assignment_target -> ID .)
    MULTI_ASSIGN    reduce using rule 132 (assignment_target -> ID .)
    DIVIDE_ASSIGN   reduce using rule 132 (assignment_target -> ID .)


state 107

    (135) ternary_expression -> range_expression QMARK . expression TCOLON expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    range_expression               shift and go to state 46
    expression                     shift and go to state 189
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 108

    (96) if_statement -> IF if_condition . statements opt_elsif opt_else END
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 190
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 109

    (98) if_condition -> expression .
    (99) if_condition -> expression . LBRACE statements RBRACE

    ID              reduce using rule 98 (if_condition -> expression .)
    CASE            reduce using rule 98 (if_condition -> expression .)
    RETURN          reduce using rule 98 (if_condition -> expression .)
    BREAK           reduce using rule 98 (if_condition -> expression .)
    NEXT            reduce using rule 98 (if_condition -> expression .)
    UNDERSCORE      reduce using rule 98 (if_condition -> expression .)
    ASTERISK        reduce using rule 98 (if_condition -> expression .)
    IF              reduce using rule 98 (if_condition -> expression .)
    UNLESS          reduce using rule 98 (if_condition -> expression .)
    WHILE           reduce using rule 98 (if_condition -> expression .)
    UNTIL           reduce using rule 98 (if_condition -> expression .)
    LOOP            reduce using rule 98 (if_condition -> expression .)
    PLUS            reduce using rule 98 (if_condition -> expression .)
    MINUS           reduce using rule 98 (if_condition -> expression .)
    EXCLAMATION     reduce using rule 98 (if_condition -> expression .)
    TILDE           reduce using rule 98 (if_condition -> expression .)
    LPAREN          reduce using rule 98 (if_condition -> expression .)
    LBRACKET        reduce using rule 98 (if_condition -> expression .)
    INTNUMBER       reduce using rule 98 (if_condition -> expression .)
    FLOATNUMBER     reduce using rule 98 (if_condition -> expression .)
    STRING          reduce using rule 98 (if_condition -> expression .)
    CHAR            reduce using rule 98 (if_condition -> expression .)
    TRUE            reduce using rule 98 (if_condition -> expression .)
    FALSE           reduce using rule 98 (if_condition -> expression .)
    LBRACE          shift and go to state 191


state 110

    (97) unless_statement -> UNLESS if_condition . statements opt_else END
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 192
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 111

    (111) while -> WHILE expression . statements
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 15
    statements                     shift and go to state 193
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 112

    (112) until -> UNTIL expression . statements
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 15
    statements                     shift and go to state 194
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 113

    (113) loop -> LOOP DO . statements END
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 195
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 114

    (114) loop -> LOOP LBRACE . statements RBRACE
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 196
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 115

    (137) range_expression -> logical_or_expression DOTDOT . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    logical_or_expression          shift and go to state 197
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 116

    (138) range_expression -> logical_or_expression DOTDOTDOT . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    logical_or_expression          shift and go to state 198
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 117

    (141) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    logical_and_expression         shift and go to state 199
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 118

    (143) logical_and_expression -> logical_and_expression AND . equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    equality_expression            shift and go to state 200
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 119

    (145) equality_expression -> equality_expression EQUAL . relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    relational_expression          shift and go to state 201
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 120

    (146) equality_expression -> equality_expression NOT_EQUAL . relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    relational_expression          shift and go to state 202
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 121

    (147) equality_expression -> equality_expression TIPO_EQUAL . relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    relational_expression          shift and go to state 203
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 122

    (149) relational_expression -> relational_expression GREATER_THAN . additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    additive_expression            shift and go to state 204
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 123

    (150) relational_expression -> relational_expression LESS_THAN . additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    additive_expression            shift and go to state 205
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 124

    (151) relational_expression -> relational_expression GREATER_EQUAL . additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    additive_expression            shift and go to state 206
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 125

    (152) relational_expression -> relational_expression LESS_EQUAL . additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    additive_expression            shift and go to state 207
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 126

    (154) additive_expression -> additive_expression PLUS . multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    multiplicative_expression      shift and go to state 208
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 127

    (155) additive_expression -> additive_expression MINUS . multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    multiplicative_expression      shift and go to state 209
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 128

    (157) multiplicative_expression -> multiplicative_expression MULTI . potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    potenciacao_expression         shift and go to state 210
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 129

    (158) multiplicative_expression -> multiplicative_expression DIVIDE . potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    potenciacao_expression         shift and go to state 211
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 130

    (159) multiplicative_expression -> multiplicative_expression MODULO . potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    potenciacao_expression         shift and go to state 212
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 131

    (162) unary_expression -> PLUS unary_expression .

    POTENCIACAO     reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    MULTI           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    DIVIDE          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    MODULO          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    PLUS            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    MINUS           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    GREATER_THAN    reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    LESS_THAN       reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    GREATER_EQUAL   reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    LESS_EQUAL      reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    EQUAL           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    NOT_EQUAL       reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    TIPO_EQUAL      reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    AND             reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    DOTDOT          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    DOTDOTDOT       reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    OR              reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    QMARK           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    DOT             reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    NEWLINE         reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    $end            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    RPAREN          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    WHEN            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    END             reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    ELSIF           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    ELSE            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    RBRACE          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    LBRACE          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    ID              reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    CASE            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    RETURN          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    BREAK           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    NEXT            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    UNDERSCORE      reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    ASTERISK        reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    IF              reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    UNLESS          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    WHILE           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    UNTIL           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    LOOP            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    EXCLAMATION     reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    TILDE           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    LPAREN          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    LBRACKET        reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    INTNUMBER       reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    FLOATNUMBER     reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    STRING          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    CHAR            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    TRUE            reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    FALSE           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    COMMA           reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    RBRACKET        reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    CONSTANT        reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    MODULE          reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    DEF             reduce using rule 162 (unary_expression -> PLUS unary_expression .)
    TCOLON          reduce using rule 162 (unary_expression -> PLUS unary_expression .)


state 132

    (170) primary_expression -> ID .

    POTENCIACAO     reduce using rule 170 (primary_expression -> ID .)
    MULTI           reduce using rule 170 (primary_expression -> ID .)
    DIVIDE          reduce using rule 170 (primary_expression -> ID .)
    MODULO          reduce using rule 170 (primary_expression -> ID .)
    PLUS            reduce using rule 170 (primary_expression -> ID .)
    MINUS           reduce using rule 170 (primary_expression -> ID .)
    GREATER_THAN    reduce using rule 170 (primary_expression -> ID .)
    LESS_THAN       reduce using rule 170 (primary_expression -> ID .)
    GREATER_EQUAL   reduce using rule 170 (primary_expression -> ID .)
    LESS_EQUAL      reduce using rule 170 (primary_expression -> ID .)
    EQUAL           reduce using rule 170 (primary_expression -> ID .)
    NOT_EQUAL       reduce using rule 170 (primary_expression -> ID .)
    TIPO_EQUAL      reduce using rule 170 (primary_expression -> ID .)
    AND             reduce using rule 170 (primary_expression -> ID .)
    DOTDOT          reduce using rule 170 (primary_expression -> ID .)
    DOTDOTDOT       reduce using rule 170 (primary_expression -> ID .)
    OR              reduce using rule 170 (primary_expression -> ID .)
    QMARK           reduce using rule 170 (primary_expression -> ID .)
    DOT             reduce using rule 170 (primary_expression -> ID .)
    NEWLINE         reduce using rule 170 (primary_expression -> ID .)
    $end            reduce using rule 170 (primary_expression -> ID .)
    RPAREN          reduce using rule 170 (primary_expression -> ID .)
    WHEN            reduce using rule 170 (primary_expression -> ID .)
    END             reduce using rule 170 (primary_expression -> ID .)
    ELSIF           reduce using rule 170 (primary_expression -> ID .)
    ELSE            reduce using rule 170 (primary_expression -> ID .)
    RBRACE          reduce using rule 170 (primary_expression -> ID .)
    LBRACE          reduce using rule 170 (primary_expression -> ID .)
    ID              reduce using rule 170 (primary_expression -> ID .)
    CASE            reduce using rule 170 (primary_expression -> ID .)
    RETURN          reduce using rule 170 (primary_expression -> ID .)
    BREAK           reduce using rule 170 (primary_expression -> ID .)
    NEXT            reduce using rule 170 (primary_expression -> ID .)
    UNDERSCORE      reduce using rule 170 (primary_expression -> ID .)
    ASTERISK        reduce using rule 170 (primary_expression -> ID .)
    IF              reduce using rule 170 (primary_expression -> ID .)
    UNLESS          reduce using rule 170 (primary_expression -> ID .)
    WHILE           reduce using rule 170 (primary_expression -> ID .)
    UNTIL           reduce using rule 170 (primary_expression -> ID .)
    LOOP            reduce using rule 170 (primary_expression -> ID .)
    EXCLAMATION     reduce using rule 170 (primary_expression -> ID .)
    TILDE           reduce using rule 170 (primary_expression -> ID .)
    LPAREN          reduce using rule 170 (primary_expression -> ID .)
    LBRACKET        reduce using rule 170 (primary_expression -> ID .)
    INTNUMBER       reduce using rule 170 (primary_expression -> ID .)
    FLOATNUMBER     reduce using rule 170 (primary_expression -> ID .)
    STRING          reduce using rule 170 (primary_expression -> ID .)
    CHAR            reduce using rule 170 (primary_expression -> ID .)
    TRUE            reduce using rule 170 (primary_expression -> ID .)
    FALSE           reduce using rule 170 (primary_expression -> ID .)
    COMMA           reduce using rule 170 (primary_expression -> ID .)
    RBRACKET        reduce using rule 170 (primary_expression -> ID .)
    CONSTANT        reduce using rule 170 (primary_expression -> ID .)
    MODULE          reduce using rule 170 (primary_expression -> ID .)
    DEF             reduce using rule 170 (primary_expression -> ID .)
    TCOLON          reduce using rule 170 (primary_expression -> ID .)


state 133

    (163) unary_expression -> MINUS unary_expression .

    POTENCIACAO     reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    MULTI           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    MODULO          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    GREATER_THAN    reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    LESS_THAN       reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    GREATER_EQUAL   reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    LESS_EQUAL      reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    EQUAL           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    NOT_EQUAL       reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    TIPO_EQUAL      reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    DOTDOT          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    DOTDOTDOT       reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    QMARK           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    DOT             reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    NEWLINE         reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    $end            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    WHEN            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    END             reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    ELSIF           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    ELSE            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    RBRACE          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    LBRACE          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    ID              reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    CASE            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    RETURN          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    BREAK           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    NEXT            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    UNDERSCORE      reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    ASTERISK        reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    IF              reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    UNLESS          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    WHILE           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    UNTIL           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    LOOP            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    EXCLAMATION     reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    TILDE           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    LPAREN          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    LBRACKET        reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    INTNUMBER       reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    FLOATNUMBER     reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    STRING          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    CHAR            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    TRUE            reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    FALSE           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    CONSTANT        reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    MODULE          reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    DEF             reduce using rule 163 (unary_expression -> MINUS unary_expression .)
    TCOLON          reduce using rule 163 (unary_expression -> MINUS unary_expression .)


state 134

    (161) potenciacao_expression -> potenciacao_expression POTENCIACAO . unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    ID              shift and go to state 132
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    unary_expression               shift and go to state 213
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 135

    (164) unary_expression -> EXCLAMATION unary_expression .

    POTENCIACAO     reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    MULTI           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    DIVIDE          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    MODULO          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    PLUS            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    MINUS           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_THAN    reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_THAN       reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    GREATER_EQUAL   reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    LESS_EQUAL      reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    EQUAL           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    NOT_EQUAL       reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    TIPO_EQUAL      reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    AND             reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    DOTDOT          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    DOTDOTDOT       reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    OR              reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    QMARK           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    DOT             reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    NEWLINE         reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    $end            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    RPAREN          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    WHEN            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    END             reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    ELSIF           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    ELSE            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACE          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACE          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    ID              reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    CASE            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    RETURN          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    BREAK           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    NEXT            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    UNDERSCORE      reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    ASTERISK        reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    IF              reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    UNLESS          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    WHILE           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    UNTIL           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    LOOP            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    EXCLAMATION     reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    TILDE           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    LPAREN          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    LBRACKET        reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    INTNUMBER       reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    FLOATNUMBER     reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    STRING          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    CHAR            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    TRUE            reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    FALSE           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    COMMA           reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    RBRACKET        reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    CONSTANT        reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    MODULE          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    DEF             reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)
    TCOLON          reduce using rule 164 (unary_expression -> EXCLAMATION unary_expression .)


state 136

    (165) unary_expression -> TILDE unary_expression .

    POTENCIACAO     reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    MULTI           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    DIVIDE          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    MODULO          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    PLUS            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    MINUS           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    GREATER_THAN    reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    LESS_THAN       reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    GREATER_EQUAL   reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    LESS_EQUAL      reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    EQUAL           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    NOT_EQUAL       reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    TIPO_EQUAL      reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    AND             reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    DOTDOT          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    DOTDOTDOT       reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    OR              reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    QMARK           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    DOT             reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    NEWLINE         reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    $end            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    RPAREN          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    WHEN            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    END             reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    ELSIF           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    ELSE            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    RBRACE          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    LBRACE          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    ID              reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    CASE            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    RETURN          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    BREAK           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    NEXT            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    UNDERSCORE      reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    ASTERISK        reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    IF              reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    UNLESS          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    WHILE           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    UNTIL           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    LOOP            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    EXCLAMATION     reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    TILDE           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    LPAREN          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    LBRACKET        reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    INTNUMBER       reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    FLOATNUMBER     reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    STRING          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    CHAR            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    TRUE            reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    FALSE           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    COMMA           reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    RBRACKET        reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    CONSTANT        reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    MODULE          reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    DEF             reduce using rule 165 (unary_expression -> TILDE unary_expression .)
    TCOLON          reduce using rule 165 (unary_expression -> TILDE unary_expression .)


state 137

    (171) array_literal -> LBRACKET opt_expression_list . RBRACKET

    RBRACKET        shift and go to state 214


state 138

    (75) opt_expression_list -> expression_list .
    (78) expression_list -> expression_list . COMMA expression

    RBRACKET        reduce using rule 75 (opt_expression_list -> expression_list .)
    COMMA           shift and go to state 215


state 139

    (76) opt_expression_list -> empty .

    RBRACKET        reduce using rule 76 (opt_expression_list -> empty .)


state 140

    (77) expression_list -> expression .

    COMMA           reduce using rule 77 (expression_list -> expression .)
    RBRACKET        reduce using rule 77 (expression_list -> expression .)
    RPAREN          reduce using rule 77 (expression_list -> expression .)


state 141

    (1) program -> require_list constant_list module_list . function_list
    (2) program -> require_list constant_list module_list .
    (26) function_list -> . function
    (27) function_list -> . function function_list
    (28) function -> . DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END
    (29) function -> . DEF ID opt_return_type NEWLINE statements END

    $end            reduce using rule 2 (program -> require_list constant_list module_list .)
    DEF             shift and go to state 18

    function_list                  shift and go to state 216
    function                       shift and go to state 10

state 142

    (3) program -> require_list constant_list function_list .

    $end            reduce using rule 3 (program -> require_list constant_list function_list .)


state 143

    (4) program -> require_list module_list function_list .

    $end            reduce using rule 4 (program -> require_list module_list function_list .)


state 144

    (5) program -> constant_list module_list function_list .

    $end            reduce using rule 5 (program -> constant_list module_list function_list .)


state 145

    (22) constant -> CONSTANT ASSIGN expression .

    CONSTANT        reduce using rule 22 (constant -> CONSTANT ASSIGN expression .)
    MODULE          reduce using rule 22 (constant -> CONSTANT ASSIGN expression .)
    DEF             reduce using rule 22 (constant -> CONSTANT ASSIGN expression .)
    $end            reduce using rule 22 (constant -> CONSTANT ASSIGN expression .)


state 146

    (115) iterator -> expression DOT MULTI . statements
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 15
    statements                     shift and go to state 217
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 147

    (116) iterator -> expression DOT EACH . DO PIPE ID PIPE statements END
    (117) iterator -> expression DOT EACH . LBRACE PIPE ID PIPE RBRACE statements

    DO              shift and go to state 218
    LBRACE          shift and go to state 219


state 148

    (25) module -> MODULE ID statements . END

    END             shift and go to state 220


state 149

    (73) function_call -> ID LPAREN expression_list . RPAREN
    (78) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 221
    COMMA           shift and go to state 215


state 150

    (74) function_call -> ID LPAREN RPAREN .

    NEWLINE         reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    $end            reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    END             reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    RBRACE          reduce using rule 74 (function_call -> ID LPAREN RPAREN .)
    WHEN            reduce using rule 74 (function_call -> ID LPAREN RPAREN .)


state 151

    (69) list_of_identifiers -> ID .
    (70) list_of_identifiers -> ID . COMMA list_of_identifiers

    COLON           reduce using rule 69 (list_of_identifiers -> ID .)
    ASSIGN          reduce using rule 69 (list_of_identifiers -> ID .)
    COMMA           shift and go to state 88


state 152

    (70) list_of_identifiers -> ID COMMA list_of_identifiers .

    COLON           reduce using rule 70 (list_of_identifiers -> ID COMMA list_of_identifiers .)
    ASSIGN          reduce using rule 70 (list_of_identifiers -> ID COMMA list_of_identifiers .)


state 153

    (28) function -> DEF ID LPAREN . opt_argument_list RPAREN opt_return_type statements END
    (30) opt_argument_list -> . argument_list
    (31) opt_argument_list -> . empty
    (32) argument_list -> . argument
    (33) argument_list -> . argument COMMA argument_list
    (172) empty -> .
    (34) argument -> . ID
    (35) argument -> . ID COLON types
    (36) argument -> . ID ASSIGN expression
    (37) argument -> . ID COLON types ASSIGN expression

    RPAREN          reduce using rule 172 (empty -> .)
    ID              shift and go to state 222

    opt_argument_list              shift and go to state 223
    argument_list                  shift and go to state 224
    empty                          shift and go to state 225
    argument                       shift and go to state 226

state 154

    (29) function -> DEF ID opt_return_type . NEWLINE statements END

    NEWLINE         shift and go to state 227


state 155

    (38) opt_return_type -> COLON . types
    (40) types -> . STRING
    (41) types -> . CHAR
    (42) types -> . NIL
    (43) types -> . integer
    (44) types -> . float
    (45) types -> . boolean
    (46) integer -> . INT
    (47) integer -> . INT8
    (48) integer -> . INT16
    (49) integer -> . INT32
    (50) integer -> . INT64
    (51) integer -> . INT128
    (52) integer -> . UINT8
    (53) integer -> . UINT16
    (54) integer -> . UINT32
    (55) integer -> . UINT64
    (56) integer -> . UINT128
    (57) float -> . FLOAT
    (58) float -> . FLOAT32
    (59) float -> . FLOAT64
    (60) boolean -> . BOOL

    STRING          shift and go to state 160
    CHAR            shift and go to state 161
    NIL             shift and go to state 162
    INT             shift and go to state 166
    INT8            shift and go to state 167
    INT16           shift and go to state 168
    INT32           shift and go to state 169
    INT64           shift and go to state 170
    INT128          shift and go to state 171
    UINT8           shift and go to state 172
    UINT16          shift and go to state 173
    UINT32          shift and go to state 174
    UINT64          shift and go to state 175
    UINT128         shift and go to state 176
    FLOAT           shift and go to state 177
    FLOAT32         shift and go to state 178
    FLOAT64         shift and go to state 179
    BOOL            shift and go to state 180

    types                          shift and go to state 228
    integer                        shift and go to state 163
    float                          shift and go to state 164
    boolean                        shift and go to state 165

state 156

    (39) opt_return_type -> empty .

    NEWLINE         reduce using rule 39 (opt_return_type -> empty .)
    ID              reduce using rule 39 (opt_return_type -> empty .)
    CASE            reduce using rule 39 (opt_return_type -> empty .)
    RETURN          reduce using rule 39 (opt_return_type -> empty .)
    BREAK           reduce using rule 39 (opt_return_type -> empty .)
    NEXT            reduce using rule 39 (opt_return_type -> empty .)
    UNDERSCORE      reduce using rule 39 (opt_return_type -> empty .)
    ASTERISK        reduce using rule 39 (opt_return_type -> empty .)
    IF              reduce using rule 39 (opt_return_type -> empty .)
    UNLESS          reduce using rule 39 (opt_return_type -> empty .)
    WHILE           reduce using rule 39 (opt_return_type -> empty .)
    UNTIL           reduce using rule 39 (opt_return_type -> empty .)
    LOOP            reduce using rule 39 (opt_return_type -> empty .)
    PLUS            reduce using rule 39 (opt_return_type -> empty .)
    MINUS           reduce using rule 39 (opt_return_type -> empty .)
    EXCLAMATION     reduce using rule 39 (opt_return_type -> empty .)
    TILDE           reduce using rule 39 (opt_return_type -> empty .)
    LPAREN          reduce using rule 39 (opt_return_type -> empty .)
    LBRACKET        reduce using rule 39 (opt_return_type -> empty .)
    INTNUMBER       reduce using rule 39 (opt_return_type -> empty .)
    FLOATNUMBER     reduce using rule 39 (opt_return_type -> empty .)
    STRING          reduce using rule 39 (opt_return_type -> empty .)
    CHAR            reduce using rule 39 (opt_return_type -> empty .)
    TRUE            reduce using rule 39 (opt_return_type -> empty .)
    FALSE           reduce using rule 39 (opt_return_type -> empty .)


state 157

    (167) primary_expression -> LPAREN expression RPAREN .

    POTENCIACAO     reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    MULTI           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_THAN    reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    LESS_THAN       reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    TIPO_EQUAL      reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOT          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    DOTDOTDOT       reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    QMARK           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    WHEN            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    END             reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    ELSIF           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    NEXT            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    UNDERSCORE      reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    ASTERISK        reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    UNLESS          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    UNTIL           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    INTNUMBER       reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    FLOATNUMBER     reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    CONSTANT        reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    MODULE          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)
    TCOLON          reduce using rule 167 (primary_expression -> LPAREN expression RPAREN .)


state 158

    (80) statements_list -> statement NEWLINE statements_list .

    $end            reduce using rule 80 (statements_list -> statement NEWLINE statements_list .)
    END             reduce using rule 80 (statements_list -> statement NEWLINE statements_list .)
    NEWLINE         reduce using rule 80 (statements_list -> statement NEWLINE statements_list .)
    ELSIF           reduce using rule 80 (statements_list -> statement NEWLINE statements_list .)
    ELSE            reduce using rule 80 (statements_list -> statement NEWLINE statements_list .)
    RBRACE          reduce using rule 80 (statements_list -> statement NEWLINE statements_list .)
    WHEN            reduce using rule 80 (statements_list -> statement NEWLINE statements_list .)


state 159

    (67) variable_declaration -> list_of_identifiers COLON types . ASSIGN expression_list1

    ASSIGN          shift and go to state 229


state 160

    (40) types -> STRING .

    ASSIGN          reduce using rule 40 (types -> STRING .)
    NEWLINE         reduce using rule 40 (types -> STRING .)
    ID              reduce using rule 40 (types -> STRING .)
    CASE            reduce using rule 40 (types -> STRING .)
    RETURN          reduce using rule 40 (types -> STRING .)
    BREAK           reduce using rule 40 (types -> STRING .)
    NEXT            reduce using rule 40 (types -> STRING .)
    UNDERSCORE      reduce using rule 40 (types -> STRING .)
    ASTERISK        reduce using rule 40 (types -> STRING .)
    IF              reduce using rule 40 (types -> STRING .)
    UNLESS          reduce using rule 40 (types -> STRING .)
    WHILE           reduce using rule 40 (types -> STRING .)
    UNTIL           reduce using rule 40 (types -> STRING .)
    LOOP            reduce using rule 40 (types -> STRING .)
    PLUS            reduce using rule 40 (types -> STRING .)
    MINUS           reduce using rule 40 (types -> STRING .)
    EXCLAMATION     reduce using rule 40 (types -> STRING .)
    TILDE           reduce using rule 40 (types -> STRING .)
    LPAREN          reduce using rule 40 (types -> STRING .)
    LBRACKET        reduce using rule 40 (types -> STRING .)
    INTNUMBER       reduce using rule 40 (types -> STRING .)
    FLOATNUMBER     reduce using rule 40 (types -> STRING .)
    STRING          reduce using rule 40 (types -> STRING .)
    CHAR            reduce using rule 40 (types -> STRING .)
    TRUE            reduce using rule 40 (types -> STRING .)
    FALSE           reduce using rule 40 (types -> STRING .)
    COMMA           reduce using rule 40 (types -> STRING .)
    RPAREN          reduce using rule 40 (types -> STRING .)


state 161

    (41) types -> CHAR .

    ASSIGN          reduce using rule 41 (types -> CHAR .)
    NEWLINE         reduce using rule 41 (types -> CHAR .)
    ID              reduce using rule 41 (types -> CHAR .)
    CASE            reduce using rule 41 (types -> CHAR .)
    RETURN          reduce using rule 41 (types -> CHAR .)
    BREAK           reduce using rule 41 (types -> CHAR .)
    NEXT            reduce using rule 41 (types -> CHAR .)
    UNDERSCORE      reduce using rule 41 (types -> CHAR .)
    ASTERISK        reduce using rule 41 (types -> CHAR .)
    IF              reduce using rule 41 (types -> CHAR .)
    UNLESS          reduce using rule 41 (types -> CHAR .)
    WHILE           reduce using rule 41 (types -> CHAR .)
    UNTIL           reduce using rule 41 (types -> CHAR .)
    LOOP            reduce using rule 41 (types -> CHAR .)
    PLUS            reduce using rule 41 (types -> CHAR .)
    MINUS           reduce using rule 41 (types -> CHAR .)
    EXCLAMATION     reduce using rule 41 (types -> CHAR .)
    TILDE           reduce using rule 41 (types -> CHAR .)
    LPAREN          reduce using rule 41 (types -> CHAR .)
    LBRACKET        reduce using rule 41 (types -> CHAR .)
    INTNUMBER       reduce using rule 41 (types -> CHAR .)
    FLOATNUMBER     reduce using rule 41 (types -> CHAR .)
    STRING          reduce using rule 41 (types -> CHAR .)
    CHAR            reduce using rule 41 (types -> CHAR .)
    TRUE            reduce using rule 41 (types -> CHAR .)
    FALSE           reduce using rule 41 (types -> CHAR .)
    COMMA           reduce using rule 41 (types -> CHAR .)
    RPAREN          reduce using rule 41 (types -> CHAR .)


state 162

    (42) types -> NIL .

    ASSIGN          reduce using rule 42 (types -> NIL .)
    NEWLINE         reduce using rule 42 (types -> NIL .)
    ID              reduce using rule 42 (types -> NIL .)
    CASE            reduce using rule 42 (types -> NIL .)
    RETURN          reduce using rule 42 (types -> NIL .)
    BREAK           reduce using rule 42 (types -> NIL .)
    NEXT            reduce using rule 42 (types -> NIL .)
    UNDERSCORE      reduce using rule 42 (types -> NIL .)
    ASTERISK        reduce using rule 42 (types -> NIL .)
    IF              reduce using rule 42 (types -> NIL .)
    UNLESS          reduce using rule 42 (types -> NIL .)
    WHILE           reduce using rule 42 (types -> NIL .)
    UNTIL           reduce using rule 42 (types -> NIL .)
    LOOP            reduce using rule 42 (types -> NIL .)
    PLUS            reduce using rule 42 (types -> NIL .)
    MINUS           reduce using rule 42 (types -> NIL .)
    EXCLAMATION     reduce using rule 42 (types -> NIL .)
    TILDE           reduce using rule 42 (types -> NIL .)
    LPAREN          reduce using rule 42 (types -> NIL .)
    LBRACKET        reduce using rule 42 (types -> NIL .)
    INTNUMBER       reduce using rule 42 (types -> NIL .)
    FLOATNUMBER     reduce using rule 42 (types -> NIL .)
    STRING          reduce using rule 42 (types -> NIL .)
    CHAR            reduce using rule 42 (types -> NIL .)
    TRUE            reduce using rule 42 (types -> NIL .)
    FALSE           reduce using rule 42 (types -> NIL .)
    COMMA           reduce using rule 42 (types -> NIL .)
    RPAREN          reduce using rule 42 (types -> NIL .)


state 163

    (43) types -> integer .

    ASSIGN          reduce using rule 43 (types -> integer .)
    NEWLINE         reduce using rule 43 (types -> integer .)
    ID              reduce using rule 43 (types -> integer .)
    CASE            reduce using rule 43 (types -> integer .)
    RETURN          reduce using rule 43 (types -> integer .)
    BREAK           reduce using rule 43 (types -> integer .)
    NEXT            reduce using rule 43 (types -> integer .)
    UNDERSCORE      reduce using rule 43 (types -> integer .)
    ASTERISK        reduce using rule 43 (types -> integer .)
    IF              reduce using rule 43 (types -> integer .)
    UNLESS          reduce using rule 43 (types -> integer .)
    WHILE           reduce using rule 43 (types -> integer .)
    UNTIL           reduce using rule 43 (types -> integer .)
    LOOP            reduce using rule 43 (types -> integer .)
    PLUS            reduce using rule 43 (types -> integer .)
    MINUS           reduce using rule 43 (types -> integer .)
    EXCLAMATION     reduce using rule 43 (types -> integer .)
    TILDE           reduce using rule 43 (types -> integer .)
    LPAREN          reduce using rule 43 (types -> integer .)
    LBRACKET        reduce using rule 43 (types -> integer .)
    INTNUMBER       reduce using rule 43 (types -> integer .)
    FLOATNUMBER     reduce using rule 43 (types -> integer .)
    STRING          reduce using rule 43 (types -> integer .)
    CHAR            reduce using rule 43 (types -> integer .)
    TRUE            reduce using rule 43 (types -> integer .)
    FALSE           reduce using rule 43 (types -> integer .)
    COMMA           reduce using rule 43 (types -> integer .)
    RPAREN          reduce using rule 43 (types -> integer .)


state 164

    (44) types -> float .

    ASSIGN          reduce using rule 44 (types -> float .)
    NEWLINE         reduce using rule 44 (types -> float .)
    ID              reduce using rule 44 (types -> float .)
    CASE            reduce using rule 44 (types -> float .)
    RETURN          reduce using rule 44 (types -> float .)
    BREAK           reduce using rule 44 (types -> float .)
    NEXT            reduce using rule 44 (types -> float .)
    UNDERSCORE      reduce using rule 44 (types -> float .)
    ASTERISK        reduce using rule 44 (types -> float .)
    IF              reduce using rule 44 (types -> float .)
    UNLESS          reduce using rule 44 (types -> float .)
    WHILE           reduce using rule 44 (types -> float .)
    UNTIL           reduce using rule 44 (types -> float .)
    LOOP            reduce using rule 44 (types -> float .)
    PLUS            reduce using rule 44 (types -> float .)
    MINUS           reduce using rule 44 (types -> float .)
    EXCLAMATION     reduce using rule 44 (types -> float .)
    TILDE           reduce using rule 44 (types -> float .)
    LPAREN          reduce using rule 44 (types -> float .)
    LBRACKET        reduce using rule 44 (types -> float .)
    INTNUMBER       reduce using rule 44 (types -> float .)
    FLOATNUMBER     reduce using rule 44 (types -> float .)
    STRING          reduce using rule 44 (types -> float .)
    CHAR            reduce using rule 44 (types -> float .)
    TRUE            reduce using rule 44 (types -> float .)
    FALSE           reduce using rule 44 (types -> float .)
    COMMA           reduce using rule 44 (types -> float .)
    RPAREN          reduce using rule 44 (types -> float .)


state 165

    (45) types -> boolean .

    ASSIGN          reduce using rule 45 (types -> boolean .)
    NEWLINE         reduce using rule 45 (types -> boolean .)
    ID              reduce using rule 45 (types -> boolean .)
    CASE            reduce using rule 45 (types -> boolean .)
    RETURN          reduce using rule 45 (types -> boolean .)
    BREAK           reduce using rule 45 (types -> boolean .)
    NEXT            reduce using rule 45 (types -> boolean .)
    UNDERSCORE      reduce using rule 45 (types -> boolean .)
    ASTERISK        reduce using rule 45 (types -> boolean .)
    IF              reduce using rule 45 (types -> boolean .)
    UNLESS          reduce using rule 45 (types -> boolean .)
    WHILE           reduce using rule 45 (types -> boolean .)
    UNTIL           reduce using rule 45 (types -> boolean .)
    LOOP            reduce using rule 45 (types -> boolean .)
    PLUS            reduce using rule 45 (types -> boolean .)
    MINUS           reduce using rule 45 (types -> boolean .)
    EXCLAMATION     reduce using rule 45 (types -> boolean .)
    TILDE           reduce using rule 45 (types -> boolean .)
    LPAREN          reduce using rule 45 (types -> boolean .)
    LBRACKET        reduce using rule 45 (types -> boolean .)
    INTNUMBER       reduce using rule 45 (types -> boolean .)
    FLOATNUMBER     reduce using rule 45 (types -> boolean .)
    STRING          reduce using rule 45 (types -> boolean .)
    CHAR            reduce using rule 45 (types -> boolean .)
    TRUE            reduce using rule 45 (types -> boolean .)
    FALSE           reduce using rule 45 (types -> boolean .)
    COMMA           reduce using rule 45 (types -> boolean .)
    RPAREN          reduce using rule 45 (types -> boolean .)


state 166

    (46) integer -> INT .

    ASSIGN          reduce using rule 46 (integer -> INT .)
    NEWLINE         reduce using rule 46 (integer -> INT .)
    ID              reduce using rule 46 (integer -> INT .)
    CASE            reduce using rule 46 (integer -> INT .)
    RETURN          reduce using rule 46 (integer -> INT .)
    BREAK           reduce using rule 46 (integer -> INT .)
    NEXT            reduce using rule 46 (integer -> INT .)
    UNDERSCORE      reduce using rule 46 (integer -> INT .)
    ASTERISK        reduce using rule 46 (integer -> INT .)
    IF              reduce using rule 46 (integer -> INT .)
    UNLESS          reduce using rule 46 (integer -> INT .)
    WHILE           reduce using rule 46 (integer -> INT .)
    UNTIL           reduce using rule 46 (integer -> INT .)
    LOOP            reduce using rule 46 (integer -> INT .)
    PLUS            reduce using rule 46 (integer -> INT .)
    MINUS           reduce using rule 46 (integer -> INT .)
    EXCLAMATION     reduce using rule 46 (integer -> INT .)
    TILDE           reduce using rule 46 (integer -> INT .)
    LPAREN          reduce using rule 46 (integer -> INT .)
    LBRACKET        reduce using rule 46 (integer -> INT .)
    INTNUMBER       reduce using rule 46 (integer -> INT .)
    FLOATNUMBER     reduce using rule 46 (integer -> INT .)
    STRING          reduce using rule 46 (integer -> INT .)
    CHAR            reduce using rule 46 (integer -> INT .)
    TRUE            reduce using rule 46 (integer -> INT .)
    FALSE           reduce using rule 46 (integer -> INT .)
    COMMA           reduce using rule 46 (integer -> INT .)
    RPAREN          reduce using rule 46 (integer -> INT .)


state 167

    (47) integer -> INT8 .

    ASSIGN          reduce using rule 47 (integer -> INT8 .)
    NEWLINE         reduce using rule 47 (integer -> INT8 .)
    ID              reduce using rule 47 (integer -> INT8 .)
    CASE            reduce using rule 47 (integer -> INT8 .)
    RETURN          reduce using rule 47 (integer -> INT8 .)
    BREAK           reduce using rule 47 (integer -> INT8 .)
    NEXT            reduce using rule 47 (integer -> INT8 .)
    UNDERSCORE      reduce using rule 47 (integer -> INT8 .)
    ASTERISK        reduce using rule 47 (integer -> INT8 .)
    IF              reduce using rule 47 (integer -> INT8 .)
    UNLESS          reduce using rule 47 (integer -> INT8 .)
    WHILE           reduce using rule 47 (integer -> INT8 .)
    UNTIL           reduce using rule 47 (integer -> INT8 .)
    LOOP            reduce using rule 47 (integer -> INT8 .)
    PLUS            reduce using rule 47 (integer -> INT8 .)
    MINUS           reduce using rule 47 (integer -> INT8 .)
    EXCLAMATION     reduce using rule 47 (integer -> INT8 .)
    TILDE           reduce using rule 47 (integer -> INT8 .)
    LPAREN          reduce using rule 47 (integer -> INT8 .)
    LBRACKET        reduce using rule 47 (integer -> INT8 .)
    INTNUMBER       reduce using rule 47 (integer -> INT8 .)
    FLOATNUMBER     reduce using rule 47 (integer -> INT8 .)
    STRING          reduce using rule 47 (integer -> INT8 .)
    CHAR            reduce using rule 47 (integer -> INT8 .)
    TRUE            reduce using rule 47 (integer -> INT8 .)
    FALSE           reduce using rule 47 (integer -> INT8 .)
    COMMA           reduce using rule 47 (integer -> INT8 .)
    RPAREN          reduce using rule 47 (integer -> INT8 .)


state 168

    (48) integer -> INT16 .

    ASSIGN          reduce using rule 48 (integer -> INT16 .)
    NEWLINE         reduce using rule 48 (integer -> INT16 .)
    ID              reduce using rule 48 (integer -> INT16 .)
    CASE            reduce using rule 48 (integer -> INT16 .)
    RETURN          reduce using rule 48 (integer -> INT16 .)
    BREAK           reduce using rule 48 (integer -> INT16 .)
    NEXT            reduce using rule 48 (integer -> INT16 .)
    UNDERSCORE      reduce using rule 48 (integer -> INT16 .)
    ASTERISK        reduce using rule 48 (integer -> INT16 .)
    IF              reduce using rule 48 (integer -> INT16 .)
    UNLESS          reduce using rule 48 (integer -> INT16 .)
    WHILE           reduce using rule 48 (integer -> INT16 .)
    UNTIL           reduce using rule 48 (integer -> INT16 .)
    LOOP            reduce using rule 48 (integer -> INT16 .)
    PLUS            reduce using rule 48 (integer -> INT16 .)
    MINUS           reduce using rule 48 (integer -> INT16 .)
    EXCLAMATION     reduce using rule 48 (integer -> INT16 .)
    TILDE           reduce using rule 48 (integer -> INT16 .)
    LPAREN          reduce using rule 48 (integer -> INT16 .)
    LBRACKET        reduce using rule 48 (integer -> INT16 .)
    INTNUMBER       reduce using rule 48 (integer -> INT16 .)
    FLOATNUMBER     reduce using rule 48 (integer -> INT16 .)
    STRING          reduce using rule 48 (integer -> INT16 .)
    CHAR            reduce using rule 48 (integer -> INT16 .)
    TRUE            reduce using rule 48 (integer -> INT16 .)
    FALSE           reduce using rule 48 (integer -> INT16 .)
    COMMA           reduce using rule 48 (integer -> INT16 .)
    RPAREN          reduce using rule 48 (integer -> INT16 .)


state 169

    (49) integer -> INT32 .

    ASSIGN          reduce using rule 49 (integer -> INT32 .)
    NEWLINE         reduce using rule 49 (integer -> INT32 .)
    ID              reduce using rule 49 (integer -> INT32 .)
    CASE            reduce using rule 49 (integer -> INT32 .)
    RETURN          reduce using rule 49 (integer -> INT32 .)
    BREAK           reduce using rule 49 (integer -> INT32 .)
    NEXT            reduce using rule 49 (integer -> INT32 .)
    UNDERSCORE      reduce using rule 49 (integer -> INT32 .)
    ASTERISK        reduce using rule 49 (integer -> INT32 .)
    IF              reduce using rule 49 (integer -> INT32 .)
    UNLESS          reduce using rule 49 (integer -> INT32 .)
    WHILE           reduce using rule 49 (integer -> INT32 .)
    UNTIL           reduce using rule 49 (integer -> INT32 .)
    LOOP            reduce using rule 49 (integer -> INT32 .)
    PLUS            reduce using rule 49 (integer -> INT32 .)
    MINUS           reduce using rule 49 (integer -> INT32 .)
    EXCLAMATION     reduce using rule 49 (integer -> INT32 .)
    TILDE           reduce using rule 49 (integer -> INT32 .)
    LPAREN          reduce using rule 49 (integer -> INT32 .)
    LBRACKET        reduce using rule 49 (integer -> INT32 .)
    INTNUMBER       reduce using rule 49 (integer -> INT32 .)
    FLOATNUMBER     reduce using rule 49 (integer -> INT32 .)
    STRING          reduce using rule 49 (integer -> INT32 .)
    CHAR            reduce using rule 49 (integer -> INT32 .)
    TRUE            reduce using rule 49 (integer -> INT32 .)
    FALSE           reduce using rule 49 (integer -> INT32 .)
    COMMA           reduce using rule 49 (integer -> INT32 .)
    RPAREN          reduce using rule 49 (integer -> INT32 .)


state 170

    (50) integer -> INT64 .

    ASSIGN          reduce using rule 50 (integer -> INT64 .)
    NEWLINE         reduce using rule 50 (integer -> INT64 .)
    ID              reduce using rule 50 (integer -> INT64 .)
    CASE            reduce using rule 50 (integer -> INT64 .)
    RETURN          reduce using rule 50 (integer -> INT64 .)
    BREAK           reduce using rule 50 (integer -> INT64 .)
    NEXT            reduce using rule 50 (integer -> INT64 .)
    UNDERSCORE      reduce using rule 50 (integer -> INT64 .)
    ASTERISK        reduce using rule 50 (integer -> INT64 .)
    IF              reduce using rule 50 (integer -> INT64 .)
    UNLESS          reduce using rule 50 (integer -> INT64 .)
    WHILE           reduce using rule 50 (integer -> INT64 .)
    UNTIL           reduce using rule 50 (integer -> INT64 .)
    LOOP            reduce using rule 50 (integer -> INT64 .)
    PLUS            reduce using rule 50 (integer -> INT64 .)
    MINUS           reduce using rule 50 (integer -> INT64 .)
    EXCLAMATION     reduce using rule 50 (integer -> INT64 .)
    TILDE           reduce using rule 50 (integer -> INT64 .)
    LPAREN          reduce using rule 50 (integer -> INT64 .)
    LBRACKET        reduce using rule 50 (integer -> INT64 .)
    INTNUMBER       reduce using rule 50 (integer -> INT64 .)
    FLOATNUMBER     reduce using rule 50 (integer -> INT64 .)
    STRING          reduce using rule 50 (integer -> INT64 .)
    CHAR            reduce using rule 50 (integer -> INT64 .)
    TRUE            reduce using rule 50 (integer -> INT64 .)
    FALSE           reduce using rule 50 (integer -> INT64 .)
    COMMA           reduce using rule 50 (integer -> INT64 .)
    RPAREN          reduce using rule 50 (integer -> INT64 .)


state 171

    (51) integer -> INT128 .

    ASSIGN          reduce using rule 51 (integer -> INT128 .)
    NEWLINE         reduce using rule 51 (integer -> INT128 .)
    ID              reduce using rule 51 (integer -> INT128 .)
    CASE            reduce using rule 51 (integer -> INT128 .)
    RETURN          reduce using rule 51 (integer -> INT128 .)
    BREAK           reduce using rule 51 (integer -> INT128 .)
    NEXT            reduce using rule 51 (integer -> INT128 .)
    UNDERSCORE      reduce using rule 51 (integer -> INT128 .)
    ASTERISK        reduce using rule 51 (integer -> INT128 .)
    IF              reduce using rule 51 (integer -> INT128 .)
    UNLESS          reduce using rule 51 (integer -> INT128 .)
    WHILE           reduce using rule 51 (integer -> INT128 .)
    UNTIL           reduce using rule 51 (integer -> INT128 .)
    LOOP            reduce using rule 51 (integer -> INT128 .)
    PLUS            reduce using rule 51 (integer -> INT128 .)
    MINUS           reduce using rule 51 (integer -> INT128 .)
    EXCLAMATION     reduce using rule 51 (integer -> INT128 .)
    TILDE           reduce using rule 51 (integer -> INT128 .)
    LPAREN          reduce using rule 51 (integer -> INT128 .)
    LBRACKET        reduce using rule 51 (integer -> INT128 .)
    INTNUMBER       reduce using rule 51 (integer -> INT128 .)
    FLOATNUMBER     reduce using rule 51 (integer -> INT128 .)
    STRING          reduce using rule 51 (integer -> INT128 .)
    CHAR            reduce using rule 51 (integer -> INT128 .)
    TRUE            reduce using rule 51 (integer -> INT128 .)
    FALSE           reduce using rule 51 (integer -> INT128 .)
    COMMA           reduce using rule 51 (integer -> INT128 .)
    RPAREN          reduce using rule 51 (integer -> INT128 .)


state 172

    (52) integer -> UINT8 .

    ASSIGN          reduce using rule 52 (integer -> UINT8 .)
    NEWLINE         reduce using rule 52 (integer -> UINT8 .)
    ID              reduce using rule 52 (integer -> UINT8 .)
    CASE            reduce using rule 52 (integer -> UINT8 .)
    RETURN          reduce using rule 52 (integer -> UINT8 .)
    BREAK           reduce using rule 52 (integer -> UINT8 .)
    NEXT            reduce using rule 52 (integer -> UINT8 .)
    UNDERSCORE      reduce using rule 52 (integer -> UINT8 .)
    ASTERISK        reduce using rule 52 (integer -> UINT8 .)
    IF              reduce using rule 52 (integer -> UINT8 .)
    UNLESS          reduce using rule 52 (integer -> UINT8 .)
    WHILE           reduce using rule 52 (integer -> UINT8 .)
    UNTIL           reduce using rule 52 (integer -> UINT8 .)
    LOOP            reduce using rule 52 (integer -> UINT8 .)
    PLUS            reduce using rule 52 (integer -> UINT8 .)
    MINUS           reduce using rule 52 (integer -> UINT8 .)
    EXCLAMATION     reduce using rule 52 (integer -> UINT8 .)
    TILDE           reduce using rule 52 (integer -> UINT8 .)
    LPAREN          reduce using rule 52 (integer -> UINT8 .)
    LBRACKET        reduce using rule 52 (integer -> UINT8 .)
    INTNUMBER       reduce using rule 52 (integer -> UINT8 .)
    FLOATNUMBER     reduce using rule 52 (integer -> UINT8 .)
    STRING          reduce using rule 52 (integer -> UINT8 .)
    CHAR            reduce using rule 52 (integer -> UINT8 .)
    TRUE            reduce using rule 52 (integer -> UINT8 .)
    FALSE           reduce using rule 52 (integer -> UINT8 .)
    COMMA           reduce using rule 52 (integer -> UINT8 .)
    RPAREN          reduce using rule 52 (integer -> UINT8 .)


state 173

    (53) integer -> UINT16 .

    ASSIGN          reduce using rule 53 (integer -> UINT16 .)
    NEWLINE         reduce using rule 53 (integer -> UINT16 .)
    ID              reduce using rule 53 (integer -> UINT16 .)
    CASE            reduce using rule 53 (integer -> UINT16 .)
    RETURN          reduce using rule 53 (integer -> UINT16 .)
    BREAK           reduce using rule 53 (integer -> UINT16 .)
    NEXT            reduce using rule 53 (integer -> UINT16 .)
    UNDERSCORE      reduce using rule 53 (integer -> UINT16 .)
    ASTERISK        reduce using rule 53 (integer -> UINT16 .)
    IF              reduce using rule 53 (integer -> UINT16 .)
    UNLESS          reduce using rule 53 (integer -> UINT16 .)
    WHILE           reduce using rule 53 (integer -> UINT16 .)
    UNTIL           reduce using rule 53 (integer -> UINT16 .)
    LOOP            reduce using rule 53 (integer -> UINT16 .)
    PLUS            reduce using rule 53 (integer -> UINT16 .)
    MINUS           reduce using rule 53 (integer -> UINT16 .)
    EXCLAMATION     reduce using rule 53 (integer -> UINT16 .)
    TILDE           reduce using rule 53 (integer -> UINT16 .)
    LPAREN          reduce using rule 53 (integer -> UINT16 .)
    LBRACKET        reduce using rule 53 (integer -> UINT16 .)
    INTNUMBER       reduce using rule 53 (integer -> UINT16 .)
    FLOATNUMBER     reduce using rule 53 (integer -> UINT16 .)
    STRING          reduce using rule 53 (integer -> UINT16 .)
    CHAR            reduce using rule 53 (integer -> UINT16 .)
    TRUE            reduce using rule 53 (integer -> UINT16 .)
    FALSE           reduce using rule 53 (integer -> UINT16 .)
    COMMA           reduce using rule 53 (integer -> UINT16 .)
    RPAREN          reduce using rule 53 (integer -> UINT16 .)


state 174

    (54) integer -> UINT32 .

    ASSIGN          reduce using rule 54 (integer -> UINT32 .)
    NEWLINE         reduce using rule 54 (integer -> UINT32 .)
    ID              reduce using rule 54 (integer -> UINT32 .)
    CASE            reduce using rule 54 (integer -> UINT32 .)
    RETURN          reduce using rule 54 (integer -> UINT32 .)
    BREAK           reduce using rule 54 (integer -> UINT32 .)
    NEXT            reduce using rule 54 (integer -> UINT32 .)
    UNDERSCORE      reduce using rule 54 (integer -> UINT32 .)
    ASTERISK        reduce using rule 54 (integer -> UINT32 .)
    IF              reduce using rule 54 (integer -> UINT32 .)
    UNLESS          reduce using rule 54 (integer -> UINT32 .)
    WHILE           reduce using rule 54 (integer -> UINT32 .)
    UNTIL           reduce using rule 54 (integer -> UINT32 .)
    LOOP            reduce using rule 54 (integer -> UINT32 .)
    PLUS            reduce using rule 54 (integer -> UINT32 .)
    MINUS           reduce using rule 54 (integer -> UINT32 .)
    EXCLAMATION     reduce using rule 54 (integer -> UINT32 .)
    TILDE           reduce using rule 54 (integer -> UINT32 .)
    LPAREN          reduce using rule 54 (integer -> UINT32 .)
    LBRACKET        reduce using rule 54 (integer -> UINT32 .)
    INTNUMBER       reduce using rule 54 (integer -> UINT32 .)
    FLOATNUMBER     reduce using rule 54 (integer -> UINT32 .)
    STRING          reduce using rule 54 (integer -> UINT32 .)
    CHAR            reduce using rule 54 (integer -> UINT32 .)
    TRUE            reduce using rule 54 (integer -> UINT32 .)
    FALSE           reduce using rule 54 (integer -> UINT32 .)
    COMMA           reduce using rule 54 (integer -> UINT32 .)
    RPAREN          reduce using rule 54 (integer -> UINT32 .)


state 175

    (55) integer -> UINT64 .

    ASSIGN          reduce using rule 55 (integer -> UINT64 .)
    NEWLINE         reduce using rule 55 (integer -> UINT64 .)
    ID              reduce using rule 55 (integer -> UINT64 .)
    CASE            reduce using rule 55 (integer -> UINT64 .)
    RETURN          reduce using rule 55 (integer -> UINT64 .)
    BREAK           reduce using rule 55 (integer -> UINT64 .)
    NEXT            reduce using rule 55 (integer -> UINT64 .)
    UNDERSCORE      reduce using rule 55 (integer -> UINT64 .)
    ASTERISK        reduce using rule 55 (integer -> UINT64 .)
    IF              reduce using rule 55 (integer -> UINT64 .)
    UNLESS          reduce using rule 55 (integer -> UINT64 .)
    WHILE           reduce using rule 55 (integer -> UINT64 .)
    UNTIL           reduce using rule 55 (integer -> UINT64 .)
    LOOP            reduce using rule 55 (integer -> UINT64 .)
    PLUS            reduce using rule 55 (integer -> UINT64 .)
    MINUS           reduce using rule 55 (integer -> UINT64 .)
    EXCLAMATION     reduce using rule 55 (integer -> UINT64 .)
    TILDE           reduce using rule 55 (integer -> UINT64 .)
    LPAREN          reduce using rule 55 (integer -> UINT64 .)
    LBRACKET        reduce using rule 55 (integer -> UINT64 .)
    INTNUMBER       reduce using rule 55 (integer -> UINT64 .)
    FLOATNUMBER     reduce using rule 55 (integer -> UINT64 .)
    STRING          reduce using rule 55 (integer -> UINT64 .)
    CHAR            reduce using rule 55 (integer -> UINT64 .)
    TRUE            reduce using rule 55 (integer -> UINT64 .)
    FALSE           reduce using rule 55 (integer -> UINT64 .)
    COMMA           reduce using rule 55 (integer -> UINT64 .)
    RPAREN          reduce using rule 55 (integer -> UINT64 .)


state 176

    (56) integer -> UINT128 .

    ASSIGN          reduce using rule 56 (integer -> UINT128 .)
    NEWLINE         reduce using rule 56 (integer -> UINT128 .)
    ID              reduce using rule 56 (integer -> UINT128 .)
    CASE            reduce using rule 56 (integer -> UINT128 .)
    RETURN          reduce using rule 56 (integer -> UINT128 .)
    BREAK           reduce using rule 56 (integer -> UINT128 .)
    NEXT            reduce using rule 56 (integer -> UINT128 .)
    UNDERSCORE      reduce using rule 56 (integer -> UINT128 .)
    ASTERISK        reduce using rule 56 (integer -> UINT128 .)
    IF              reduce using rule 56 (integer -> UINT128 .)
    UNLESS          reduce using rule 56 (integer -> UINT128 .)
    WHILE           reduce using rule 56 (integer -> UINT128 .)
    UNTIL           reduce using rule 56 (integer -> UINT128 .)
    LOOP            reduce using rule 56 (integer -> UINT128 .)
    PLUS            reduce using rule 56 (integer -> UINT128 .)
    MINUS           reduce using rule 56 (integer -> UINT128 .)
    EXCLAMATION     reduce using rule 56 (integer -> UINT128 .)
    TILDE           reduce using rule 56 (integer -> UINT128 .)
    LPAREN          reduce using rule 56 (integer -> UINT128 .)
    LBRACKET        reduce using rule 56 (integer -> UINT128 .)
    INTNUMBER       reduce using rule 56 (integer -> UINT128 .)
    FLOATNUMBER     reduce using rule 56 (integer -> UINT128 .)
    STRING          reduce using rule 56 (integer -> UINT128 .)
    CHAR            reduce using rule 56 (integer -> UINT128 .)
    TRUE            reduce using rule 56 (integer -> UINT128 .)
    FALSE           reduce using rule 56 (integer -> UINT128 .)
    COMMA           reduce using rule 56 (integer -> UINT128 .)
    RPAREN          reduce using rule 56 (integer -> UINT128 .)


state 177

    (57) float -> FLOAT .

    ASSIGN          reduce using rule 57 (float -> FLOAT .)
    NEWLINE         reduce using rule 57 (float -> FLOAT .)
    ID              reduce using rule 57 (float -> FLOAT .)
    CASE            reduce using rule 57 (float -> FLOAT .)
    RETURN          reduce using rule 57 (float -> FLOAT .)
    BREAK           reduce using rule 57 (float -> FLOAT .)
    NEXT            reduce using rule 57 (float -> FLOAT .)
    UNDERSCORE      reduce using rule 57 (float -> FLOAT .)
    ASTERISK        reduce using rule 57 (float -> FLOAT .)
    IF              reduce using rule 57 (float -> FLOAT .)
    UNLESS          reduce using rule 57 (float -> FLOAT .)
    WHILE           reduce using rule 57 (float -> FLOAT .)
    UNTIL           reduce using rule 57 (float -> FLOAT .)
    LOOP            reduce using rule 57 (float -> FLOAT .)
    PLUS            reduce using rule 57 (float -> FLOAT .)
    MINUS           reduce using rule 57 (float -> FLOAT .)
    EXCLAMATION     reduce using rule 57 (float -> FLOAT .)
    TILDE           reduce using rule 57 (float -> FLOAT .)
    LPAREN          reduce using rule 57 (float -> FLOAT .)
    LBRACKET        reduce using rule 57 (float -> FLOAT .)
    INTNUMBER       reduce using rule 57 (float -> FLOAT .)
    FLOATNUMBER     reduce using rule 57 (float -> FLOAT .)
    STRING          reduce using rule 57 (float -> FLOAT .)
    CHAR            reduce using rule 57 (float -> FLOAT .)
    TRUE            reduce using rule 57 (float -> FLOAT .)
    FALSE           reduce using rule 57 (float -> FLOAT .)
    COMMA           reduce using rule 57 (float -> FLOAT .)
    RPAREN          reduce using rule 57 (float -> FLOAT .)


state 178

    (58) float -> FLOAT32 .

    ASSIGN          reduce using rule 58 (float -> FLOAT32 .)
    NEWLINE         reduce using rule 58 (float -> FLOAT32 .)
    ID              reduce using rule 58 (float -> FLOAT32 .)
    CASE            reduce using rule 58 (float -> FLOAT32 .)
    RETURN          reduce using rule 58 (float -> FLOAT32 .)
    BREAK           reduce using rule 58 (float -> FLOAT32 .)
    NEXT            reduce using rule 58 (float -> FLOAT32 .)
    UNDERSCORE      reduce using rule 58 (float -> FLOAT32 .)
    ASTERISK        reduce using rule 58 (float -> FLOAT32 .)
    IF              reduce using rule 58 (float -> FLOAT32 .)
    UNLESS          reduce using rule 58 (float -> FLOAT32 .)
    WHILE           reduce using rule 58 (float -> FLOAT32 .)
    UNTIL           reduce using rule 58 (float -> FLOAT32 .)
    LOOP            reduce using rule 58 (float -> FLOAT32 .)
    PLUS            reduce using rule 58 (float -> FLOAT32 .)
    MINUS           reduce using rule 58 (float -> FLOAT32 .)
    EXCLAMATION     reduce using rule 58 (float -> FLOAT32 .)
    TILDE           reduce using rule 58 (float -> FLOAT32 .)
    LPAREN          reduce using rule 58 (float -> FLOAT32 .)
    LBRACKET        reduce using rule 58 (float -> FLOAT32 .)
    INTNUMBER       reduce using rule 58 (float -> FLOAT32 .)
    FLOATNUMBER     reduce using rule 58 (float -> FLOAT32 .)
    STRING          reduce using rule 58 (float -> FLOAT32 .)
    CHAR            reduce using rule 58 (float -> FLOAT32 .)
    TRUE            reduce using rule 58 (float -> FLOAT32 .)
    FALSE           reduce using rule 58 (float -> FLOAT32 .)
    COMMA           reduce using rule 58 (float -> FLOAT32 .)
    RPAREN          reduce using rule 58 (float -> FLOAT32 .)


state 179

    (59) float -> FLOAT64 .

    ASSIGN          reduce using rule 59 (float -> FLOAT64 .)
    NEWLINE         reduce using rule 59 (float -> FLOAT64 .)
    ID              reduce using rule 59 (float -> FLOAT64 .)
    CASE            reduce using rule 59 (float -> FLOAT64 .)
    RETURN          reduce using rule 59 (float -> FLOAT64 .)
    BREAK           reduce using rule 59 (float -> FLOAT64 .)
    NEXT            reduce using rule 59 (float -> FLOAT64 .)
    UNDERSCORE      reduce using rule 59 (float -> FLOAT64 .)
    ASTERISK        reduce using rule 59 (float -> FLOAT64 .)
    IF              reduce using rule 59 (float -> FLOAT64 .)
    UNLESS          reduce using rule 59 (float -> FLOAT64 .)
    WHILE           reduce using rule 59 (float -> FLOAT64 .)
    UNTIL           reduce using rule 59 (float -> FLOAT64 .)
    LOOP            reduce using rule 59 (float -> FLOAT64 .)
    PLUS            reduce using rule 59 (float -> FLOAT64 .)
    MINUS           reduce using rule 59 (float -> FLOAT64 .)
    EXCLAMATION     reduce using rule 59 (float -> FLOAT64 .)
    TILDE           reduce using rule 59 (float -> FLOAT64 .)
    LPAREN          reduce using rule 59 (float -> FLOAT64 .)
    LBRACKET        reduce using rule 59 (float -> FLOAT64 .)
    INTNUMBER       reduce using rule 59 (float -> FLOAT64 .)
    FLOATNUMBER     reduce using rule 59 (float -> FLOAT64 .)
    STRING          reduce using rule 59 (float -> FLOAT64 .)
    CHAR            reduce using rule 59 (float -> FLOAT64 .)
    TRUE            reduce using rule 59 (float -> FLOAT64 .)
    FALSE           reduce using rule 59 (float -> FLOAT64 .)
    COMMA           reduce using rule 59 (float -> FLOAT64 .)
    RPAREN          reduce using rule 59 (float -> FLOAT64 .)


state 180

    (60) boolean -> BOOL .

    ASSIGN          reduce using rule 60 (boolean -> BOOL .)
    NEWLINE         reduce using rule 60 (boolean -> BOOL .)
    ID              reduce using rule 60 (boolean -> BOOL .)
    CASE            reduce using rule 60 (boolean -> BOOL .)
    RETURN          reduce using rule 60 (boolean -> BOOL .)
    BREAK           reduce using rule 60 (boolean -> BOOL .)
    NEXT            reduce using rule 60 (boolean -> BOOL .)
    UNDERSCORE      reduce using rule 60 (boolean -> BOOL .)
    ASTERISK        reduce using rule 60 (boolean -> BOOL .)
    IF              reduce using rule 60 (boolean -> BOOL .)
    UNLESS          reduce using rule 60 (boolean -> BOOL .)
    WHILE           reduce using rule 60 (boolean -> BOOL .)
    UNTIL           reduce using rule 60 (boolean -> BOOL .)
    LOOP            reduce using rule 60 (boolean -> BOOL .)
    PLUS            reduce using rule 60 (boolean -> BOOL .)
    MINUS           reduce using rule 60 (boolean -> BOOL .)
    EXCLAMATION     reduce using rule 60 (boolean -> BOOL .)
    TILDE           reduce using rule 60 (boolean -> BOOL .)
    LPAREN          reduce using rule 60 (boolean -> BOOL .)
    LBRACKET        reduce using rule 60 (boolean -> BOOL .)
    INTNUMBER       reduce using rule 60 (boolean -> BOOL .)
    FLOATNUMBER     reduce using rule 60 (boolean -> BOOL .)
    STRING          reduce using rule 60 (boolean -> BOOL .)
    CHAR            reduce using rule 60 (boolean -> BOOL .)
    TRUE            reduce using rule 60 (boolean -> BOOL .)
    FALSE           reduce using rule 60 (boolean -> BOOL .)
    COMMA           reduce using rule 60 (boolean -> BOOL .)
    RPAREN          reduce using rule 60 (boolean -> BOOL .)


state 181

    (68) variable_declaration -> list_of_identifiers ASSIGN expression_list1 .

    NEWLINE         reduce using rule 68 (variable_declaration -> list_of_identifiers ASSIGN expression_list1 .)
    $end            reduce using rule 68 (variable_declaration -> list_of_identifiers ASSIGN expression_list1 .)
    END             reduce using rule 68 (variable_declaration -> list_of_identifiers ASSIGN expression_list1 .)
    ELSIF           reduce using rule 68 (variable_declaration -> list_of_identifiers ASSIGN expression_list1 .)
    ELSE            reduce using rule 68 (variable_declaration -> list_of_identifiers ASSIGN expression_list1 .)
    RBRACE          reduce using rule 68 (variable_declaration -> list_of_identifiers ASSIGN expression_list1 .)
    WHEN            reduce using rule 68 (variable_declaration -> list_of_identifiers ASSIGN expression_list1 .)


state 182

    (71) expression_list1 -> expression .
    (72) expression_list1 -> expression . COMMA expression_list1

    NEWLINE         reduce using rule 71 (expression_list1 -> expression .)
    $end            reduce using rule 71 (expression_list1 -> expression .)
    END             reduce using rule 71 (expression_list1 -> expression .)
    ELSIF           reduce using rule 71 (expression_list1 -> expression .)
    ELSE            reduce using rule 71 (expression_list1 -> expression .)
    RBRACE          reduce using rule 71 (expression_list1 -> expression .)
    WHEN            reduce using rule 71 (expression_list1 -> expression .)
    COMMA           shift and go to state 230


state 183

    (127) assignment_expression -> assignment_target PLUS_ASSIGN expression .

    DOT             reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEWLINE         reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    $end            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RPAREN          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHEN            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    END             reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSIF           reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ELSE            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACE          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACE          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ID              reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CASE            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RETURN          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    BREAK           reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    NEXT            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    ASTERISK        reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    IF              reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNLESS          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    WHILE           reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    UNTIL           reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LOOP            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    PLUS            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MINUS           reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TILDE           reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LPAREN          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    LBRACKET        reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    STRING          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CHAR            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TRUE            reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    FALSE           reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    COMMA           reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    RBRACKET        reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    CONSTANT        reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    MODULE          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    DEF             reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)
    TCOLON          reduce using rule 127 (assignment_expression -> assignment_target PLUS_ASSIGN expression .)


state 184

    (128) assignment_expression -> assignment_target MINUS_ASSIGN expression .

    DOT             reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEWLINE         reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    $end            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RPAREN          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHEN            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    END             reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSIF           reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ELSE            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACE          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACE          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ID              reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CASE            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RETURN          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    BREAK           reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    NEXT            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNDERSCORE      reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    ASTERISK        reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    IF              reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNLESS          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    WHILE           reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    UNTIL           reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LOOP            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    PLUS            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MINUS           reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    EXCLAMATION     reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TILDE           reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LPAREN          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    LBRACKET        reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    INTNUMBER       reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    STRING          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CHAR            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TRUE            reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    FALSE           reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    COMMA           reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    RBRACKET        reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    CONSTANT        reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    MODULE          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    DEF             reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)
    TCOLON          reduce using rule 128 (assignment_expression -> assignment_target MINUS_ASSIGN expression .)


state 185

    (129) assignment_expression -> assignment_target MULTI_ASSIGN expression .

    DOT             reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEWLINE         reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    $end            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RPAREN          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHEN            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    END             reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSIF           reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ELSE            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACE          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACE          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ID              reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CASE            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RETURN          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    BREAK           reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    NEXT            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNDERSCORE      reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    ASTERISK        reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    IF              reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNLESS          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    WHILE           reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    UNTIL           reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LOOP            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    PLUS            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MINUS           reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    EXCLAMATION     reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TILDE           reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LPAREN          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    LBRACKET        reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    INTNUMBER       reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    STRING          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CHAR            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TRUE            reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    FALSE           reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    COMMA           reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    RBRACKET        reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    CONSTANT        reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    MODULE          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    DEF             reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)
    TCOLON          reduce using rule 129 (assignment_expression -> assignment_target MULTI_ASSIGN expression .)


state 186

    (130) assignment_expression -> assignment_target DIVIDE_ASSIGN expression .

    DOT             reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEWLINE         reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    $end            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RPAREN          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHEN            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    END             reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSIF           reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ELSE            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACE          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACE          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ID              reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    BREAK           reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    NEXT            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNDERSCORE      reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    ASTERISK        reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    IF              reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNLESS          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    WHILE           reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    UNTIL           reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LOOP            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    PLUS            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MINUS           reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    EXCLAMATION     reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TILDE           reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LPAREN          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    LBRACKET        reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    INTNUMBER       reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FLOATNUMBER     reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    STRING          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CHAR            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TRUE            reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    FALSE           reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    COMMA           reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    RBRACKET        reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    CONSTANT        reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    MODULE          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    DEF             reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)
    TCOLON          reduce using rule 130 (assignment_expression -> assignment_target DIVIDE_ASSIGN expression .)


state 187

    (118) case_structure -> CASE expression when_list . opt_else END
    (120) when_list -> when_list . WHEN expression statements
    (105) opt_else -> . ELSE statements
    (106) opt_else -> . empty
    (172) empty -> .

    WHEN            shift and go to state 232
    ELSE            shift and go to state 233
    END             reduce using rule 172 (empty -> .)

    opt_else                       shift and go to state 231
    empty                          shift and go to state 234

state 188

    (119) when_list -> WHEN . expression statements
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 235
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 189

    (135) ternary_expression -> range_expression QMARK expression . TCOLON expression

    TCOLON          shift and go to state 236


state 190

    (96) if_statement -> IF if_condition statements . opt_elsif opt_else END
    (100) opt_elsif -> . elsif_list
    (101) opt_elsif -> . empty
    (102) elsif_list -> . elsif_list elsif
    (103) elsif_list -> . elsif
    (172) empty -> .
    (104) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 172 (empty -> .)
    END             reduce using rule 172 (empty -> .)
    ELSIF           shift and go to state 241

    opt_elsif                      shift and go to state 237
    elsif_list                     shift and go to state 238
    empty                          shift and go to state 239
    elsif                          shift and go to state 240

state 191

    (99) if_condition -> expression LBRACE . statements RBRACE
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 15
    statements                     shift and go to state 242
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 192

    (97) unless_statement -> UNLESS if_condition statements . opt_else END
    (105) opt_else -> . ELSE statements
    (106) opt_else -> . empty
    (172) empty -> .

    ELSE            shift and go to state 233
    END             reduce using rule 172 (empty -> .)

    opt_else                       shift and go to state 243
    empty                          shift and go to state 234

state 193

    (111) while -> WHILE expression statements .

    NEWLINE         reduce using rule 111 (while -> WHILE expression statements .)
    $end            reduce using rule 111 (while -> WHILE expression statements .)
    END             reduce using rule 111 (while -> WHILE expression statements .)
    ELSIF           reduce using rule 111 (while -> WHILE expression statements .)
    ELSE            reduce using rule 111 (while -> WHILE expression statements .)
    RBRACE          reduce using rule 111 (while -> WHILE expression statements .)
    WHEN            reduce using rule 111 (while -> WHILE expression statements .)


state 194

    (112) until -> UNTIL expression statements .

    NEWLINE         reduce using rule 112 (until -> UNTIL expression statements .)
    $end            reduce using rule 112 (until -> UNTIL expression statements .)
    END             reduce using rule 112 (until -> UNTIL expression statements .)
    ELSIF           reduce using rule 112 (until -> UNTIL expression statements .)
    ELSE            reduce using rule 112 (until -> UNTIL expression statements .)
    RBRACE          reduce using rule 112 (until -> UNTIL expression statements .)
    WHEN            reduce using rule 112 (until -> UNTIL expression statements .)


state 195

    (113) loop -> LOOP DO statements . END

    END             shift and go to state 244


state 196

    (114) loop -> LOOP LBRACE statements . RBRACE

    RBRACE          shift and go to state 245


state 197

    (137) range_expression -> logical_or_expression DOTDOT logical_or_expression .
    (141) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    DOT             reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    NEWLINE         reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    $end            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RPAREN          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    WHEN            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    END             reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ELSIF           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ELSE            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RBRACE          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LBRACE          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ID              reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CASE            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RETURN          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    BREAK           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    NEXT            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNDERSCORE      reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    ASTERISK        reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    IF              reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNLESS          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    WHILE           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    UNTIL           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LOOP            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    PLUS            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    MINUS           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    EXCLAMATION     reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TILDE           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LPAREN          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    LBRACKET        reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    INTNUMBER       reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    FLOATNUMBER     reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    STRING          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CHAR            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TRUE            reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    FALSE           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    COMMA           reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    RBRACKET        reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    CONSTANT        reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    MODULE          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    DEF             reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    TCOLON          reduce using rule 137 (range_expression -> logical_or_expression DOTDOT logical_or_expression .)
    OR              shift and go to state 117


state 198

    (138) range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .
    (141) logical_or_expression -> logical_or_expression . OR logical_and_expression

    QMARK           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    DOT             reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    NEWLINE         reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    $end            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RPAREN          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    WHEN            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    END             reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ELSIF           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ELSE            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RBRACE          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LBRACE          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ID              reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CASE            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RETURN          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    BREAK           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    NEXT            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNDERSCORE      reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    ASTERISK        reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    IF              reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNLESS          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    WHILE           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    UNTIL           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LOOP            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    PLUS            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    MINUS           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    EXCLAMATION     reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TILDE           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LPAREN          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    LBRACKET        reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    INTNUMBER       reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    FLOATNUMBER     reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    STRING          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CHAR            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TRUE            reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    FALSE           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    COMMA           reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    RBRACKET        reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    CONSTANT        reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    MODULE          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    DEF             reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    TCOLON          reduce using rule 138 (range_expression -> logical_or_expression DOTDOTDOT logical_or_expression .)
    OR              shift and go to state 117


state 199

    (141) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (143) logical_and_expression -> logical_and_expression . AND equality_expression

    DOTDOT          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOTDOTDOT       reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    QMARK           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DOT             reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEWLINE         reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    $end            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHEN            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    END             reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSIF           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ELSE            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACE          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACE          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ID              reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CASE            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RETURN          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    BREAK           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    NEXT            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNDERSCORE      reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ASTERISK        reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    IF              reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNLESS          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    WHILE           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    UNTIL           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LOOP            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    PLUS            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MINUS           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    EXCLAMATION     reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TILDE           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LPAREN          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    LBRACKET        reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    INTNUMBER       reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FLOATNUMBER     reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    STRING          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CHAR            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TRUE            reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    FALSE           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RBRACKET        reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    CONSTANT        reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    MODULE          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    DEF             reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    TCOLON          reduce using rule 141 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 118


state 200

    (143) logical_and_expression -> logical_and_expression AND equality_expression .
    (145) equality_expression -> equality_expression . EQUAL relational_expression
    (146) equality_expression -> equality_expression . NOT_EQUAL relational_expression
    (147) equality_expression -> equality_expression . TIPO_EQUAL relational_expression

    AND             reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOTDOT          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOTDOTDOT       reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    QMARK           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DOT             reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEWLINE         reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    $end            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHEN            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    END             reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSIF           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ELSE            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACE          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACE          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ID              reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CASE            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RETURN          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    BREAK           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    NEXT            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNDERSCORE      reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    ASTERISK        reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    IF              reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNLESS          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    WHILE           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    UNTIL           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LOOP            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    PLUS            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MINUS           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EXCLAMATION     reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TILDE           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LPAREN          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    LBRACKET        reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    INTNUMBER       reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FLOATNUMBER     reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    STRING          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CHAR            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TRUE            reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    FALSE           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RBRACKET        reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    CONSTANT        reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    MODULE          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    DEF             reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    TCOLON          reduce using rule 143 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQUAL           shift and go to state 119
    NOT_EQUAL       shift and go to state 120
    TIPO_EQUAL      shift and go to state 121


state 201

    (145) equality_expression -> equality_expression EQUAL relational_expression .
    (149) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (150) relational_expression -> relational_expression . LESS_THAN additive_expression
    (151) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (152) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOTDOT          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    QMARK           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    DOT             reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEWLINE         reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    $end            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    RPAREN          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHEN            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    END             reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSIF           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    ELSE            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACE          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACE          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    ID              reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    CASE            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    RETURN          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    BREAK           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    NEXT            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    ASTERISK        reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    IF              reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNLESS          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    WHILE           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    UNTIL           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    LOOP            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    PLUS            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    MINUS           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    TILDE           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    LPAREN          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    LBRACKET        reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    INTNUMBER       reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    STRING          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    CHAR            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    TRUE            reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    FALSE           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    COMMA           reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    RBRACKET        reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    CONSTANT        reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    MODULE          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    DEF             reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    TCOLON          reduce using rule 145 (equality_expression -> equality_expression EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 122
    LESS_THAN       shift and go to state 123
    GREATER_EQUAL   shift and go to state 124
    LESS_EQUAL      shift and go to state 125


state 202

    (146) equality_expression -> equality_expression NOT_EQUAL relational_expression .
    (149) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (150) relational_expression -> relational_expression . LESS_THAN additive_expression
    (151) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (152) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    AND             reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOTDOT          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    OR              reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    QMARK           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DOT             reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEWLINE         reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    $end            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RPAREN          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHEN            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    END             reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSIF           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ELSE            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACE          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACE          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ID              reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CASE            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RETURN          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    BREAK           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    NEXT            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    ASTERISK        reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    IF              reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNLESS          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    WHILE           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    UNTIL           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LOOP            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    PLUS            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MINUS           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TILDE           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LPAREN          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    LBRACKET        reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    STRING          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CHAR            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TRUE            reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    FALSE           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    COMMA           reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    RBRACKET        reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    CONSTANT        reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    MODULE          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    DEF             reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    TCOLON          reduce using rule 146 (equality_expression -> equality_expression NOT_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 122
    LESS_THAN       shift and go to state 123
    GREATER_EQUAL   shift and go to state 124
    LESS_EQUAL      shift and go to state 125


state 203

    (147) equality_expression -> equality_expression TIPO_EQUAL relational_expression .
    (149) relational_expression -> relational_expression . GREATER_THAN additive_expression
    (150) relational_expression -> relational_expression . LESS_THAN additive_expression
    (151) relational_expression -> relational_expression . GREATER_EQUAL additive_expression
    (152) relational_expression -> relational_expression . LESS_EQUAL additive_expression

    EQUAL           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NOT_EQUAL       reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TIPO_EQUAL      reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    AND             reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOTDOT          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOTDOTDOT       reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    OR              reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    QMARK           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DOT             reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEWLINE         reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    $end            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RPAREN          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHEN            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    END             reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSIF           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ELSE            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACE          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACE          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ID              reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CASE            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RETURN          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    BREAK           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    NEXT            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNDERSCORE      reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    ASTERISK        reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    IF              reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNLESS          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    WHILE           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    UNTIL           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LOOP            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    PLUS            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MINUS           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    EXCLAMATION     reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TILDE           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LPAREN          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    LBRACKET        reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    INTNUMBER       reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FLOATNUMBER     reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    STRING          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CHAR            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TRUE            reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    FALSE           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    COMMA           reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    RBRACKET        reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    CONSTANT        reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    MODULE          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    DEF             reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    TCOLON          reduce using rule 147 (equality_expression -> equality_expression TIPO_EQUAL relational_expression .)
    GREATER_THAN    shift and go to state 122
    LESS_THAN       shift and go to state 123
    GREATER_EQUAL   shift and go to state 124
    LESS_EQUAL      shift and go to state 125


state 204

    (149) relational_expression -> relational_expression GREATER_THAN additive_expression .
    (154) additive_expression -> additive_expression . PLUS multiplicative_expression
    (155) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_THAN       reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EQUAL           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    AND             reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOTDOT          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOTDOTDOT       reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    OR              reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    QMARK           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DOT             reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEWLINE         reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    $end            reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RPAREN          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHEN            reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    END             reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSIF           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ELSE            reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACE          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACE          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ID              reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CASE            reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RETURN          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    BREAK           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    NEXT            reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNDERSCORE      reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    ASTERISK        reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    IF              reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNLESS          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    WHILE           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    UNTIL           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LOOP            reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    EXCLAMATION     reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TILDE           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LPAREN          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    LBRACKET        reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    INTNUMBER       reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    STRING          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CHAR            reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TRUE            reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    FALSE           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    COMMA           reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    RBRACKET        reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    CONSTANT        reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    MODULE          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    DEF             reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    TCOLON          reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127

  ! PLUS            [ reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 149 (relational_expression -> relational_expression GREATER_THAN additive_expression .) ]


state 205

    (150) relational_expression -> relational_expression LESS_THAN additive_expression .
    (154) additive_expression -> additive_expression . PLUS multiplicative_expression
    (155) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_THAN       reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    GREATER_EQUAL   reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LESS_EQUAL      reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EQUAL           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NOT_EQUAL       reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TIPO_EQUAL      reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    AND             reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOTDOT          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOTDOTDOT       reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    OR              reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    QMARK           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DOT             reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEWLINE         reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    $end            reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RPAREN          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHEN            reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    END             reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSIF           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ELSE            reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACE          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACE          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ID              reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CASE            reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RETURN          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    BREAK           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    NEXT            reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNDERSCORE      reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    ASTERISK        reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    IF              reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNLESS          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    WHILE           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    UNTIL           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LOOP            reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    EXCLAMATION     reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TILDE           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LPAREN          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    LBRACKET        reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    INTNUMBER       reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FLOATNUMBER     reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    STRING          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CHAR            reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TRUE            reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    FALSE           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    COMMA           reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    RBRACKET        reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    CONSTANT        reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    MODULE          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    DEF             reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    TCOLON          reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127

  ! PLUS            [ reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]
  ! MINUS           [ reduce using rule 150 (relational_expression -> relational_expression LESS_THAN additive_expression .) ]


state 206

    (151) relational_expression -> relational_expression GREATER_EQUAL additive_expression .
    (154) additive_expression -> additive_expression . PLUS multiplicative_expression
    (155) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EQUAL           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    AND             reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOTDOT          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOTDOTDOT       reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    OR              reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    QMARK           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DOT             reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEWLINE         reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    $end            reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RPAREN          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHEN            reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    END             reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSIF           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ELSE            reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACE          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACE          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ID              reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CASE            reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RETURN          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    BREAK           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    NEXT            reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    ASTERISK        reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    IF              reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNLESS          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    WHILE           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    UNTIL           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LOOP            reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TILDE           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LPAREN          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    LBRACKET        reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    STRING          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CHAR            reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TRUE            reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    FALSE           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    COMMA           reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    RBRACKET        reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    CONSTANT        reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    MODULE          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    DEF             reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    TCOLON          reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127

  ! PLUS            [ reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 151 (relational_expression -> relational_expression GREATER_EQUAL additive_expression .) ]


state 207

    (152) relational_expression -> relational_expression LESS_EQUAL additive_expression .
    (154) additive_expression -> additive_expression . PLUS multiplicative_expression
    (155) additive_expression -> additive_expression . MINUS multiplicative_expression

    GREATER_THAN    reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_THAN       reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    GREATER_EQUAL   reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LESS_EQUAL      reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EQUAL           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NOT_EQUAL       reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TIPO_EQUAL      reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    AND             reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOTDOT          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOTDOTDOT       reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    OR              reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    QMARK           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DOT             reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEWLINE         reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    $end            reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RPAREN          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHEN            reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    END             reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSIF           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ELSE            reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACE          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACE          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ID              reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CASE            reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RETURN          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    BREAK           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    NEXT            reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNDERSCORE      reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    ASTERISK        reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    IF              reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNLESS          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    WHILE           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    UNTIL           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LOOP            reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    EXCLAMATION     reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TILDE           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LPAREN          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    LBRACKET        reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    INTNUMBER       reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FLOATNUMBER     reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    STRING          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CHAR            reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TRUE            reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    FALSE           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    COMMA           reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    RBRACKET        reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    CONSTANT        reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    MODULE          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    DEF             reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    TCOLON          reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .)
    PLUS            shift and go to state 126
    MINUS           shift and go to state 127

  ! PLUS            [ reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]
  ! MINUS           [ reduce using rule 152 (relational_expression -> relational_expression LESS_EQUAL additive_expression .) ]


state 208

    (154) additive_expression -> additive_expression PLUS multiplicative_expression .
    (157) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (158) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (159) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_THAN       reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQUAL           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOTDOT          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOTDOTDOT       reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    QMARK           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DOT             reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEWLINE         reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    $end            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHEN            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    END             reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSIF           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ELSE            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACE          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ID              reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CASE            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RETURN          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BREAK           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NEXT            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    ASTERISK        reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IF              reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNLESS          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    WHILE           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    UNTIL           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LOOP            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TILDE           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LPAREN          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LBRACKET        reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INTNUMBER       reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CHAR            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TRUE            reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FALSE           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RBRACKET        reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONSTANT        reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MODULE          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    DEF             reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TCOLON          reduce using rule 154 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MULTI           shift and go to state 128
    DIVIDE          shift and go to state 129
    MODULO          shift and go to state 130


state 209

    (155) additive_expression -> additive_expression MINUS multiplicative_expression .
    (157) multiplicative_expression -> multiplicative_expression . MULTI potenciacao_expression
    (158) multiplicative_expression -> multiplicative_expression . DIVIDE potenciacao_expression
    (159) multiplicative_expression -> multiplicative_expression . MODULO potenciacao_expression

    PLUS            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_THAN    reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_THAN       reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GREATER_EQUAL   reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LESS_EQUAL      reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQUAL           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQUAL       reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIPO_EQUAL      reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOTDOT          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOTDOTDOT       reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    QMARK           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DOT             reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEWLINE         reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    $end            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHEN            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    END             reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSIF           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ELSE            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACE          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ID              reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CASE            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RETURN          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BREAK           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NEXT            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNDERSCORE      reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    ASTERISK        reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IF              reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNLESS          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    WHILE           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    UNTIL           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LOOP            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EXCLAMATION     reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TILDE           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LPAREN          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LBRACKET        reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INTNUMBER       reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOATNUMBER     reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRING          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CHAR            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TRUE            reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FALSE           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RBRACKET        reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONSTANT        reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MODULE          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    DEF             reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TCOLON          reduce using rule 155 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MULTI           shift and go to state 128
    DIVIDE          shift and go to state 129
    MODULO          shift and go to state 130


state 210

    (157) multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .
    (161) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DIVIDE          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULO          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    PLUS            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MINUS           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_THAN    reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_THAN       reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LESS_EQUAL      reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EQUAL           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NOT_EQUAL       reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    AND             reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOTDOT          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOTDOTDOT       reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    OR              reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    QMARK           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DOT             reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEWLINE         reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    $end            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RPAREN          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHEN            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    END             reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSIF           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ELSE            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACE          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACE          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ID              reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CASE            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RETURN          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    BREAK           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    NEXT            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNDERSCORE      reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    ASTERISK        reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    IF              reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNLESS          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    WHILE           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    UNTIL           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LOOP            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    EXCLAMATION     reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TILDE           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LPAREN          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    LBRACKET        reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    INTNUMBER       reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FLOATNUMBER     reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    STRING          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CHAR            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TRUE            reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    FALSE           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    COMMA           reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    RBRACKET        reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    CONSTANT        reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    MODULE          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    DEF             reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    TCOLON          reduce using rule 157 (multiplicative_expression -> multiplicative_expression MULTI potenciacao_expression .)
    POTENCIACAO     shift and go to state 134


state 211

    (158) multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .
    (161) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DIVIDE          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULO          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    PLUS            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MINUS           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_THAN    reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_THAN       reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LESS_EQUAL      reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EQUAL           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NOT_EQUAL       reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    AND             reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOTDOT          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOTDOTDOT       reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    OR              reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    QMARK           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DOT             reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEWLINE         reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    $end            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RPAREN          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHEN            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    END             reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSIF           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ELSE            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACE          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACE          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ID              reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CASE            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RETURN          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    BREAK           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    NEXT            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNDERSCORE      reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    ASTERISK        reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    IF              reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNLESS          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    WHILE           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    UNTIL           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LOOP            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    EXCLAMATION     reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TILDE           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LPAREN          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    LBRACKET        reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    INTNUMBER       reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FLOATNUMBER     reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    STRING          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CHAR            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TRUE            reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    FALSE           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    COMMA           reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    RBRACKET        reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    CONSTANT        reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    MODULE          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    DEF             reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    TCOLON          reduce using rule 158 (multiplicative_expression -> multiplicative_expression DIVIDE potenciacao_expression .)
    POTENCIACAO     shift and go to state 134


state 212

    (159) multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .
    (161) potenciacao_expression -> potenciacao_expression . POTENCIACAO unary_expression

    MULTI           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DIVIDE          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULO          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    PLUS            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MINUS           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_THAN    reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_THAN       reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    GREATER_EQUAL   reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LESS_EQUAL      reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EQUAL           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NOT_EQUAL       reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TIPO_EQUAL      reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    AND             reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOTDOT          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOTDOTDOT       reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    OR              reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    QMARK           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DOT             reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEWLINE         reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    $end            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RPAREN          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHEN            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    END             reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSIF           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ELSE            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACE          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACE          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ID              reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CASE            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RETURN          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    BREAK           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    NEXT            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNDERSCORE      reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    ASTERISK        reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    IF              reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNLESS          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    WHILE           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    UNTIL           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LOOP            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    EXCLAMATION     reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TILDE           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LPAREN          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    LBRACKET        reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    INTNUMBER       reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FLOATNUMBER     reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    STRING          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CHAR            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TRUE            reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    FALSE           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    COMMA           reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    RBRACKET        reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    CONSTANT        reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    MODULE          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    DEF             reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    TCOLON          reduce using rule 159 (multiplicative_expression -> multiplicative_expression MODULO potenciacao_expression .)
    POTENCIACAO     shift and go to state 134


state 213

    (161) potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .

    POTENCIACAO     reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MULTI           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DIVIDE          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULO          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    PLUS            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MINUS           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_THAN    reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_THAN       reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    GREATER_EQUAL   reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LESS_EQUAL      reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EQUAL           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NOT_EQUAL       reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TIPO_EQUAL      reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    AND             reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOTDOT          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOTDOTDOT       reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    OR              reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    QMARK           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DOT             reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEWLINE         reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    $end            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RPAREN          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHEN            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    END             reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSIF           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ELSE            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACE          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACE          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ID              reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CASE            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RETURN          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    BREAK           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    NEXT            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNDERSCORE      reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    ASTERISK        reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    IF              reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNLESS          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    WHILE           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    UNTIL           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LOOP            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    EXCLAMATION     reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TILDE           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LPAREN          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    LBRACKET        reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    INTNUMBER       reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FLOATNUMBER     reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    STRING          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CHAR            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TRUE            reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    FALSE           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    COMMA           reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    RBRACKET        reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    CONSTANT        reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    MODULE          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    DEF             reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)
    TCOLON          reduce using rule 161 (potenciacao_expression -> potenciacao_expression POTENCIACAO unary_expression .)


state 214

    (171) array_literal -> LBRACKET opt_expression_list RBRACKET .

    POTENCIACAO     reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MULTI           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DIVIDE          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULO          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    PLUS            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MINUS           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_THAN    reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_THAN       reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    GREATER_EQUAL   reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LESS_EQUAL      reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EQUAL           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NOT_EQUAL       reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TIPO_EQUAL      reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    AND             reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOT          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOTDOTDOT       reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    OR              reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    QMARK           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DOT             reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEWLINE         reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    $end            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RPAREN          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHEN            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    END             reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSIF           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ELSE            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACE          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACE          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ID              reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CASE            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RETURN          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    BREAK           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    NEXT            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNDERSCORE      reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    ASTERISK        reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    IF              reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNLESS          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    WHILE           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    UNTIL           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LOOP            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    EXCLAMATION     reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TILDE           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LPAREN          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    LBRACKET        reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    INTNUMBER       reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FLOATNUMBER     reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    STRING          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CHAR            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TRUE            reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    FALSE           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    COMMA           reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    RBRACKET        reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    CONSTANT        reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    MODULE          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    DEF             reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)
    TCOLON          reduce using rule 171 (array_literal -> LBRACKET opt_expression_list RBRACKET .)


state 215

    (78) expression_list -> expression_list COMMA . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 246
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 216

    (1) program -> require_list constant_list module_list function_list .

    $end            reduce using rule 1 (program -> require_list constant_list module_list function_list .)


state 217

    (115) iterator -> expression DOT MULTI statements .

    NEWLINE         reduce using rule 115 (iterator -> expression DOT MULTI statements .)
    $end            reduce using rule 115 (iterator -> expression DOT MULTI statements .)
    END             reduce using rule 115 (iterator -> expression DOT MULTI statements .)
    ELSIF           reduce using rule 115 (iterator -> expression DOT MULTI statements .)
    ELSE            reduce using rule 115 (iterator -> expression DOT MULTI statements .)
    RBRACE          reduce using rule 115 (iterator -> expression DOT MULTI statements .)
    WHEN            reduce using rule 115 (iterator -> expression DOT MULTI statements .)


state 218

    (116) iterator -> expression DOT EACH DO . PIPE ID PIPE statements END

    PIPE            shift and go to state 247


state 219

    (117) iterator -> expression DOT EACH LBRACE . PIPE ID PIPE RBRACE statements

    PIPE            shift and go to state 248


state 220

    (25) module -> MODULE ID statements END .

    MODULE          reduce using rule 25 (module -> MODULE ID statements END .)
    DEF             reduce using rule 25 (module -> MODULE ID statements END .)
    $end            reduce using rule 25 (module -> MODULE ID statements END .)


state 221

    (73) function_call -> ID LPAREN expression_list RPAREN .

    NEWLINE         reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    $end            reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    END             reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSIF           reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    ELSE            reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    RBRACE          reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)
    WHEN            reduce using rule 73 (function_call -> ID LPAREN expression_list RPAREN .)


state 222

    (34) argument -> ID .
    (35) argument -> ID . COLON types
    (36) argument -> ID . ASSIGN expression
    (37) argument -> ID . COLON types ASSIGN expression

    COMMA           reduce using rule 34 (argument -> ID .)
    RPAREN          reduce using rule 34 (argument -> ID .)
    COLON           shift and go to state 249
    ASSIGN          shift and go to state 250


state 223

    (28) function -> DEF ID LPAREN opt_argument_list . RPAREN opt_return_type statements END

    RPAREN          shift and go to state 251


state 224

    (30) opt_argument_list -> argument_list .

    RPAREN          reduce using rule 30 (opt_argument_list -> argument_list .)


state 225

    (31) opt_argument_list -> empty .

    RPAREN          reduce using rule 31 (opt_argument_list -> empty .)


state 226

    (32) argument_list -> argument .
    (33) argument_list -> argument . COMMA argument_list

    RPAREN          reduce using rule 32 (argument_list -> argument .)
    COMMA           shift and go to state 252


state 227

    (29) function -> DEF ID opt_return_type NEWLINE . statements END
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 253
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 228

    (38) opt_return_type -> COLON types .

    NEWLINE         reduce using rule 38 (opt_return_type -> COLON types .)
    ID              reduce using rule 38 (opt_return_type -> COLON types .)
    CASE            reduce using rule 38 (opt_return_type -> COLON types .)
    RETURN          reduce using rule 38 (opt_return_type -> COLON types .)
    BREAK           reduce using rule 38 (opt_return_type -> COLON types .)
    NEXT            reduce using rule 38 (opt_return_type -> COLON types .)
    UNDERSCORE      reduce using rule 38 (opt_return_type -> COLON types .)
    ASTERISK        reduce using rule 38 (opt_return_type -> COLON types .)
    IF              reduce using rule 38 (opt_return_type -> COLON types .)
    UNLESS          reduce using rule 38 (opt_return_type -> COLON types .)
    WHILE           reduce using rule 38 (opt_return_type -> COLON types .)
    UNTIL           reduce using rule 38 (opt_return_type -> COLON types .)
    LOOP            reduce using rule 38 (opt_return_type -> COLON types .)
    PLUS            reduce using rule 38 (opt_return_type -> COLON types .)
    MINUS           reduce using rule 38 (opt_return_type -> COLON types .)
    EXCLAMATION     reduce using rule 38 (opt_return_type -> COLON types .)
    TILDE           reduce using rule 38 (opt_return_type -> COLON types .)
    LPAREN          reduce using rule 38 (opt_return_type -> COLON types .)
    LBRACKET        reduce using rule 38 (opt_return_type -> COLON types .)
    INTNUMBER       reduce using rule 38 (opt_return_type -> COLON types .)
    FLOATNUMBER     reduce using rule 38 (opt_return_type -> COLON types .)
    STRING          reduce using rule 38 (opt_return_type -> COLON types .)
    CHAR            reduce using rule 38 (opt_return_type -> COLON types .)
    TRUE            reduce using rule 38 (opt_return_type -> COLON types .)
    FALSE           reduce using rule 38 (opt_return_type -> COLON types .)


state 229

    (67) variable_declaration -> list_of_identifiers COLON types ASSIGN . expression_list1
    (71) expression_list1 -> . expression
    (72) expression_list1 -> . expression COMMA expression_list1
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression_list1               shift and go to state 254
    expression                     shift and go to state 182
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 230

    (72) expression_list1 -> expression COMMA . expression_list1
    (71) expression_list1 -> . expression
    (72) expression_list1 -> . expression COMMA expression_list1
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 182
    expression_list1               shift and go to state 255
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 231

    (118) case_structure -> CASE expression when_list opt_else . END

    END             shift and go to state 256


state 232

    (120) when_list -> when_list WHEN . expression statements
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 257
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 233

    (105) opt_else -> ELSE . statements
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 258
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 234

    (106) opt_else -> empty .

    END             reduce using rule 106 (opt_else -> empty .)


state 235

    (119) when_list -> WHEN expression . statements
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 15
    statements                     shift and go to state 259
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 236

    (135) ternary_expression -> range_expression QMARK expression TCOLON . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    range_expression               shift and go to state 46
    expression                     shift and go to state 260
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 237

    (96) if_statement -> IF if_condition statements opt_elsif . opt_else END
    (105) opt_else -> . ELSE statements
    (106) opt_else -> . empty
    (172) empty -> .

    ELSE            shift and go to state 233
    END             reduce using rule 172 (empty -> .)

    opt_else                       shift and go to state 261
    empty                          shift and go to state 234

state 238

    (100) opt_elsif -> elsif_list .
    (102) elsif_list -> elsif_list . elsif
    (104) elsif -> . ELSIF if_condition statements

    ELSE            reduce using rule 100 (opt_elsif -> elsif_list .)
    END             reduce using rule 100 (opt_elsif -> elsif_list .)
    ELSIF           shift and go to state 241

    elsif                          shift and go to state 262

state 239

    (101) opt_elsif -> empty .

    ELSE            reduce using rule 101 (opt_elsif -> empty .)
    END             reduce using rule 101 (opt_elsif -> empty .)


state 240

    (103) elsif_list -> elsif .

    ELSIF           reduce using rule 103 (elsif_list -> elsif .)
    ELSE            reduce using rule 103 (elsif_list -> elsif .)
    END             reduce using rule 103 (elsif_list -> elsif .)


state 241

    (104) elsif -> ELSIF . if_condition statements
    (98) if_condition -> . expression
    (99) if_condition -> . expression LBRACE statements RBRACE
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    if_condition                   shift and go to state 263
    expression                     shift and go to state 109
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 242

    (99) if_condition -> expression LBRACE statements . RBRACE

    RBRACE          shift and go to state 264


state 243

    (97) unless_statement -> UNLESS if_condition statements opt_else . END

    END             shift and go to state 265


state 244

    (113) loop -> LOOP DO statements END .

    NEWLINE         reduce using rule 113 (loop -> LOOP DO statements END .)
    $end            reduce using rule 113 (loop -> LOOP DO statements END .)
    END             reduce using rule 113 (loop -> LOOP DO statements END .)
    ELSIF           reduce using rule 113 (loop -> LOOP DO statements END .)
    ELSE            reduce using rule 113 (loop -> LOOP DO statements END .)
    RBRACE          reduce using rule 113 (loop -> LOOP DO statements END .)
    WHEN            reduce using rule 113 (loop -> LOOP DO statements END .)


state 245

    (114) loop -> LOOP LBRACE statements RBRACE .

    NEWLINE         reduce using rule 114 (loop -> LOOP LBRACE statements RBRACE .)
    $end            reduce using rule 114 (loop -> LOOP LBRACE statements RBRACE .)
    END             reduce using rule 114 (loop -> LOOP LBRACE statements RBRACE .)
    ELSIF           reduce using rule 114 (loop -> LOOP LBRACE statements RBRACE .)
    ELSE            reduce using rule 114 (loop -> LOOP LBRACE statements RBRACE .)
    RBRACE          reduce using rule 114 (loop -> LOOP LBRACE statements RBRACE .)
    WHEN            reduce using rule 114 (loop -> LOOP LBRACE statements RBRACE .)


state 246

    (78) expression_list -> expression_list COMMA expression .

    COMMA           reduce using rule 78 (expression_list -> expression_list COMMA expression .)
    RBRACKET        reduce using rule 78 (expression_list -> expression_list COMMA expression .)
    RPAREN          reduce using rule 78 (expression_list -> expression_list COMMA expression .)


state 247

    (116) iterator -> expression DOT EACH DO PIPE . ID PIPE statements END

    ID              shift and go to state 266


state 248

    (117) iterator -> expression DOT EACH LBRACE PIPE . ID PIPE RBRACE statements

    ID              shift and go to state 267


state 249

    (35) argument -> ID COLON . types
    (37) argument -> ID COLON . types ASSIGN expression
    (40) types -> . STRING
    (41) types -> . CHAR
    (42) types -> . NIL
    (43) types -> . integer
    (44) types -> . float
    (45) types -> . boolean
    (46) integer -> . INT
    (47) integer -> . INT8
    (48) integer -> . INT16
    (49) integer -> . INT32
    (50) integer -> . INT64
    (51) integer -> . INT128
    (52) integer -> . UINT8
    (53) integer -> . UINT16
    (54) integer -> . UINT32
    (55) integer -> . UINT64
    (56) integer -> . UINT128
    (57) float -> . FLOAT
    (58) float -> . FLOAT32
    (59) float -> . FLOAT64
    (60) boolean -> . BOOL

    STRING          shift and go to state 160
    CHAR            shift and go to state 161
    NIL             shift and go to state 162
    INT             shift and go to state 166
    INT8            shift and go to state 167
    INT16           shift and go to state 168
    INT32           shift and go to state 169
    INT64           shift and go to state 170
    INT128          shift and go to state 171
    UINT8           shift and go to state 172
    UINT16          shift and go to state 173
    UINT32          shift and go to state 174
    UINT64          shift and go to state 175
    UINT128         shift and go to state 176
    FLOAT           shift and go to state 177
    FLOAT32         shift and go to state 178
    FLOAT64         shift and go to state 179
    BOOL            shift and go to state 180

    types                          shift and go to state 268
    integer                        shift and go to state 163
    float                          shift and go to state 164
    boolean                        shift and go to state 165

state 250

    (36) argument -> ID ASSIGN . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 269
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 251

    (28) function -> DEF ID LPAREN opt_argument_list RPAREN . opt_return_type statements END
    (38) opt_return_type -> . COLON types
    (39) opt_return_type -> . empty
    (172) empty -> .

    COLON           shift and go to state 155
    ID              reduce using rule 172 (empty -> .)
    CASE            reduce using rule 172 (empty -> .)
    RETURN          reduce using rule 172 (empty -> .)
    BREAK           reduce using rule 172 (empty -> .)
    NEXT            reduce using rule 172 (empty -> .)
    UNDERSCORE      reduce using rule 172 (empty -> .)
    ASTERISK        reduce using rule 172 (empty -> .)
    IF              reduce using rule 172 (empty -> .)
    UNLESS          reduce using rule 172 (empty -> .)
    WHILE           reduce using rule 172 (empty -> .)
    UNTIL           reduce using rule 172 (empty -> .)
    LOOP            reduce using rule 172 (empty -> .)
    PLUS            reduce using rule 172 (empty -> .)
    MINUS           reduce using rule 172 (empty -> .)
    EXCLAMATION     reduce using rule 172 (empty -> .)
    TILDE           reduce using rule 172 (empty -> .)
    LPAREN          reduce using rule 172 (empty -> .)
    LBRACKET        reduce using rule 172 (empty -> .)
    INTNUMBER       reduce using rule 172 (empty -> .)
    FLOATNUMBER     reduce using rule 172 (empty -> .)
    STRING          reduce using rule 172 (empty -> .)
    CHAR            reduce using rule 172 (empty -> .)
    TRUE            reduce using rule 172 (empty -> .)
    FALSE           reduce using rule 172 (empty -> .)

    opt_return_type                shift and go to state 270
    empty                          shift and go to state 156

state 252

    (33) argument_list -> argument COMMA . argument_list
    (32) argument_list -> . argument
    (33) argument_list -> . argument COMMA argument_list
    (34) argument -> . ID
    (35) argument -> . ID COLON types
    (36) argument -> . ID ASSIGN expression
    (37) argument -> . ID COLON types ASSIGN expression

    ID              shift and go to state 222

    argument                       shift and go to state 226
    argument_list                  shift and go to state 271

state 253

    (29) function -> DEF ID opt_return_type NEWLINE statements . END

    END             shift and go to state 272


state 254

    (67) variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1 .

    NEWLINE         reduce using rule 67 (variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1 .)
    $end            reduce using rule 67 (variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1 .)
    END             reduce using rule 67 (variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1 .)
    ELSIF           reduce using rule 67 (variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1 .)
    ELSE            reduce using rule 67 (variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1 .)
    RBRACE          reduce using rule 67 (variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1 .)
    WHEN            reduce using rule 67 (variable_declaration -> list_of_identifiers COLON types ASSIGN expression_list1 .)


state 255

    (72) expression_list1 -> expression COMMA expression_list1 .

    NEWLINE         reduce using rule 72 (expression_list1 -> expression COMMA expression_list1 .)
    $end            reduce using rule 72 (expression_list1 -> expression COMMA expression_list1 .)
    END             reduce using rule 72 (expression_list1 -> expression COMMA expression_list1 .)
    ELSIF           reduce using rule 72 (expression_list1 -> expression COMMA expression_list1 .)
    ELSE            reduce using rule 72 (expression_list1 -> expression COMMA expression_list1 .)
    RBRACE          reduce using rule 72 (expression_list1 -> expression COMMA expression_list1 .)
    WHEN            reduce using rule 72 (expression_list1 -> expression COMMA expression_list1 .)


state 256

    (118) case_structure -> CASE expression when_list opt_else END .

    NEWLINE         reduce using rule 118 (case_structure -> CASE expression when_list opt_else END .)
    $end            reduce using rule 118 (case_structure -> CASE expression when_list opt_else END .)
    END             reduce using rule 118 (case_structure -> CASE expression when_list opt_else END .)
    ELSIF           reduce using rule 118 (case_structure -> CASE expression when_list opt_else END .)
    ELSE            reduce using rule 118 (case_structure -> CASE expression when_list opt_else END .)
    RBRACE          reduce using rule 118 (case_structure -> CASE expression when_list opt_else END .)
    WHEN            reduce using rule 118 (case_structure -> CASE expression when_list opt_else END .)


state 257

    (120) when_list -> when_list WHEN expression . statements
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 15
    statements                     shift and go to state 273
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 258

    (105) opt_else -> ELSE statements .

    END             reduce using rule 105 (opt_else -> ELSE statements .)


state 259

    (119) when_list -> WHEN expression statements .

    WHEN            reduce using rule 119 (when_list -> WHEN expression statements .)
    ELSE            reduce using rule 119 (when_list -> WHEN expression statements .)
    END             reduce using rule 119 (when_list -> WHEN expression statements .)


state 260

    (135) ternary_expression -> range_expression QMARK expression TCOLON expression .

    DOT             reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    NEWLINE         reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    $end            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RPAREN          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    WHEN            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    END             reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ELSIF           reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ELSE            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RBRACE          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LBRACE          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ID              reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CASE            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RETURN          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    BREAK           reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    NEXT            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNDERSCORE      reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    ASTERISK        reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    IF              reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNLESS          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    WHILE           reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    UNTIL           reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LOOP            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    PLUS            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    MINUS           reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    EXCLAMATION     reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TILDE           reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LPAREN          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    LBRACKET        reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    INTNUMBER       reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    FLOATNUMBER     reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    STRING          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CHAR            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TRUE            reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    FALSE           reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    COMMA           reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    RBRACKET        reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    CONSTANT        reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    MODULE          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    DEF             reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)
    TCOLON          reduce using rule 135 (ternary_expression -> range_expression QMARK expression TCOLON expression .)


state 261

    (96) if_statement -> IF if_condition statements opt_elsif opt_else . END

    END             shift and go to state 274


state 262

    (102) elsif_list -> elsif_list elsif .

    ELSIF           reduce using rule 102 (elsif_list -> elsif_list elsif .)
    ELSE            reduce using rule 102 (elsif_list -> elsif_list elsif .)
    END             reduce using rule 102 (elsif_list -> elsif_list elsif .)


state 263

    (104) elsif -> ELSIF if_condition . statements
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 275
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 264

    (99) if_condition -> expression LBRACE statements RBRACE .

    ID              reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    CASE            reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    RETURN          reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    BREAK           reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    NEXT            reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    UNDERSCORE      reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    ASTERISK        reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    IF              reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    UNLESS          reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    WHILE           reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    UNTIL           reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    LOOP            reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    PLUS            reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    MINUS           reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    EXCLAMATION     reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    TILDE           reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    LPAREN          reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    LBRACKET        reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    INTNUMBER       reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    FLOATNUMBER     reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    STRING          reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    CHAR            reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    TRUE            reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)
    FALSE           reduce using rule 99 (if_condition -> expression LBRACE statements RBRACE .)


state 265

    (97) unless_statement -> UNLESS if_condition statements opt_else END .

    NEWLINE         reduce using rule 97 (unless_statement -> UNLESS if_condition statements opt_else END .)
    $end            reduce using rule 97 (unless_statement -> UNLESS if_condition statements opt_else END .)
    END             reduce using rule 97 (unless_statement -> UNLESS if_condition statements opt_else END .)
    ELSIF           reduce using rule 97 (unless_statement -> UNLESS if_condition statements opt_else END .)
    ELSE            reduce using rule 97 (unless_statement -> UNLESS if_condition statements opt_else END .)
    RBRACE          reduce using rule 97 (unless_statement -> UNLESS if_condition statements opt_else END .)
    WHEN            reduce using rule 97 (unless_statement -> UNLESS if_condition statements opt_else END .)


state 266

    (116) iterator -> expression DOT EACH DO PIPE ID . PIPE statements END

    PIPE            shift and go to state 276


state 267

    (117) iterator -> expression DOT EACH LBRACE PIPE ID . PIPE RBRACE statements

    PIPE            shift and go to state 277


state 268

    (35) argument -> ID COLON types .
    (37) argument -> ID COLON types . ASSIGN expression

    COMMA           reduce using rule 35 (argument -> ID COLON types .)
    RPAREN          reduce using rule 35 (argument -> ID COLON types .)
    ASSIGN          shift and go to state 278


state 269

    (36) argument -> ID ASSIGN expression .

    COMMA           reduce using rule 36 (argument -> ID ASSIGN expression .)
    RPAREN          reduce using rule 36 (argument -> ID ASSIGN expression .)


state 270

    (28) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type . statements END
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    statements                     shift and go to state 279
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    expression                     shift and go to state 15
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 271

    (33) argument_list -> argument COMMA argument_list .

    RPAREN          reduce using rule 33 (argument_list -> argument COMMA argument_list .)


state 272

    (29) function -> DEF ID opt_return_type NEWLINE statements END .

    DEF             reduce using rule 29 (function -> DEF ID opt_return_type NEWLINE statements END .)
    $end            reduce using rule 29 (function -> DEF ID opt_return_type NEWLINE statements END .)


state 273

    (120) when_list -> when_list WHEN expression statements .

    WHEN            reduce using rule 120 (when_list -> when_list WHEN expression statements .)
    ELSE            reduce using rule 120 (when_list -> when_list WHEN expression statements .)
    END             reduce using rule 120 (when_list -> when_list WHEN expression statements .)


state 274

    (96) if_statement -> IF if_condition statements opt_elsif opt_else END .

    NEWLINE         reduce using rule 96 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    $end            reduce using rule 96 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    END             reduce using rule 96 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    ELSIF           reduce using rule 96 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    ELSE            reduce using rule 96 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    RBRACE          reduce using rule 96 (if_statement -> IF if_condition statements opt_elsif opt_else END .)
    WHEN            reduce using rule 96 (if_statement -> IF if_condition statements opt_elsif opt_else END .)


state 275

    (104) elsif -> ELSIF if_condition statements .

    ELSIF           reduce using rule 104 (elsif -> ELSIF if_condition statements .)
    ELSE            reduce using rule 104 (elsif -> ELSIF if_condition statements .)
    END             reduce using rule 104 (elsif -> ELSIF if_condition statements .)


state 276

    (116) iterator -> expression DOT EACH DO PIPE ID PIPE . statements END
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 15
    statements                     shift and go to state 280
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 277

    (117) iterator -> expression DOT EACH LBRACE PIPE ID PIPE . RBRACE statements

    RBRACE          shift and go to state 281


state 278

    (37) argument -> ID COLON types ASSIGN . expression
    (126) expression -> . assignment_expression
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 91
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 282
    assignment_expression          shift and go to state 24
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 279

    (28) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements . END

    END             shift and go to state 283


state 280

    (116) iterator -> expression DOT EACH DO PIPE ID PIPE statements . END

    END             shift and go to state 284


state 281

    (117) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE . statements
    (79) statements -> . statements_list
    (80) statements_list -> . statement NEWLINE statements_list
    (81) statements_list -> . statement
    (84) statement -> . expression
    (85) statement -> . control_structure
    (86) statement -> . variable_declaration
    (87) statement -> . function_call
    (126) expression -> . assignment_expression
    (88) control_structure -> . conditional
    (89) control_structure -> . loop_structure
    (90) control_structure -> . case_structure
    (91) control_structure -> . return_statement
    (92) control_structure -> . break_statement
    (93) control_structure -> . next_statement
    (67) variable_declaration -> . list_of_identifiers COLON types ASSIGN expression_list1
    (68) variable_declaration -> . list_of_identifiers ASSIGN expression_list1
    (73) function_call -> . ID LPAREN expression_list RPAREN
    (74) function_call -> . ID LPAREN RPAREN
    (127) assignment_expression -> . assignment_target PLUS_ASSIGN expression
    (128) assignment_expression -> . assignment_target MINUS_ASSIGN expression
    (129) assignment_expression -> . assignment_target MULTI_ASSIGN expression
    (130) assignment_expression -> . assignment_target DIVIDE_ASSIGN expression
    (131) assignment_expression -> . ternary_expression
    (94) conditional -> . if_statement
    (95) conditional -> . unless_statement
    (107) loop_structure -> . while
    (108) loop_structure -> . until
    (109) loop_structure -> . loop
    (110) loop_structure -> . iterator
    (118) case_structure -> . CASE expression when_list opt_else END
    (121) return_statement -> . RETURN opt_expression
    (122) break_statement -> . BREAK opt_expression
    (123) next_statement -> . NEXT opt_expression
    (69) list_of_identifiers -> . ID
    (70) list_of_identifiers -> . ID COMMA list_of_identifiers
    (132) assignment_target -> . ID
    (133) assignment_target -> . UNDERSCORE
    (134) assignment_target -> . ASTERISK assignment_target
    (135) ternary_expression -> . range_expression QMARK expression TCOLON expression
    (136) ternary_expression -> . range_expression
    (96) if_statement -> . IF if_condition statements opt_elsif opt_else END
    (97) unless_statement -> . UNLESS if_condition statements opt_else END
    (111) while -> . WHILE expression statements
    (112) until -> . UNTIL expression statements
    (113) loop -> . LOOP DO statements END
    (114) loop -> . LOOP LBRACE statements RBRACE
    (115) iterator -> . expression DOT MULTI statements
    (116) iterator -> . expression DOT EACH DO PIPE ID PIPE statements END
    (117) iterator -> . expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements
    (137) range_expression -> . logical_or_expression DOTDOT logical_or_expression
    (138) range_expression -> . logical_or_expression DOTDOTDOT logical_or_expression
    (139) range_expression -> . logical_or_expression
    (140) logical_or_expression -> . logical_and_expression
    (141) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (142) logical_and_expression -> . equality_expression
    (143) logical_and_expression -> . logical_and_expression AND equality_expression
    (144) equality_expression -> . relational_expression
    (145) equality_expression -> . equality_expression EQUAL relational_expression
    (146) equality_expression -> . equality_expression NOT_EQUAL relational_expression
    (147) equality_expression -> . equality_expression TIPO_EQUAL relational_expression
    (148) relational_expression -> . additive_expression
    (149) relational_expression -> . relational_expression GREATER_THAN additive_expression
    (150) relational_expression -> . relational_expression LESS_THAN additive_expression
    (151) relational_expression -> . relational_expression GREATER_EQUAL additive_expression
    (152) relational_expression -> . relational_expression LESS_EQUAL additive_expression
    (153) additive_expression -> . multiplicative_expression
    (154) additive_expression -> . additive_expression PLUS multiplicative_expression
    (155) additive_expression -> . additive_expression MINUS multiplicative_expression
    (156) multiplicative_expression -> . potenciacao_expression
    (157) multiplicative_expression -> . multiplicative_expression MULTI potenciacao_expression
    (158) multiplicative_expression -> . multiplicative_expression DIVIDE potenciacao_expression
    (159) multiplicative_expression -> . multiplicative_expression MODULO potenciacao_expression
    (160) potenciacao_expression -> . unary_expression
    (161) potenciacao_expression -> . potenciacao_expression POTENCIACAO unary_expression
    (162) unary_expression -> . PLUS unary_expression
    (163) unary_expression -> . MINUS unary_expression
    (164) unary_expression -> . EXCLAMATION unary_expression
    (165) unary_expression -> . TILDE unary_expression
    (166) unary_expression -> . primary_expression
    (167) primary_expression -> . LPAREN expression RPAREN
    (168) primary_expression -> . array_literal
    (169) primary_expression -> . literal
    (170) primary_expression -> . ID
    (171) array_literal -> . LBRACKET opt_expression_list RBRACKET
    (61) literal -> . INTNUMBER
    (62) literal -> . FLOATNUMBER
    (63) literal -> . STRING
    (64) literal -> . CHAR
    (65) literal -> . TRUE
    (66) literal -> . FALSE

    ID              shift and go to state 17
    CASE            shift and go to state 40
    RETURN          shift and go to state 41
    BREAK           shift and go to state 42
    NEXT            shift and go to state 43
    UNDERSCORE      shift and go to state 44
    ASTERISK        shift and go to state 45
    IF              shift and go to state 47
    UNLESS          shift and go to state 48
    WHILE           shift and go to state 49
    UNTIL           shift and go to state 50
    LOOP            shift and go to state 51
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EXCLAMATION     shift and go to state 62
    TILDE           shift and go to state 63
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 67
    INTNUMBER       shift and go to state 68
    FLOATNUMBER     shift and go to state 69
    STRING          shift and go to state 13
    CHAR            shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72

    expression                     shift and go to state 15
    statements                     shift and go to state 285
    statements_list                shift and go to state 11
    statement                      shift and go to state 20
    control_structure              shift and go to state 21
    variable_declaration           shift and go to state 22
    function_call                  shift and go to state 23
    assignment_expression          shift and go to state 24
    conditional                    shift and go to state 25
    loop_structure                 shift and go to state 26
    case_structure                 shift and go to state 27
    return_statement               shift and go to state 28
    break_statement                shift and go to state 29
    next_statement                 shift and go to state 30
    list_of_identifiers            shift and go to state 31
    assignment_target              shift and go to state 32
    ternary_expression             shift and go to state 33
    if_statement                   shift and go to state 34
    unless_statement               shift and go to state 35
    while                          shift and go to state 36
    until                          shift and go to state 37
    loop                           shift and go to state 38
    iterator                       shift and go to state 39
    range_expression               shift and go to state 46
    logical_or_expression          shift and go to state 52
    logical_and_expression         shift and go to state 53
    equality_expression            shift and go to state 54
    relational_expression          shift and go to state 55
    additive_expression            shift and go to state 56
    multiplicative_expression      shift and go to state 57
    potenciacao_expression         shift and go to state 60
    unary_expression               shift and go to state 61
    primary_expression             shift and go to state 64
    array_literal                  shift and go to state 65
    literal                        shift and go to state 66

state 282

    (37) argument -> ID COLON types ASSIGN expression .

    COMMA           reduce using rule 37 (argument -> ID COLON types ASSIGN expression .)
    RPAREN          reduce using rule 37 (argument -> ID COLON types ASSIGN expression .)


state 283

    (28) function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .

    DEF             reduce using rule 28 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)
    $end            reduce using rule 28 (function -> DEF ID LPAREN opt_argument_list RPAREN opt_return_type statements END .)


state 284

    (116) iterator -> expression DOT EACH DO PIPE ID PIPE statements END .

    NEWLINE         reduce using rule 116 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    $end            reduce using rule 116 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    END             reduce using rule 116 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    ELSIF           reduce using rule 116 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    ELSE            reduce using rule 116 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    RBRACE          reduce using rule 116 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)
    WHEN            reduce using rule 116 (iterator -> expression DOT EACH DO PIPE ID PIPE statements END .)


state 285

    (117) iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .

    NEWLINE         reduce using rule 117 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    $end            reduce using rule 117 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    END             reduce using rule 117 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    ELSIF           reduce using rule 117 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    ELSE            reduce using rule 117 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    RBRACE          reduce using rule 117 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)
    WHEN            reduce using rule 117 (iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 20 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 56 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 56 resolved as shift
