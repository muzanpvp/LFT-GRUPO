Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    ALIAS
    AS
    ASSOCIACAO
    AT
    BEGIN
    CLASS
    CLASS_VAR
    COLON
    DEFINE_BLOCO
    DOLAR_SIGN
    ENUM
    IN
    INCLUDE
    INSTANCE_VAR
    MACRO
    NIL
    NOT
    OF
    OUT
    PASSA_ARGUMENTO
    PRIVATE
    PROTECTED
    SAFE_CALL
    SCOPE
    SELECT
    SIZEOF
    STRUCT
    SYMBOL
    TERNARIO
    THEN
    TYPE
    TYPEOF
    UNINITIALIZED
    UNION
    VAR_GLOBAL
    YIELD

Grammar

Rule 0     S' -> program
Rule 1     program -> opt_require opt_globals opt_modules opt_code_functions opt_code
Rule 2     opt_require -> require
Rule 3     opt_require -> empty
Rule 4     require_declarations -> require
Rule 5     require_declarations -> require NEWLINE require_declarations
Rule 6     require -> REQUIRE STRING delimiter
Rule 7     opt_globals -> globals_declarations
Rule 8     opt_globals -> empty
Rule 9     globals_declarations -> globals
Rule 10    globals_declarations -> globals_declarations NEWLINE globals
Rule 11    globals -> CONSTANT ASSIGN expression delimiter
Rule 12    opt_modules -> modules
Rule 13    opt_modules -> empty
Rule 14    modules -> modules module
Rule 15    modules -> module
Rule 16    module -> MODULE ID NEWLINE opt_code END
Rule 17    opt_code_functions -> code_functions
Rule 18    opt_code_functions -> empty
Rule 19    code_functions -> code_functions functions
Rule 20    code_functions -> functions
Rule 21    functions -> DEF ID opt_params NEWLINE opt_code END
Rule 22    opt_code -> statements
Rule 23    opt_code -> empty
Rule 24    statementes -> statement
Rule 25    statementes -> statement statementes
Rule 26    statement -> expression
Rule 27    statement -> control_structures
Rule 28    statement -> return_statement
Rule 29    statement -> break_statement
Rule 30    statement -> next_statement
Rule 31    operand -> constant
Rule 32    operand -> functionCall
Rule 33    operand -> expParentheses
Rule 34    constant -> constant_integer
Rule 35    constant -> constant_float
Rule 36    constant -> constant_string
Rule 37    constant -> constant_boolean
Rule 38    constant -> constant_char
Rule 39    constant -> constant_id
Rule 40    constant_integer -> INTNUMBER
Rule 41    constant_integer -> HEXNUMBER
Rule 42    constant_integer -> BINNUMBER
Rule 43    constant_integer -> OCTNUMBER
Rule 44    constant_float -> FLOATNUMBER
Rule 45    constant_string -> STRING
Rule 46    constant_char -> CHAR
Rule 47    constant_boolean -> TRUE
Rule 48    constant_boolean -> FALSE
Rule 49    constant_id -> ID
Rule 50    constant_id -> GLOBALVAR
Rule 51    constant_id -> INSTANCEVAR
Rule 52    constant_id -> CLASSVAR
Rule 53    functionCall -> ID LPAREN opt_arguments RPAREN
Rule 54    opt_arguments -> arguments
Rule 55    opt_arguments -> empty
Rule 56    arguments -> expression
Rule 57    arguments -> expression COMMA arguments
Rule 58    expParentheses -> LPAREN expression RPAREN
Rule 59    statements -> expression
Rule 60    statements -> expression NEWLINE statements
Rule 61    statements -> control_structures
Rule 62    statements -> control_structures NEWLINE statements
Rule 63    control_structures -> loop
Rule 64    control_structures -> conditional
Rule 65    control_structures -> case
Rule 66    control_structures -> return_statement
Rule 67    conditional -> if
Rule 68    conditional -> unless
Rule 69    loop_structure -> while
Rule 70    loop_structure -> until
Rule 71    loop_structure -> loop
Rule 72    loop_structure -> iterator
Rule 73    while -> WHILE expression statements_block
Rule 74    until -> UNTIL expression statements_block
Rule 75    loop -> LOOP statements_block
Rule 76    iterator -> expression DOT MULTI statements_block
Rule 77    iterator -> expression DOT EACH DO PIPE ID PIPE statements_block END
Rule 78    iterator -> expression DOT EACH LBRACE PIPE ID PIPE RBRACE statements_block
Rule 79    if -> IF expression statements_block opt_elsif opt_else END
Rule 80    opt_elsif -> ELSIF expression statements_block opt_elsif
Rule 81    opt_elsif -> empty
Rule 82    opt_else -> ELSE statements_block
Rule 83    opt_else -> empty
Rule 84    unless -> UNLESS expression statements_block opt_else END
Rule 85    case -> CASE expression when_list opt_else END
Rule 86    when_list -> when_list WHEN expression statements_block
Rule 87    when_list -> WHEN expression statements_block
Rule 88    opt_blocks -> WHEN expression statements_block opt_else END
Rule 89    opt_blocks -> empty
Rule 90    break_statement -> BREAK expression
Rule 91    break_statement -> BREAK
Rule 92    next_statement -> NEXT expression
Rule 93    next_statement -> NEXT
Rule 94    return_statement -> RETURN expression
Rule 95    return_statement -> RETURN
Rule 96    expression -> assignment_expression
Rule 97    assignment_expression -> ID ASSIGN expression
Rule 98    assignment_expression -> ID PLUS_ASSIGN expression
Rule 99    assignment_expression -> ID MINUS_ASSIGN expression
Rule 100   assignment_expression -> ID MULTI_ASSIGN expression
Rule 101   assignment_expression -> ID DIVIDE_ASSIGN expression
Rule 102   assignment_expression -> ID MODULO_ASSIGN expression
Rule 103   assignment_expression -> ID POTENCIACAO_ASSIGN expression
Rule 104   assignment_expression -> ID OR_ASSIGN expression
Rule 105   assignment_expression -> ID AND_ASSIGN expression
Rule 106   assignment_expression -> multiple_assignment
Rule 107   assignment_expression -> ternary_expression
Rule 108   multiple_assignment -> ID COMMA ID ASSIGN expression COMMA expression
Rule 109   multiple_assignment -> ID COMMA ID ASSIGN LBRACKET expression_list RBRACKET
Rule 110   multiple_assignment -> ID ASSIGN LBRACKET expression_list RBRACKET
Rule 111   ternary_expression -> or_expression QMARK expression TCOLON expression
Rule 112   or_expression -> or_expression OR and_expression
Rule 113   or_expression -> and_expression
Rule 114   and_expression -> and_expression AND equality_expression
Rule 115   and_expression -> equality_expression
Rule 116   equality_expression -> equality_expression EQUAL relational_expression
Rule 117   equality_expression -> equality_expression NOT_EQUAL relational_expression
Rule 118   equality_expression -> equality_expression TIPO_EQUAL relational_expression
Rule 119   equality_expression -> relational_expression
Rule 120   relational_expression -> relational_expression GREATER_THAN add_expression
Rule 121   relational_expression -> relational_expression LESS_THAN add_expression
Rule 122   relational_expression -> relational_expression GREATER_EQUAL add_expression
Rule 123   relational_expression -> relational_expression LESS_EQUAL add_expression
Rule 124   relational_expression -> bitwise_expression
Rule 125   bitwise_expression -> bitwise_expression SHIFT_LEFT add_expression
Rule 126   bitwise_expression -> bitwise_expression SHIFT_RIGHT add_expression
Rule 127   bitwise_expression -> bitwise_expression BIT_AND add_expression
Rule 128   bitwise_expression -> bitwise_expression BIT_OR add_expression
Rule 129   bitwise_expression -> bitwise_expression BIT_XOR add_expression
Rule 130   bitwise_expression -> add_expression
Rule 131   add_expression -> add_expression PLUS multi_expression
Rule 132   add_expression -> add_expression MINUS multi_expression
Rule 133   add_expression -> multi_expression
Rule 134   multi_expression -> multi_expression MULTI exponent_expression
Rule 135   multi_expression -> multi_expression DIVIDE exponent_expression
Rule 136   multi_expression -> multi_expression MODULO exponent_expression
Rule 137   multi_expression -> exponent_expression
Rule 138   exponent_expression -> unary_expression POTENCIACAO exponent_expression
Rule 139   exponent_expression -> unary_expression
Rule 140   unary_expression -> EXCLAMATION unary_expression
Rule 141   unary_expression -> TILDE unary_expression
Rule 142   unary_expression -> PLUS unary_expression
Rule 143   unary_expression -> MINUS unary_expression
Rule 144   unary_expression -> primary_expression
Rule 145   primary_expression -> LPAREN expression RPAREN
Rule 146   primary_expression -> ID
Rule 147   primary_expression -> LITERAL
Rule 148   primary_expression -> range_expression
Rule 149   range_expression -> or_expression
Rule 150   range_expression -> or_expression DOTDOT or_expression
Rule 151   range_expression -> or_expression DOTDOTDOT or_expression
Rule 152   opt_params -> empty
Rule 153   expression_list -> expression
Rule 154   expression_list -> expression COMMA expression_list
Rule 155   empty -> <empty>
Rule 156   statements_block -> DO statements END
Rule 157   statements_block -> LBRACE statements RBRACE
Rule 158   statements_block -> statements
Rule 159   delimiter -> SEMICOLON
Rule 160   delimiter -> empty
Rule 161   types -> integer
Rule 162   types -> float
Rule 163   types -> boolean
Rule 164   types_null -> types
Rule 165   types_null -> empty
Rule 166   integer -> INT
Rule 167   integer -> INT8
Rule 168   integer -> INT16
Rule 169   integer -> INT32
Rule 170   integer -> INT64
Rule 171   integer -> INT128
Rule 172   integer -> UINT8
Rule 173   integer -> UINT16
Rule 174   integer -> UINT32
Rule 175   integer -> UINT64
Rule 176   integer -> UINT128
Rule 177   float -> FLOAT
Rule 178   float -> FLOAT32
Rule 179   float -> FLOAT64
Rule 180   boolean -> BOOL

Terminals, with rules where they appear

ABSTRACT             : 
ALIAS                : 
AND                  : 114
AND_ASSIGN           : 105
AS                   : 
ASSIGN               : 11 97 108 109 110
ASSOCIACAO           : 
AT                   : 
BEGIN                : 
BINNUMBER            : 42
BIT_AND              : 127
BIT_OR               : 128
BIT_XOR              : 129
BOOL                 : 180
BREAK                : 90 91
CASE                 : 85
CHAR                 : 46
CLASS                : 
CLASSVAR             : 52
CLASS_VAR            : 
COLON                : 
COMMA                : 57 108 108 109 154
CONSTANT             : 11
DEF                  : 21
DEFINE_BLOCO         : 
DIVIDE               : 135
DIVIDE_ASSIGN        : 101
DO                   : 77 156
DOLAR_SIGN           : 
DOT                  : 76 77 78
DOTDOT               : 150
DOTDOTDOT            : 151
EACH                 : 77 78
ELSE                 : 82
ELSIF                : 80
END                  : 16 21 77 79 84 85 88 156
ENUM                 : 
EQUAL                : 116
EXCLAMATION          : 140
FALSE                : 48
FLOAT                : 177
FLOAT32              : 178
FLOAT64              : 179
FLOATNUMBER          : 44
GLOBALVAR            : 50
GREATER_EQUAL        : 122
GREATER_THAN         : 120
HEXNUMBER            : 41
ID                   : 16 21 49 53 77 78 97 98 99 100 101 102 103 104 105 108 108 109 109 110 146
IF                   : 79
IN                   : 
INCLUDE              : 
INSTANCEVAR          : 51
INSTANCE_VAR         : 
INT                  : 166
INT128               : 171
INT16                : 168
INT32                : 169
INT64                : 170
INT8                 : 167
INTNUMBER            : 40
LBRACE               : 78 157
LBRACKET             : 109 110
LESS_EQUAL           : 123
LESS_THAN            : 121
LITERAL              : 147
LOOP                 : 75
LPAREN               : 53 58 145
MACRO                : 
MINUS                : 132 143
MINUS_ASSIGN         : 99
MODULE               : 16
MODULO               : 136
MODULO_ASSIGN        : 102
MULTI                : 76 134
MULTI_ASSIGN         : 100
NEWLINE              : 5 10 16 21 60 62
NEXT                 : 92 93
NIL                  : 
NOT                  : 
NOT_EQUAL            : 117
OCTNUMBER            : 43
OF                   : 
OR                   : 112
OR_ASSIGN            : 104
OUT                  : 
PASSA_ARGUMENTO      : 
PIPE                 : 77 77 78 78
PLUS                 : 131 142
PLUS_ASSIGN          : 98
POTENCIACAO          : 138
POTENCIACAO_ASSIGN   : 103
PRIVATE              : 
PROTECTED            : 
QMARK                : 111
RBRACE               : 78 157
RBRACKET             : 109 110
REQUIRE              : 6
RETURN               : 94 95
RPAREN               : 53 58 145
SAFE_CALL            : 
SCOPE                : 
SELECT               : 
SEMICOLON            : 159
SHIFT_LEFT           : 125
SHIFT_RIGHT          : 126
SIZEOF               : 
STRING               : 6 45
STRUCT               : 
SYMBOL               : 
TCOLON               : 111
TERNARIO             : 
THEN                 : 
TILDE                : 141
TIPO_EQUAL           : 118
TRUE                 : 47
TYPE                 : 
TYPEOF               : 
UINT128              : 176
UINT16               : 173
UINT32               : 174
UINT64               : 175
UINT8                : 172
UNINITIALIZED        : 
UNION                : 
UNLESS               : 84
UNTIL                : 74
VAR_GLOBAL           : 
WHEN                 : 86 87 88
WHILE                : 73
YIELD                : 
error                : 

Nonterminals, with rules where they appear

add_expression       : 120 121 122 123 125 126 127 128 129 130 131 132
and_expression       : 112 113 114
arguments            : 54 57
assignment_expression : 96
bitwise_expression   : 124 125 126 127 128 129
boolean              : 163
break_statement      : 29
case                 : 65
code_functions       : 17 19
conditional          : 64
constant             : 31
constant_boolean     : 37
constant_char        : 38
constant_float       : 35
constant_id          : 39
constant_integer     : 34
constant_string      : 36
control_structures   : 27 61 62
delimiter            : 6 11
empty                : 3 8 13 18 23 55 81 83 89 152 160 165
equality_expression  : 114 115 116 117 118
expParentheses       : 33
exponent_expression  : 134 135 136 137 138
expression           : 11 26 56 57 58 59 60 73 74 76 77 78 79 80 84 85 86 87 88 90 92 94 97 98 99 100 101 102 103 104 105 108 108 111 111 145 153 154
expression_list      : 109 110 154
float                : 162
functionCall         : 32
functions            : 19 20
globals              : 9 10
globals_declarations : 7 10
if                   : 67
integer              : 161
iterator             : 72
loop                 : 63 71
loop_structure       : 
module               : 14 15
modules              : 12 14
multi_expression     : 131 132 133 134 135 136
multiple_assignment  : 106
next_statement       : 30
operand              : 
opt_arguments        : 53
opt_blocks           : 
opt_code             : 1 16 21
opt_code_functions   : 1
opt_else             : 79 84 85 88
opt_elsif            : 79 80
opt_globals          : 1
opt_modules          : 1
opt_params           : 21
opt_require          : 1
or_expression        : 111 112 149 150 150 151 151
primary_expression   : 144
program              : 0
range_expression     : 148
relational_expression : 116 117 118 119 120 121 122 123
require              : 2 4 5
require_declarations : 5
return_statement     : 28 66
statement            : 24 25
statementes          : 25
statements           : 22 60 62 156 157 158
statements_block     : 73 74 75 76 77 78 79 80 82 84 86 87 88
ternary_expression   : 107
types                : 164
types_null           : 
unary_expression     : 138 139 140 141 142 143
unless               : 68
until                : 70
when_list            : 85 86
while                : 69

